{"0": {"text": "Version: 3.x\n\nIntroduction to Rasa Open Source & Rasa Pro\n\nWith over 25 million downloads, Rasa Open Source is the most popular open source framework for building chat and voice-based AI assistants.\n\nRasa Pro is an open core product powered by open source conversational AI framework with additional analytics, security, and observability capabilities.\n\nRasa Pro is a part of our enterprise solution, Rasa Platform. Another product that makes up of Rasa Platform is Rasa X/Enterprise.\nIt is our low-code user interface that supports conversational AI Teams reviewing and improving AI Assistants at scale. It must be used with Rasa Pro.\nTo learn more about Rasa X/Enterprise, see the Rasa X/Enterprise documentation.\n\nYou can also learn more about our release and maintenance policy on Rasa Product Release and Maintenance Policy.\n\n\n\nRasa Open Source#\n\nRasa Open Source is an open source conversational AI platform that allows you to understand and hold conversations, and connect to messaging channels and third party systems through a set of APIs. It supplies the building blocks for creating virtual (digital) assistants or chatbots.\n\nRasa Pro#\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nRasa Pro is the commercial, pro-code offering of Rasa that\u2019s built to address enterprise needs\naround security, observability and scale. Read more here.\n\nWhen the content is only applicable to Rasa Pro, you will see the below label:\n\nRasa Pro Only\n\nThis means you need to have a Rasa Pro License in order to access the capabilities detailed in that section.\n\nNextRasa Pro \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1": {"text": "Version: 3.x\n\nRasa Pro\n\nRasa Pro is the commercial, pro-code offering of Rasa built to address enterprise needs\naround security, observability and scale.\n\nRasa Pro integrates seamlessly with enterprise technology stacks and is the recommended platform\nfor all Rasa enterprise customers.\nTo read more about installing Rasa Pro, click here.\n\nRasa Pro Features#\n\nAnalytics with Conversational Data Pipeline#\n\nVisualise Rasa metrics in a third-party tool to measure the performance of your assistant.\n\nRead more here.\n\nConcurrent Lock Store#\n\nScale deployment and reliably handle high volumes of traffic across multiple Rasa instances with the confidence that no messages will be dropped.\n\nRead more here.\n\nEnd-to-End Testing#\n\nTest your assistant with our end-to-end testing solution designed to meet enterprise-grade integration and acceptance testing criteria.\n\nRead more here.\n\nIVR Voice Connector#\n\nIntegrate with best-in-class IVR systems through our OOTB voice connectors.\n\nRead more here.\n\nObservability (Tracing)#\n\nResolve performance issues faster and identify bottlenecks in message handling and model training.\n\nRead more here.\n\nPII Handling#\n\nAnonymize PII (Personal Identifiable Information) in logs and events streamed via the Kafka event broker. \n\nRead more here\n\nReal-Time Markers#\n\nMark points of interest in conversations to support the targeted analysis of user journeys real time.\n\nRead more here\n\nSecrets Management#\n\nEnhance security with our seamless Vault integration, enabling dynamic credential rotation for Rasa databases without system disruptions.\n\nRead more here.\n\nSecurity Scanning for Vulnerability Protection#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "2": {"text": "Read more here.\n\nSecurity Scanning for Vulnerability Protection#\n\nNightly and proactive security patches on your docker image to make sure dependencies are always up to date.\n\nSpaces (Alpha Release)#\n\nModularize your assistant for better scaling and team collaboration.\n\nRead more here\n\nPrevious\u00ab Introduction to Rasa Open Source & Rasa ProNextRasa Playground \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "3": {"text": "Version: 3.x\n\nRasa Playground\n\nLearn the basics of building an assistant with Rasa with this interactive guide. You will be able to customize the assistant, talk to it and download the project so you can continue to build.\n\nBuild your assistant#\n\nIn this guide, we are creating an assistant that helps users subscribe to a newsletter. Go through each of the steps below to see how a simple assistant is created:\n\n1. NLU data2. Responses3. Stories4. Forms5. RulesWhat are the various things people might say to an assistant that can help them subscribe to a newsletter?For an assistant to recognize what a user is saying no matter how the user phrases their message, we need to provide example messages the assistant can learn from.\nWe group these examples according to the idea or the goal the message is expressing, which is also called the intent.\nIn the code block on the right, we have added an intent called greet, which contains example\nmessages like \u201cHi\u201d, \u201cHey\u201d, and \u201cgood morning\u201d.Intents and their examples are used as training data for the assistant's Natural Language Understanding (NLU) model.Learn more about NLU data and its formatNext step >>nlu:\n- intent: greet\n  examples: |\n    - Hi\n    - Hey!\n    - Hallo\n    - Good day\n    - Good morning\n\n- intent: subscribe\n  examples: |\n    - I want to get the newsletter\n    - Can you send me the newsletter?\n    - Can you sign me up for the newsletter?", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "4": {"text": "- intent: inform\n  examples: |\n    - My email is example@example.com\n    - random@example.com\n    - Please send it to anything@example.com\n    - Email is something@example.comnlu:- intent: greet  examples: |    - Hi    - Hey!    - Hallo    - Good day    - Good morning- intent: subscribe  examples: |    - I want to get the newsletter    - Can you send me the newsletter?    - Can you sign me up for the newsletter?- intent: inform  examples: |    - My email is example@example.com    - random@example.com    - Please send it to anything@example.com    - Email is something@example.comNow that the assistant understands a few messages users might say, it needs responses it can send back to the user.\u201cHello, how can I help you?\u201d and \u201cwhat\u2019s your email address?\u201d are some of the responses our assistant will use. You\u2019ll see how to connect user messages and responses in the next steps.In the code block below, we have listed some responses and added one or more text\noptions for each of them. If a response has multiple text options, one of these options will be chosen at random whenever that response is predicted.Learn more about responsesNext step >>responses:\n   utter_greet:\n       - text: |\n           Hello! How can I help you?\n       - text: |\n           Hi!\n   utter_ask_email:\n       - text: |\n           What is your email address?\n   utter_subscribed:\n       - text: |\n           Check your inbox at {email} in order to finish subscribing to the newsletter!\n       - text: |", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "5": {"text": "- text: |\n           You're all set! Check your inbox at {email} to confirm your subscription.responses:   utter_greet:       - text: |           Hello! How can I help you?       - text: |           Hi!   utter_ask_email:       - text: |           What is your email address?   utter_subscribed:       - text: |           Check your inbox at {email} in order to finish subscribing to the newsletter!       - text: |           You're all set! Check your inbox at {email} to confirm your subscription.Stories are example conversations that train an assistant to respond correctly depending on what the user has said previously in the conversation.\nThe story format shows the intent of the user message followed by the assistant\u2019s action or response.Your first story should show a conversation flow where the assistant helps the user accomplish their goal in a straightforward way. Later, you can add stories for situations where the user doesn't want to provide their information or switches to another topic.In the code block below, we have added a story where the user and assistant exchange greetings, the user asks to subscribe to the newsletter, and the assistant starts collecting the information it needs through the newsletter_form. You will learn about forms in the next step.Learn more about storiesNext step >>stories:\n - story: greet and subscribe\n   steps:\n   - intent: greet\n   - action: utter_greet\n   - intent: subscribe\n   - action: newsletter_form", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "6": {"text": "- intent: subscribe\n   - action: newsletter_form\n   - active_loop: newsletter_formstories: - story: greet and subscribe   steps:   - intent: greet   - action: utter_greet   - intent: subscribe   - action: newsletter_form   - active_loop: newsletter_formThere are many situations where an assistant needs to collect information from the user. For example, when a user wants to subscribe to a newsletter, the assistant must ask for their email address.You can do this in Rasa using a form. In the code block below, we added the\nnewsletter_form and used it to collect an email address from the user.Learn more about forms hereNext step >>slots:\n  email:\n    type: text\n    mappings:\n    - type: from_text\n      conditions:\n      - active_loop: newsletter_form\n        requested_slot: email\nforms:\n  newsletter_form:\n    required_slots:\n    - emailslots:  email:    type: text    mappings:    - type: from_text      conditions:      - active_loop: newsletter_form        requested_slot: emailforms:  newsletter_form:    required_slots:    - emailRules describe parts of conversations that should always follow the same path no matter what has been said previously in the conversation.We want our assistant to always respond to a certain intent with a specific action, so we use a rule to map that action to the intent.In the code block below, we have added a rule that triggers the\nnewsletter_form whenever the user expresses the intent \u201csubscribe\u201d.\nWe\u2019ve also added a rule that triggers the utter_subscribed action once all the\nrequired information has been provided.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "7": {"text": "required information has been provided.\nThe second rule only applies when the newsletter_form is active to begin with; once\nit is no longer active (active_loop: null), the form is complete.Learn more about rules and how to write them.Now that you've gone through all the steps, scroll down to talk to your assistant.Next step >>rules:\n - rule: activate subscribe form\n   steps:\n   - intent: subscribe\n   - action: newsletter_form\n   - active_loop: newsletter_form", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "8": {"text": "- rule: submit form\n   condition:\n   - active_loop: newsletter_form\n   steps:\n   - action: newsletter_form\n   - active_loop: null\n   - action: utter_subscribedrules: - rule: activate subscribe form   steps:   - intent: subscribe   - action: newsletter_form   - active_loop: newsletter_form - rule: submit form   condition:   - active_loop: newsletter_form   steps:   - action: newsletter_form   - active_loop: null   - action: utter_subscribed\n\nTrain and talk to your assistant#\n\nOnce you have reviewed the steps above, you\u2019re ready to train your assistant. The training process generates a new machine learning model based on the training data you\u2019ve provided.\n\nTo train the assistant on the NLU data, stories, forms, rules and responses above, click the Train button:\n\n\n\nLooking for a challenge? Customize your assistant#\n\nYou can use this page to create an assistant that does something other than helping users subscribe to a newsletter.\n\nTry choosing a simple task for your assistant to do, like ordering a pizza or booking an appointment. Adapt the code blocks at each step to fit the new scenario, then train your assistant again to see it in action.\n\nYou have built your assistant! What\u2019s next?#\n\nYou can download this project and continue building to create a more advanced assistant.\n\nDownload project\n\nInstall Rasa to keep building.\n\n\n\nWhen you train a model, you always want to check that your assistant still behaves as\nyou expect. You can do that by talking to your assistant and seeing that it works.\nHowever, as your assistant becomes more complex, you will want to use test stories to\nensure your model makes correct predictions.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "9": {"text": "Try running rasa test to make sure that your assistant passes your tests:\n\nCopystories:- story: test for greet and subscribe  steps:  - user: |     Hello there    intent: greet  - action: utter_greet  - user: |     I want to subscribe to the newsletter. My email is example@email.com    intent: subscribe  - action:  utter_subscribed\n\nCheck out other docs pages to learn more about\nRasa\u2019s CLI,\nDomains,\nActions,\nand your config\u2019s Pipeline and Policies.\n\nPrevious\u00ab Rasa ProNextSetting up your environment \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "10": {"text": "Version: 3.x\n\nSetting up your environment\n\n1. Python Environment Setup#\n\nCheck if your Python environment is already configured:\n\nCopypython3 --versionpip3 --version\n\nPython3 Supported VersionsCurrently, rasa supports the following Python versions: 3.7, 3.8, 3.9 and 3.10.\nNote that Python 3.10 is only supported for versions 3.4.x and upwards.\nAdditionally, rasa installation on Apple Silicon with Python 3.10 is not functional in 3.4.x but will be supported starting from 3.5.x.\n\nIf these packages are already installed, these commands should display version\nnumbers for each step, and you can skip to the next step.\n\nOtherwise, proceed with the instructions below to install them.\n\nUbuntumacOSWindowsFetch the relevant packages using apt, and install virtualenv using pip.Copysudo apt updatesudo apt install python3-dev python3-pip\n\n2. Virtual Environment Setup#\n\nThis step is optional, but we strongly recommend isolating python projects\nusing virtual environments. Tools like\nvirtualenv and\nvirtualenvwrapper provide\nisolated Python environments, which are cleaner than installing packages system-wide\n(as they prevent dependency conflicts). They also let you install packages\nwithout root privileges.\n\nUbuntumacOSWindowsCreate a new virtual environment by choosing a Python interpreter and making a ./venv directory to hold it:Copypython3 -m venv ./venvActivate the virtual environment:Copysource ./venv/bin/activate\n\nM1 / M2 (Apple Silicon) Limitations#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "11": {"text": "M1 / M2 (Apple Silicon) Limitations#\n\nRasa installations on Apple Silicon don't use Apple Metal by default.\nWe found that using the GPU on Apple Silicon increased training time for the\nDIETClassifier and TEDPolicy dramatically.\nYou can, however, install the optional dependency to test it yourself\nor try it with other components using: pip3 install rasa[metal].\n\nCurrently, not all of Rasa's dependencies support Apple Silicon natively. This leads\nto the following restrictions:\n\nYou can not run Duckling as a docker container on Apple Silicon. If you want\nto use the duckling entity extractor we recommend a cloud deployment of\nduckling. Progress on this can be tracked on the\nDuckling project.Rasa on Apple Silicon does not support the ConveRTFeaturizer component or pipelines\ncontaining it. The component relies on tensorflow-text which currently\nisn't available for Apple Silicon. Progress on this can be tracked on the\nTensorflow Text project.\n\nPrevious\u00ab Rasa PlaygroundNextInstalling Rasa Open Source \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "12": {"text": "Version: 3.x\n\nInstalling Rasa Open Source\n\nWant to explore first?You can explore Rasa Open Source online using the Rasa Playground even before you install it.\nAt the end of the tutorial, you can download the resulting assistant, install Rasa on\nyour machine and continue development locally.Rasa Playground\n\nInstall Rasa Open Source#\n\nUbuntu / macOS / WindowsFirst make sure your pip version is up to date:Copypip3 install -U pipTo install Rasa Open Source:Copypip3 install rasa\n\nTelemetry reportingWhen you run Rasa Open Source for the first time, you\u2019ll see a\nmessage notifying you about anonymous usage data that is being collected.\nYou can read more about how that data is pulled out and what it is used for in the\ntelemetry documentation.\n\nCongratulations! You have successfully installed Rasa Open Source!\n\nYou can now create a new project with:\n\nCopyrasa init\n\nYou can learn about the most important Rasa commands in the Command Line Interface.\n\nBuilding from Source#\n\nIf you want to use the development version of Rasa Open Source, you can get it from GitHub:\n\nCopycurl -sSL https://install.python-poetry.org | python3 -git clone https://github.com/RasaHQ/rasa.gitcd rasapoetry install\n\nAdditional dependencies#\n\nFor some machine learning algorithms you need to install additional python packages.\nThey aren't installed by default to keep the footprint small.\n\nThe page on Tuning Your Model will help you pick the right\nconfiguration for your assistant and alert you to additional dependencies.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "13": {"text": "Just give me everything!If you don't mind the additional dependencies lying around, you can useCopypip3 install rasa[full]to install all needed dependencies for every configuration.\n\nPython 3.10 requirements#\n\nIf you are using Linux, installing rasa[full] could result in a failure while installing tokenizers and\ncryptography.\n\nIn order to resolve it, you must follow these steps to install a Rust compiler:\n\nCopyapt install rustc && apt install cargo\n\nAfter initializing the Rust compiler, you should restart the console and check its installation:\n\nCopyrustc --version\n\nIn case the PATH variable had not been automatically setup, run:\n\nCopyexport PATH=\"$HOME/.cargo/bin:$PATH\"\n\nIf you are using macOS, note that installing rasa[full] (either via pip or from source) could result in a failure\nwhile installing tokenizers (issue described in depth here).\n\nIn order to resolve it, you must follow these steps to install a Rust compiler:\n\nCopybrew install rustuprustup-init\n\nAfter initializing the Rust compiler, you should restart the console and check its installation:\n\nCopyrustc --version\n\nIn case the PATH variable had not been automatically setup, run:\n\nCopyexport PATH=\"$HOME/.cargo/bin:$PATH\"\n\nDependencies for spaCy#\n\nFor more information on spaCy models, check out the spaCy docs.\n\nYou can install it with the following commands:\n\nCopypip3 install rasa[spacy]python3 -m spacy download en_core_web_md", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "14": {"text": "This will install Rasa Open Source as well as spaCy and its language model\nfor the English language, but many other languages are available too.\nWe recommend using at least the \"medium\" sized models (_md) instead of the spaCy's\ndefault small en_core_web_sm model. Small models require less\nmemory to run, but will likely reduce intent classification performance.\n\nDependencies for MITIE#\n\nFirst, run\n\nCopypip3 install git+https://github.com/mit-nlp/MITIE.gitpip3 install rasa[mitie]\n\nand then download the\nMITIE models.\nThe file you need is total_word_feature_extractor.dat. Save this\nanywhere. If you want to use MITIE, you need to\ntell it where to find this file (in this example it was saved in the\ndata folder of the project directory).\n\nUpgrading Versions#\n\nTo upgrade your installed version of Rasa Open Source to the latest version from PyPI:\n\nCopypip3 install --upgrade rasa\n\nTo download a specific version, specify the version number:\n\nCopypip3 install rasa==3.0\n\nPrevious\u00ab Setting up your environmentNextRasa Pro Artifacts \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "15": {"text": "Version: 3.x\n\nRasa Pro Artifacts\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nRasa Pro, a drop-in replacement for Rasa Open Source enterpriseRasa Pro Services, flexible infrastructure and APIs on top of Rasa\nOpen Source. Rasa Pro Services should be deployed alongside, but separately\nfrom your production assistant.\n\nRasa Pro includes the Rasa Plus Python package, which is a drop-in replacement for Rasa Open Source that includes all the functionality of Rasa Open Source as well as additional features.\nRasa Pro features are built on a plugin architecture that is seamlessly integrated with Rasa Open Source.\n\nFor example, in the below diagram, tracing is run as a hook implementation in Rasa Plus, whose specification is defined and registered in Rasa Open Source.\n\n\n\nThe hook configures the tracing backend as specified in the endpoints.yml and instruments model training and message handling actions.\nThe hook is then called within the Rasa Open Source main module, which is the entry point for the Rasa Open Source command line.\n\nThe plugin architecture enables Rasa Pro to continue enhancing the Rasa Open Source argument parser while maintaining the same runnable command name (rasa).\n\nPrevious\u00ab Installing Rasa Open SourceNextRasa Pro Installation \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "16": {"text": "Version: 3.x\n\nRasa Pro Installation\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nIn this section you will learn how to install Rasa Pro, a drop-in replacement enterprise-ready version of Rasa Open Source, on your development environment.\n\nTo learn more about deployments, please visit the following sections:\n\nDeploying Rasa Pro in productionDeploying Rasa Pro Services in production\n\nTo learn more about compatibility between different versions of Rasa Pro and Rasa Pro Services, please see\ncompatibility matrix.\n\nRasa Pro Setup#\n\nRasa Pro requires access credentials to install and a license to use. The instructions below assume you have\ncredentials and a license.\n\nRasa Pro is a drop-in replacement and enterprise-ready version of Rasa Open Source.\nAdditional functionality is provided through plugins while allowing you to continue using the existing Rasa Open Source CLI commands and parameters as you used to.\n\nInstalling Rasa Pro instead of Rasa Open Source will not break any existing scripts, automation or functionality you have built around Rasa Open Source.\n\nPython Package Installation#\n\nThe Rasa Pro python package is named rasa-plus. The rasa-plus python packages as well as the docker containers are hosted on our GCP artifact registry.\nAs a prerequisite, you will need:\n\nto install and initialize the Google Cloud CLI.to verify that the user or service account you are using has the required permissions to access the repository.\n\nAuthentication Set-Up#\n\nIn order for the package manager of choice (e.g, pip or poetry) to have the necessary credentials to authenticate with the registry, follow the steps in the Google documentation.\n\nWhere required, input the following parameters:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "17": {"text": "Where required, input the following parameters:\n\nCopygcloud artifacts print-settings python \\    --project=rasa-releases \\    --repository=rasa-plus-py \\    --location=europe-west3\n\nInstalling with pip#\n\nEnter the following settings to the .pypirc file:\n\nCopy[distutils]index-servers =    rasa-plus-py\n[rasa-plus-py]repository: https://europe-west3-python.pkg.dev/rasa-releases/rasa-plus-py/\n\n\nNext, add these specific settings to the pip configuration file as instructed in the GCP authentication documentation:\n\nCopy[global]extra-index-url = https://europe-west3-python.pkg.dev/rasa-releases/rasa-plus-py/simple/\n\n\nFinally, you should be able to run pip install rasa-plus.\n\nInstalling with poetry#\n\nTo install rasa-plus with poetry, you will need to associate the artifact registry URL with rasa-plus before installing it.\nNote that you must upgrade poetry to the latest minor (1.2.0) in order for poetry to work with the GCP authentication set-up.\nProceed with the following steps:\n\nRun poetry self add \"keyrings.google-artifactregistry-auth\"Add this section to pyproject.toml:\n\nCopy[[tool.poetry.source]]name = \"rasa-plus\"url = \"https://europe-west3-python.pkg.dev/rasa-releases/rasa-plus-py/simple\"default = falsesecondary = true\n\n\nRun poetry install.\n\nDocker Image Installation#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "18": {"text": "Run poetry install.\n\nDocker Image Installation#\n\nThe Rasa Pro docker image is named rasa-plus. The docker images are hosted on our GCP artifact registry.\nAs a prerequisite, you will need:\n\nto install and initialize the Google Cloud CLI.to verify that the user or service account you are using has the required permissions to access the repository.\n\nTo be able to pull the docker image you need use a key file provided by Rasa to authenticate with google cloud.\n\nCopygcloud auth activate-service-account --key-file=${KEYFILE}gcloud auth listdocker pull europe-west3-docker.pkg.dev/rasa-releases/rasa-plus/rasa-plus\n\nRuntime Configuration#\n\nRasa Pro will look for your license in the env var RASA_PRO_LICENSE.\nYou can set this env var temporarily in your terminal, but it is recommended\nto set it persistently so that you don't have to set it every time you run\nRasa Pro.\n\nBash:\n\nCopy## Temporaryexport RASA_PRO_LICENSE=<your-license-string>\n## Persistentecho \"export RASA_PRO_LICENSE=<your-license-string>\" >> ~/.bashrc## If you're using a different flavor of bash e.g. Zsh, replace .bashrc with your shell's initialization script e.g. ~/.zshrc\n\nWindows Powershell:\n\nCopy## Temporary$env: RASA_PRO_LICENSE=<your-license-string>\n## Persistent[System.Environment]::SetEnvironmentVariable('RASA_PRO_LICENSE','<your-license-string>')\n\nThen you can use the rasa CLI as usual, for example:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "19": {"text": "Then you can use the rasa CLI as usual, for example:\n\nCopyrasa init\n\nnoteIf you run rasa train or rasa run after you\u2019ve enabled tracing using Jaeger as a backend in your local development environment,\nyou might come across this error OSError: [Errno 40] Message too long.This could be caused by the OS of your local development environment restricting UDP packet size.\nYou can find out the current UDP packet size by running sysctl net.inet.udp.maxdgram on macOS.\nYou can increase UDP packet size by running sudo sysctl -w net.inet.udp.maxdgram=65535.\n\nCongratulations! You have now successfully installed Rasa Pro on your development environment.\nTo learn more about production deployments, visit:\n\nDeploying Rasa Pro in productionDeploying Rasa Pro Services in production\n\nPrevious\u00ab Rasa Pro ArtifactsNextMigrate From Other Tools (beta) \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "20": {"text": "Version: 3.x\n\nMigrate From Other Tools (beta)\n\nHere are a few reasons why we see developers switching from other tools to Rasa:\n\nFaster: Runs locally - no HTTP requests or server round trips requiredCustomizable: Tune models and get higher accuracy with your data setOpen source: No risk of vendor lock-in - Rasa is under the Apache 2.0 license and you can\nuse it in commercial projects\n\nIn addition, our open source tools allow developers to build contextual AI assistants and manage dialogues\nwith machine learning instead of rules - check it out in this blog post.\n\nLearn how to migrate from:\n\nGoogle DialogflowWit.aiMicrosoft LUISIBM Watson\n\nPrevious\u00ab Rasa Pro InstallationNextCommand Line Interface \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "21": {"text": "Version: 3.x\n\nCommand Line Interface\n\nThe command line interface (CLI) gives you easy-to-remember commands for common tasks. This page describes the behavior of the commands and the parameters you can pass to them.\n\nCheat Sheet#\n\nCommandEffectrasa initCreates a new project with example training data, actions, and config files.rasa trainTrains a model using your NLU data and stories, saves trained model in ./models.rasa interactiveStarts an interactive learning session to create new training data by chatting to your assistant.rasa shellLoads your trained model and lets you talk to your assistant on the command line.rasa runStarts a server with your trained model.rasa run actionsStarts an action server using the Rasa SDK.rasa visualizeGenerates a visual representation of your stories.rasa testTests a trained Rasa model on any files starting with test_.rasa test e2eRuns end-to-end testing fully integrated with the action server that serves as acceptance testing.rasa data split nluPerforms a 80/20 split of your NLU training data.rasa data split storiesDo the same as rasa data split nlu, but for your stories data.rasa data convertConverts training data between different formats.rasa data migrateMigrates 2.0 domain to 3.0 format.rasa data validateChecks the domain, NLU and conversation data for inconsistencies.rasa exportExports conversations from a tracker store to an event broker.rasa evaluate markersExtracts markers from an existing tracker store.rasa marker uploadUpload marker configurations to Analytics Data Pipelinerasa licenseDisplay licensing information.rasa -hShows all available commands.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "22": {"text": "noteIf you run into character encoding issues on Windows like: UnicodeEncodeError: 'charmap' codec can't encode character ... or\nthe terminal is not displaying colored messages properly, prepend winpty to the command you would like to run.\nFor example winpty rasa init instead of rasa init\n\nLog Level#\n\nRasa produces log messages at several different levels (eg. warning, info, error and so on). You can control which level of logs you would like to see with --verbose (same as -v) or --debug (same as -vv) as optional command line arguments. See each command below for more explanation on what these arguments mean.\n\nIn addition to CLI arguments, several environment variables allow you to control log output in a more granular way. With these environment variables, you can configure log levels for messages created by external libraries such as Matplotlib, Pika, and Kafka. These variables follow standard logging level in Python. Currently, following environment variables are supported:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "23": {"text": "LOG_LEVEL_LIBRARIES: This is the general environment variable to configure log level for the main libraries Rasa uses. It covers Tensorflow, asyncio, APScheduler, SocketIO, Matplotlib, RabbitMQ, Kafka.LOG_LEVEL_MATPLOTLIB: This is the specialized environment variable to configure log level only for Matplotlib.LOG_LEVEL_RABBITMQ: This is the specialized environment variable to configure log level only for AMQP libraries, at the moment it handles log levels from aio_pika and aiormq.LOG_LEVEL_KAFKA: This is the specialized environment variable to configure log level only for kafka.LOG_LEVEL_PRESIDIO: This is the specialized environment variable to configure log level only for Presidio, at the moment it handles log levels from presidio_analyzer and presidio_anonymizer.LOG_LEVEL_FAKER: This is the specialized environment variable to configure log level only for Faker.\n\nGeneral configuration (LOG_LEVEL_LIBRARIES) has less priority than library level specific configuration (LOG_LEVEL_MATPLOTLIB, LOG_LEVEL_RABBITMQ etc); and CLI parameter sets the lowest level log messages which will be handled. This means variables can be used together with a predictable result. As an example:\n\nCopyLOG_LEVEL_LIBRARIES=ERROR LOG_LEVEL_MATPLOTLIB=WARNING LOG_LEVEL_KAFKA=DEBUG rasa shell --debug\n\nThe above command run will result in showing:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "24": {"text": "The above command run will result in showing:\n\nmessages with DEBUG level and higher by default (due to --debug)messages with WARNING level and higher for Matplotlibmessages with DEBUG level and higher for kafkamessages with ERROR level and higher for other libraries not configured\n\nNote that CLI config sets the lowest level log messages to be handled, hence the following command will set the log level to INFO (due to --verbose) and no debug messages will be seen (library level configuration will not have any effect):\n\nCopyLOG_LEVEL_LIBRARIES=DEBUG LOG_LEVEL_MATPLOTLIB=DEBUG rasa shell --verbose\n\nAs an aside, CLI log level sets the level at the root logger (which has the important handler - coloredlogs handler); this means even if an environment variable sets a library logger to a lower level, the root logger will reject messages from that library. If not specified, the CLI log level is set to INFO.\n\nCustom logging configuration#\n\nNew in 3.4The Rasa CLI now includes a new argument --logging-config-file which accepts a YAML file as value.\n\nYou can now configure any logging formatters or handlers in a separate YAML file.\nThe logging config YAML file must follow the Python built-in dictionary schema, otherwise it will fail validation.\nYou can pass this file as argument to the --logging-config-file CLI option and use it with any of the rasa commands.\n\nrasa init#\n\nThis command sets up a complete assistant for you with some example training data:\n\nCopyrasa init\n\nIt creates the following files:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "25": {"text": "Copyrasa init\n\nIt creates the following files:\n\nCopy.\u251c\u2500\u2500 actions\u2502   \u251c\u2500\u2500 __init__.py\u2502   \u2514\u2500\u2500 actions.py\u251c\u2500\u2500 config.yml\u251c\u2500\u2500 credentials.yml\u251c\u2500\u2500 data\u2502   \u251c\u2500\u2500 nlu.yml\u2502   \u2514\u2500\u2500 stories.yml\u251c\u2500\u2500 domain.yml\u251c\u2500\u2500 endpoints.yml\u251c\u2500\u2500 models\u2502   \u2514\u2500\u2500 <timestamp>.tar.gz\u2514\u2500\u2500 tests   \u2514\u2500\u2500 test_stories.yml\n\nIt will ask you if you want to train an initial model using this data.\nIf you answer no, the models directory will be empty.\n\nAny of the default CLI commands will expect this project setup, so this is the\nbest way to get started. You can run rasa train, rasa shell and rasa test\nwithout any additional configuration.\n\nrasa train#\n\nThe following command trains a Rasa model:\n\nCopyrasa train\n\nIf you have existing models in your directory (under models/ by default), only\nthe parts of your model that have changed will be re-trained. For example, if you edit\nyour NLU training data and nothing else, only the NLU part will be trained.\n\nIf you want to train an NLU or dialogue model individually, you can run\nrasa train nlu or rasa train core. If you provide training data only for one one of\nthese, rasa train will fall back to one of these commands by default.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "26": {"text": "rasa train will store the trained model in the directory defined by --out, models/ by default.\nThe name of the model by default is <timestamp>.tar.gz. If you want to name your model differently,\nyou can specify the name using the --fixed-model-name flag.\n\nBy default validation is run before training the model. If you want to skip validation, you can use the --skip-validation flag.\nIf you want to fail on validation warnings, you can use the --fail-on-validation-warnings flag.\nThe --validation-max-history is analogous to the --max-history argument of rasa data validate. \n\nThe following arguments can be used to configure the training process:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "27": {"text": "Copyusage: rasa train [-h] [-v] [-vv] [--quiet]                  [--logging-config-file LOGGING_CONFIG_FILE]                  [--data DATA [DATA ...]] [-c CONFIG] [-d DOMAIN] [--out OUT]                  [--dry-run] [--skip-validation]                  [--fail-on-validation-warnings]                  [--validation-max-history VALIDATION_MAX_HISTORY]                  [--augmentation AUGMENTATION] [--debug-plots]                  [--num-threads NUM_THREADS]                  [--fixed-model-name FIXED_MODEL_NAME] [--persist-nlu-data]                  [--force] [--finetune [FINETUNE]]                  [--epoch-fraction EPOCH_FRACTION] [--endpoints ENDPOINTS]                  {core,nlu} ...\npositional arguments:  {core,nlu}    core                Trains a Rasa Core model using your stories.    nlu                 Trains a Rasa NLU model using your NLU data.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "28": {"text": "options:  -h, --help            show this help message and exit  --data DATA [DATA ...]                        Paths to the Core and NLU data files. (default:                        ['data'])  -c CONFIG, --config CONFIG                        The policy and NLU pipeline configuration of your bot.                        (default: config.yml)  -d DOMAIN, --domain DOMAIN                        Domain specification. This can be a single YAML file,                        or a directory that contains several files with domain                        specifications in it. The content of these files will                        be read and merged together. (default: domain.yml)  --out OUT             Directory where your models should be stored.                        (default: models)  --dry-run             If enabled, no actual training will be performed.", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "29": {"text": "If enabled, no actual training will be performed.                        Instead, it will be determined whether a model should                        be re-trained and this information will be printed as                        the output. The return code is a 4-bit bitmask that                        can also be used to determine what exactly needs to be                        retrained: - 0 means that no extensive training is                        required (note that the responses still might require                        updating by running 'rasa train'). - 1 means the model                        needs to be retrained - 8 means the training was                        forced (--force argument is specified) (default:                        False)  --skip-validation     Skip validation step before training. (default: False)  --fail-on-validation-warnings", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "30": {"text": "Fail on validation warnings. If omitted only errors                        will exit with a non zero status code (default: False)  --validation-max-history VALIDATION_MAX_HISTORY                        Number of turns taken into account for story structure                        validation. (default: None)  --augmentation AUGMENTATION                        How much data augmentation to use during training.                        (default: 50)  --debug-plots         If enabled, will create plots showing checkpoints and                        their connections between story blocks in a file                        called `story_blocks_connections.html`. (default:                        False)  --num-threads NUM_THREADS                        Maximum amount of threads to use when training.", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "31": {"text": "(default: None)  --fixed-model-name FIXED_MODEL_NAME                        If set, the name of the model file/directory will be                        set to the given name. (default: None)  --persist-nlu-data    Persist the NLU training data in the saved model.                        (default: False)  --force               Force a model training even if the data has not                        changed. (default: False)  --finetune [FINETUNE]                        Fine-tune a previously trained model. If no model path                        is provided, Rasa Open Source will try to finetune the                        latest trained model from the model directory                        specified via '--out'. (default: None)  --epoch-fraction EPOCH_FRACTION", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "32": {"text": "Fraction of epochs which are currently specified in                        the model configuration which should be used when                        finetuning a model. (default: None)  --endpoints ENDPOINTS                        Configuration file for the connectors as a yml file.                        (default: endpoints.yml)", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "33": {"text": "Python Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.\n  -v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "34": {"text": "See the section on data augmentation for info on how data augmentation works\nand how to choose a value for the flag. Note that TEDPolicy is the only policy affected by data augmentation.\n\nSee the following section on incremental training for more information about the --epoch-fraction argument.\n\nIncremental training#\n\nNew in 2.2This feature is experimental.\nWe introduce experimental features to get feedback from our community, so we encourage you to try it out!\nHowever, the functionality might be changed or removed in the future.\nIf you have feedback (positive or negative) please share it with us on the Rasa Forum.\n\nIn order to improve the performance of an assistant, it's helpful to practice CDD\nand add new training examples based on how your users have talked to your assistant. You can use rasa train --finetune\nto initialize the pipeline with an already trained model and further finetune it on the\nnew training dataset that includes the additional training examples. This will help reduce the\ntraining time of the new model.", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "35": {"text": "By default, the command picks up the latest model in the models/ directory. If you have a specific model\nwhich you want to improve, you may specify the path to this by\nrunning rasa train --finetune <path to model to finetune>. Finetuning a model usually\nrequires fewer epochs to train machine learning components like DIETClassifier, ResponseSelector and TEDPolicy compared to training from scratch.\nEither use a model configuration for finetuning\nwhich defines fewer epochs than before or use the flag\n--epoch-fraction. --epoch-fraction will use a fraction of the epochs specified for each machine learning component\nin the model configuration file. For example, if DIETClassifier is configured to use 100 epochs,\nspecifying --epoch-fraction 0.5 will only use 50 epochs for finetuning.\n\nYou can also finetune an NLU-only or dialogue management-only model by using\nrasa train nlu --finetune and rasa train core --finetune respectively.\n\nTo be able to fine tune a model, the following conditions must be met:", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "36": {"text": "To be able to fine tune a model, the following conditions must be met:\n\nThe configuration supplied should be exactly the same as the\nconfiguration used to train the model which is being finetuned.\nThe only parameter that you can change is epochs for the individual machine learning components and policies.The set of labels(intents, actions, entities and slots) for which the base model is trained\nshould be exactly the same as the ones present in the training data used for finetuning. This\nmeans that you cannot add new intent, action, entity or slot labels to your training data\nduring incremental training. You can still add new training examples for each of the existing\nlabels. If you have added/removed labels in the training data, the pipeline needs to be trained\nfrom scratch.The model to be finetuned is trained with MINIMUM_COMPATIBLE_VERSION of the currently installed rasa version.\n\nrasa interactive#\n\nYou can start an interactive learning session by running:\n\nCopyrasa interactive\n\nThis will first train a model and then start an interactive shell session.\nYou can then correct your assistants predictions as you talk to it.\nIf UnexpecTEDIntentPolicy is\nincluded in the pipeline, action_unlikely_intent\ncan be triggered at any conversation turn. Subsequently, the following message will be displayed:\n\nCopy The bot wants to run 'action_unlikely_intent' to indicate that the last user message was unexpected at this point in the conversation. Check out UnexpecTEDIntentPolicy docs to learn more.\n\nAs the message states, this is an indication that you have explored a conversation path\nwhich is unexpected according to the current set of training stories and hence adding this\npath to training stories is recommended. Like other bot actions, you can choose to confirm\nor deny running this action.", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "37": {"text": "If you provide a trained model using the --model argument, training is skipped\nand that model will be loaded instead.\n\nDuring interactive learning, Rasa will plot the current conversation\nand a few similar conversations from the training data to help you\nkeep track of where you are. You can view the visualization\nat http://localhost:5005/visualization.html\nas soon as the session has started. This diagram can take some time to generate.\nTo skip the visualization, run rasa interactive --skip-visualization.\n\nAdd the assistant_id key introduced in 3.5Running interactive learning with a pre-trained model whose metadata does not include the assistant_id\nwill exit with an error. If this happens, add the required key with a unique identifier value in config.yml\nand re-run training.\n\nThe following arguments can be used to configure the interactive learning session:", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "38": {"text": "Copyusage: rasa interactive [-h] [-v] [-vv] [--quiet]                        [--logging-config-file LOGGING_CONFIG_FILE] [--e2e]                        [-p PORT] [-m MODEL] [--data DATA [DATA ...]]                        [--skip-visualization]                        [--conversation-id CONVERSATION_ID]                        [--endpoints ENDPOINTS] [-c CONFIG] [-d DOMAIN]                        [--out OUT] [--augmentation AUGMENTATION]                        [--debug-plots] [--finetune [FINETUNE]]                        [--epoch-fraction EPOCH_FRACTION] [--force]                        [--persist-nlu-data]                        {core} ... [model-as-positional-argument]\npositional arguments:  {core}    core                Starts an interactive learning session model to create                        new training data for a Rasa Core model by chatting.                        Uses the 'RegexMessageHandler', i.e. `/<intent>` input                        format.  model-as-positional-argument                        Path to a trained Rasa model. If a directory is                        specified, it will use the latest model in this                        directory. (default: None)", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "39": {"text": "options:  -h, --help            show this help message and exit  --e2e                 Save story files in e2e format. In this format user                        messages will be included in the stories. (default:                        False)  -p PORT, --port PORT  Port to run the server at. (default: 5005)  -m MODEL, --model MODEL                        Path to a trained Rasa model. If a directory is                        specified, it will use the latest model in this                        directory. (default: None)  --data DATA [DATA ...]                        Paths to the Core and NLU data files. (default:                        ['data'])  --skip-visualization  Disable plotting the visualization during interactive                        learning. (default: False)  --conversation-id CONVERSATION_ID                        Specify the id of the conversation the messages are                        in. Defaults to a UUID that will be randomly                        generated. (default: 09c3509259ed4051b5438fc7f0374499)  --endpoints ENDPOINTS                        Configuration file for the model server and the                        connectors as a yml file. (default: endpoints.yml)\nPython Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.", "chunk": 18, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "40": {"text": "-v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)", "chunk": 19, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "41": {"text": "Train Arguments:  -c CONFIG, --config CONFIG                        The policy and NLU pipeline configuration of your bot.                        (default: config.yml)  -d DOMAIN, --domain DOMAIN                        Domain specification. This can be a single YAML file,                        or a directory that contains several files with domain                        specifications in it. The content of these files will                        be read and merged together. (default: domain.yml)  --out OUT             Directory where your models should be stored.                        (default: models)  --augmentation AUGMENTATION                        How much data augmentation to use during training.                        (default: 50)  --debug-plots         If enabled, will create plots showing checkpoints and                        their connections between story blocks in a file                        called `story_blocks_connections.html`. (default:                        False)  --finetune [FINETUNE]                        Fine-tune a previously trained model. If no model path                        is provided, Rasa Open Source will try to finetune the                        latest trained model from the model directory                        specified via '--out'. (default: None)  --epoch-fraction EPOCH_FRACTION                        Fraction of epochs which are currently specified in                        the model configuration which should be used when                        finetuning a model. (default: None)  --force               Force a model training even if the data has not                        changed. (default: False)  --persist-nlu-data    Persist the NLU training data in the saved model.                        (default: False)", "chunk": 20, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "42": {"text": "rasa shell#\n\nYou can start a chat session by running:\n\nCopyrasa shell\n\nBy default, this will load up the latest trained model.\nYou can specify a different model to be loaded by using the --model flag.\n\nIf you start the shell with an NLU-only model, rasa shell will output the\nintents and entities predicted for any message you enter.\n\nIf you have trained a combined Rasa model but only want to see what your model\nextracts as intents and entities from text, you can use the command rasa shell nlu.\n\nTo increase the logging level for debugging, run:\n\nCopyrasa shell --debug\n\nnoteIn order to see the typical greetings and/or session start behavior you might see\nin an external channel, you will need to explicitly send /session_start\nas the first message. Otherwise, the session start behavior will begin as described in\nSession configuration.\n\nThe following arguments can be used to configure the command.\nMost arguments overlap with rasa run; see the following section for more info on those arguments.\n\nNote that the --connector argument will always be set to cmdline when running rasa shell.\nThis means all credentials in your credentials file will be ignored,\nand if you provide your own value for the --connector argument it will also be ignored.", "chunk": 21, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "43": {"text": "Copyusage: rasa shell [-h] [-v] [-vv] [--quiet]                  [--logging-config-file LOGGING_CONFIG_FILE]                  [--conversation-id CONVERSATION_ID] [-m MODEL]                  [--log-file LOG_FILE] [--use-syslog]                  [--syslog-address SYSLOG_ADDRESS]                  [--syslog-port SYSLOG_PORT]                  [--syslog-protocol SYSLOG_PROTOCOL] [--endpoints ENDPOINTS]                  [-i INTERFACE] [-p PORT] [-t AUTH_TOKEN] [--cors [CORS ...]]                  [--enable-api] [--response-timeout RESPONSE_TIMEOUT]                  [--request-timeout REQUEST_TIMEOUT]                  [--remote-storage REMOTE_STORAGE]                  [--ssl-certificate SSL_CERTIFICATE]                  [--ssl-keyfile SSL_KEYFILE] [--ssl-ca-file SSL_CA_FILE]                  [--ssl-password SSL_PASSWORD] [--credentials CREDENTIALS]                  [--connector CONNECTOR] [--jwt-secret JWT_SECRET]                  [--jwt-method JWT_METHOD]                  [--jwt-private-key JWT_PRIVATE_KEY]                  {nlu} ... [model-as-positional-argument]\npositional arguments:  {nlu}    nlu                 Interprets messages on the command line using your NLU                        model.  model-as-positional-argument                        Path to a trained Rasa model. If a directory is                        specified, it will use the latest model in this                        directory. (default: None)", "chunk": 22, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "44": {"text": "options:  -h, --help            show this help message and exit  --conversation-id CONVERSATION_ID                        Set the conversation ID. (default:                        78a0614851ba4955844dc947cfb497ca)  -m MODEL, --model MODEL                        Path to a trained Rasa model. If a directory is                        specified, it will use the latest model in this                        directory. (default: models)  --log-file LOG_FILE   Store logs in specified file. (default: None)  --use-syslog          Add syslog as a log handler (default: False)  --syslog-address SYSLOG_ADDRESS                        Address of the syslog server. --use-sylog flag is                        required (default: localhost)  --syslog-port SYSLOG_PORT                        Port of the syslog server. --use-sylog flag is                        required (default: 514)  --syslog-protocol SYSLOG_PROTOCOL                        Protocol used with the syslog server. Can be UDP                        (default) or TCP (default: UDP)  --endpoints ENDPOINTS                        Configuration file for the model server and the                        connectors as a yml file. (default: endpoints.yml)\nPython Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.", "chunk": 23, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "45": {"text": "-v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)", "chunk": 24, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "46": {"text": "Server Settings:  -i INTERFACE, --interface INTERFACE                        Network interface to run the server on. (default:                        0.0.0.0)  -p PORT, --port PORT  Port to run the server at. (default: 5005)  -t AUTH_TOKEN, --auth-token AUTH_TOKEN                        Enable token based authentication. Requests need to                        provide the token to be accepted. (default: None)  --cors [CORS ...]     Enable CORS for the passed origin. Use * to whitelist                        all origins. (default: None)  --enable-api          Start the web server API in addition to the input                        channel. (default: False)  --response-timeout RESPONSE_TIMEOUT                        Maximum time a response can take to process (sec).                        (default: 3600)  --request-timeout REQUEST_TIMEOUT                        Maximum time a request can take to process (sec).                        (default: 300)  --remote-storage REMOTE_STORAGE                        Set the remote location where your Rasa model is                        stored, e.g. on AWS. (default: None)  --ssl-certificate SSL_CERTIFICATE                        Set the SSL Certificate to create a TLS secured                        server. (default: None)  --ssl-keyfile SSL_KEYFILE                        Set the SSL Keyfile to create a TLS secured server.                        (default: None)  --ssl-ca-file SSL_CA_FILE                        If your SSL certificate needs to be verified, you can                        specify the CA file using this parameter. (default:                        None)  --ssl-password SSL_PASSWORD                        If your ssl-keyfile is protected by a password, you                        can specify it using this paramer. (default: None)", "chunk": 25, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "47": {"text": "Channels:  --credentials CREDENTIALS                        Authentication credentials for the connector as a yml                        file. (default: None)  --connector CONNECTOR                        Service to connect to. (default: None)\nJWT Authentication:  --jwt-secret JWT_SECRET                        Public key for asymmetric JWT methods or shared                        secretfor symmetric methods. Please also make sure to                        use --jwt-method to select the method of the                        signature, otherwise this argument will be                        ignored.Note that this key is meant for securing the                        HTTP API. (default: None)  --jwt-method JWT_METHOD                        Method used for the signature of the JWT                        authentication payload. (default: HS256)  --jwt-private-key JWT_PRIVATE_KEY                        A private key used for generating web tokens,                        dependent upon which hashing algorithm is used. It                        must be used together with --jwt-secret for providing                        the public key. (default: None)", "chunk": 26, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "48": {"text": "rasa run#\n\nTo start a server running your trained model, run:\n\nCopyrasa run\n\nBy default the Rasa server uses HTTP for its communication. To secure the communication with\nSSL and run the server on HTTPS, you need to provide a valid certificate and the corresponding\nprivate key file. You can specify these files as part of the rasa run command.\nIf you encrypted your keyfile with a password during creation,\nyou need to add the --ssl-password as well.\n\nCopyrasa run --ssl-certificate myssl.crt --ssl-keyfile myssl.key --ssl-password mypassword\n\nRasa by default listens on each available network interface. You can limit this to a specific\nnetwork interface using the -i command line option.\n\nCopyrasa run -i 192.168.69.150\n\nRasa will by default connect to all channels specified in your credentials file.\nTo connect to a single channel and ignore all other channels in your credentials file,\nspecify the name of the channel in the --connector argument.\n\nCopyrasa run --connector rest\n\nThe name of the channel should match the name you specify in your credentials file.\nFor supported channels see the page about messaging and voice channels.\n\nThe following arguments can be used to configure your Rasa server:", "chunk": 27, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "49": {"text": "Copyusage: rasa run [-h] [-v] [-vv] [--quiet]                [--logging-config-file LOGGING_CONFIG_FILE] [-m MODEL]                [--log-file LOG_FILE] [--use-syslog]                [--syslog-address SYSLOG_ADDRESS] [--syslog-port SYSLOG_PORT]                [--syslog-protocol SYSLOG_PROTOCOL] [--endpoints ENDPOINTS]                [-i INTERFACE] [-p PORT] [-t AUTH_TOKEN] [--cors [CORS ...]]                [--enable-api] [--response-timeout RESPONSE_TIMEOUT]                [--request-timeout REQUEST_TIMEOUT]                [--remote-storage REMOTE_STORAGE]                [--ssl-certificate SSL_CERTIFICATE]                [--ssl-keyfile SSL_KEYFILE] [--ssl-ca-file SSL_CA_FILE]                [--ssl-password SSL_PASSWORD] [--credentials CREDENTIALS]                [--connector CONNECTOR] [--jwt-secret JWT_SECRET]                [--jwt-method JWT_METHOD] [--jwt-private-key JWT_PRIVATE_KEY]                {actions} ... [model-as-positional-argument]\npositional arguments:  {actions}    actions             Runs the action server.  model-as-positional-argument                        Path to a trained Rasa model. If a directory is                        specified, it will use the latest model in this                        directory. (default: None)", "chunk": 28, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "50": {"text": "options:  -h, --help            show this help message and exit  -m MODEL, --model MODEL                        Path to a trained Rasa model. If a directory is                        specified, it will use the latest model in this                        directory. (default: models)  --log-file LOG_FILE   Store logs in specified file. (default: None)  --use-syslog          Add syslog as a log handler (default: False)  --syslog-address SYSLOG_ADDRESS                        Address of the syslog server. --use-sylog flag is                        required (default: localhost)  --syslog-port SYSLOG_PORT                        Port of the syslog server. --use-sylog flag is                        required (default: 514)  --syslog-protocol SYSLOG_PROTOCOL                        Protocol used with the syslog server. Can be UDP                        (default) or TCP (default: UDP)  --endpoints ENDPOINTS                        Configuration file for the model server and the                        connectors as a yml file. (default: endpoints.yml)\nPython Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.\n  -v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)", "chunk": 29, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "51": {"text": "Server Settings:  -i INTERFACE, --interface INTERFACE                        Network interface to run the server on. (default:                        0.0.0.0)  -p PORT, --port PORT  Port to run the server at. (default: 5005)  -t AUTH_TOKEN, --auth-token AUTH_TOKEN                        Enable token based authentication. Requests need to                        provide the token to be accepted. (default: None)  --cors [CORS ...]     Enable CORS for the passed origin. Use * to whitelist                        all origins. (default: None)  --enable-api          Start the web server API in addition to the input                        channel. (default: False)  --response-timeout RESPONSE_TIMEOUT                        Maximum time a response can take to process (sec).                        (default: 3600)  --request-timeout REQUEST_TIMEOUT                        Maximum time a request can take to process (sec).                        (default: 300)  --remote-storage REMOTE_STORAGE                        Set the remote location where your Rasa model is                        stored, e.g. on AWS. (default: None)  --ssl-certificate SSL_CERTIFICATE                        Set the SSL Certificate to create a TLS secured                        server. (default: None)  --ssl-keyfile SSL_KEYFILE                        Set the SSL Keyfile to create a TLS secured server.                        (default: None)  --ssl-ca-file SSL_CA_FILE                        If your SSL certificate needs to be verified, you can                        specify the CA file using this parameter. (default:                        None)  --ssl-password SSL_PASSWORD                        If your ssl-keyfile is protected by a password, you                        can specify it using this paramer. (default: None)", "chunk": 30, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "52": {"text": "Channels:  --credentials CREDENTIALS                        Authentication credentials for the connector as a yml                        file. (default: None)  --connector CONNECTOR                        Service to connect to. (default: None)\nJWT Authentication:  --jwt-secret JWT_SECRET                        Public key for asymmetric JWT methods or shared                        secretfor symmetric methods. Please also make sure to                        use --jwt-method to select the method of the                        signature, otherwise this argument will be                        ignored.Note that this key is meant for securing the                        HTTP API. (default: None)  --jwt-method JWT_METHOD                        Method used for the signature of the JWT                        authentication payload. (default: HS256)  --jwt-private-key JWT_PRIVATE_KEY                        A private key used for generating web tokens,                        dependent upon which hashing algorithm is used. It                        must be used together with --jwt-secret for providing                        the public key. (default: None)", "chunk": 31, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "53": {"text": "For more information on the additional parameters, see Model Storage.\nSee the Rasa HTTP API page for detailed documentation of all the endpoints.\n\nrasa run actions#\n\nTo start an action server with the Rasa SDK, run:\n\nCopyrasa run actions\n\nThe following arguments can be used to adapt the server settings:", "chunk": 32, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "54": {"text": "Copyusage: rasa run actions [-h] [-v] [-vv] [--quiet]                        [--logging-config-file LOGGING_CONFIG_FILE] [-p PORT]                        [--cors [CORS ...]] [--actions ACTIONS]                        [--ssl-keyfile SSL_KEYFILE]                        [--ssl-certificate SSL_CERTIFICATE]                        [--ssl-password SSL_PASSWORD] [--auto-reload]\noptions:  -h, --help            show this help message and exit  -p PORT, --port PORT  port to run the server at (default: 5055)  --cors [CORS ...]     enable CORS for the passed origin. Use * to whitelist                        all origins (default: None)  --actions ACTIONS     name of action package to be loaded (default: None)  --ssl-keyfile SSL_KEYFILE                        Set the SSL certificate to create a TLS secured                        server. (default: None)  --ssl-certificate SSL_CERTIFICATE                        Set the SSL certificate to create a TLS secured                        server. (default: None)  --ssl-password SSL_PASSWORD                        If your ssl-keyfile is protected by a password, you                        can specify it using this paramer. (default: None)  --auto-reload         Enable auto-reloading of modules containing Action                        subclasses. (default: False)\nPython Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.", "chunk": 33, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "55": {"text": "-v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)", "chunk": 34, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "56": {"text": "rasa visualize#\n\nTo generate a graph of your stories in the browser, run:\n\nCopyrasa visualize\n\nIf your stories are located somewhere other than the default location data/,\nyou can specify their location with the --stories flag.\n\nThe following arguments can be used to configure this command:", "chunk": 35, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "57": {"text": "Copyusage: rasa visualize [-h] [-v] [-vv] [--quiet]                      [--logging-config-file LOGGING_CONFIG_FILE] [-d DOMAIN]                      [-s STORIES] [--out OUT] [--max-history MAX_HISTORY]                      [-u NLU]\noptions:  -h, --help            show this help message and exit  -d DOMAIN, --domain DOMAIN                        Domain specification. This can be a single YAML file,                        or a directory that contains several files with domain                        specifications in it. The content of these files will                        be read and merged together. (default: domain.yml)  -s STORIES, --stories STORIES                        File or folder containing your training stories.                        (default: data)  --out OUT             Filename of the output path, e.g. 'graph.html'.                        (default: graph.html)  --max-history MAX_HISTORY                        Max history to consider when merging paths in the                        output graph. (default: 2)  -u NLU, --nlu NLU     File or folder containing your NLU data, used to                        insert example messages into the graph. (default:                        None)\nPython Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.", "chunk": 36, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "58": {"text": "-v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)", "chunk": 37, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "59": {"text": "rasa test#\n\nTo evaluate a model on your test data, run:\n\nCopyrasa test\n\nThis will test your latest trained model on any end-to-end stories you have\ndefined in files with the test_ prefix.\nIf you want to use a different model, you can specify it using the --model flag.\n\nTo evaluate the dialogue and NLU\nmodels separately, use the commands below:\n\nCopyrasa test core\n\nand\n\nCopyrasa test nlu\n\nYou can find more details on specific arguments for each testing type in\nEvaluating an NLU Model and\nEvaluating a Dialogue Management Model.\n\nThe following arguments are available for rasa test:", "chunk": 38, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "60": {"text": "Copyusage: rasa test [-h] [-v] [-vv] [--quiet]                 [--logging-config-file LOGGING_CONFIG_FILE] [-m MODEL]                 [-s STORIES] [--max-stories MAX_STORIES]                 [--endpoints ENDPOINTS] [--fail-on-prediction-errors]                 [--url URL] [--evaluate-model-directory] [-u NLU]                 [-c CONFIG [CONFIG ...]] [-d DOMAIN] [--cross-validation]                 [-f FOLDS] [-r RUNS] [-p PERCENTAGES [PERCENTAGES ...]]                 [--no-plot] [--successes] [--no-errors] [--no-warnings]                 [--out OUT]                 {core,nlu} ...\npositional arguments:  {core,nlu}    core                Tests Rasa Core models using your test stories.    nlu                 Tests Rasa NLU models using your test NLU data.\noptions:  -h, --help            show this help message and exit  -m MODEL, --model MODEL                        Path to a trained Rasa model. If a directory is                        specified, it will use the latest model in this                        directory. (default: models)  --no-plot             Don't render evaluation plots. (default: False)  --successes           If set successful predictions will be written to a                        file. (default: False)  --no-errors           If set incorrect predictions will NOT be written to a                        file. (default: False)  --no-warnings         If set prediction warnings will NOT be written to a                        file. (default: False)  --out OUT             Output path for any files created during the                        evaluation. (default: results)", "chunk": 39, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "61": {"text": "Python Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.\n  -v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)\nCore Test Arguments:  -s STORIES, --stories STORIES                        File or folder containing your test stories. (default:                        .)  --max-stories MAX_STORIES                        Maximum number of stories to test on. (default: None)  --endpoints ENDPOINTS                        Configuration file for the connectors as a yml file.                        (default: endpoints.yml)  --fail-on-prediction-errors                        If a prediction error is encountered, an exception is                        thrown. This can be used to validate stories during                        tests, e.g. on travis. (default: False)  --url URL             If supplied, downloads a story file from a URL and                        trains on it. Fetches the data by sending a GET                        request to the supplied URL. (default: None)  --evaluate-model-directory                        Should be set to evaluate models trained via 'rasa                        train core --config <config-1> <config-2>'. All models                        in the provided directory are evaluated and compared                        against each other. (default: False)", "chunk": 40, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "62": {"text": "NLU Test Arguments:  -u NLU, --nlu NLU     File or folder containing your NLU data. (default:                        data)  -c CONFIG [CONFIG ...], --config CONFIG [CONFIG ...]                        Model configuration file. If a single file is passed                        and cross validation mode is chosen, cross-validation                        is performed, if multiple configs or a folder of                        configs are passed, models will be trained and                        compared directly. (default: None)  -d DOMAIN, --domain DOMAIN                        Domain specification. This can be a single YAML file,                        or a directory that contains several files with domain                        specifications in it. The content of these files will                        be read and merged together. (default: domain.yml)", "chunk": 41, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "63": {"text": "rasa test e2e#\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nNew in 3.5You can now use end-to-end testing to test your assistant as a whole, including dialogue management and custom actions.\n\nTo run end-to-end testing on your trained model, run:\n\nCopyrasa test e2e\n\nThis will test your latest trained model on any end-to-end test cases you have.\nIf you want to use a different model, you can specify it using the --model flag.\n\nThe following arguments are available for rasa test e2e:", "chunk": 42, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "64": {"text": "Copyusage: rasa test e2e [-h] [-v] [-vv] [--quiet] [--logging-config-file LOGGING_CONFIG_FILE] [--fail-fast] [-o] [--remote-storage REMOTE_STORAGE] [-m MODEL] [--endpoints ENDPOINTS] [path-to-test-cases]\nRuns end-to-end testing.\noptional arguments:  -h, --help            show this help message and exit  -o, --e2e-results     Results file containing end-to-end testing summary. (default: None)  --remote-storage REMOTE_STORAGE                        Set the remote location where your Rasa model is stored, e.g. on AWS. (default: None)  -m MODEL, --model MODEL                        Path to a trained Rasa model. If a directory is specified, it will use the latest model in this directory. (default: models)  --endpoints ENDPOINTS                        Configuration file for the model server and the connectors as a yml file. (default: endpoints.yml)\nPython Logging Options:  You can control level of log messages printed. In addition to these arguments, a more fine grained configuration can be achieved with environment variables. See online documentation for more info.\n  -v, --verbose         Be verbose. Sets logging level to INFO. (default: None)  -vv, --debug          Print lots of debugging statements. Sets logging level to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default: None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file will be set to the given name. (default: None)", "chunk": 43, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "65": {"text": "Testing Settings:  path-to-test-cases    Input file or folder containing end-to-end test cases. (default: tests/e2e_test_cases.yml)  --fail-fast           Fail the test suite as soon as a unit test fails. (default: False)", "chunk": 44, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "66": {"text": "rasa data split#\n\nTo create a train-test split of your NLU training data, run:\n\nCopyrasa data split nlu\n\nThis will create a 80/20 split of train/test data by default.\nYou can specify the training data, the fraction, and the output directory using\nthe following arguments:", "chunk": 45, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "67": {"text": "Copyusage: rasa data split nlu [-h] [-v] [-vv] [--quiet]                           [--logging-config-file LOGGING_CONFIG_FILE]                           [-u NLU] [--training-fraction TRAINING_FRACTION]                           [--random-seed RANDOM_SEED] [--out OUT]\noptions:  -h, --help            show this help message and exit  -u NLU, --nlu NLU     File or folder containing your NLU data. (default:                        data)  --training-fraction TRAINING_FRACTION                        Percentage of the data which should be in the training                        data. (default: 0.8)  --random-seed RANDOM_SEED                        Seed to generate the same train/test split. (default:                        None)  --out OUT             Directory where the split files should be stored.                        (default: train_test_split)\nPython Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.\n  -v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)\n\n\nIf you have NLG data for retrieval actions, this will be saved to separate files:", "chunk": 46, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "68": {"text": "If you have NLG data for retrieval actions, this will be saved to separate files:\n\nCopyls train_test_split\n      nlg_test_data.yml     test_data.yml      nlg_training_data.yml training_data.yml\n\nTo split your stories, you can use the following command:\n\nCopyrasa data split stories\n\nIt has the same arguments as split nlu command, but loads yaml files with stories and perform random splitting.\nDirectory train_test_split will contain all yaml files processed with prefixes train_ or test_ containing\ntrain and test parts.\n\nrasa data convert nlu#\n\nYou can convert NLU data from\n\nLUIS data format,WIT data format,Dialogflow data format, orJSON\n\nto\n\nYAML orJSON\n\nYou can start the converter by running:\n\nCopyrasa data convert nlu\n\nYou can specify the input file or directory, output file or directory, and the output format with the following arguments:", "chunk": 47, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "69": {"text": "Copyusage: rasa data convert nlu [-h] [-v] [-vv] [--quiet]                             [--logging-config-file LOGGING_CONFIG_FILE]                             [-f {json,yaml}] [--data DATA [DATA ...]]                             [--out OUT] [-l LANGUAGE]\noptions:  -h, --help            show this help message and exit  -f {json,yaml}, --format {json,yaml}                        Output format the training data should be converted                        into. (default: yaml)  --data DATA [DATA ...]                        Paths to the files or directories containing Rasa NLU                        data. (default: data)  --out OUT             File (for `json`) or existing path (for `yaml`) where                        to save training data in Rasa format. (default:                        converted_data)  -l LANGUAGE, --language LANGUAGE                        Language of data. (default: en)\nPython Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.\n  -v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)\n\n\nrasa data migrate#", "chunk": 48, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "70": {"text": "rasa data migrate#\n\nThe domain is the only data file whose format changed between 2.0 and 3.0.\nYou can automatically migrate a 2.0 domain to the 3.0 format.\n\nYou can start the migration by running:\n\nCopyrasa data migrate\n\nYou can specify the input file or directory and the output file or directory with the following arguments:\n\nCopyrasa data migrate -d DOMAIN --out OUT_PATH\n\nIf no arguments are specified, the default domain path (domain.yml) will be used for both input and output files.\n\nThis command will also back-up your 2.0 domain file(s) into a different original_domain.yml file or\ndirectory labeled original_domain.\n\nNote that the slots in the migrated domain will contain mapping conditions if these\nslots are part of a form's required_slots.\n\ncautionExceptions will be raised and the migration process terminated if invalid domain files are provided or if they are\nalready in the 3.0 format, if slots or forms are missing from your original files or if the slots or forms sections\nare spread across multiple domain files.\nThis is done to avoid duplication of migrated sections in your domain files.\nPlease make sure all your slots' or forms' definitions are grouped into a single file.\n\nYou can learn more about this command by running:\n\nCopyrasa data migrate --help\n\nrasa data validate#\n\nYou can check your domain, NLU data, or story data for mistakes and inconsistencies.\nTo validate your data, run this command:\n\nCopyrasa data validate", "chunk": 49, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "71": {"text": "Copyrasa data validate\n\nThe validator searches for errors in the data, e.g. two intents that have some\nidentical training examples.\nThe validator also checks if you have any stories where different assistant actions follow from the same\ndialogue history. Conflicts between stories will prevent a model from learning the correct\npattern for a dialogue.\n\nSearching for the assistant_id key introduced in 3.5The validator will check whether the assistant_id key is present in the config file and will issue a warning if this\nkey is missing or if the default value has not been changed.\n\nIf you pass a max_history value to one or more policies in your config.yml file, provide the\nsmallest of those values in the validator command using the --max-history <max_history> flag.\n\nYou can also validate only the story structure by running this command:\n\nCopyrasa data validate stories\n\nnoteRunning rasa data validate does not test if your rules are consistent with your stories.\nHowever, during training, the RulePolicy checks for conflicts between rules and stories. Any such conflict will abort training.Also, if you use end-to-end stories, then this might not capture all conflicts. Specifically, if two user inputs\nresult in different tokens yet exactly the same featurization, then conflicting actions after these inputs\nmay exist but will not be reported by the tool.\n\nTo interrupt validation even for minor issues such as unused intents or responses, use the --fail-on-warnings flag.\n\ncheck your story namesThe rasa data validate stories command assumes that all your story names are unique!\n\nYou can use rasa data validate with additional arguments, e.g. to specify the location of your data and\ndomain files:", "chunk": 50, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "72": {"text": "Copyusage: rasa data validate [-h] [-v] [-vv] [--quiet]                          [--logging-config-file LOGGING_CONFIG_FILE]                          [--max-history MAX_HISTORY] [-c CONFIG]                          [--fail-on-warnings] [-d DOMAIN]                          [--data DATA [DATA ...]]                          {stories} ...\npositional arguments:  {stories}    stories             Checks for inconsistencies in the story files.\noptions:  -h, --help            show this help message and exit  --max-history MAX_HISTORY                        Number of turns taken into account for story structure                        validation. (default: None)  -c CONFIG, --config CONFIG                        The policy and NLU pipeline configuration of your bot.                        (default: config.yml)  --fail-on-warnings    Fail validation on warnings and errors. If omitted                        only errors will result in a non zero exit code.                        (default: False)  -d DOMAIN, --domain DOMAIN                        Domain specification. This can be a single YAML file,                        or a directory that contains several files with domain                        specifications in it. The content of these files will                        be read and merged together. (default: domain.yml)  --data DATA [DATA ...]                        Paths to the files or directories containing Rasa                        data. (default: data)\nPython Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.", "chunk": 51, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "73": {"text": "-v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)", "chunk": 52, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "74": {"text": "rasa export#\n\nTo export events from a tracker store using an event broker, run:\n\nCopyrasa export\n\nYou can specify the location of the environments file, the minimum and maximum\ntimestamps of events that should be published, as well as the conversation IDs that\nshould be published:", "chunk": 53, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "75": {"text": "Copyusage: rasa export [-h] [-v] [-vv] [--quiet]                   [--logging-config-file LOGGING_CONFIG_FILE]                   [--endpoints ENDPOINTS]                   [--minimum-timestamp MINIMUM_TIMESTAMP]                   [--maximum-timestamp MAXIMUM_TIMESTAMP]                   [--offset-timestamps-by-seconds OFFSET_TIMESTAMPS_BY_SECONDS]                   [--conversation-ids CONVERSATION_IDS]\noptions:  -h, --help            show this help message and exit  --endpoints ENDPOINTS                        Endpoint configuration file specifying the tracker                        store and event broker. (default: endpoints.yml)  --minimum-timestamp MINIMUM_TIMESTAMP                        Minimum timestamp of events to be exported. The                        constraint is applied in a 'greater than or equal'                        comparison. (default: None)  --maximum-timestamp MAXIMUM_TIMESTAMP                        Maximum timestamp of events to be exported. The                        constraint is applied in a 'less than' comparison.                        (default: None)  --offset-timestamps-by-seconds OFFSET_TIMESTAMPS_BY_SECONDS                        Offset all event timestamps by the specified amount of                        seconds. This won't modify the stored events in the                        tracker store, but only change the timestamps in the                        events exported to the broker. (default: None)  --conversation-ids CONVERSATION_IDS                        Comma-separated list of conversation IDs to migrate.                        If unset, all available conversation IDs will be                        exported. (default: None)", "chunk": 54, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "76": {"text": "Python Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.\n  -v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)", "chunk": 55, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "77": {"text": "Import conversations into Rasa X/EnterpriseThis command is most commonly used to import old conversations into Rasa X/Enterprise to annotate\nthem. Read more about importing conversations into Rasa X/Enterprise.\n\nrasa evaluate markers#\n\ncautionThis feature is currently experimental and might change or be removed in the future. Share your feedback in the forum to help us make it production-ready.\n\nThe following command applies the markers you defined in your marker configuration file,\nto pre-existing dialogues stored in your tracker store, and produces .csv files containing\nthe extracted markers and summary statistics:\n\nCopyrasa evaluate markers all extracted_markers.csv\n\nUse the following arguments to configure the marker extraction process:", "chunk": 56, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "78": {"text": "Copyusage: rasa evaluate markers [-h] [-v] [-vv] [--quiet] [--config CONFIG] [--no-stats | --stats-file-prefix [STATS_FILE_PREFIX]] [--endpoints ENDPOINTS] [-d DOMAIN] output_filename {first_n,sample,all} ...\npositional arguments:  output_filename       The filename to write the extracted markers to (CSV format).  {first_n,sample,all}    first_n             Select trackers sequentially until N are taken.    sample              Select trackers by sampling N.    all                 Select all trackers.", "chunk": 57, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "79": {"text": "optional arguments:  -h, --help            show this help message and exit  --config CONFIG       The config file(s) containing marker definitions. This can be a single YAML file, or a directory that contains several files with marker definitions in it. The content of these files will be read and                        merged together. (default: markers.yml)  --no-stats            Do not compute summary statistics. (default: True)  --stats-file-prefix [STATS_FILE_PREFIX]                        The common file prefix of the files where we write out the compute statistics. More precisely, the file prefix must consist of a common path plus a common file prefix, to which suffixes `-overall.csv` and                        `-per-session.csv` will be added automatically. (default: stats)  --endpoints ENDPOINTS                        Configuration file for the tracker store as a yml file. (default: endpoints.yml)  -d DOMAIN, --domain DOMAIN                        Domain specification. This can be a single YAML file, or a directory that contains several files with domain specifications in it. The content of these files will be read and merged together. (default:                        domain.yml)\nPython Logging Options:  -v, --verbose         Be verbose. Sets logging level to INFO. (default: None)  -vv, --debug          Print lots of debugging statements. Sets logging level to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default: None)", "chunk": 58, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "80": {"text": "rasa markers upload#\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nNew in 3.6This command is available from Rasa Pro 3.6.0 and requires Rasa Analytics Data Pipeline\n\nThis command applies to markers and their real-time processing.\nRunning this command validates the marker configuration file against the domain file and uploads the configuration to Analytics Data Pipeline", "chunk": 59, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "81": {"text": "Copyusage: rasa markers upload [-h] [-v] [-vv] [--quiet]                           [--logging-config-file LOGGING_CONFIG_FILE]                           [--config CONFIG]                           [--rasa-pro-services-url RASA_PRO_SERVICES_URL]                           [-d DOMAIN]\noptional arguments:  -h, --help            show this help message and exit  --config CONFIG       The marker configuration file(s) containing marker                        definitions. This can be a single YAML file, or a                        directory that contains several files with marker                        definitions in it. The content of these files will be                        read and merged together. (default: markers.yml)  --rasa-pro-services-url RASA_PRO_SERVICES_URL                        The URL of the Rasa Pro Services instance to upload                        markers to.Specified URL should not contain a trailing                        slash. (default: )  -d DOMAIN, --domain DOMAIN                        Domain specification. This can be a single YAML file,                        or a directory that contains several files with domain                        specifications in it. The content of these files will                        be read and merged together. (default: domain.yml)\nPython Logging Options:  You can control level of log messages printed. In addition to these  arguments, a more fine grained configuration can be achieved with  environment variables. See online documentation for more info.", "chunk": 60, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "82": {"text": "-v, --verbose         Be verbose. Sets logging level to INFO. (default:                        None)  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default:                        None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name. (default: None)\nDescription:  The `rasa markers upload` command allows you to upload markers to the Rasa Pro Services. Markers are custom conversational events that provide additional context for analysis and insights generation. By uploading markers, you can enable real-time analysis and enhance the performance of your Rasa Assistant.\nExamples:  Upload Markers to Rasa Pro Services:    rasa markers upload --config markers.yml --rasa-pro-services-url https://example.com/rasa-pro -d domain.yml", "chunk": 61, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "83": {"text": "rasa license#\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nNew in 3.3This command was introduced.\n\nUse rasa license to display information about licensing in Rasa Pro, especially information about\n3rd party dependencies licenses.\n\nHere is the list of all possible arguments:\n\nCopyusage: rasa license [-h] [-v] [-vv] [--quiet] [--logging-config-file LOGGING_CONFIG_FILE]\nDisplay licensing information.\noptions:  -h, --help            show this help message and exit\nPython Logging Options:  You can control level of log messages printed. In addition to these arguments, a more fine grained configuration can be achieved with environment variables. See online documentation for more info.\n  -v, --verbose         Be verbose. Sets logging level to INFO. (default: None)  -vv, --debug          Print lots of debugging statements. Sets logging level to DEBUG. (default: None)  --quiet               Be quiet! Sets logging level to WARNING. (default: None)  --logging-config-file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file will be set to the given name. (default: None)\n\nPrevious\u00ab Migrate From Other Tools (beta)NextConversation-Driven Development \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 62, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "84": {"text": "Version: 3.x\n\nConversation-Driven Development\n\nWhat is CDD?#\n\nConversation-Driven Development (CDD) is the process of listening to your users and using those insights to improve your AI assistant. It is the overarching best practice approach for chatbot development.\n\nDeveloping great AI assistants is challenging because users will always say something you didn't anticipate. The principle behind CDD is that in every conversation users are telling you\u2014in their own words\u2014exactly what they want. By practicing CDD at every stage of bot development, you orient your assistant towards real user language and behavior.\n\nCDD includes the following actions:\n\nShare your assistant with users as soon as possibleReview conversations on a regular basisAnnotate messages and use them as NLU training dataTest that your assistant always behaves as you expectTrack when your assistant fails and measure its performance over timeFix how your assistant handles unsuccessful conversations\n\nCDD is not a linear process; you'll circle back to the same actions over and over as you develop and improve your bot.\n\nRead more about these actions and the concept of CDD on the Rasa Blog.\n\nYou can also check out Rasa X/Enterprise, a purpose-built tool for CDD.\n\nCDD in early stages of development#\n\nIf you're at the earliest stage of bot development, it might seem like CDD has no role to play - after all, you have no conversations yet! However, there are CDD actions you can take at the very beginning of bot development:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "85": {"text": "See the best practices for NLU data and Stories for details on creating training data with CDD in mind.Give your bot to test users early on.CDD is all about listening to your users, so the earlier you find some, the better.Test users can be anyone who doesn't already know how your bot works from the inside. People on the bot development team should not be test users, since they know exactly what the bot can and can't do. Don't overinstruct your test users; they should have only as much knowledge of the bot's domain as your end users will have.Set up a CI/CD pipeline.CDD leads to frequent, smaller updates to your bot as you gather insights from bot conversations. Setting up a CI/CD pipeline early on in development will enable you to act quickly on what you see in conversations.\n\nCDD with a bot in production#\n\nOnce your bot is in production, you'll have more conversations to gain insights from. Then you can fully apply CDD actions.\nAt this stage, you can install Rasa X/Enterprise on a server\nto both deploy your bot and enable CDD with a bot in production.\n\nReview#\n\nLook in conversations for what users are really asking for.\n\nYour test users had at least some instruction about what the bot was intended to do; real users often either have no idea, or ignore instructions given to them. You can't cater to every unexpected user behavior, but you can try to address the main friction points you notice. Here are some things you could consider looking for:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "86": {"text": "Look at conversations where an \u201cout_of_scope\u201d intent or fallback behavior occurred. These could indicate a potential new skill, or just a misclassified user utterance.Look for user frustration, such as requests for transfer to a human.If the assistant was trained with UnexpecTEDIntentPolicy included in the pipeline,\nyou can look for conversations where action_unlikely_intent is predicted at any conversation turn.\nAn action_unlikely_intent is predicted when the last intent expressed by the user is\nunexpected in the current conversation context. You can also filter out such conversations by\nrunning a standalone script which does the following:Fetch real conversations from a tracker store.Run rasa test on the fetched conversations and filter conversations containing action_unlikely_intent\nin a separate warnings file. You can read more on how to interpret these warnings.Reviewing this subset of conversations can help you understand if real users have taken a\nconversation path which is not present in the training data and hence \"surprising\"\nfor machine learning policies like TEDPolicy. Adding these conversation paths (with potential\ncorrections if TEDPolicy subsequently failed) as training stories will result in more robust action prediction\nby policies such as TEDPolicy. Users are encouraged to adjust the tolerance parameter of\nUnexpecTEDIntentPolicy to control how\n\"surprising\" a conversation should be to be included in the warnings file.\n\nAnnotate#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "87": {"text": "Annotate#\n\nContinue to follow best practices for NLU as you add new user utterances from real conversations to your training data. Be careful not to overfit your NLU model to utterances like those already in your training data. This can happen when you continuously add user utterances that were already predicted correctly and with high confidence to your training data.  To avoid overfitting and help your model generalize to more diverse user utterances, add only user utterances that the model previously predicted incorrectly or with low confidence.\n\nTest#\n\nAdd successful user conversations to your test conversations. Doing this consistently will help ensure you don't introduce regressions as you make other fixes to your bot.\n\nTrack#\n\nLook for clues to success and failure to help you track your bot's performance.\n\nSome metrics are external to your bot. For example, if you are building a bot to relieve demand on a customer service call center, one metric for success could be the reduction in traffic to the call center. Others you can get directly from conversations, such as whether a user reaches a certain action that represents achieving the user goal.\n\nAutomatically tracked metrics are by nature proxy metrics; the only way to get a true measure of success would be to individually review and rate every single conversation with your bot. While this clearly isn't realistic, just keep in mind that no metric is a perfect representation of your bot's performance, so don't rely only on metrics to see where your bot needs improvement.\n\nFix#\n\nContinue to follow best practices for Stories as you expand and improve your bot's skills. Let user demand guide which skills you add and which fixes you make. Make smaller changes frequently rather than making big changes only once in a while. This will help you gauge the effectiveness of changes you're making, since you'll get user feedback more frequently. Your CI/CD pipeline should allow you to do so with confidence.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "88": {"text": "Previous\u00ab Command Line InterfaceNextGenerating NLU Data \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "89": {"text": "Version: 3.x\n\nGenerating NLU Data\n\nNLU (Natural Language Understanding) is the part of Rasa that performs\nintent classification, entity extraction, and response retrieval.\n\nNLU will take in a sentence such as \"I am looking for a French restaurant in the center\nof town\" and return structured data like:\n\nCopy{ \"intent\": \"search_restaurant\", \"entities\": { \"cuisine\": \"French\", \"location\": \"center\" }}\n\nBuilding NLU models is hard, and building ones that are production-ready is even harder.\nHere are some tips for designing your NLU training data and pipeline to get the most\nout of your bot.\n\nConversation-Driven Development for NLU#\n\nConversation-Driven Development (CDD) means letting real user conversations guide your\ndevelopment. For building a great NLU model, this means two key things:\n\nGather Real Data#\n\nWhen it comes to building out NLU training data, developers are sometimes tempted\nto use text generation tools or templates to quickly increase the number of training examples.\nThis is a bad idea for two reasons:\n\nFirst, your synthetic data won't look like the messages\nthat users actually send to your assistant, so your model will underperform.Second, by training and testing on synthetic data, you trick yourself into thinking that your\nmodel is actually performing well, and you won't notice major issues.\n\nRemember that if you use a script to generate training data, the only thing your model can\nlearn is how to reverse-engineer the script.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "90": {"text": "To avoid these problems, it is always a good idea to collect as much real user data\nas possible to use as training data. Real user messages can be messy, contain typos,\nand be far from 'ideal' examples of your intents. But keep in mind that those are the\nmessages you're asking your model to make predictions about!\nYour assistant will always make mistakes initially, but\nthe process of training & evaluating on user data will set your model up to generalize\nmuch more effectively in real-world scenarios.\n\nShare with Test Users Early#\n\nIn order to gather real data, you\u2019re going to need real user messages. A bot developer\ncan only come up with a limited range of examples, and users will always surprise you\nwith what they say. This means you should share your bot with test users outside the\ndevelopment team as early as possible.\nSee the full CDD guidelines for more details.\n\nAvoiding Intent Confusion#\n\nIntents are classified using character and word-level features extracted from your\ntraining examples, depending on what featurizers\nyou've added to your NLU pipeline. When different intents contain the same\nwords ordered in a similar fashion, this can create confusion for the intent classifier.\n\nSplitting on Entities vs Intents#\n\nIntent confusion often occurs when you want your assistant's response to be conditioned on\ninformation provided by the user. For example,\n\"How do I migrate to Rasa from IBM Watson?\" versus \"I want to migrate from Dialogflow.\"", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "91": {"text": "Since each of these messages will lead to a different response, your initial approach might be to create\nseparate intents for each migration type, e.g. watson_migration and dialogflow_migration.\nHowever, these intents are trying to achieve the same goal (migrating to Rasa) and will\nlikely be phrased similarly, which may cause the model to confuse these intents.\n\nTo avoid intent confusion, group these training examples into single migration intent and make\nthe response depend on the value of a categorical product slot that comes from an entity.\nThis also makes it easy to handle the case when no entity is provided,\ne.g. \"How do I migrate to Rasa?\" For example:\n\nCopystories:- story: migrate from IBM Watson  steps:    - intent: migration      entities:      - product    - slot_was_set:      - product: Watson    - action: utter_watson_migration\n- story: migrate from Dialogflow  steps:    - intent: migration      entities:      - product    - slot_was_set:      - product: Dialogflow    - action: utter_dialogflow_migration\n- story: migrate from unspecified  steps:    - intent: migration    - action: utter_ask_migration_product\n\nImproving Entity Recognition#\n\nWith Rasa, you can define custom entities and annotate them in your training data\nto teach your model to recognize them. Rasa also provides components\nto extract pre-trained entities, as well as other forms of training data to help\nyour model recognize and process entities.\n\nPre-trained Entity Extractors#\n\nCommon entities such as names, addresses, and cities require a large amount of training\ndata for an NLU model to generalize effectively.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "92": {"text": "Rasa provides two great options for\npre-trained extraction: SpacyEntityExtractor\nand DucklingEntityExtractor.\nBecause these extractors have been pre-trained on a large corpus of data, you can use them\nto extract the entities they support without annotating them in your training data.\n\nRegexes#\n\nRegexes are useful for performing entity extraction on structured patterns such as 5-digit\nU.S. zip codes. Regex patterns can be used to generate features for the NLU model to learn,\nor as a method of direct entity matching.\nSee Regular Expression Features\nfor more information.\n\nLookup Tables#\n\nLookup tables are processed as a regex pattern that checks if any of the lookup table\nentries exist in the training example. Similar to regexes, lookup tables can be used\nto provide features to the model to improve entity recognition, or used to perform\nmatch-based entity recognition. Examples of useful applications of lookup tables are\nflavors of ice cream, brands of bottled water, and even sock length styles\n(see Lookup Tables).\n\nSynonyms#\n\nAdding synonyms to your training data is useful for mapping certain entity values to a\nsingle normalized entity. Synonyms, however, are not meant for improving your model's\nentity recognition and have no effect on NLU performance.\n\nA good use case for synonyms is when normalizing entities belonging to distinct groups.\nFor example, in an assistant that asks users what insurance policies they're interested\nin, they might respond with \"my truck,\" \"a car,\" or \"I drive a batmobile.\"\nIt would be a good idea to map truck, car, and batmobile to the normalized value\nauto so that the processing logic will only need to account for a narrow set of\npossibilities (see synonyms).", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "93": {"text": "Synonyms can also be used to standardize the extracted entities. A synonym for iPhone can\nmap iphone or IPHONE to the synonym without adding these options in the synonym examples.\n\nHandling Edge Cases#\n\nMisspellings#\n\nComing across misspellings is inevitable, so your bot needs an effective way to\nhandle this. Keep in mind that the goal is not to correct misspellings, but to\ncorrectly identify intents and entities. For this reason, while a spellchecker may\nseem like an obvious solution, adjusting your featurizers and training data is often\nsufficient to account for misspellings.\n\nAdding a character-level featurizer provides\nan effective defense against spelling errors by accounting for parts of words, instead\nof only whole words. You can add character level featurization to your pipeline by\nusing the char_wb analyzer for the CountVectorsFeaturizer, for example:\n\nCopypipeline:# <other components>- name: CountVectorsFeaturizer  analyze: char_wb  min_ngram: 1  max_ngram: 4# <other components>\n\nIn addition to character-level featurization, you can add common misspellings to\nyour training data.\n\nDefining an Out-of-scope Intent#\n\nIt is always a good idea to define an out_of_scope intent in your bot to capture\nany user messages outside of your bot's domain. When an out_of_scope intent is\nidentified, you can respond with messages such as \"I'm not sure how to handle that,\nhere are some things you can ask me...\" to gracefully guide the user towards a\nsupported skill.\n\nShipping Updates#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "94": {"text": "Shipping Updates#\n\nTreat your data like code. In the same way that you would never ship code updates\nwithout reviews, updates to your training data should be carefully reviewed because\nof the significant influence it can have on your model's performance.\n\nUse a version control system such as Github or Bitbucket to track changes to your\ndata and rollback updates when necessary.\n\nBe sure to build tests for your NLU models to evaluate performance as training data\nand hyper-parameters change. Automate these tests in a CI pipeline such as Jenkins\nor Git Workflow to streamline your development process and ensure that only\nhigh-quality updates are shipped.\n\nPrevious\u00ab Conversation-Driven DevelopmentNextWriting Conversation Data \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "95": {"text": "Version: 3.x\n\nWriting Conversation Data\n\nConversation data includes the stories and rules that make up the training data for your Rasa assistant's dialogue management model. Well-written conversation data allows your assistant to reliably follow conversation paths you've laid out and generalize to unexpected paths.\n\nDesigning Stories#\n\nWhen designing stories, there are two groups of conversational interactions that need\nto be accounted for: happy and unhappy paths. Happy paths describe when the user is\nfollowing the conversation flow as you'd expect and always providing the necessary\ninformation when prompted. However, users will often deviate from happy\npaths with questions, chit chat, or other asks. We call these unhappy path.\n\nIt's important for your bot to handle unhappy paths gracefully, but it's also impossible\nto predict what path a given user might take.\nOften, developers will try to account for every possible diverging path when designing\nunhappy paths. Planning for every possible state in a state machine (many of which will never be reached)\nrequires a lot of extra work and increases training time significantly.\n\nInstead, we recommend taking a conversation-driven development\napproach when designing unhappy paths.\nConversation-Driven Development promotes sharing your bot as early as possible with test users and\ncollecting real conversation data that tells you exactly how users diverge from the\nhappy paths. From this data, you can create stories to accomplish what the user is\nrequesting and start to think about ways to guide them back into a happy path.\n\nWhen to Write Stories vs. Rules#\n\nRules are a type of training data used by the dialogue manager for\nhandling pieces of conversations that should always follow the same path.\n\nRules can be useful when implementing:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "96": {"text": "Rules can be useful when implementing:\n\nOne-turn interactions: Some messages do not require any context to answer them.\nRules are an easy way to map intents to responses, specifying fixed answers to these messages.Fallback behavior:\nIn combination with the FallbackClassifier,\nyou can write rules to respond to low-confidence user messages with a certain fallback behavior.Forms: Both activating and submitting a form will often follow a fixed path.\nYou can also write rules to handle unexpected input during a form.\n\nBecause rules do not generalize to unseen conversations, you should reserve them for\nsingle-turn conversation snippets, and use stories to train on multi-turn\nconversations.\n\nAn example of a rule where the bot returns a fixed response \"utter_greet\" to a user\nmessage with intent \"greet\" would be:\n\nCopyrules:- rule: Greeting Rule  steps:  - intent: greet  - action: utter_greet\n\nFor multiple-turn interactions, you should define a story, for example:\n\nCopystories: - story: Greeting and ask user how they're doing   steps:   - intent: greet   - action: utter_greet   - action: utter_ask_how_doing   - intent: doing_great   - action: utter_happy\n\nManaging the Conversation Flow#\n\nHere are some tips for managing the conversation flow in your stories:\n\nWhen to Use Slots to Influence Conversations#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "97": {"text": "When to Use Slots to Influence Conversations#\n\nSlots act as your bot\u2019s memory. When you define a slot, you can define whether a\nslot should influence the conversation or not.\nSlots with the property influence_conversation set to false can only store\ninformation. Slots with the property influence_conversation set to true can affect\nthe dialogue flow based on the information stored in it.\n\nSlots can be set after every user message based on slot mappings.\nThey can also be set by a custom action run in response to a user message.\nAll slots which influence the conversation need to be added to your stories or rules.\nFor example, you can use a boolean slot set by a custom action to control the dialogue\nflow based on its value using the following stories:\n\nCopystories:- story: Welcome message, premium user  steps:   - intent: greet   - action: action_check_profile   - slot_was_set:     - premium_account: true   - action: utter_welcome_premium\n- story: Welcome message, basic user  steps:   - intent: greet   - action: action_check_profile   - slot_was_set:     - premium_account: false   - action: utter_welcome_basic   - action: utter_ask_upgrade\n\nIn cases where you don't want a slot to affect the conversation flow, you should\nset the slot's property influence_conversation to false. You do not need to\ninclude slot_was_set events for slots in your stories which do not influence the\nconversation.\n\nImplementing Branching Logic#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "98": {"text": "Implementing Branching Logic#\n\nWhen writing stories, sometimes the next action will depend on a value returned in one of your custom\nactions. In these cases, it's important to find the right balance between returning slots and\nusing custom action code directly to affect what your bot does next.\n\nIn cases where a value is used only to determine the bot's response, consider embedding the\ndecision logic inside a custom action as opposed to using a featurized slot in your\nstories. This can help reduce overall complexity and make your stories easier to manage.\n\nFor example, you can convert these stories:\n\nCopystories:- story: It's raining now  steps:  - intent: check_for_rain  - action: action_check_for_rain  - slot_was_set:    - raining: true  - action: utter_is_raining  - action: utter_bring_umbrella\n- story: It isn't raining now  steps:  - intent: check_for_rain  - action: action_check_for_rain  - slot_was_set:    - raining: false  - action: utter_not_raining  - action: utter_no_umbrella_needed\n\ninto a single story:\n\nCopystories:- story: check for rain  steps:  - intent: check_for_rain  - action: action_check_for_rain\n\nwith the custom action code:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "99": {"text": "with the custom action code:\n\nCopydef run(self, dispatcher, tracker, domain):    is_raining = check_rain() if is_raining:        dispatcher.utter_message(template=\"utter_is_raining\")        dispatcher.utter_message(template=\"utter_bring_umbrella\") else:        dispatcher.utter_message(template=\"utter_not_raining\")        dispatcher.utter_message(template=\"utter_no_umbrella_needed\") return []\n\nIn cases where the value is used to influence the action flow going forward,\nreturn a featurized slot to determine the stories. For example, if you want to collect\ninformation about new users, but not returning ones, your stories might look like this:\n\nCopystories:- story: greet new user  steps:  - intent: greet  - action: check_user_status  - slot_was_set:    - new_user: true  - action: utter_greet  - action: new_user_form  - active_loop: new_user_form  - active_loop: null\n- story: greet returning user  steps:  - intent: greet  - action: check_user_status  - slot_was_set:    - new_user: false  - action: utter_greet  - action: utter_how_can_help\n\nUsing OR statements and Checkpoints#\n\nOR statements and checkpoints\ncan be useful for reducing the number of stories you have to write. However, they should\nbe used with caution. Overusing OR statements or checkpoints will slow down training,\nand creating too many checkpoints can make your stories hard to understand.\n\nOR statements#\n\nIn stories where different intents or slot events are handled by your bot in the same way,\nyou can use OR statements as an alternative to creating a new story.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "100": {"text": "For example, you can merge these two stories:\n\nCopystories:- story: newsletter signup  steps:  - intent: signup_newsletter  - action: utter_ask_confirm_signup  - intent: affirm  - action: action_signup_newsletter\n- story: newsletter signup, confirm via thanks  steps:  - intent: signup_newsletter  - action: utter_ask_confirm_signup  - intent: thanks  - action: action_signup_newsletter\n\ninto a single story with an OR statement:\n\nCopystories:- story: newsletter signup with OR  steps:  - intent: signup_newsletter  - action: utter_ask_confirm_signup  - or:    - intent: affirm    - intent: thanks  - action: action_signup_newsletter\n\nAt training time, this story will be split into the two original stories.\n\nconsider restructuring dataIf you notice that you are using OR statements frequently\nin your stories, consider restructuring your intents to reduce their granularity and\nmore broadly capture user messages.\n\nCheckpoints#\n\nCheckpoints are useful for modularizing your stories into separate blocks that are\nrepeated often. For example, if you want your bot to ask for user feedback at the end of\neach conversation flow, you can use a checkpoint to avoid having to include the feedback\ninteraction at the end of each story:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "101": {"text": "Copystories:- story: beginning of conversation  steps:  - intent: greet  - action: utter_greet  - intent: goodbye  - action: utter_goodbye  - checkpoint: ask_feedback\n- story: user provides feedback  steps:  - checkpoint: ask_feedback  - action: utter_ask_feedback  - intent: inform  - action: utter_thank_you  - action: utter_anything_else\n- story: user doesn't have feedback  steps:  - checkpoint: ask_feedback  - action: utter_ask_feedback  - intent: deny  - action: utter_no_problem  - action: utter_anything_else\n\ndo not overuseCheckpoints are meant to make it easier to re-use certain sections of conversation in lots\nof different stories. We highly discourage using checkpoints inside existing checkpoints,\nas this increases training time significantly and makes your stories difficult to understand.\n\nCreating Logical Breaks in Stories#\n\nWhen designing conversation flows, it is often tempting to create long story\nexamples that capture a complete conversational interaction from start to finish.\nIn many cases, this will increase the number of training stories required\nto account for branching paths. Instead, consider separating your\nlonger stories into smaller conversational blocks that handle sub-tasks.\n\nA happy path story for handling a lost credit card might look like:", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "102": {"text": "A happy path story for handling a lost credit card might look like:\n\nCopystories:- story: Customer loses a credit card, reviews transactions, and gets a new card  steps:  - intent: card_lost  - action: check_transactions  - slot_was_set:    - reviewed_transactions: [\"starbucks\"]  - action: utter_ask_fraudulent_transactions  - intent: inform  - action: action_update_transactions  - intent: affirm  - action: utter_confirm_transaction_dispute  - action: utter_replace_card  - action: mailing_address_form  - active_loop: mailing_address  - active_loop: null  - action: utter_sent_replacement  - action: utter_anything_else  - intent: affirm  - action: utter_help\n\nHandling a lost credit card involves a series of sub-tasks, namely\nchecking spending history for fraudulent transactions, confirming a mailing\naddress for a replacement card, and then following up with the user\nwith any additional requests. In this conversation arc, there are\nseveral places where the bot prompts for user input, creating\nbranching paths that need to be accounted for.\n\nFor example, when prompted with \"utter_ask_fraudulent_transactions\",\nthe user might respond with a \"deny\" intent if none are applicable.\nThe user might also choose to respond with a \"deny\" intent when asked\nif there's anything else the bot can help them with.\n\nWe can separate out this long story into several smaller stories as:", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "103": {"text": "We can separate out this long story into several smaller stories as:\n\nCopystories:- story: Customer loses a credit card  steps:  - intent: card_lost  - action: utter_card_locked  - action: spending_history_form  - active_loop: spending_history_form  - active_loop: null  - slot_was_set:    - reviewed_transactions: [\"starbucks\"]  - action: utter_ask_fraudulent_transactions\n- story: Customer reviews transactions and gets a new card  steps:  - action: utter_ask_fraudulent_transactions  - intent: inform  - action: action_update_transactions  - slot_was_set:    - reviewed_transactions: [\"target\", \"starbucks\"]  - intent: affirm  - action: utter_confirm_transaction_dispute  - action: utter_replace_card  - action: mailing_address_form  - active_loop: mailing_address  - active_loop: null  - action: utter_sent_replacement  - action: utter_anything_else\n- story: Customer has something else they need help with  steps:  - action: utter_anything_else  - intent: affirm  - action: utter_help\n\nHandling Context Switching#\n\nOften, users will not respond with the information you ask of them and instead deviate\nfrom the happy path with unrelated questions. Using\nCDD to understand\nwhat unhappy paths your users are taking, you can create stories for handling context\nswitching.\n\nUsing Rules for Context Switching#\n\nIn some cases, such as single-turn interjections, you can handle context-switching\nusing rules instead of through stories.\n\nConsider this conversation scenario:", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "104": {"text": "Consider this conversation scenario:\n\nUser: Hi, I want to pay my credit card billBot: Can do! Which of these credit accounts do you want to make a payment towards?Bot: - Credit Account A- Credit Account BUser: Credit account BBot: How much do you want to pay?User: What's my account balance?Bot: Your current account balance is $1532.00Bot: How much do you want to pay?User: I want to pay the minimum balanceA single-turn interjection\n\nIn this example, the user is in the middle of paying their credit card bill, asks for\ntheir account balance, and is then guided back into the credit card payment form.\nBecause asking for the account balance should always get the same response regardless of context,\nyou can create a rule that will automatically be triggered inside of an existing flow:\n\nCopyrules:- rule: Check my account balance  steps:  - intent: check_account_balance  - action: action_get_account_balance\n\nBy default, the form will continue to stay active and re-prompt for the necessary\ninformation, without having to create an additional training story.\n\nUsing Stories for Context Switching#\n\nYou'll need to write additional stories for handling context switching when the\nuser's interjection requires multiple conversation turns. If you have two distinct\nconversational flows and want the user to be able to switch between the flows, you will\nneed to create stories that specify how the switching will occur and how the context\nis maintained.\n\nFor example, if you want to switch context upon a user ask and then return to the\noriginal flow after that ask is complete:", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "105": {"text": "User: Hi, I want to pay my credit card billBot: Can do! Which of these credit accounts do you want to make a payment towards?Bot: - Credit Account A- Credit Account BUser: Credit account BBot: How much do you want to pay?User: Actually, I want to make a transferBot: No problem!Bot: Who would you like to transfer money to?User: I want to send $500 to Katy ParrowBot: Successfully transferred $500 to Katy Parrow.Bot: Would you like to pay your credit card bill now?A contextual interjection\n\nYou will need to create a story that describes this context-switching interaction:\n\nCopystories:- story: Context switch from credit card payment to money transfer  steps:  - intent: pay_credit_card  - action: credit_card_payment_form  - active_loop: credit_card_payment_form  - intent: transfer_money                         # - user requests a money transfer  - active_loop: null                              # - deactivate the credit card form  - action: transfer_money_form                    # - switch to the money transfer form  - active_loop: transfer_money_form  - active_loop: null  - action: utter_continue_credit_card_payment     # - once the money transfer is completed,                                                   #   ask the user to return to the                                                   #   credit card payment form\n\nManaging Conversation Data Files#\n\nYou can provide training data to Rasa as\na single file or as a directory containing multiple files.\nWhen writing stories and rules, it's usually a good idea to create separate\nfiles based on the types of conversations being represented.", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "106": {"text": "For example, you might create a file chitchat.yml for handling chitchat,\nand a faqs.yml file for FAQs.\nRefer to our rasa-demo bot\nfor examples of story file management in complex assistants.\n\nUsing Interactive Learning#\n\nInteractive learning makes it easy to write stories by talking to your bot and providing feedback.\nThis is a powerful way to explore what your bot can do, and the easiest way to fix any mistakes\nit makes. One advantage of machine learning-based dialogue is that when\nyour bot doesn't know how to do something yet, you can just teach it!\n\nIn Rasa, you can run interactive learning in the command line with\nrasa interactive.\n\nCommand-line Interactive Learning#\n\nThe CLI command rasa interactive will start interactive learning on the command line.\nIf your bot has custom actions, make sure to also\nrun your action server in a separate terminal window.\n\nIn interactive mode, you will be asked to confirm every intent and action prediction\nbefore the bot proceeds. Here's an example:\n\nCopy? Next user input:  hello\n? Is the NLU classification for 'hello' with intent 'hello' correct?  Yes\n------Chat History\n #    Bot                        You\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1    action_listen\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2                                    hello                         intent: hello 1.00------\n? The bot wants to run 'utter_greet', correct?  (Y/n)\n\n\nYou'll be able to see the conversation history and slot values at each step of the conversation.\n\nIf you type y to approve a prediction, the bot will continue. If you type n, you will\nbe given the chance to correct the prediction before continuing:", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "107": {"text": "Copy? What is the next action of the bot?  (Use arrow keys) \u00bb <create new action>   1.00 utter_greet   0.00 ...   0.00 action_back   0.00 action_deactivate_loop   0.00 action_default_ask_affirmation   0.00 action_default_ask_rephrase   0.00 action_default_fallback   0.00 action_listen   0.00 action_restart   0.00 action_session_start   0.00 action_two_stage_fallback   0.00 utter_cheer_up   0.00 utter_did_that_help   0.00 utter_goodbye   0.00 utter_happy   0.00 utter_iamabot\n\nAt any point, you can use Ctrl-C to access the menu, allowing you to create more stories and export the\ndata from the stories you've created so far. \n\nCopy? Do you want to stop?  (Use arrow keys) \u00bb Continue   Undo Last   Fork   Start Fresh   Export & Quit\n\nPrevious\u00ab Generating NLU DataNextChitchat and FAQs \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "108": {"text": "Version: 3.x\n\nChitchat and FAQs\n\nFAQ assistants are the simplest assistants to build and typically the first kind of assistant anyone builds. This page is a guide to the concepts and training data you need to handle non-contextual questions like FAQs and chitchat.\n\nFAQs and chitchat are two cases where the conversational assistant responds with a fixed set of messages, and the assistant should always answer the same way,\nno matter what has happened previously in the conversation.\nFor example, in the following conversation, every question can be asked at any point in the conversation,\nwith the answer being independent of anything the user has said previously.\n\nUser: What's your nameBot: My name is Sara!User: Which languages can I build assistants in?Bot: You can use Rasa to build assistants in any language you want!User: What\u2019s Rasa X/Enterprise?Bot: Rasa X/Enterprise is a tool to learn from real conversations and improve your assistant.Chitchat\n\nStep-by-step Guide on Using Response Selector for FAQs and Chitchat#\n\nTo handle FAQs and chitchat you'll need a rule-based dialogue management policy\n(the RulePolicy) and an easy way\nto return the appropriate response for a question (the ResponseSelector).\n\n1. Updating the configuration#\n\nFor FAQs and chitchat, you always want the assistant to respond the same way every time\nthe same type of question is asked. Rules allow you to do exactly that.\nTo use rules, the you need to add the RulePolicy to your policies in your configuration file:\n\nconfig.ymlCopypolicies:# other policies- name: RulePolicy", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "109": {"text": "config.ymlCopypolicies:# other policies- name: RulePolicy\n\nNext, include the ResponseSelector in your NLU pipeline in your configuration file.\nThe ResponseSelector requires a featurizer and intent classifier to work, so\nit should come after these components in your pipeline, for example:\n\nconfig.ymlCopypipeline:  - name: WhitespaceTokenizer  - name: RegexFeaturizer  - name: LexicalSyntacticFeaturizer  - name: CountVectorsFeaturizer  - name: CountVectorsFeaturizer    analyzer: char_wb    min_ngram: 1    max_ngram: 4  - name: DIETClassifier    epochs: 100  - name: EntitySynonymMapper  - name: ResponseSelector    epochs: 100\n\nBy default, the ResponseSelector will build a single retrieval model for all retrieval intents.\nTo retrieve responses for FAQs and chitchat separately, use multiple ResponseSelector components\nand specify the retrieval_intent key:\n\nconfig.ymlCopypipeline:# Other components- name: ResponseSelector  epochs: 100  retrieval_intent: faq- name: ResponseSelector  epochs: 100  retrieval_intent: chitchat\n\n2. Defining Retrieval Intents and the ResponseSelector#\n\nConsider an example where you have 20 different FAQs. Although each question is represented as an individual intent, all FAQ intents are handled the same way in the dialogue. For each FAQ intent, the assistant retrieves the proper response depending on which question has been asked.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "110": {"text": "Instead of writing 20 rules, you can use a single action, e.g. utter_faq to handle all FAQs with a single rule by grouping them together under a single retrieval intent\ncalled e.g. faq.\n\nThe single action uses the output of the\nResponseSelector to return\nthe correct response for the specific FAQ that the user asked.\n\n3. Creating rules#\n\nYou need to write only one rule for each retrieval intent. All intents\ngrouped under that retrieval intent will then be handled the same way.\nThe action name starts with utter_ and ends with the retrieval intent's name.\nWrite rules for responding to FAQs and chitchat:\n\nrules.ymlCopyrules:  - rule: respond to FAQs    steps:    - intent: faq    - action: utter_faq  - rule: respond to chitchat    steps:    - intent: chitchat    - action: utter_chitchat\n\nThe actions utter_faq and utter_chitchat will use the ResponseSelector's prediction to return the actual response message.\n\n4. Updating the NLU Training Data#\n\nNLU training examples for the ResponseSelector look the same as\nregular training examples, except that their names must refer to the retrieval\nintent they are grouped under:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "111": {"text": "nlu.ymlCopynlu:  - intent: chitchat/ask_name    examples: |      - What is your name?      - May I know your name?      - What do people call you?      - Do you have a name for yourself?  - intent: chitchat/ask_weather    examples: |      - What's the weather like today?      - Does it look sunny outside today?      - Oh, do you mind checking the weather for me please?      - I like sunny days in Berlin.\n\nBe sure to update your domain file to include the added chitchat intent:\n\ndomain.ymlCopyintents:# other intents- chitchat\n\n5. Defining the responses#\n\nResponses for the ResponseSelector follow the same naming convention as\nretrieval intents. Besides this, they can have all the characteristics of\nnormal bot response. For the chitchat intents\nlisted above, our responses could look like:\n\ndomain.ymlCopyresponses:  utter_chitchat/ask_name:  - image: \"https://i.imgur.com/zTvA58i.jpeg\"    text: Hello, my name is Retrieval Bot.  - text: I am called Retrieval Bot!  utter_chitchat/ask_weather:  - text: Oh, it does look sunny right now in Berlin.    image: \"https://i.imgur.com/vwv7aHN.png\"  - text: I am not sure of the whole week but I can see the sun is out today.\n\nSummary#\n\nOnce you've done the following, you can train your bot and try it out!", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "112": {"text": "Once you've done the following, you can train your bot and try it out!\n\n Add RulePolicy to your policies and ResponseSelector to your pipeline in config.yml Add at least one rule for responding to FAQs/chitchat Add examples for your FAQs/chitchat intents Add responses for your FAQs/chitchat intents Update the intents in your domain\n\nNow, your assistant should be able to respond correctly and consistently to FAQs or chitchat, even if these interjections happen while your assistant is helping the user with another task.\n\nPrevious\u00ab Writing Conversation DataNextHandling Business Logic \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "113": {"text": "Version: 3.x\n\nHandling Business Logic\n\nConversational assistants often need to ask users for information in order to help them. You can use Forms to collect the required user information and fulfill a request.\n\nConversational assistants often support user goals that involve collecting required information\nfrom the user before doing something for them. For example, a restaurant search bot would need to gather a few pieces of information\nabout the user's preferences to find them a suitable restaurant:\n\nUser: Help me find a restaurantBot: What cuisine?User: I'm looking for Tuscan foodBot: How many people?User: 5Bot: Do you want to sit outside?User: YesBot: All done!Bot: I am going to run a restaurant search using the following parameters:Bot: - cuisine: Tuscan- num_people: 5- outdoor_seating: TrueFinding a restaurant\n\nThis page is a guide on handling the business logic of collecting user information to fulfill a request.\nIn the example above, business logic includes needing to know the user's preferred cuisine, party size, and seating preference.\nThe examples on this page come from the formbot example bot.\n\nStep-by-step Guide on Using Forms to Handle Business Logic#\n\nForms work by prompting the user for information until it has gathered all required information.\nThe information is stored in slots. Once all the required slots are filled,\nthe bot fulfills the user's original request.\n\n1. Defining the form#\n\nTo define a form, you will need to define:\n\nSlot mappings: The required info to collectResponses: How your bot should ask for each piece of information\n\nSlot Mappings#\n\nFor the restaurant search example, we want to collect the following information\nfrom the user:\n\ncuisinenumber of peoplewhether they want to sit outside or not", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "114": {"text": "cuisinenumber of peoplewhether they want to sit outside or not\n\nYou define a form in your domain by specifying a list of required slots under the form name:\n\ndomain.ymlCopyforms:  restaurant_form:    required_slots:        - cuisine        - num_people        - outdoor_seating\n\nThese slots need to be added to your domain's slots section, along with slot mappings which define how the slots can be filled. For any slot filled from_entity, the entity also needs to be added\nto the domain. Slots filled by forms should usually not influence\nthe conversation, so set influence_conversation to `false:\n\ndomain.ymlCopyentities:  - cuisine  - numberslots:  cuisine:    type: text    mappings:    - type: from_entity      entity: cuisine  num_people:    type: float    mappings:    - type: from_entity      entity: number  outdoor_seating:    type: bool    mappings:    - type: from_intent      intent: affirm      value: true      conditions:       - active_loop: restaurant_form         requested_slot: outdoor_seating    - type: from_intent      intent: deny      value: false      conditions:      - active_loop: restaurant_form        requested_slot: outdoor_seating\n\nThe number slot is filled from an entity. Entities like numbers\ncan be extracted by DucklingEntityExtractor. To use it, add  DucklingEntityExtractor\nto your NLU pipeline:\n\nconfig.ymlCopylanguage: enpipeline:# other components- name: DucklingEntityExtractor  dimensions: [\"number\"]\n\nSlot Mappings with Conditions#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "115": {"text": "Slot Mappings with Conditions#\n\nThe outdoor_seating slot is\nfilled based on the user's intent: If it is affirm, it'll be true, if it is\ndeny, it'll be false. \n\nHowever, the slot should only be set to true or false if the user was responding to the question, Do you want to sit outside?.\nTo enforce this condition, the conditions for the outdoor_seating slot requires that restaurant_form is active and that the requested slot is outdoor_seating.\nIf there were no conditions and the user had sent a message with the affirm or deny intent earlier in the conversation,\nthe outdoor_seating slot would already be filled when the form was activated. Therefore the form would not prompt the user for their outdoor seating preference. See mapping conditions for more information.\n\nValidating Slots#\n\nOften, you'll want to validate the user's input before accepting it,\nfor example by checking if the given cuisine is in your assistant's database\nof available cuisines.\nSee the docs on validating form input for more information\nabout validation actions.\n\nRequesting Slots#\n\nTo specify how the bot should ask for the required information,\nyou define responses called utter_ask_{slotname} in your domain:\n\ndomain.ymlCopyresponses:  utter_ask_cuisine:    - text: \"What cuisine?\"  utter_ask_num_people:    - text: \"How many people?\"  utter_ask_outdoor_seating:    - text: \"Do you want to sit outside?\"\n\n2. Updating the configuration#\n\nA form's happy path should be defined as a rule which means you'll need to add the RulePolicy\nto your policies:\n\nconfig.ymlCopypolicies:  - name: RulePolicy", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "116": {"text": "config.ymlCopypolicies:  - name: RulePolicy\n\n3. Creating rules#\n\nThe form itself takes care of the logic around asking the user for all\nthe required information, so\nyou need only two rules for a form's happy path:\nOne that defines when it starts, and one that defines what happens when it has been filled.\nFor the restaurant search example, in real life the assistant would look up\na restaurant based on the user's preferences.\nIn this case, the bot will utter a response with the details\nthat would be used for a search.\n\nrules.ymlCopyrules:  - rule: activate restaurant form    steps:      - intent: request_restaurant   # intent that triggers form activation      - action: restaurant_form      # run the form      - active_loop: restaurant_form # this form is active\n  - rule: submit form    condition:    - active_loop: restaurant_form   # this form must be active    steps:      - action: restaurant_form      # run the form      - active_loop: null            # the form is no longer active because it has been filled      - action: utter_submit         # action to take after the form is complete      - action: utter_slots_values   # action to take after the form is complete\n\nBy splitting up the activation and submission of the form,\nthe rules will still apply if the user provides\nunexpected input or interrupts\nthe form with chitchat.\n\n4. Updating the NLU training data#\n\nYou'll need to add examples for the intent that should activate the form, as well as\nexamples for how the user will provide the required information.\n\nForm Activation Intent(s)#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "117": {"text": "Form Activation Intent(s)#\n\nYou need to provide training examples for the\nintent(s) that should activate the form.\nAdd examples for the intent request_restaurant:\n\nnlu.ymlCopynlu:- intent: request_restaurant  examples: |    - im looking for a restaurant    - can i get [swedish](cuisine) food in any area    - a restaurant that serves [caribbean](cuisine) food    - id like a restaurant    - im looking for a restaurant that serves [mediterranean](cuisine) food    - can i find a restaurant that serves [chinese](cuisine)\n\nSlots filled with from_entity can by default be filled by any user utterance, regardless of the intent, as\nlong as the correct entity is extracted. That means that if the user provides the cuisine entity as part of\ntheir first message, the slot will be filled at the beginning of the form and the bot will not\nask them for the cuisine again.\n\nForm Filling Intent(s)#\n\nWhile the form is filling slots, it will not pay attention to which intent was predicted\nunless a slot mapping explicitly requires or excludes an intent.\n\nFor the restaurant search example, the outdoor_seating slot is mapped to two intents,\nso you need to add training data for these intents.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "118": {"text": "For the cuisine and number slots, no intent is specified, so you can add examples to a generic inform intent. You need\nto annotate the cuisine entity so that DIETClassifier can\nlearn to extract it. You don't need to annotate the number entity since DucklingEntityExtractor is a rule-based extractors\nthat isn't trained on your training data. Only a few examples are shown for each intent;\nfor your bot to work well, you should add more training data than is shown here:\n\nnlu.ymlCopynlu:- intent: affirm  examples: |    - Yes    - yes, please    - yup- intent: deny  examples: |    - no don't    - no    - no I don't want that\n- intent: inform  examples: |    - [afghan](cuisine) food    - how bout [asian oriental](cuisine)    - what about [indian](cuisine) food    - uh how about [turkish](cuisine) type of food    - um [english](cuisine)    - im looking for [tuscan](cuisine) food    - id like [moroccan](cuisine) food    - for ten people    - 2 people    - for three people    - just one person    - book for seven people    - 2 please    - nine people\n\nUpdate your domain to include these intents:\n\ndomain.ymlCopyintents:  - request_restaurant  - affirm  - deny  - inform\n\n5. Defining the responses#\n\nAdd the responses that are sent after the form has been submitted:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "119": {"text": "Add the responses that are sent after the form has been submitted:\n\ndomain.ymlCopyresponses:  utter_submit:  - text: \"All done!\"  utter_slots_values:  - text: \"I am going to run a restaurant search using the following parameters:\\n            - cuisine: {cuisine}\\n            - num_people: {num_people}\\n            - outdoor_seating: {outdoor_seating}\"\n\nSummary#\n\nForms can simplify the logic of collecting user\ninformation. To define a minimal form like the restaurant search\nexample above, this is a summary of what you'll need to do:\n\n Add the RulePolicy to config.yml Define the form with required slots in the domain Add slot mappings for all required slots in the domain Add rules for activating and submitting the form Add examples for the intent(s) to activate your form Add examples for the intent(s) to fill the required slots Define an action or response for the bot to take when the form is completed Update your domain with new intents and actions you've defined\n\nTo try out your newly defined form, retrain the bot's model by running rasa train and start rasa shell.\nBecause the DucklingEntityExtractor is being used to extract\nentities, you'll need to start Duckling in the background as well\n(see the instructions for running Duckling).\n\nPrevious\u00ab Chitchat and FAQsNextFallback and Human Handoff \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "120": {"text": "Version: 3.x\n\nFallback and Human Handoff\n\nThis is a guide on how to handle various failures of your assistant.\n\nEven if you design your bot perfectly, users will inevitably say things to your\nassistant that you did not anticipate. In these cases, your assistant will fail,\nand it's important you ensure it does so gracefully.\n\nHandling Out-of-scope Messages#\n\nTo avoid user frustration, you can handle questions you know your users may ask,\nbut for which you haven't implemented a user goal yet.\n\n1. Creating an Out-of-scope Intent#\n\nYou will need to define an out_of_scope intent in your NLU training data and add any known\nout-of-scope requests as training examples, for example:\n\nnlu.ymlCopynlu:- intent: out_of_scope  examples: |    - I want to order food    - What is 2 + 2?    - Who's the US President?\n\nAs with every intent, you should source the majority of your examples\nfrom real conversations.\n\n2. Defining the response message#\n\nYou'll need to define an out-of-scope response in the domain file.\nUsing the utterance utter_out_of_scope as the default response, that would look like:\n\ndomain.ymlCopyresponses:  utter_out_of_scope:  - text: Sorry, I can't handle that request.\n\n3. Creating an Out-of-Scope Rule#\n\nFinally, you will need to write a rule for what should happen for in out-of-scope request:\n\nrules.ymlCopyrules:- rule: out-of-scope  steps:  - intent: out_of_scope  - action: utter_out_of_scope", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "121": {"text": "Handling Specific Out-of-scope Messages#\n\nIf you observe your users asking for certain things that you'll\nwant to turn into a user goal in future, you can handle these as separate intents, to let\nthe user know you've understood their message, but don't have a solution quite yet. For example,\nif the user asks \u201cI want to apply for a job at Rasa\u201d, we can then reply with\n\u201cI understand you're looking for a job, but I'm afraid I can't handle that skill yet.\u201d\n\nSimilar to the out_of_scope intent example, you'll need to create a new intent with\ntraining examples, define the response message, and create a rule.\n\nFallbacks#\n\nAlthough Rasa will generalize to unseen messages, some\nmessages might receive a low classification confidence. Using Fallbacks will\nhelp ensure that these low confidence messages are handled gracefully, giving your\nassistant the option to either respond with a default message or attempt to disambiguate\nthe user input.\n\nNLU Fallback#\n\nTo handle incoming messages with low NLU confidence, use the\nFallbackClassifier.\nUsing this configuration, the intent nlu_fallback will be predicted when all other intent\npredictions fall below the configured confidence threshold. You can then write a rule\nfor what the bot should do when nlu_fallback is predicted.\n\n1. Updating the configuration#\n\nTo use the FallbackClassifier, add it to your NLU pipeline:\n\nconfig.ymlCopypipeline:# other components- name: FallbackClassifier  threshold: 0.7\n\n2. Defining the response message#\n\nDefine the message the bot should send when a message is classified with low confidence\nby adding a response:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "122": {"text": "domain.ymlCopyresponses:  utter_please_rephrase:  - text: I'm sorry, I didn't quite understand that. Could you rephrase?\n\n3. Creating an NLU fallback rule#\n\nThe following\nRule will ask the user to rephrase when they send a message that is\nclassified with low confidence:\n\nrules.ymlCopyrules:- rule: Ask the user to rephrase whenever they send a message with low NLU confidence  steps:  - intent: nlu_fallback  - action: utter_please_rephrase\n\nHandling Low Action Confidence#\n\nAs users might send unexpected messages,\nit is possible that their behavior will lead them down unknown conversation paths.\nRasa's machine learning policies such as the TED Policy\nare optimized to handle these unknown paths.\n\nTo handle cases when the machine learning policies can't predict the\nnext action with high confidence, you can configure the\nRule Policy to predict a\ndefault action if no Policy has a next action prediction with\nconfidence above a configurable threshold.\n\nYou can configure the action that is run in case low of action confidence as well as\nthe corresponding confidence threshold using the following steps:\n\n1. Updating the configuration#\n\nYou will need to add the RulePolicy to your policies in config.yml.\nBy default, the rule policy comes with the settings below:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "123": {"text": "config.ymlCopypolicies:- name: RulePolicy  # Confidence threshold for the `core_fallback_action_name` to apply.  # The action will apply if no other action was predicted with  # a confidence >= core_fallback_threshold  core_fallback_threshold: 0.4  core_fallback_action_name: \"action_default_fallback\"  enable_fallback_prediction: True\n\n2. Defining the default response message#\n\nTo define what your bot will say when action confidence is below the threshold,\ndefine a response utter_default:\n\ndomain.ymlCopyresponses:  utter_default:  - text: Sorry I didn't get that. Can you rephrase?\n\nWhen an action confidence is below the threshold, Rasa will run the action\naction_default_fallback. This will send the response utter_default and revert back to the\nstate of the conversation before the user message that caused the\nfallback, so it will not influence the prediction of future actions.\n\n3. Customizing the default action (optional)#\n\naction_default_fallback is a default action in Rasa that sends the\nutter_default response to the user. You can create your own custom action to use as a\nfallback (see Custom Actions for more info on custom actions).\nThe following snippet is an implementation of a custom action which does the same as\naction_default_fallback but dispatches a different template\nutter_fallback_template:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "124": {"text": "actions.pyCopyfrom typing import Any, Text, Dict, List\nfrom rasa_sdk import Action, Trackerfrom rasa_sdk.events import UserUtteranceRevertedfrom rasa_sdk.executor import CollectingDispatcher\nclass ActionDefaultFallback(Action): \"\"\"Executes the fallback action and goes back to the previous state    of the dialogue\"\"\"\n def name(self) -> Text: return ACTION_DEFAULT_FALLBACK_NAME\n async def run(        self,        dispatcher: CollectingDispatcher,        tracker: Tracker,        domain: Dict[Text, Any], ) -> List[Dict[Text, Any]]:        dispatcher.utter_message(template=\"my_custom_fallback_template\")\n # Revert user message which led to fallback. return [UserUtteranceReverted()]\n\nTwo-Stage Fallback#\n\nTo give the bot a chance to figure out what the user wants, you will usually want it to attempt to disambiguate the user's message by asking\nclarifying questions. The Two-Stage Fallback is made to handle low NLU confidence in multiple stages\nusing the following sequence:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "125": {"text": "A user message is classified with low confidenceThe user is asked to confirm the intentThe user confirms or denies the intentIf they confirm, the conversation continues as if the intent was classified\nwith high confidence from the beginning. No further fallback steps are taken.If they deny, the user is asked to rephrase their message.The user rephrases their intentIf the message is classified with high confidence, the conversation\ncontinues as if the user had this intent from the beginning.If the rephrased user message still has low confidence, the user\nis asked to confirm the intent.The user confirms or denies the rephrased intentIf they confirm, the conversation continues as if the user had this intent from the beginning.If they deny, an ultimate fallback action is triggered (e.g. a handoff to a human). The default ultimate\nfallback action is to call  action_default_fallback. This action causes the bot to utter the utter_default\nresponse and to reset the state of the conversation as if the turns that happened during the Two-Stage Fallback did not occur.\n\nThe Two-Stage-Fallback can be enabled using the following steps:\n\n1. Updating the configuration#\n\nAdd FallbackClassifier to your pipeline and the RulePolicy\nto your policy configuration:\n\nconfig.ymlCopyrecipe: default.v1pipeline:# other components- name: FallbackClassifier threshold: 0.7\npolicies:# other policies- RulePolicy\n\n2. Defining the fallback responses#\n\nTo define how your bot asks the user to rephrase their message,\ndefine  the response utter_ask_rephrase:\n\ndomain.ymlCopyresponses:  utter_ask_rephrase:  - text: I'm sorry, I didn't quite understand that. Could you rephrase?", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "126": {"text": "Rasa provides default implementations for asking which intent the user\nmeant and for asking the user to rephrase. To customize the behavior of these actions,\nsee the documentation on default actions.\n\n3. Defining a Two-Stage Fallback rule#\n\nAdd the following Rule to your training data. This rule will make sure\nthat the Two-Stage-Fallback will be activated whenever a message is received with\nlow classification confidence:\n\nrules.ymlCopyrules:- rule: Implementation of the Two-Stage-Fallback  steps:  - intent: nlu_fallback  - action: action_two_stage_fallback  - active_loop: action_two_stage_fallback\n\n4. Defining an ultimate fallback action#\n\nTo define the bot's response when the user denies the rephrased intent, define the response utter_default:\n\ndomain.ymlCopyresponses:  utter_default:  - text: I'm sorry, I can't help you.\n\nOr, you can customize action_default_fallback for more complex behavior by writing a Custom Action.\nFor example, if you want the bot to call a human and stop interacting with the user:", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "127": {"text": "actions.pyCopyfrom typing import Any, Dict, List, Text\nfrom rasa_sdk import Action, Trackerfrom rasa_sdk.events import UserUtteranceRevertedfrom rasa_sdk.executor import CollectingDispatcher\nclass ActionDefaultFallback(Action): def name(self) -> Text: return \"action_default_fallback\"\n def run(        self,        dispatcher: CollectingDispatcher,        tracker: Tracker,        domain: Dict[Text, Any], ) -> List[Dict[Text, Any]]:\n # tell the user they are being passed to a customer service agent        dispatcher.utter_message(text=\"I am passing you to a human...\")  # assume there's a function to call customer service # pass the tracker so that the agent has a record of the conversation between the user # and the bot for context        call_customer_service(tracker)  # pause the tracker so that the bot stops responding to user input return [ConversationPaused(), UserUtteranceReverted()]\n\nEvents Returned By A Custom Ultimate Fallback Action  You should include UserUtteranceReverted() as one of the events returned by your custom\naction_default_fallback. Not including this event will cause the tracker to include all events that happened\nduring the Two-Stage Fallback process which could interfere with subsequent action predictions from the bot's policy\npipeline. It is better to treat events that occurred during the Two-Stage Fallback process as if they did not happen\nso that your bot can apply its rules or memorized stories to correctly predict the next action.\n\nHuman Handoff#", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "128": {"text": "Human Handoff#\n\nAs part of your fallback action, you may want the bot to hand over to a human agent\ne.g. as the final action in Two-Stage-Fallback, or when the user explicitly asks\nfor a human. A straightforward way to achieve human handoff is to configure your\nmessaging or voice channel to switch\nwhich host it listens to based on a specific bot or user message.\n\nFor example, as the final action of Two-Stage-Fallback, the bot could ask the user,\n\"Would you like to be transferred to a human assistant?\" and if they say yes, the\nbot sends a message with a specific payload like\ne.g. \"handoff_to_human\" to the channel. When the channel sees this message, it stops listening\nto the Rasa server, and sends a message to the human channel with the transcript\nof the chat conversation up to that point.\n\nThe implementation for handing off to a human from the front end will depend on which\nchannel you're using. You can\nsee an example implementation using an adaption of the chatroom channel\nin the Financial Demo and\nHelpdesk-Assistant\nstarterpacks.\n\nSummary#\n\nTo let your assistant gracefully handle failures, you should handle known\nout-of-scope messages and add a form of fallback behavior. If you want to add human\nhandoff, you can add it in addition or as a final step in your fallback\nset up.\nHere's a summary of changes you need to make for each method:\n\nFor out-of-scope intents:\n\n Add training examples for each out-of-scope intent to your NLU data Define the out-of-scope response or action Define rules for each out-of-scope intent Add the RulePolicy to config.yml", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "129": {"text": "For single stage NLU fallback:\n\n Add FallbackClassifier to your pipeline in config.yml Define the fallback response or action Define a rule for the nlu_fallback intent Add the RulePolicy to config.yml\n\nFor handling low core confidence:\n\n Configure the RulePolicy for core fallback in config.yml Optionally customize the fallback action you configure Define an utter_default response\n\nFor Two-Stage Fallback:\n\n Add FallbackClassifier to your pipeline in config.yml Define a rule for the nlu_fallback intent that triggers the action_two_stage_fallback action Define an out-of-scope intent in your domain Add RulePolicy to config.yml\n\nFor handing off to a human:\n\n Configure your front end to switch hosts Write a custom action (which could be your fallback action) to send the handoff payload Add a rule for triggering handoff (if not part of fallback) Add RulePolicy to config.yml\n\nPrevious\u00ab Handling Business LogicNextHandling Unexpected Input \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "130": {"text": "Version: 3.x\n\nHandling Unexpected Input\n\nOne thing you can count on when building a conversational assistant is that users will say unexpected things. This page is a guide on handling unexpected input.\n\nUnexpected input is a deviation from the happy path\nthat you have defined.  For example:\n\nA user walks away in the middle of a conversation about their subscription, then comes back\nand says \"hi!\"A user asks \"Why do you need to know that?\" when the bot asks for their email address.\n\nThis page is a guide on methods for handling unexpected input that is still within your bot's domain.\nDepending on what kind of unexpected\ninput you're trying to handle, some or all of the methods describe may be applicable for you. This guide\nis not about disambiguating user input or handling out-of-scope questions; for these cases see\nthe guide on fallback and human handoff.\n\nUser Interjections#\n\nThere are two kinds of unexpected input: generic interjections, and contextual interjections.\nGeneric interjections are interruptions that should always get the same response regardless of the\nconversation context. If you already have a rule defining the response to an intent, you don't\nneed to do anything else to handle it as an interruption.  FAQs and chitchat are common generic interjections.\nA contextual interjection is one whose response depends on the conversation context.\nFor example, if a user asks \"Why do you need that?\", the answer will depend on what the bot just\nasked for.\n\nContextual Interjections#\n\nHandling contextual interjections is similar to handling contextual conversations\nin general.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "131": {"text": "Handling contextual interjections is similar to handling contextual conversations\nin general.\n\nOne common case of contextual interjections is during slot filling for form, where the user\nasks \u201cWhy do you need to know that?\u201d or \"Can you explain that?\".\nThe response should differ for each slot. For example:\n\nUser: HiBot: Hello! I am restaurant search assistant! How can I help?User: I'm looking for a restaurantBot: What cuisine?User: FrenchBot: How many people?User: Why do you need to know that?Bot: I need to know how many people are in your party to ensure the restaurant can accomodate you.Bot: How many people?A contextual interjection\n\nSince we want the requested_slot to influence the conversation,\nwe need to set the property influence_conversation of the slot requested_slot\nto true, and assign it the categorical type:\n\ndomain.ymlCopyslots:  requested_slot:    type: categorical    values:      - cuisine      - num_people      - outdoor_seating      - preferences      - feedback    influence_conversation: true    mappings:    - type: custom\n\nThis means that the dialogue model will pay attention to the value of the slot when making a prediction\n(read more about how slots influence the assistant's behaviour).\n\nYou can then write stories for specific responses to interjections based on the value of requested_slot, for example:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "132": {"text": "stories.ymlCopystories:- story: cuisine interjection  steps:  - intent: request_restaurant  - action: restaurant_form  - active_loop: restaurant_form  - slot_was_set:    - requested_slot: cuisine  - intent: explain  - action: utter_explain_cuisine  - action: restaurant_form\n- story: number of people interjection  steps:  - intent: request_restaurant  - action: restaurant_form  - active_loop: restaurant_form  - slot_was_set:    - requested_slot: num_people  - intent: explain  - action: utter_explain_num_people  - action: restaurant_form\n\nSummary#\n\nHow you handle unexpected input depends on whether the response should be\ncontext sensitive or not.\n\nFor generic interjections:\n\n Define rules for single-turn interactions Use the ResponseSelector for FAQ and chitchat interruptions\n\nFor contextual interjections:\n\n Make requested_slot a categorical slot (for forms) Write stories for context-specific responses to interjections, using slot values where applicable\n\nPrevious\u00ab Fallback and Human HandoffNextContextual Conversations \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "133": {"text": "Version: 3.x\n\nContextual Conversations\n\nTaking context into account is often key to providing a good user experience. This page is a guide to creating contextual conversation patterns.\n\nIn a contextual conversation, something beyond the previous step in the conversation\nplays a role in what should happen next. For example, if a user asks \"How many?\",\nit's not clear from the message alone what the user is asking about. In the context of the assistant saying,\n\"You've got mail!\", the response could be \"You have five letters in your mailbox\". In\nthe context of a conversation about outstanding bills, the response could be, \"You have\nthree overdue bills\". The assistant needs to know the previous action to choose the next action.\n\nTo create a context-aware conversational assistant, you need to define\nhow the conversation history affects the next response.\n\nFor example, if a user asks the example concert bot how to get started,\nthe bot responds differently based on whether or not they like music:\n\nA conversation with a user who likes music:\n\nUser: How can I get started ?Bot: I can help you find concerts and venues. Do you like music?User: yesBot: Awesome! You can ask me things like \"Find me some concerts\" or \"What's a good venue\"User likes music\n\nA conversation with a user who doesn't like music:\n\nUser: How can I get started ?Bot: I can help you find concerts and venues. Do you like music?User: noBot: Oh no!User doesn't like music\n\nStep-by-step Guide on Creating Contextual Conversation Patterns#\n\n1. Defining Slots#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "134": {"text": "1. Defining Slots#\n\nSlots are your assistant's memory. Slots store pieces of information that your\nassistant needs to refer to later and can direct the flow of the conversation\nbased on slot_was_set events. There are different types of slots,\nand each affects the conversation flow in its own way.\n\nIn the concert bot example, the likes_music slot is a boolean slot. If it is true, the bot sends an intro message. If it is false, the bot sends a different message.\nYou define a slot and its type in the domain:\n\ndomain.ymlCopyslots:  likes_music:    type: bool    mappings:    - type: custom\n\n2. Creating Stories#\n\nStories are examples of how conversations should go.\nIn the example above, the concert bot responds differently for users who like music\nand users who don't because of these two stories:\n\nstories.ymlCopystories:  - story: User likes music    steps:    - intent: how_to_get_started    - action: utter_get_started    - intent: affirm    - action: action_set_music_preference    - slot_was_set:      - likes_music: True    - action: utter_awesome\n  - story: User doesn't like music    steps:    - intent: how_to_get_started    - action: utter_get_started    - intent: deny    - action: action_set_music_preference    - slot_was_set:      - likes_music: False    - action: utter_goodbye\n\nThese stories diverge based on the user's intent (affirm or deny). Based on\nthe user's intent, a custom action sets a slot that further directs\nthe conversation.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "135": {"text": "3. Configuring the TEDPolicy#\n\nIn addition to adding stories to account for context,\nmachine learning policies can help your model generalize\nto unseen conversation paths. It is important\nto understand that using machine-learning policies does not mean letting go of control over your\nassistant. If a rule-based policy is able to make a prediction, that prediction will\nalways have a higher policy priority and will predict the next action.\n\nThe TEDPolicy is made to handle\nunexpected user behaviors. For example,\nin the conversation below (extracted from a conversation on Rasa X/Enterprise):\n\nCopystories:- story: Story from conversation with a2baab6c83054bfaa8d598459c659d2a on November 28th 2019  steps:  - checkpoint: STORY_START  - intent: greet  - action: action_greet_user  - slot_was_set:    - shown_privacy: true  - intent: ask_whoisit  - action: action_chitchat  - intent: ask_whatspossible  - action: action_chitchat  - intent: telljoke  - action: action_chitchat  - intent: how_to_get_started    entities:    - product: enterprise  - slot_was_set:    - product: enterprise  - action: utter_explain_enterprise  - action: utter_also_explain_nlucore  - intent: affirm  - action: utter_explain_nlu  - action: utter_explain_core  - action: utter_direct_to_step2", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "136": {"text": "Here we can see the user has completed a few chitchat tasks first, and then ultimately\nasks how they can get started with Rasa X/Enterprise. The TEDPolicy correctly predicts that\nRasa X/Enterprise should be explained to the user, and then also takes them down the getting started\npath, without asking all the qualifying questions first.\n\nSince the machine-learning policy has generalized to this situation, you should add this story\nto your training data to continuously improve your bot and help the model generalize\nbetter in future. Rasa X/Enterprise is a tool that can help\nyou improve your bot and make it more contextual.\n\nSetting max_history#\n\nUsually, only a certain amount of context is relevant to your assistant.\nmax_history is a hyperparameter for Rasa dialogue management policies\nthat controls how many steps in a dialogue the model looks at to decide which\naction to take next.\n\nIn the story below, the user asks for help three times in a row. The first two times,\nthe bot sends the same message, but the third time, it hands them off to a human\n\nstories.ymlCopystories:  - story: user persists in asking for help    steps:    - intent: help    - action: utter_help    - intent: help    - action: utter_help    - intent: help    - action: action_human_handoff\n\nIn order for the model to learn this pattern, it needs to know at least the previous\nfour steps i.e. max_history of four. If max_history were 3, the model would not have\nenough context to see that the user had already sent two help requests, and would never\npredict the human handoff action.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "137": {"text": "You can set the max_history by passing it to your policy's settings\nin your config file, for example:\n\nconfig.ymlCopypolicies:  - name: \"TEDPolicy\"    max_history: 5\n\nYou want to make sure max_history is set high enough\nto account for the most context your assistant will need to make an accurate\nprediction about what to do next.\nFor more details see the docs on featurizers.\n\nSummary#\n\nHere's a summary of the concepts you can apply to enable your assistant to have contextual conversations:\n\n Write stories for contextual conversations Use slots to store contextual information for later use Set the max_history for your policies appropriately for the amount of context your bot needs Use the TEDPolicy for generalization to unseen conversation paths\n\nPrevious\u00ab Handling Unexpected InputNextReaching Out to the User \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "138": {"text": "Version: 3.x\n\nReaching Out to the User\n\nSometimes you want your assistant to reach out to the user without the user's prompting. For example, you might want the assistant to send a message when the user opens the chat window, or you might want to prompt the user if they haven't sent a message for a while. This page is a guide to enabling your assistant to reach out to the user proactively.\n\nReaching out first#\n\nIn most use cases, when the user opens the chat window with your assistant, you will want the\nassistant to send the first message. Doing this can give the user an idea of what the bot\ncan or can't do and set them up to have a more successful conversation.\nSome messaging or voice channels have existing configuration\noptions to send a payload to the assistant when the user first starts the conversation,\nbut you can also add this option to your own custom channel.\n\nOnce you've configured your channel to send a payload, you will need to specify how the\nassistant should react and greet the user. You can either re-use an existing intent's behavior\nfor this, or specify a new intent and rule for this. Below is a guide on how to specify a\nwelcome rule.\n\n1. Update the configuration#\n\nSince you are using a rule for this behavior, you need to add the RulePolicy\nto your configuration file:\n\nconfig.ymlCopypolicies:  # other policies  - name: RulePolicy\n\n2. Add a rule#\n\nTo have the assistant respond to the intent greet with a welcome message\nonly at the beginning of a conversation, add the following rule:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "139": {"text": "rules.ymlCopyrules:  - rule: welcome user    conversation_start: true  # this rule only applies at the beginning of a conversation    steps:      - intent: greet      - action: utter_welcome\n\n3. Add a response#\n\nFinally, add a response for the utter_welcome utter action to your domain:\n\ndomain.ymlCopyresponses:  utter_welcome:  - text: Hi there! What can I help you with today?\n\nExternal Events#\n\nSometimes you want an external device to change the course of an ongoing conversation.\nFor example, if you have a moisture-sensor attached to a Raspberry Pi, you could use it to notify\nyou when a plant needs watering via your assistant.\n\nThe examples below are from the reminderbot example bot,\nwhich includes both reminders and external events.\n\n1. Trigger an Intent#\n\nTo have an event from an external device change the course of an ongoing conversation, you can\nhave the device post to the\ntrigger_intent endpoint of your conversation.\nThe trigger_intent endpoint injects a user intent (possibly with entities) into your conversation.\nFor Rasa, it is as if you entered a message that got classified with that specific intent and entities.\nThe assistant will then predict and execute the next action as usual.\n\nFor example, the following post request would inject the intent EXTERNAL_dry_plant and the plant entity\ninto the conversation with id user123:\n\nCopycurl -H \"Content-Type: application/json\" -X POST \\  -d '{\"name\": \"EXTERNAL_dry_plant\", \"entities\": {\"plant\": \"Orchid\"}}' \\  \"http://localhost:5005/conversations/user123/trigger_intent?output_channel=latest\"", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "140": {"text": "2. Get the Conversation ID#\n\nIn a real-life scenario, your external device would get the conversation ID from an API or a database.\nIn the dry plant example, you might have a database of plants, the users that water them, and the users'\nconversation IDs. Your Raspberry Pi would get the conversation ID directly from the database.\nTo try out the reminderbot example locally, you'll need to get the conversation ID manually. See\nthe reminderbot README for more information.\n\n3. Add NLU Training Data#\n\nIn the dry plant example, your Raspberry Pi needs to send a message with the intent\nEXTERNAL_dry_plant to the trigger_intent endpoint. This intent will be reserved for use by the Raspberry Pi, so\nthere won't be any NLU training examples for it.\n\ndomain.ymlCopyintents:  - EXTERNAL_dry_plant\n\nnoteYou should name intents that come from other devices with the EXTERNAL_ prefix because it makes it\neasier to see which intents are expected to come from external devices when working with your training data.\n\n4. Update the Domain#\n\nTo tell the assistant which plant needs watering, you can define an entity that you'll post along with the intent.\nTo be able to use the entity value directly in a response, define a from_entity slot mapping for the plant slot:\n\ndomain.ymlCopyentities:  - plant\nslots:  plant:    type: text    influence_conversation: false    mappings:    - type: from_entity      entity: plant\n\n5. Add a Rule#\n\nYou'll need a rule that tells your assistant how to respond when it receives a message from the Raspberry Pi.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "141": {"text": "rules.ymlCopyrules:  - rule: warn about dry plant    steps:    - intent: EXTERNAL_dry_plant    - action: utter_warn_dry\n\n6. Add a Response#\n\nYou'll need to define the response text for utter_warn_dry:\n\ndomain.ymlCopyresponses:  utter_warn_dry:  - text: \"Your {plant} needs some water!\"\n\nThe response will use the value from the slot plant to warn about the specific plant that needs watering.\n\nTry it out#\n\nTo try out the dry plant notification example, you'll need to start a CallbackChannel.\n\ncautionExternal Events and Reminders don't work in request-response channels like the rest channel or rasa shell.\nCustom connectors for assistants implementing reminders or external events should be built\noff of the CallbackInput channel instead of the RestInput channel.See the reminderbot README\nfor instructions on how to test your reminders locally.\n\nRun this POST request to simulate the external event, using your conversation ID:\n\nCopycurl -H \"Content-Type: application/json\" -X POST -d \\'{\"name\": \"EXTERNAL_dry_plant\", \"entities\": {\"plant\": \"Orchid\"}}' \\\"http://localhost:5005/conversations/user1234/trigger_intent?output_channel=latest\"\n\nYou should see the bot respond in your channel:\n\nBot: Your Orchid needs some water!A reminder\n\nReminders#\n\nYou can have your assistant reach out to the user after a set amount of time by using Reminders.\nThe examples below are from the reminderbot example bot.\nYou can clone it and follow the instructions in README to try out the full version.\n\nScheduling Reminders#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "142": {"text": "Scheduling Reminders#\n\n1. Define a Reminder#\n\nTo schedule a reminder, you need to define a custom action that returns\nthe ReminderScheduled event. For example, the following custom action\nschedules a reminder for five minutes from now:\n\nactions.pyCopyimport datetimefrom rasa_sdk.events import ReminderScheduledfrom rasa_sdk import Action\nclass ActionSetReminder(Action): \"\"\"Schedules a reminder, supplied with the last message's entities.\"\"\"\n def name(self) -> Text: return \"action_set_reminder\"\n async def run(        self,        dispatcher: CollectingDispatcher,        tracker: Tracker,        domain: Dict[Text, Any], ) -> List[Dict[Text, Any]]:\n        dispatcher.utter_message(\"I will remind you in 5 minutes.\")\n        date = datetime.datetime.now() + datetime.timedelta(minutes=5)        entities = tracker.latest_message.get(\"entities\")\n        reminder = ReminderScheduled( \"EXTERNAL_reminder\",            trigger_date_time=date,            entities=entities,            name=\"my_reminder\",            kill_on_user_message=False, )\n return [reminder]\n\nThe first argument for the ReminderScheduled event is the reminder's name, in this case, EXTERNAL_reminder.\nThe reminder name will be used later as an intent to trigger a reaction to the reminder.\nName the reminder name with the\nEXTERNAL_ prefix to make it easier to see what's going on in your training data.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "143": {"text": "You can see that the last messages' entities are also passed to the reminder.\nThis allows the action that reacts to the reminder to make use of the entities\nfrom the user's scheduling message.\n\nFor example, if you want your assistant to remind you to call a friend, you could\nsend it a message like \"Remind me to call Paul\". If \"Paul\" is extracted as a PERSON\nentity, the action reacting to the reminder can use it to say \"Remember to call Paul!\"\n\n2. Add a Rule#\n\nTo schedule a reminder, add a rule:\n\nrules.ymlCopyrules:- rule: Schedule a reminder  steps:  - intent: ask_remind_call    entities:    - PERSON  - action: action_set_reminder\n\n3. Add Training Data#\n\nYou should add NLU training examples for scheduling the reminder:\n\nnlu.ymlCopynlu:- intent: ask_remind_call  examples: |    - remind me to call John    - later I have to call Alan    - Please, remind me to call Vova    - please remind me to call Tanja    - I must not forget to call Juste\n\nYou should also add it to your domain:\n\ndomain.ymlCopyintents:  - ask_remind_call\n\n4. Update your Pipeline#\n\nBy adding SpacyNLP and SpacyEntityExtractor to your pipeline in config.yml, you won't need to annotate any of the\nnames in your training data, since Spacy has a PERSON dimension:\n\nconfig.ymlCopypipeline:# other components- name: SpacyNLP  model: \"en_core_web_md\"- name: SpacyEntityExtractor  dimensions: [\"PERSON\"]\n\nReacting to Reminders#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "144": {"text": "Reacting to Reminders#\n\n1. Define a Reaction#\n\nThe bot reaches out to the user after receiving a\nPOST request to the trigger_intent endpoint. Reminders, however, send\nthe request to the right conversation ID automatically after a certain amount of time using\nthe name that you define in the ReminderScheduled event.\n\nTo define a reaction to the reminder, you only need to write a rule that\ntells the bot what action to take when it receives the reminder intent.\n\nIn the call reminder example, you want to use the entities that come with the\nreminder to be reminded to call specific people, so you need to write a custom\naction that does that:\n\nactions.pyCopyclass ActionReactToReminder(Action): \"\"\"Reminds the user to call someone.\"\"\"\n def name(self) -> Text: return \"action_react_to_reminder\"\n async def run(        self,        dispatcher: CollectingDispatcher,        tracker: Tracker,        domain: Dict[Text, Any], ) -> List[Dict[Text, Any]]:\n        name = next(tracker.get_slot(\"PERSON\"), \"someone\")        dispatcher.utter_message(f\"Remember to call {name}!\")\n return []\n\n2. Add a Rule#\n\nTo tell your bot what action to run when a reminder is triggered, add a rule.\n\nrules.ymlCopyrules:- rule: Trigger `action_react_to_reminder` for `EXTERNAL_reminder`  steps:  - intent: EXTERNAL_reminder  - action: action_react_to_reminder\n\n3. Add Training Data#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "145": {"text": "3. Add Training Data#\n\nYou'll need to define the intent that triggers reacting to the reminder. You don't need to add any training examples,\nsince the intent is reserved for the reminder.\n\ndomain.ymlCopyintents:- intent: EXTERNAL_reminder\n\nCancelling Reminders#\n\n1. Define an Action that Cancels a Reminder#\n\nTo cancel a reminder that you've already scheduled, you need a custom action\nthat returns the ReminderCancelled() event.\n\nReturning ReminderCancelled() cancels all the reminders that are currently scheduled.\nIf you only want to cancel certain reminders, you can specify some parameters by which to narrow down the scheduled reminders:\n\nReminderCancelled(intent=\"EXTERNAL_greet\") cancels all reminders with intent EXTERNAL_greetReminderCancelled(entities={}) cancels all reminders with the given entitiesReminderCancelled(\"...\") cancels the one unique reminder with the given name \u201c...\u201d that you supplied\nduring its creation\n\nFor the call reminder example, you can define a custom action action_forget_reminders that cancels\nall reminders:\n\nactions.pyCopyclass ForgetReminders(Action): \"\"\"Cancels all reminders.\"\"\"\n def name(self) -> Text: return \"action_forget_reminders\"\n async def run(        self, dispatcher, tracker: Tracker, domain: Dict[Text, Any] ) -> List[Dict[Text, Any]]:\n        dispatcher.utter_message(f\"Okay, I'll cancel all your reminders.\")\n # Cancel all reminders return [ReminderCancelled()]\n\ncautionAll reminders are cancelled whenever you shutdown your Rasa server.\n\n2. Add a Rule#", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "146": {"text": "2. Add a Rule#\n\nYou'll need to add a rule for cancelling a reminder.\n\nrules.ymlCopyrules:- rule: Cancel a reminder  steps:  - intent: ask_forget_reminders  - action: action_forget_reminders\n\n3. Add Training Data#\n\nYou'll need to define an intent that triggers cancelling the reminder.\n\nnlu.ymlCopynlu:- intent: ask_forget_reminders  examples: |    - Forget about the reminder    - do not remind me    - cancel the reminder    - cancel all reminders please\n\nYou should also add it to domain.yml:\n\ndomain.ymlCopyintents:- intent: ask_forget_reminders\n\nTry it Out#\n\nTo try out reminders you'll need to start a CallbackChannel.\nYou'll also need to start the action server to schedule, react to, and cancel your reminders.\nSee the reminderbot README for details.\n\nThen, if you send the bot a message like Remind me to call Paul Pots, you should get a reminder\nback five minutes later that says Remember to call Paul Pots!.\n\nPrevious\u00ab Contextual ConversationsNextConnecting to Messaging and Voice Channels \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "147": {"text": "Version: 3.x\n\nConnecting to Messaging and Voice Channels\n\nRasa provides many built-in connectors to connect to common messaging and voice channels. You can also connect to your website or app with pre-configured REST channels or build your own custom connector.\n\nConnecting to A Channel#\n\nLearn how to make your assistant available on:\n\nYour Own WebsiteFacebook MessengerSlackTelegramTwilioMicrosoft Bot FrameworkCisco Webex TeamsRocketChatMattermostGoogle Hangouts ChatCustom Connectors\n\nTesting Channels on Your Local Machine#\n\nIf you're running a Rasa server on localhost,\nmost external channels won't be able to find your server URL, since localhost is not open to the internet. \n\nTo make a port on your local machine publicly available on the internet,\nyou can use ngrok. Alternatively, see this list\ntracking and comparing other tunneling solutions.\n\nAfter installing ngrok, run:\n\nCopyngrok http 5005; rasa run\n\nWhen you follow the instructions to make your assistant available on a channel, use the ngrok URL.\nSpecifically, wherever the instructions say to use https://<host>:<port>/webhooks/<CHANNEL>/webhook,\nuse <ngrok_url>/webhooks/<CHANNEL>/webhook, replacing <ngrok_url> with the randomly generated\nURL displayed in your ngrok terminal window. For example, if connecting your bot to Slack,\nyour URL should resemble https://26e7e7744191.ngrok.io/webhooks/slack/webhook.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "148": {"text": "cautionWith the free-tier of ngrok, you can run into limits on how many connections you can make per minute.\nAs of writing this, it is set to 40 connections / minute.\n\nAlternatively you can make your assistant listen on a specific address using the -i command line\noption:\n\nCopyrasa run -p 5005 -i 192.168.69.150\n\nThis is particularly useful when your internet facing machines connect to backend servers using a VPN\ninterface.\n\nPrevious\u00ab Reaching Out to the UserNextTuning Your NLU Model \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "149": {"text": "Version: 3.x\n\nTuning Your NLU Model\n\nRasa will provide you with a suggested NLU config on initialization of the project, but as your project grows, it's likely that you will need to adjust your config to suit your training data.\n\nHow to Choose a Pipeline#\n\nIn Rasa, incoming messages are processed by a sequence of components.\nThese components are executed one after another in a so-called processing pipeline defined in your config.yml.\nChoosing an NLU pipeline allows you to customize your model and finetune it on your dataset.\n\nTo get started, you can let the\nSuggested Config feature choose a\ndefault pipeline for you.\nJust provide your bot's language in the config.yml file and leave the pipeline key\nout or empty.\n\nCopylanguage: fr  # your 2-letter language code\npipeline:# intentionally left empty\n\nSensible Starting Pipelines#\n\nIf you're starting from scratch, it's often helpful to start with pretrained word embeddings.\nPre-trained word embeddings are helpful as they already encode some kind of linguistic knowledge.\nFor example, if you have a sentence like \u201cI want to buy apples\u201d in your training data, and Rasa is asked to predict\nthe intent for \u201cget pears\u201d, your model already knows that the words \u201capples\u201d and \u201cpears\u201d are very similar.\nThis is especially useful if you don't have enough training data.\n\nIf you are getting started with a one of spaCy's supported languages,\nwe recommend the following pipeline:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "150": {"text": "Copyassistant_id: default_spacy_botlanguage: \"fr\"  # your two-letter language code\npipeline:  - name: SpacyNLP  - name: SpacyTokenizer  - name: SpacyFeaturizer  - name: RegexFeaturizer  - name: LexicalSyntacticFeaturizer  - name: CountVectorsFeaturizer  - name: CountVectorsFeaturizer    analyzer: \"char_wb\"    min_ngram: 1    max_ngram: 4  - name: DIETClassifier    epochs: 100  - name: EntitySynonymMapper  - name: ResponseSelector    epochs: 100\n\n\nIt uses the SpacyFeaturizer, which provides\npre-trained word embeddings (see Language Models).\n\nIf you don't use any pre-trained word embeddings inside your pipeline, you are not bound to a specific language\nand can train your model to be more domain specific.\n\nIf there are no word embeddings for your language or you have very domain specific terminology,\nwe recommend using the following pipeline:\n\nCopyassistant_id: default_config_botlanguage: \"fr\"  # your two-letter language code\npipeline:  - name: WhitespaceTokenizer  - name: RegexFeaturizer  - name: LexicalSyntacticFeaturizer  - name: CountVectorsFeaturizer  - name: CountVectorsFeaturizer    analyzer: \"char_wb\"    min_ngram: 1    max_ngram: 4  - name: DIETClassifier    epochs: 100  - name: EntitySynonymMapper  - name: ResponseSelector    epochs: 100", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "151": {"text": "This pipeline uses the CountVectorsFeaturizer to train\non only the training data you provide. This pipeline can handle any language in which words are\nseparated by spaces. If this is not the case for your language, check out alternatives to the\nWhitespaceTokenizer.\n\nnoteIf you want to use custom components in your pipeline, see Custom NLU Components.\n\nComponent Lifecycle#\n\nEach component processes an input and/or creates an output. The order of the components is determined by\nthe order they are listed in the config.yml; the output of a component can be used by any other component that\ncomes after it in the pipeline. Some components only produce information used by other components\nin the pipeline. Other components produce output attributes that are returned after\nthe processing has finished.\n\nFor example, for the sentence \"I am looking for Chinese food\", the output is:\n\nCopy{ \"text\": \"I am looking for Chinese food\", \"entities\": [ { \"start\": 8, \"end\": 15, \"value\": \"chinese\", \"entity\": \"cuisine\", \"extractor\": \"DIETClassifier\", \"confidence\": 0.864 } ], \"intent\": {\"confidence\": 0.6485910906220309, \"name\": \"restaurant_search\"}, \"intent_ranking\": [ {\"confidence\": 0.6485910906220309, \"name\": \"restaurant_search\"}, {\"confidence\": 0.1416153159565678, \"name\": \"affirm\"} ]}\n\nThis is created as a combination of the results of the different components in the following pipeline:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "152": {"text": "This is created as a combination of the results of the different components in the following pipeline:\n\nCopypipeline:  - name: WhitespaceTokenizer  - name: RegexFeaturizer  - name: LexicalSyntacticFeaturizer  - name: CountVectorsFeaturizer  - name: CountVectorsFeaturizer    analyzer: \"char_wb\"    min_ngram: 1    max_ngram: 4  - name: DIETClassifier  - name: EntitySynonymMapper  - name: ResponseSelector\n\nFor example, the entities attribute here is created by the DIETClassifier component.\n\nEvery component can implement several methods from the Component base class; in a pipeline these different methods\nwill be called in a specific order. Assuming we added the following pipeline to our config.yml:\n\nCopypipeline:  - name: \"Component A\"  - name: \"Component B\"  - name: \"Last Component\"\n\nThe image below shows the call order during the training of this pipeline:\n\nComponent Lifecycle\n\nBefore the first component is created using the create function, a so\ncalled context is created (which is nothing more than a python dict).\nThis context is used to pass information between the components. For example,\none component can calculate feature vectors for the training data, store\nthat within the context and another component can retrieve these feature\nvectors from the context and do intent classification.\n\nInitially the context is filled with all configuration values. The arrows\nin the image show the call order and visualize the path of the passed\ncontext. After all components are trained and persisted, the\nfinal context dictionary is used to persist the model's metadata.\n\nDoing Multi-Intent Classification#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "153": {"text": "Doing Multi-Intent Classification#\n\nYou can use multi-intent classification to predict multiple intents (e.g. check_balances+transfer_money), or to model hierarchical intent structure (e.g. feedback+positive being more similar to feedback+negative than chitchat).\n\nTo do multi-intent classification, you need to use the DIETClassifier in your pipeline.\nYou'll also need to define these flags in whichever tokenizer you are using:\n\nintent_tokenization_flag: Set it to True, so that intent labels are tokenized.intent_split_symbol: Set it to the delimiter string that splits the intent labels. In this case +, default _.\n\nHere's an example configuration:\n\nCopylanguage: \"en\"\npipeline:- name: \"WhitespaceTokenizer\"  intent_tokenization_flag: True  intent_split_symbol: \"+\"- name: \"CountVectorsFeaturizer\"- name: \"DIETClassifier\"\n\nWhen to Use Multi-Intents#\n\nLet's say you have a financial services bot and you have examples for intents check_balances and transfer_money:\n\nCopynlu:- intent: check_balances  examples: |    - How much money do I have?    - what's my account balance?\n- intent: transfer_money  examples: |    - I want to transfer money to my savings account    - transfer money\n\nHowever, your bot receives incoming messages like this one, which combine both intents:\n\nUser: How much money do I have? I want to transfer some to savings.User wants to know balance in order to transfer money", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "154": {"text": "If you see enough of these examples, you can create a new intent multi-intent check_balances+transfer_money and add the incoming examples to it, for example:\n\nCopynlu:- intent: check_balances+transfer_money  examples: |    - How much money do I have? I want to transfer some to savings.    - What's the balance on my account? I need to transfer some so I want to know how much I have\n\nnoteThe model will not predict any combination of intents for which examples are not explicitly given in training data. As accounting for every possible intent combination would result in combinatorial explosion of the number of intents, you should only add those combinations of intents for which you see enough examples coming in from real users.\n\nHow to Use Multi-Intents for Dialogue Management#\n\nMulti-intent classification is intended to help with the downstream task of action prediction after a multi-intent. There are two complementary ways to use multi intents in dialogue training data:\n\n1) Add regular stories or rules for the multi-intent. For example, given the following two rules for each individual intent: \n\nCopyrules:- rule: check account balance  steps:  - intent: check_balances  - action: action_check_balances- rule: transfer money  steps:  - intent: transfer_money  - action: action_transfer_money\n\nYou could add another rule for the multi-intent that specifies a sequence of actions to address both intents:\n\nCopyrules:- rule: check balances and transfer money  steps:  - intent: check_balances+transfer_money  - action: action_check_balances  - action: action_transfer_money\n\n2) Allow a machine-learning policy to generalize to the multi-intent scenario from single-intent stories.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "155": {"text": "When using a multi-intent, the intent is featurized for machine learning policies using multi-hot encoding. That means the featurization of check_balances+transfer_money will overlap with the featurization of each individual intent. Machine learning policies (like TEDPolicy) can then make a prediction based on the multi-intent even if it does not explicitly appear in any stories. It will typically act as if only one of the individual intents was present, however, so it is always a good idea to write a specific story or rule that deals with the multi-intent case.\n\nComparing Pipelines#\n\nRasa gives you the tools to compare the performance of multiple pipelines on your data directly.\nSee Comparing NLU Pipelines for more information.\n\nChoosing the Right Components#\n\nThere are components for entity extraction, for intent classification, response selection,\npre-processing, and others.\nIf you want to add your own component, for example to run a spell-check or to\ndo sentiment analysis, check out Custom NLU Components.\n\nA pipeline usually consists of three main parts:\n\nTokenization#\n\nYou can process whitespace-tokenized (i.e. words are separated by spaces) languages\nwith the WhitespaceTokenizer. If your language is not whitespace-tokenized, you should use a different tokenizer.\nWe support a number of different tokenizers, or you can\ncreate your own custom tokenizer.\n\nnoteSome components further down the pipeline may require a specific tokenizer. You can find those requirements\non the individual components' requires parameter. If a required component is missing inside the pipeline, an\nerror will be thrown.\n\nFeaturization#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "156": {"text": "Featurization#\n\nYou need to decide whether to use components that provide pre-trained word embeddings or not. We recommend in cases\nof small amounts of training data to start with pre-trained word embeddings. Once you have a larger amount of data\nand ensure that most relevant words will be in your data and therefore will have a word embedding, supervised\nembeddings, which learn word meanings directly from your training data, can make your model more specific to your domain.\nIf you can't find a pre-trained model for your language, you should use supervised embeddings.\n\nPre-trained Embeddings#\n\nThe advantage of using pre-trained word embeddings in your pipeline is that if you have a training example like:\n\u201cI want to buy apples\u201d, and Rasa is asked to predict the intent for \u201cget pears\u201d, your model already knows that the\nwords \u201capples\u201d and \u201cpears\u201d are very similar. This is especially useful if you don't have enough training data.\nWe support a few components that provide pre-trained word embeddings:\n\nMitieFeaturizerSpacyFeaturizerConveRTFeaturizerLanguageModelFeaturizer", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "157": {"text": "If your training data is in English, we recommend using the ConveRTFeaturizer.\nThe advantage of the ConveRTFeaturizer is that it doesn't treat each word of the user message independently, but\ncreates a contextual vector representation for the complete sentence. For example, if you\nhave a training example, like: \u201cCan I book a car?\u201d, and Rasa is asked to predict the intent for \u201cI need a ride from\nmy place\u201d, since the contextual vector representation for both examples are already very similar, the intent classified\nfor both is highly likely to be the same. This is also useful if you don't have enough training data.\n\nAn alternative to ConveRTFeaturizer is the LanguageModelFeaturizer which uses pre-trained language\nmodels such as BERT, GPT-2, etc. to extract similar contextual vector representations for the complete sentence. See\nLanguageModelFeaturizer for a full list of supported language models.\n\nIf your training data is not in English you can also use a different variant of a language model which\nis pre-trained in the language specific to your training data.\nFor example, there are chinese (bert-base-chinese) and japanese (bert-base-japanese) variants of the BERT model.\nA full list of different variants of\nthese language models is available in the\nofficial documentation of the Transformers library.\n\nspacynlp also provides word embeddings in many different languages,\nso you can use this as another alternative, depending on the language of your training data.\n\nSupervised Embeddings#", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "158": {"text": "Supervised Embeddings#\n\nIf you don't use any pre-trained word embeddings inside your pipeline, you are not bound to a specific language\nand can train your model to be more domain specific. For example, in general English, the word \u201cbalance\u201d is closely\nrelated to \u201csymmetry\u201d, but very different to the word \u201ccash\u201d. In a banking domain, \u201cbalance\u201d and \u201ccash\u201d are closely\nrelated and you'd like your model to capture that.\nYou should only use featurizers from the category sparse featurizers, such as\nCountVectorsFeaturizer, RegexFeaturizer or LexicalSyntacticFeaturizer, if you don't want to use\npre-trained word embeddings.\n\nIntent Classification / Response Selectors#\n\nDepending on your data you may want to only perform intent classification, entity recognition or response selection.\nOr you might want to combine multiple of those tasks. We support several components for each of the tasks.\nWe recommend using DIETClassifier for intent classification and entity recognition\nand ResponseSelector for response selection.", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "159": {"text": "By default all of these components consume all available features produced in the pipeline.\nHowever, sometimes it makes sense to restrict the features that are used by a specific component.\nFor example, ResponseSelector is likely to perform better if no features from the\nRegexFeaturizer or LexicalSyntacticFeaturizer are used.\nTo achieve that, you can do the following:\nSet an alias for every featurizer in your pipeline via the option alias.\nBy default the alias is set the the full featurizer class name, for example, RegexFeaturizer.\nYou can then specify, for example, on the ResponseSelector via the option featurizers what features from\nwhich featurizers should be used.\nIf you don't set the option featurizers all available features will be used.\n\nHere is an example configuration file where the DIETClassifier is using all available features and the\nResponseSelector is just using the features from the ConveRTFeaturizer and the CountVectorsFeaturizer.", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "160": {"text": "Copyassistant_id: example_featurizers_botlanguage: \"en\"\npipeline:  - name: ConveRTTokenizer  - name: ConveRTFeaturizer    alias: \"convert\"  - name: RegexFeaturizer    alias: \"regex\"  - name: LexicalSyntacticFeaturizer    alias: \"lexical-syntactic\"  - name: CountVectorsFeaturizer    alias: \"cvf-word\"  - name: CountVectorsFeaturizer    alias: \"cvf-char\"    analyzer: \"char_wb\"    min_ngram: 1    max_ngram: 4  - name: DIETClassifier    epochs: 100  - name: EntitySynonymMapper  - name: ResponseSelector    featurizers: [\"convert\", \"cvf-word\"]    epochs: 100\n\n\nEntity Extraction#\n\nEntity extraction involves parsing user messages for required pieces of information. Rasa\nprovides entity extractors for custom entities as well as pre-trained ones like dates and locations.\nHere is a summary of the available extractors and what they are best used for:\n\nComponentRequiresModelNotesDIETClassifierN/Aconditional random field on top of a transformergood for training custom entitiesCRFEntityExtractorsklearn-crfsuiteconditional random fieldgood for training custom entitiesSpacyEntityExtractorspaCyaveraged perceptronprovides pre-trained entitiesDucklingEntityExtractorrunning ducklingcontext-free grammarprovides pre-trained entitiesMitieEntityExtractorMITIEstructured SVMgood for training custom entitiesEntitySynonymMapperexisting entitiesN/Amaps known synonyms\n\nImproving Performance#\n\nHandling Class Imbalance#", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "161": {"text": "Improving Performance#\n\nHandling Class Imbalance#\n\nClassification algorithms often do not perform well if there is a large class imbalance,\nfor example if you have a lot of training data for some intents and very little training data for others.\nTo mitigate this problem, you can use a balanced batching strategy.\nThis algorithm ensures that all classes are represented in every batch, or at least in\nas many subsequent batches as possible, still mimicking the fact that some classes are more frequent than others.\nBalanced batching is used by default. In order to turn it off and use a classic batching strategy include\nbatch_strategy: sequence in your config file.\n\nCopylanguage: \"en\"\npipeline:# - ... other components- name: \"DIETClassifier\"  batch_strategy: sequence\n\nAccessing Diagnostic Data#\n\nTo gain a better understanding of what your models do, you can access intermediate results of the prediction process.\nTo do this, you need to access the diagnostic_data field of the Message\nand Prediction objects, which contain\ninformation about attention weights and other intermediate results of the inference computation.\nYou can use this information for debugging and fine-tuning, e.g. with RasaLit.\n\nAfter you've trained a model, you can access diagnostic data for DIET,\ngiven a processed message, like this:", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "162": {"text": "Copynlu_diagnostic_data = message.as_dict()[DIAGNOSTIC_DATA]\nfor component_name, diagnostic_data in nlu_diagnostic_data.items():    attention_weights = diagnostic_data[\"attention_weights\"] print(f\"attention_weights for {component_name}:\") print(attention_weights)\n    text_transformed = diagnostic_data[\"text_transformed\"] print(f\"\\ntext_transformed for {component_name}:\") print(text_transformed)\n\nAnd you can access diagnostic data for TED like this:\n\nCopyprediction = policy.predict_action_probabilities(    GREET_RULE, domain, RegexInterpreter())print(f\"{prediction.diagnostic_data.get('attention_weights')}\")\n\nConfiguring Tensorflow#\n\nTensorFlow allows configuring options in the runtime environment via\nTF Config submodule. Rasa supports a smaller subset of these\nconfiguration options and makes appropriate calls to the tf.config submodule.\nThis smaller subset comprises of configurations that developers frequently use with Rasa.\nAll configuration options are specified using environment variables as shown in subsequent sections.\n\nDeterministic Operations#", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "163": {"text": "Deterministic Operations#\n\nIf you are using GPUs and have one or more sparse featurizer(s) in\nyour pipeline, and/or use any of TEDPolicy, UnexpecTEDIntentPolicy, DIETClassifier,\nor ResponseSelector, training and testing will fail if you set the environment variable\nTF_DETERMINISTIC_OPS=1, because there are no deterministic GPU implementations of\nunderlying tensorflow ops tf.sparse.sparse_dense_matmul,\ntf.nn.sparse_softmax_cross_entropy_with_logits,\nand tf.math.unsorted_segment ops. For more information see here\n\nFor the above reasons, the models are also not guaranteed to yield the exact same\nperformance when trained on GPU across multiple runs. This even applies to situations where training is run\nmultiple times on the same training data, with the same config\nand random seeds set appropriately, while evaluating on a standard held-out test set.\nInternal experiments have shown the following fluctuation in model performance when trained and evaluated on a held-out\ntest set on a variety of datasets (experiments were run 5 times on each dataset):", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "164": {"text": "Copy+-----------------------+------------+------------------+------------------+-------------------+| Task,                 | Number of  | Average standard | Minimum standard | Maximum standard  || Metric (Range)        | datasets   | deviation        | deviation        | deviation         |+-----------------------+------------+------------------+------------------+-------------------+| Intent Classification | 11         | 0.0042           | 2.4e-5           | 0.0176            || Macro F1 (0-1)        |            |                  |                  |                   |+-----------------------+------------+------------------+------------------+-------------------+| Entity Recognition    | 7          | 0.0019           | 0.0007           | 0.0044            || Macro F1 (0-1)        |            |                  |                  |                   |+-----------------------+------------+------------------+------------------+-------------------+| Response Selection    | 2          | 0.0098           | 0.0003           | 0.0231            || Macro F1 (0-1)        |            |                  |                  |                   |+-----------------------+------------+------------------+------------------+-------------------+| Action Selection      | 5          | 0.0025           | 0.0010           | 0.0053            || Macro F1 (0-1)        |            |                  |                  |                   |+-----------------------+------------+------------------+------------------+-------------------+| Conversation Success  | 5          | 0.0077           | 0.0052           | 0.0103            || Accuracy (0-1)        |            |                  |                  |                   |+-----------------------+------------+------------------+------------------+-------------------+", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "165": {"text": "The above experiments were run on an Nvidia Tesla P4 GPU. You can expect similar fluctuations in\nthe model performance when you evaluate on your dataset.\nAcross different pipeline configurations tested, the fluctuation is more pronounced\nwhen you use sparse featurizers in your pipeline. You can see which featurizers are sparse here,\nby checking the \"Type\" of a featurizer.\n\nModel performance on the above tasks should still be reproducible across multiple runs when\ntrained on a CPU and none of these have changed:\n\nTraining dataTest dataConfiguration pipelineRandom Seed in configuration's components.\n\nOptimizing CPU Performance#\n\nnoteWe recommend that you configure these options only if you are an advanced TensorFlow user and understand the\nimplementation of the machine learning components in your pipeline. These options affect how operations are carried\nout under the hood in Tensorflow. Leaving them at their default values is fine.\n\nDepending on the TensorFlow operations a NLU component or Core policy uses, you can leverage multi-core CPU\nparallelism by tuning these options.\n\nParallelizing One Operation#\n\nSet TF_INTRA_OP_PARALLELISM_THREADS as an environment variable to specify the maximum number of threads that can be used\nto parallelize the execution of one operation. For example, operations like tf.matmul() and tf.reduce_sum can be executed\non multiple threads running in parallel. The default value for this variable is 0 which means TensorFlow would\nallocate one thread per CPU core.\n\nParallelizing Multiple Operations#", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "166": {"text": "Parallelizing Multiple Operations#\n\nSet TF_INTER_OP_PARALLELISM_THREADS as an environment variable to specify the maximum number of threads that can be used\nto parallelize the execution of multiple non-blocking operations. These would include operations that do not have a\ndirected path between them in the TensorFlow graph. In other words, the computation of one operation does not affect the\ncomputation of the other operation. The default value for this variable is 0 which means TensorFlow would allocate one thread per CPU core.\n\nTo understand more about how these two options differ from each other, refer to this\nstackoverflow thread.\n\nOptimizing GPU Performance#\n\nLimiting GPU Memory Growth#\n\nTensorFlow by default blocks all the available GPU memory for the running process. This can be limiting if you are running\nmultiple TensorFlow processes and want to distribute memory across them. To prevent Rasa from blocking all\nof the available GPU memory, set the environment variable TF_FORCE_GPU_ALLOW_GROWTH to True.\n\nRestricting Absolute GPU Memory Available#\n\nYou may want to limit the absolute amount of GPU memory that can be used by a Rasa process.\n\nFor example, say you have two visible GPUs(GPU:0 and GPU:1) and you want to allocate 1024 MB from the first GPU\nand 2048 MB from the second GPU. You can do this by setting the environment variable TF_GPU_MEMORY_ALLOC to \"0:1024, 1:2048\".\n\nPrevious\u00ab Connecting to Messaging and Voice ChannelsNextTesting Your Assistant \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "167": {"text": "Version: 3.x\n\nTesting Your Assistant\n\nRasa lets you validate and test dialogues end-to-end by running through test stories. In addition, you can also test the dialogue management and the message processing (NLU) separately.\n\nValidating Data and Stories#\n\nData validation verifies that no mistakes or major inconsistencies appear in your domain, NLU\ndata, or story data. To validate your data, have your CI run this command:\n\nCopyrasa data validate\n\nIf you pass a max_history value to one or more policies in your config.yml file, provide the\nsmallest of those values as\n\nCopyrasa data validate --max-history <max_history>\n\nIf data validation results in errors, training a model can also fail or yield bad performance, so it's\nalways good to run this check before training a model. By including the\n--fail-on-warnings flag, this step will fail on warnings indicating more minor issues.\n\nnoteRunning rasa data validate does not test if your rules are consistent with your stories.\nHowever, during training, the RulePolicy checks for conflicts between rules and stories. Any such conflict will abort training.\n\nTo read more about the validator and all of the available options, see the documentation for\nrasa data validate.\n\nWriting Test Stories#\n\nTesting your trained model on test stories is the best way to have confidence in how your assistant\nwill act in certain situations. Written in a modified story\nformat, test stories allow you to provide entire conversations and test that, given certain\nuser input, your model will behave in the expected manner. This is especially\nimportant as you start introducing more complicated stories from user\nconversations.\n\nTest stories are like\nthe stories in your training data, but include the user message as well.\n\nHere are some examples:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "168": {"text": "Here are some examples:\n\nBasicsButton PayloadCustom ActionsForms Happy PathForms Unhappy Pathtests/test_stories.ymlCopystories:- story: A basic story test  steps:  - user: |      hello    intent: greet  - action: utter_ask_howcanhelp  - user: |     show me [chinese]{\"entity\": \"cuisine\"} restaurants    intent: inform  - action: utter_ask_location  - user: |      in [Paris]{\"entity\": \"location\"}    intent: inform  - action: utter_ask_price\n\nBy default, the command will run tests on stories from any files with names starting with test_. You can also provide\na specific test stories file or directory with the --stories argument.\nYou can test your assistant against them by running:\n\nCopyrasa test\n\nConversation testing is only as thorough and accurate as the test\ncases you include, so you should continue to grow your set of test stories\nas you make improvements to your assistant. A good rule of thumb to follow is that you should aim for your test stories\nto be representative of the true distribution of real conversations.\n\nSee the CLI documentation on rasa test for\nmore configuration options.\n\nTesting Custom ActionsCustom Actions are not executed as part of test stories. If your custom\nactions append any events to the conversation, this has to be reflected in your test story\n(e.g. by adding slot_was_set events to your test story).To test the code of your custom actions, you should write unit tests\nfor them and include these tests in your CI/CD pipeline.\n\nEvaluating an NLU Model#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "169": {"text": "Evaluating an NLU Model#\n\nIn addition to testing stories, you can also test the natural language understanding (NLU) model separately.\nOnce your assistant is deployed in the real world, it will be processing messages that it hasn't seen\nin the training data. To simulate this, you should always set aside some part of your data for testing.\nYou can either:\n\n1) use a held out test set by shuffling and splitting your NLU data\n\n2) use cross-validation, which automatically creates\nmultiple train/test splits\n\nUsing a Held-Out Test Set#\n\nIf you use the train-test\nset approach, it is best to shuffle and split your data\nusing rasa data split every time you evaluate your model, as\nopposed to using a static NLU test set, which can easily become outdated.\n\nYou can split your NLU data into train and test sets using: \n\nCopyrasa data split nlu\n\nNext, you can see how well your trained NLU model predicts the\ndata from the test set you generated, using:\n\nCopyrasa test nlu    --nlu train_test_split/test_data.yml\n\nUsing Cross-Validation#\n\nIf you've made significant changes to your NLU training data (e.g.\nsplitting an intent into two intents or adding a lot of training examples), you should run a\nfull NLU evaluation using cross-validation. Cross-validation automatically creates\nmultiple train/test splits and averages the results of evaluations on each train/test split.\nThis means all your data is evaluated during cross-validation, making cross-validation the most\nthorough way to automatically test your NLU model.\n\nTo run NLU testing in cross-validation mode run:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "170": {"text": "To run NLU testing in cross-validation mode run: \n\nCopyrasa test nlu    --nlu data/nlu    --cross-validation\n\nYou can specify the number of test/train splits used with the -f/--folds flag:\n\nCopyrasa test nlu    --nlu data/nlu    --cross-validation    --folds 5\n\nNote that during cross-validation, the NLU model will be trained for each fold,\nso cross-validation with a large data set and a high number of folds can be time-consuming.\nOn a small data set, a high number of folds can result in too few examples per intent being available for each test split.\n\nOn the other hand, if you specify a low number of folds, your data will be split into much larger chunks,\nand there will be proportionally less data to train on for each fold.\n\nChoose a number of folds that balances both considerations for your dataset size.\n\nhyperparameter tuningTo further improve your model check out this\ntutorial on hyperparameter tuning.\n\nComparing NLU Pipelines#\n\nTo get the most out of your training data, you should train and evaluate your model on different pipelines\nand different amounts of training data.\n\nTo do so, pass multiple configuration files to the rasa test command:\n\nCopyrasa test nlu --nlu data/nlu.yml   --config config_1.yml config_2.yml\n\nThis performs several steps:\n\nCreate a global 80% train / 20% test split from data/nlu.yml.Exclude a certain percentage of data from the global train split.Train models for each configuration on remaining training data.Evaluate each model on the global test split.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "171": {"text": "The above process is repeated with different percentages of training data in step 2\nto give you an idea of how each pipeline will behave if you increase the amount of training data.\nSince training is not completely deterministic, the whole process is repeated\nthree times for each configuration specified.\n\nA graph with the mean and standard deviations of\nf1-scores\nacross all runs is plotted.\nThe f1-score graph, along with all train/test sets, the trained models, classification and error reports,\nwill be saved into a folder called nlu_comparison_results.\n\nInspecting the f1-score graph can help you understand if you have enough data for your NLU model.\nIf the graph shows that f1-score is still improving when all of the training data is used,\nit may improve further with more data. But if f1-score has plateaued when all training data is used,\nadding more data may not help.\n\nIf you want to change the number of runs or exclusion percentages, you can:\n\nCopyrasa test nlu --nlu data/nlu.yml  --config config_1.yml config_2.yml  --runs 4 --percentages 0 25 50 70 90\n\nInterpreting the Output#\n\nIntent Classifiers#\n\nThe rasa test script will produce a report (intent_report.json), confusion matrix (intent_confusion_matrix.png)\nand confidence histogram (intent_histogram.png) for your intent classification model.\n\nThe report logs precision,\nrecall and\nf1-score for each intent,\nas well as providing an overall average. You can save these reports as JSON files using the --report argument.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "172": {"text": "The confusion matrix shows which intents are mistaken for others.\nAny samples which have been incorrectly predicted are logged and saved to a file called errors.json for easier debugging.\n\n\n\nThe histogram allows you to visualize the confidence for all predictions,\nwith the correct and incorrect predictions being displayed by blue and red bars respectively.\nImproving the quality of your training data will move the blue histogram bars up the plot and the\nred histogram bars down the plot. It should also help in reducing the number of red histogram bars itself.\n\n\n\nResponse Selectors#\n\nrasa test evaluates response selectors in the same way that it evaluates intent classifiers, producing a\nreport (response_selection_report.json), confusion matrix (response_selection_confusion_matrix.png),\nconfidence histogram (response_selection_histogram.png) and errors (response_selection_errors.json).\nIf your pipeline includes multiple response selectors, they are evaluated in a single report.\n\nThe report logs precision, recall and f1 measure for\neach sub-intent of a retrieval intent and provides an overall average.\nYou can save these reports as JSON files using the --report argument.\n\nEntity Extraction#\n\nrasa test reports recall, precision, and f1-score for each entity type that\nyour trainable entity extractors are trained to recognize.\n\nOnly trainable entity extractors, such as the DIETClassifier and CRFEntityExtractor are\nevaluated by rasa test. Pretrained extractors like the DucklingHTTPExtractor are not evaluated.\n\nIf you have multiple entity extractors in your pipeline, or use some custom extractors,\nmultiple entities might be associated with the same token. In this case,\nyou can use a list notation in the test files, such as", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "173": {"text": "Copystories:- story: A basic test story with multiple entities for a single token steps: - user: |        I like [ice cream][{\\\"entity\\\": \\\"food\\\"}, {\\\"entity\\\": \\\"desert\\\"}] intent: inform # ...\n\nincorrect entity annotationsIf any of your entities are incorrectly annotated, your evaluation may fail. One common problem\nis that an entity cannot stop or start inside a token.\nFor example, if you have an example for a name entity\nlike [Brian](name)'s house, this is only valid if your tokenizer splits Brian's into\nmultiple tokens.\n\nEntity Scoring#\n\nTo evaluate entity extraction we apply a simple tag-based approach. We don't consider\nBILOU tags exactly, but only the\nentity type tags on a per token basis. For location entity like \u201cnear Alexanderplatz\u201d we\nexpect the labels LOC LOC instead of the BILOU-based B-LOC L-LOC.\n\nOur approach is more lenient when it comes to evaluation, as it rewards\npartial extraction and does not penalize the splitting of entities.\nFor example, given the aforementioned entity \u201cnear Alexanderplatz\u201d and a system that extracts\n\u201cAlexanderplatz\u201d, our approach rewards the extraction of \u201cAlexanderplatz\u201d and penalizes the missed out word \u201cnear\u201d.\n\nThe BILOU-based approach, however, would label this as a complete failure since it expects Alexanderplatz\nto be labeled as a last token in an entity (L-LOC) instead of a single token entity (U-LOC). Note also that\na split extraction of \u201cnear\u201d and \u201cAlexanderplatz\u201d would get full scores on our approach and zero on the\nBILOU-based one.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "174": {"text": "Here's a comparison between the two scoring mechanisms for the phrase \u201cnear Alexanderplatz tonight\u201d:\n\nextractedSimple tags (score)BILOU tags (score)[near Alexanderplatz](loc) [tonight](time)loc loc time (3)B-loc L-loc U-time (3)[near](loc) [Alexanderplatz](loc) [tonight](time)loc loc time (3)U-loc U-loc U-time (1)near [Alexanderplatz](loc) [tonight](time)O   loc time (2)O     U-loc U-time (1)[near](loc) Alexanderplatz [tonight](time)loc O   time (2)U-loc O     U-time (1)[near Alexanderplatz tonight](loc)loc loc loc  (2)B-loc I-loc L-loc  (1)\n\nEvaluating a Dialogue Model#\n\nYou can evaluate your trained dialogue model on a set of test stories\nby using the test script:\n\nCopyrasa test core --stories test_stories.yml --out results\n\nThis will print any failed stories to results/failed_test_stories.yml.\nA story fails if at least one of the actions was predicted incorrectly.\n\nThe test script will also save a confusion matrix to a file called\nresults/story_confmat.pdf. For each action in your domain, the confusion\nmatrix shows how often the action was correctly predicted and how often an\nincorrect action was predicted instead.\n\nInterpreting the generated warnings#", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "175": {"text": "Interpreting the generated warnings#\n\nThe test script will also generate a warnings file called results/stories_with_warnings.yml.\nThis file contains all test stories for which action_unlikely_intent\nwas predicted at any conversation turn but all actions from the original story were predicted correctly.\nHowever, if a test story originally included an action_unlikely_intent, for example to ensure a rule is designed to\ntrigger the conversation path after an action_unlikely_intent but the ensemble of\npolicies failed to do so, then the corresponding story will end up in results/failed_test_stories.yml as\na failed story.\n\nThe stories are sorted by the severity of action_unlikely_intent's prediction.\nThis severity is calculated by UnexpecTEDIntentPolicy itself at prediction time.\nThe higher the severity, the more unlikely is the intent and hence reviewing that particular\nconversation path becomes more critical.\n\nNote, that action_unlikely_intent is predicted by\nUnexpecTEDIntentPolicy which employs a machine learning based model\nunder the hood and hence can result in false warnings as well. You can choose to ignore such warnings\nif the conversation paths in these stories are already present in the training stories.\n\nComparing Policy Configurations#\n\nTo choose a configuration for your dialogue model, or to choose hyperparameters for a\nspecific policy, you want to measure how well your dialogue model will generalize\nto conversations it hasn't seen before. Especially in the beginning\nof a project, when you don't have a lot of real conversations to train\nyour bot on, you may not want to exclude some to use as a test set.", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "176": {"text": "Rasa has some scripts to help you choose and fine-tune your policy configuration.\nOnce you are happy with it, you can then train your final configuration on your\nfull data set.\n\nTo do this, you first have to train models for your different\nconfigurations. Create two (or more) config files including the policies you want to\ncompare, and then provide them to the train script to train your models:\n\nCopyrasa train core -c config_1.yml config_2.yml \\  --out comparison_models --runs 3 --percentages 0 5 25 50 70 95\n\nSimilar to how the NLU model was evaluated, the above\ncommand trains the dialogue model on multiple configurations and different amounts of training data.\nFor each config file provided, Rasa will train dialogue models\nwith 0, 5, 25, 50, 70 and 95% of your training stories excluded from the training\ndata. This is repeated three times to ensure consistent results.\n\nOnce this script has finished, you can pass multiple models to the test script\nto compare the models you just trained:\n\nCopyrasa test core -m comparison_models --stories stories_folder  --out comparison_results --evaluate-model-directory\n\nThis will evaluate each model on the stories in stories_folder\n(can be either training or test set) and plot some graphs\nto show you which policy performs best. Since the previous train command\nexcluded some amount of training data to train each model,\nthe above test command can measure how well your model predicts the held-out stories.\nTo compare single policies, create config files containing only one policy each.\n\nnoteThis training process can take a long time, so we'd suggest letting it run\nsomewhere in the background where it can't be interrupted.\n\nTesting Action Code#", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "177": {"text": "Testing Action Code#\n\nThe approach used to test your action code will depend on how it is\nimplemented. For example, if you connect to external APIs, you should write integration tests to ensure\nthat those APIs respond as expected to common inputs. However you test your action code, you should\ninclude these tests in your CI pipeline so that they run each time you make changes.\n\nIf you have any questions or problems, please share them with us in the dedicated\ntesting section on our forum!\n\nEnd-To-End Testing#\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nNew in 3.5You can now use end-to-end testing to test your assistant as a whole, including dialogue management and custom actions.\n\nEnd-to-end testing is an enhanced and comprehensive CLI-based testing tool that allows you to test conversation scenarios\nwith different pre-configured contexts, execute custom actions, verify response\ntexts or names, and assert when slots are filled.\n\nEnd-to-end testing is not limited to testing only the NLU or the dialogue model and allows you to design\neffective acceptance or integration tests. The main features of end-to-end testing are:\n\nintegration with the action server: you can execute custom actions in your\ntests; the prerequisite is to start the action server in the background.test parametrization (e.g. different user profiles or other external factors): you can define multiple test fixtures\nwith different pre-filled slots and re-use them in your tests.verifying response texts or names: you can assert that the bot response text (including interpolated responses\nwith slot values and conditional response variations) or utter name\nis as expected.asserting that the bot sets the slot value as expected.", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "178": {"text": "How to write test cases#\n\nTo write test cases, you need to create a YAML file inside the tests directory of your project. The name of the file\nshould be e2e_test_cases.yml. You can also create a subdirectory inside the tests directory and place your test case\nYAML files there. These files will be automatically discovered and run by Rasa Pro, however you need to provide\nthe path to the subdirectory as positional argument to the rasa test e2e command.\n\nEach input file must contain the test_cases required key. The value of this key is a list of test cases.\nEach test case must include a name given to the test_case key and a list of test steps given to the steps key.\nA step can be either one of the following:\n\nuser: a user messagebot: a bot responseutter: a domain utteranceslot_was_set: a slot name and the value it was set to\n\nYou can also add the optional fixtures top level key if pre-filled slots are required for setting any individual\ntest case context. The fixtures key is a list of fixture names (which must be unique) and each fixture name maps to a\nlist of slot key-value pairs. If one of the test cases requires a pre-filled slot, you can add the fixture name to the\ntest case definition, by adding the fixture name to the optional fixtures key in the test case. The slot key-value\npairs will be set before the test case is run.\n\nThe following example shows a test case file with fixtures and two test cases that make use of all available steps:", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "179": {"text": "Copyfixtures: - premium: # name of the fixture must be provided and be unique - membership_type: premium  # every fixture can contain multiple slot key-value pairs - logged_in: True - standard: - logged_in: True - membership_type: standard\ntest_cases: - test_case: \"test_premium_booking\" fixtures: - premium  # re-use the name of the fixture provided in fixtures section steps: - user: \"Hi!\" - bot: \"Welcome back! How can I help you?\" - user: \"I want to book a trip.\" - utter: utter_ask_location - user: \"I would like to travel to Lisbon.\" - slot_was_set: - location: \"Lisbon\" - utter: utter_ask_date - user: \"I would like to travel on 22nd of June.\" - slot_was_set: - travel_date: \"2023-06-22\" - bot: \"Great! I will book your trip to Lisbon on 22nd of June.\" - bot: \"You saved 20% by being a premium member.\"\n - test_case: \"test_anonymous_booking\" steps: - user: \"Hi!\" - bot: \"Hey! How can I help you?\" - user: \"I want to book a trip.\" - utter: utter_ask_location - user: \"I would like to travel to Paris.\" - slot_was_set: - location: \"Paris\" - utter: utter_ask_date - user: \"I would like to travel on 2nd of April.\" - slot_was_set: - travel_date: \"2023-04-02\" - bot: \"Great! I will book your trip to Paris on 2nd of April.\" - bot: \"You can also choose to save 20% by becoming a premium member.\"", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "180": {"text": "noteIf you are using multiple consecutive slot_was_set steps in your test case, the order in which these are defined must\nmatch the order in which the slots are filled in the dialogue.\n\nHow to run the tests#\n\nTo run the end-to-end tests locally or in the CI pipeline, use the rasa test e2e command.\nThe command takes the following arguments:\n\npositional argument for the path to the test cases file or directory containing the test cases: rasa test e2e <path>\nIf unspecified, the default path is tests/e2e_test_cases.yml.optional argument for the trained model: --model <path>optional argument for retrieving the trained model from remote storage: --remote-storage <remote-storage-location>optional argument for the endpoints.yml file: --endpoints <path>optional argument for stopping the test run at first failure: rasa test e2e --fail-fastoptional argument for exporting the test results to e2e_results.yml file: rasa test e2e -o\n\nTesting custom actions#\n\nIf the test cases include custom actions, start the action server first:\n\nCopyrasa run actions && rasa test e2e\n\nHow to interpret the output#\n\nBy default, the results are always printed to stdout and the command will exit with exit code 0 (if all tests passed)\nor 1 (in case of test failures).\n\nThe output style is inspired by pytest:\n\nFailed test cases will be stacked, each highlighting the difference in identified mismatches in similar style to git diff:\nexpected messages will be preceded by + prefix, while actual messages will be preceded by - prefix.The short test summary includes a list of every failed test case name and file location in a new line.", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "181": {"text": "If -o flag is specified in the command, the results are also written to the tests/e2e_results.yml file, which will\ncontain a list of test results with the following keys:\n\nname: the name of the test casepass_status: the status of the test case, either True or Falseexpected_steps: the expected test stepsdifference: a list of differences between the expected and actual test steps\n\nPrevious\u00ab Tuning Your NLU ModelNextSetting up CI/CD \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "182": {"text": "Version: 3.x\n\nSetting up CI/CD\n\nEven though developing a contextual assistant is different from developing traditional software, you should still follow software development best practices. Setting up a Continuous Integration (CI) and Continuous Deployment (CD) pipeline ensures that incremental updates to your bot are improving it, not harming it.\n\nOverview#\n\nContinuous Integration (CI) is the practice of merging in code changes\nfrequently and automatically testing changes as they are committed. Continuous\nDeployment (CD) means automatically deploying integrated changes to a staging\nor production environment. Together, they allow you to make more frequent improvements\nto your assistant and efficiently test and deploy those changes.\n\nThis guide will cover what should go in a CI/CD pipeline, specific to a\nRasa project. How you implement that pipeline is up to you.\nThere are many CI/CD tools out there, such as GitHub Actions,\nGitLab CI/CD, Jenkins, and\nCircleCI. We recommend choosing a tool that integrates with\nwhatever Git repository you use.\n\nContinuous Integration (CI)#\n\nThe best way to improve an assistant is with frequent incremental updates.\nNo matter how small a change is, you want to be sure that it doesn't introduce\nnew problems or negatively impact the performance of your assistant.\n\nIt is usually best to run CI checks on merge / pull requests or on commit. Most tests are\nquick enough to run on every change. However, you can choose to run more\nresource-intensive tests only when certain files have been changed or when some\nother indicator is present. For example, if your code is hosted on Github,\nyou can make a test run only if the pull request has a certain label (e.g. \u201cNLU testing required\u201d).\n\nCI Pipeline Overview#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "183": {"text": "CI Pipeline Overview#\n\nYour CI pipeline should include model training and testing as steps to streamline the deployment process.\nThe first step after saving new training data is to kick off the pipeline. This can be initiated manually\nor when you create or update a pull request.\n\nNext, you need to run various sets of test to see the impact of your changes. This includes running\ntests for data validation, NLU cross validation, and story testing. For\nmore information about testing, see Testing Your Assistant.\n\nThe last step is to review the results of your test and push the changes if the tests are successful.\nOnce the new model is trained and tested, it can be deployed automatically using a Continuous\nDeployment pipeline.\n\nGitHub Actions CI Pipeline#\n\nYou can use the Rasa Train-Test Github Action\nin your CI pipeline to automatically perform data validation, training, and testing.\n\nAn example CI pipeline using the Github Action is shown below:\n\nCopyjobs: training-testing: name: Training and Testing runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: Rasa Train and Test GitHub Action uses: RasaHQ/rasa-train-test-gha@main with: requirements_file: requirements.txt data_validate: true rasa_train: true cross_validation: true rasa_test: true test_type: all publish_summary: true github_token: ${{ secrets.GITHUB_TOKEN }} - name: Upload model if: github.ref == 'refs/heads/main' uses: actions/upload-artifact@master with: name: model path: models", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "184": {"text": "In this pipeline, the Rasa Train-Test Github Action is performing data validation, model training, and story testing\nin the first step and the model file is uploaded as an artifact in the second step.\n\nThe complete list of configurable parameters for the Rasa Train-Test Github Action is available in the repository's\nREADME.\n\nWhen publish_summary is set to true, this action will automatically publish the model's test results to the associated\nPull Request as a comment:\n\n\n\nThe pull request can be approved or denied based on the evaluation results and, in many cases, you will want to automate the model's deployment if all CI checks pass. You can continue to the next section to learn more about Continuous Deployment.\n\nContinuous Deployment (CD)#\n\nTo get improvements out to your users frequently, you will want to automate as\nmuch of the deployment process as possible.\n\nCD steps usually run on push or merge to a certain branch, once CI checks have\nsucceeded.\n\nDeploying Your Rasa Model#\n\nIf you ran test stories in your CI pipeline,\nyou'll already have a trained model. You can set up your CD pipeline to upload the trained model to your\nRasa server if the CI results are satisfactory. For example, to upload a model to Rasa X/Enterprise:\n\nCopycurl -k -F \"model=@models/my_model.tar.gz\" \"https://example.rasa.com/api/projects/default/models?api_token={your_api_token}\"\n\nIf you are using Rasa X/Enterprise, you can also tag the uploaded model\nas production (or whichever deployment you want to tag if using multiple deployment environments):", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "185": {"text": "Copycurl -X PUT \"https://example.rasa.com/api/projects/default/models/my_model/tags/production\"\n\nupdates to action codeIf your update includes changes to both your model and your action\ncode, and these changes depend on each other in any way, you should not\nautomatically tag the model as production. You will first need to build and\ndeploy your updated action server, so that the new model won't e.g. call\nactions that don't exist in the pre-update action server.\n\nDeploying Your Action Server#\n\nYou can automate\nbuilding and uploading a new image for your action server\nto an image repository for each\nupdate to your action code. As noted above, be careful with\nautomatically deploying a new image tag to production if the action server\nwould be incompatible with the current production model.\n\nExample CI/CD pipelines#\n\nAs examples, see the CI/CD pipelines for\nSara,\nthe Rasa assistant that you can talk to in the Rasa Docs, and\nCarbon Bot.\nBoth use Github Actions as a CI/CD tool.\n\nThese examples are just two of many possibilities. If you have a CI/CD setup you like, please\nshare it with the Rasa community on the forum.\n\nPrevious\u00ab Testing Your AssistantNextRasa Glossary \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "186": {"text": "Version: 3.x\n\nRasa Glossary\n\nAction#\n\nA single step that a bot takes in a conversation (e.g. calling an API or sending a response back to the user).\n\nAction Server#\n\nThe server that runs custom action code, separate from Rasa. Rasa maintains the Rasa SDK in Python for implementing custom actions, although it's also possible to write custom actions in other languages.\n\nAnnotation#\n\nAdding labels to messages and conversations so that they can be used to train a model.\n\nAnonymization#\n\nThe process of replacing personally identifiable information (PII) with masked, artificial or constant text values.\nThis is done to protect the privacy of users.\n\nBusiness Logic#\n\nConditions that need to be fulfilled due to business requirements. For example: requiring a first and last name, an address, and a password before an account can be created. In a Rasa assistant, business logic is implemented using rule-based actions like forms.\n\nChitchat#\n\nA conversation pattern where the user says something that isn't directly related to their goal.\nThis can include things like greetings, asking how you are etc.\nRead about handling Chitchat and FAQs to learn how to implement this with Rasa.\n\nCMS#\n\nA way to store bot responses externally instead of including them directly in the domain. Content Management Systems decouple response text from training data. For more information, see NLG Servers.\n\nConversation-Driven Development (CDD)#\n\nThe process of using user messages and conversation data to influence the design of an assistant and train the model, combined with engineering best practices. There are 6 steps that make up CDD: Share, Review, Annotate, Fix, Track, and Test.\n\nConversation Tests#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "187": {"text": "Conversation Tests#\n\nModified story format that includes the full text of the user message in addition to the intent label. Test conversations are saved to a test set file (conversation_tests.md), which is used to evaluate the model\u2019s predictions across an entire conversation.\n\nComponent#\n\nAn element in the an assistant's NLU pipeline in the Model Configuration.\n\nIncoming messages are processed by a sequence of components called a pipeline. A component can perform tasks ranging from entity extraction to intent classification to pre-processing.\n\nConditional Response Variation#\n\nResponse variation that can only be used when the current dialogue state satisfies some constraints as defined in the domain or responses files. If there's a match between the constraints and the dialogue state, Rasa can use this variation.\n\nCustom Action#\n\nAn action written by a bot developer that can run arbitrary code, mainly to interact with external systems and APIs.\n\nDefault Action#\n\nA built-in action that comes with predefined functionality.\n\nDIET#\n\nDual Intent and Entity Transformer. The default NLU architecture used by Rasa, which performs both intent classification and entity extraction.\n\nDomain#\n\nDefines the inputs and outputs of an assistant.\n\nIt includes a list of all the intents, entities, slots, actions, and forms that the assistant knows about.\n\nEntity#\n\nKeywords that can be extracted from a user message. For example: a telephone number, a person's name, a location, the name of a product\n\nEvent#\n\nSomething that happens in a conversation. For instance, a UserUttered event represents a user entering a message, and an ActionExecuted event represents the assistant executing an action. All conversations in Rasa are represented as a sequence of events.\n\nFAQs#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "188": {"text": "FAQs#\n\nFrequently asked questions (FAQs) are common questions that your users ask. In the context of building an assistant,\nthis typically means the user sends a message and the assistant send a response without needing to consider the context of the conversation.\nRead about handling Chitchat and FAQs to learn how to implement this with Rasa.\n\nForm#\n\nA type of custom action that asks the user for multiple pieces of information.\n\nFor example, if you need a city, a cuisine, and a price range to recommend a restaurant, you can create a restaurant form to collect the information. You can describe business logic inside a form, like offering the customer a different set of menu options if they mention a food allergy.\n\nHappy / Unhappy Paths#\n\nTerms used to describe whether the user\u2019s input is expected or unexpected. If your assistant asks a user for some information and the user provides it, we call that a happy path. Unhappy paths are all possible edge cases. For example, the user refusing to give the requested input, changing the topic of conversation, or correcting something they said earlier.\n\nIntent#\n\nIn a given user message, the thing that a user is trying to convey or accomplish (e,g., greeting, specifying a location).\n\nInteractive Learning#\n\nIn the Rasa CLI, a training mode where the developer corrects and validates the assistant\u2019s predictions at every step of the conversation. The conversation can be saved to the story format and added to the assistant\u2019s training data.\n\nKnowledge Base / Knowledge Graph#\n\nA queryable database that represents complex relationships and hierarchies between objects. Knowledge Base Actions allow Rasa to fetch information from a knowledge base and use it in responses.\n\nLevel 3 Assistant#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "189": {"text": "Level 3 Assistant#\n\nAn assistant that can handle conversations more complex than simple back-and-forth exchanges. Level 3 assistants are capable of using the context of previous conversation turns to choose the appropriate next action.\n\nMessaging Channels#\n\nConnectors that integrate Rasa with external messaging platforms, where end-users can send and receive messages. Rasa includes built-in messaging channels like Slack, Facebook Messenger, and web chat, as well as the ability to create custom connectors.\n\nMinimum Viable Assistant#\n\nA basic assistant that can handle the most important happy path stories.\n\nNLG#\n\nNatural Language Generation (NLG) is the process of generating natural language messages to send to a user.\n\nRasa uses a simple template-based approach for NLG. Data-driven approaches (such as neural NLG) can be implemented by creating a custom NLG component.\n\nNLU#\n\nNatural Language Understanding (NLU) deals with parsing and understanding human language into a structured format.\n\nPipeline#\n\nThe list of NLU components (see NLU Component) that defines a Rasa assistant\u2019s NLU system. A user message is processed by each component one by one, before returning the final structured output.\n\nPolicy#\n\nRasa components that predict the dialogue system\u2019s next actionPolicies make decisions about how the conversation flow should proceed. A typical configuration includes multiple policies, and the policy with the highest confidence decides the next action to be taken in the conversation.\n\nRasa Core#\n\n(Outdated - Rasa Core and Rasa NLU were merged into one package in 1.x. The functionality of Core is now referred to as dialogue management)\n\nThe dialogue engine that decides what to do next in a conversation based on the context. Part of the Rasa library.\n\nRasa NLU#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "190": {"text": "Rasa NLU#\n\n(Outdated - Rasa Core and Rasa NLU were merged into one package in 1.x. The functionality of Rasa NLU is now referred to as NLU)\n\nRasa NLU is the part of Rasa that performs Natural Language Understanding (NLU), including intent classification and entity extraction.\n\nNLU Component#\n\nAn element in the Rasa NLU pipeline (see Pipeline) that processes incoming messages. Components perform tasks ranging from entity extraction to intent classification to pre-processing.\n\nRasa X/Enterprise#\n\nA tool for conversation-driven development. Rasa X/Enterprise helps teams share and test an assistant built with Rasa, annotate user messages, and view conversations.\n\nRetrieval Intent#\n\nA special type of intent that can be divided into smaller sub-intents. For example, an FAQ retrieval intent has sub-intents that represent each individual question the assistant knows how to answer.\n\nREST Channel#\n\nA messaging channel used to build custom connectors. Includes an input channel, where user messages can be posted to Rasa, and the ability to specify a callback URL, where the bot\u2019s response actions will be sent.\n\nResponse / Template / Utterance#\n\nA message that an assistant sends to a user. This can include text, buttons, images, and other content.\n\nRules#\n\nSpecial training data to specify rule-like behavior, where a specific condition always predicts a specific next action. Examples include\nanswering FAQs, filling Forms, or handling\nFallbacks.\n\nSlot#\n\nA key-value store that Rasa uses to track information over the course of a conversation.\n\nStory#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "191": {"text": "Story#\n\nTraining data format for the dialogue model, consisting of a conversation between a user and a bot. The user's messages are represented as annotated intents and entities, and the bot\u2019s responses are represented as a sequence of actions.\n\nTED Policy#\n\nTransformer Embedding Dialogue Policy. TED is the default machine learning-based dialogue policy used by Rasa. TED complements rule-based policies by handling previously unseen situations, where no rule exists to determine the next action.\n\nTemplate / Response / Utterance#\n\nA message template used to respond to a user. Can include text, buttons, images, and other attachments.\n\nTracker#\n\nRasa component that maintains the state of the dialogue, which is represented as a JSON object listing the events from the current session.\n\nUser Goal#\n\nThe overall goal that a user wants to achieve, e.g. looking up the answer to a question, booking an appointment, or purchasing an insurance policy.\n\nSome tools refer to the user goal as the \u201cintent,\u201d but in Rasa terminology, an intent is associated with each individual user message.\n\nWord embedding / Word vector#\n\nA vector of floating point numbers that represent the meaning of a word. Words that have similar meanings tend to have similar vectors. Word embeddings are often used as an input to machine learning algorithms.\n\nRasa Primitive#\n\nA foundational component used for structuring conversations within Rasa, such as an intent, entity, slot, form, response, action, rule, or story.\n\nPrevious\u00ab Setting up CI/CDNextDeploying a Rasa Assistant \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "192": {"text": "Version: 3.x\n\nDeploying a Rasa Assistant\n\nThis section explains when and how to deploy an assistant built with Rasa. It will allow you to make your assistant available to users and set you up with a production-ready environment.\n\nnoteAre you unfamiliar with Docker, Kubernetes and Helm? Check out \"Understanding Rasa Deployments\" on our YouTube channel.\n\nWhen to Deploy Your Assistant#\n\nThe best time to deploy your assistant and make it available to test users is once it can handle the most\nimportant happy paths or is what we call a minimum viable assistant. Then you can use incoming\nconversations to inform further development of your assistant.\n\nRecommended Deployment Method#\n\nThe Rasa Helm Chart is the production ready method to deploy\nyour assistant on a Kubernetes or Openshift cluster. For details, see the deployment instructions.\n\nCluster Requirements#\n\nTo install the Rasa Helm Chart, you need an existing\nKubernetes cluster or OpenShift cluster.\nIf you don't have one yet, you can get a managed cluster from a cloud provider like:\n\nGoogle Cloud,DigitalOcean,Microsoft Azure, orAmazon EKS.\n\nAlternative Deployment Methods#\n\nThe following deployment methods are not suited to a production deployment, but can be useful for development and testing:\n\nRunning an assistant locally on the command lineDeveloping an assistant in a Docker containerDeploying an assistant with Docker Compose\n\nPrevious\u00ab Rasa GlossaryNextDeploy Rasa \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "193": {"text": "Version: 3.x\n\nDeploy Rasa\n\nThis page explains how to deploy Rasa Open Source and Rasa Plus using Helm.\n\nnoteThe Rasa Helm Chart is open source and available in the\nhelm-charts repository.\nPlease\ncreate an issue in this\nrepository if you discover bugs or have suggestions for improvements.\n\nInstallation Requirements#\n\nCheck that you have installed the Kubernetes or OpenShift command line\ninterface (CLI). You can check this using the following command:KubernetesOpenShiftCopykubectl version --short --client\n# The output should be similar to this# Client Version: v1.19.11If this command resulted in an error, please install the\nKubernetes CLI or the\nOpenShift CLI\ndepending on the cluster you\u2019re using.Make sure that the Kubernetes / OpenShift CLI is correctly connected to\nyour cluster. You can do so by using the following commands:KubernetesOpenShiftCopykubectl version --short\n# The output should be similar to this# Client Version: v1.19.11# Server Version: v1.19.10If you get an error when executing the command, you are not connected to your\ncluster. To get the command to connect to the cluster please consult your cluster\u2019s\nadmin or the documentation of your cloud provider.Make sure you have the Helm CLI\ninstalled. To check this, run:Copyhelm version --short\n# The output should be similar to this# v3.6.0+g7f2df64If this command leads to an error, please install the\nHelm CLI.In case you are using a version <3.5 of Helm, please update to Helm version\n>=3.5.\n\nInstallation#\n\n1. Create Namespace#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "194": {"text": "Installation#\n\n1. Create Namespace#\n\nWe recommend installing Rasa in a separate\nnamespace\nto avoid interfering with existing cluster deployments. To create a new namespace\nrun the following command:\n\nKubernetesOpenShiftCopykubectl create namespace <your namespace>\n\n2. Create Values File#\n\nPrepare an empty file called rasa-values.yml which will include all your custom\nconfiguration for the installation with Helm.\n\nAll available values you can find in the Rasa Helm Chart repository.\n\nnoteThe default configuration of the Rasa chart deploys a Rasa Server, downloads a model, and serves the downloaded model.\nVisit the Rasa Helm Chart repository to check out more examples of configuration.\n\n3. Loading an initial model#\n\nThe first time you install Rasa, you may not have a model server available yet, or you may want a lightweight model for testing the deployment.\nFor this purpose, you can choose between training or downloading an initial model. By default, the Rasa chart downloads an example model from GitHub.\nTo use this option, you don't have to change anything.\n\nIf you want to define an existing model to download from a URL you define instead, update your rasa-values.yaml with the URL according to the following configuration:\n\nCopyapplicationSettings: initialModel: \"https://github.com/RasaHQ/rasa-x-demo/blob/master/models/model.tar.gz?raw=true\"\n\nnoteThe URL for the initial model download has to point to a tar.gz file and must not require authentication.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "195": {"text": "If you want to train an initial model you can do this by setting the applicationSettings.trainInitialModel to true.\nIt creates a init container that trains a model based on data located in the /app directory. If the /app directory is empty it creates a new project.\nYou can find an example that shows how to download data files from a git repository and train an initial model in the Rasa Helm Charts examples.\n\n4. Deploy Rasa Assistant#\n\nRun the following commands:\n\nCopykubectl version --short --client\n# The output should be similar to this# Client Version: v1.19.11\n\nCopy# Add the repository which contains the Rasa Helm Charthelm repo add rasa https://helm.rasa.com\n# Deploy Rasahelm install \\    --namespace <your namespace> \\    --values rasa-values.yml \\ <release name> \\    rasa/rasa\n\nRasa Open SourceRasa Plus", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "196": {"text": "Rasa Open SourceRasa Plus\n\nnoteOpenShift only: If the deployment fails and oc get events returns\n1001 is not an allowed group spec.containers[0].securityContext.securityContext.runAsUser,\nre-run the installation command with the following values:Copypostgresql: volumePermissions: securityContext: runAsUser: \"auto\" securityContext: enabled: false shmVolume: chmod: enabled: falsenginx: image: name: nginxinc/nginx-unprivileged port: 8080Then wait until the deployment is ready. If you want to check on its status, the following command\nwill block until the Rasa deployment is ready:KubernetesOpenShiftCopykubectl --namespace <your namespace> \\ wait \\    --for=condition=available \\    --timeout=20m \\    --selector app.kubernetes.io/instance=<release name> \\    deployment \n\n5. Access Rasa Assistant#\n\nBy default the Rasa deployment is exposed via the rasa (<release name>) service and accessible only within a Kubernetes cluster.\nTo access Rasa Assistant by using kubectl port-forward, use these commands:\n\nKubernetesOpenShiftCopy export SERVICE_PORT=$(kubectl get --namespace <your namespace> -o jsonpath=\"{.spec.ports[0].port}\" services <release name>)  kubectl port-forward --namespace <your namespace> svc/<release name> ${SERVICE_PORT}:${SERVICE_PORT} &\n\nYou can then access the deployment on http://127.0.0.1:${SERVICE_PORT}\n\nThe other option is to expose your deployment on NodePort and access it directly.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "197": {"text": "The other option is to expose your deployment on NodePort and access it directly.\n\nPrepare configuration that switch the rasa service to NodePort.Copy# rasa-values.yamlservice: type: \"NodePort\"Upgrade deployment.Copyhelm upgrade --namespace <NAMESPACE> --reuse-values -f rasa-values.yaml <RELEASE NAME> rasa/rasaGet the node port and address for the rasa serviceCopyexport NODE_PORT=$(kubectl get --namespace <NAMESPACE> -o jsonpath=\"{.spec.ports[0].nodePort}\" services <RELEASE NAME>)\n$ curl http://127.0.0.1:${NODE_PORT}Hello from Rasa: 2.8.7\n\nVisit the Rasa Helm Chart README to learn other ways to expose your deployment.\n\nNext Steps#\n\nVisit the Rasa Helm Chart repository where you can find examples of configuration\n\nPrevious\u00ab Deploying a Rasa AssistantNextDeploy Rasa Action Server \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "198": {"text": "Version: 3.x\n\nDeploy Rasa Action Server\n\nThis page explains how to build an Action Server Image and deploy a Rasa Action Server using Helm. The second of three steps in deploying your Rasa assistant.\n\nnoteThe Rasa Action Server chart is open source and available in the\nhelm-charts repository.\nPlease\ncreate an issue in this\nrepository if you discover bugs or have suggestions for improvements.\n\nIn the sections below you can learn how to deploy Rasa Action Server by using helm, and how to connect an Action Server deployment to a Rasa deployment.\n\nInstallation Requirements#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "199": {"text": "Installation Requirements#\n\nCheck that you have installed the Kubernetes or OpenShift command line\ninterface (CLI). You can check this using the following command:KubernetesOpenShiftCopykubectl version --short --client\n# The output should be similar to this# Client Version: v1.19.11If this command resulted in an error, please install the\nKubernetes CLI or the\nOpenShift CLI\ndepending on the cluster you\u2019re using.Make sure that the Kubernetes / OpenShift CLI is correctly connected to\nyour cluster. You can do so by using the following commands:KubernetesOpenShiftCopykubectl version --short\n# The output should be similar to this# Client Version: v1.19.11# Server Version: v1.19.10If you get an error when executing the command, you are not connected to your\ncluster. To get the command to connect to the cluster please consult your cluster\u2019s\nadmin or the documentation of your cloud provider.Make sure you have the Helm CLI\ninstalled. To check this, run:Copyhelm version --short\n# The output should be similar to this# v3.6.0+g7f2df64If this command leads to an error, please install the\nHelm CLI.In case you are using a version <3.5 of Helm, please update to Helm version\n>=3.5.\n\n1. Installation#\n\na. Create Namespace#\n\nWe recommend installing Rasa Action Server in a separate\nnamespace\nto avoid interfering with existing cluster deployments. To create a new namespace\nrun the following command:\n\nKubernetesOpenShiftCopykubectl create namespace <your namespace>\n\nb. Deploy Rasa Action Server#\n\nRun the following commands:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "200": {"text": "b. Deploy Rasa Action Server#\n\nRun the following commands:\n\nCopy# Add the repository which contains the Rasa Action Server Helm charthelm repo add rasa https://helm.rasa.com\n# Deploy Rasa Action Serverhelm install \\    --namespace <your namespace> \\ <release name> \\    rasa/rasa-action-server\n\nc. Access Rasa Action Server#\n\nBy default the Rasa Action Server deployment is exposed via the rasa-action-server (<release name>) service and accessible only within a Kubernetes cluster. You can get\nthe IP address using this command:\n\nKubernetesOpenShiftCopy export SERVICE_PORT=$(kubectl get --namespace <your namespace> -o jsonpath=\"{.spec.ports[0].port}\" services <release name>)  kubectl port-forward --namespace <your namespace> svc/<release name> ${SERVICE_PORT}:${SERVICE_PORT} &\n\nYou can then access the deployment on http://127.0.0.1:${SERVICE_PORT}\n\nnoteThe Rasa Action Server Helm chart uses the rasa-x-demo Docker image as default. In the Building an Action Server Image\nyou can learn how to build and use your custom Action Server image.\n\nBuilding an Action Server Image#\n\nIf you build an image that includes your action code and store it in a container registry, you can run it\nas part of your deployment, without having to move code between servers.\nIn addition, you can add any additional dependencies of systems or Python libraries\nthat are part of your action code but not included in the base rasa/rasa-sdk image.\n\nAutomating your Action Server Image Builds#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "201": {"text": "Automating your Action Server Image Builds#\n\nIn addition to a manually creating a new Action Server image, you can use the Rasa Action Server GitHub Action to automate image builds.\nIf GitHub Actions are new to you, it might be helpful to get familiar with GitHub Actions Documentation.\n\nThe following steps assume that you already created a GitHub repository and you have a DockerHub account.\n\nTo create a workflow for building and pushing a Docker image into a DockerHub registry:\n\nAdd GitHub Secrets with your DockerHub login name and password.\nYou can find details on how to create encrypted secrets for a repository\nin the Github docsThe example uses the following secrets:DOCKER_HUB_LOGIN - a login name for DockerHubDOCKER_HUB_PASSWORD - a password for DockerHubIn your GitHub repository create a file .github/workflows/action_server.yml.\n\nThe GitHub Action workflow below builds a new docker image every time files inside the actions/ directory have changed and the changes are pushed into the main branch.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "202": {"text": "Copyon: push: branches: - main paths: - 'actions/**'\njobs: build_and_deploy: runs-on: ubuntu-latest name: Build Action Server image and upgrade Rasa X/Enterprise deployment steps: - name: Checkout repository uses: actions/checkout@v2\n - id: action_server name: Build an action server with custom actions uses: RasaHQ/action-server-gha@main # Full list of parameters: https://github.com/RasaHQ/action-server-gha/tree/master#input-arguments with: docker_image_name: 'account_username/repository_name' docker_registry_login: ${{ secrets.DOCKER_HUB_LOGIN }} docker_registry_password: ${{ secrets.DOCKER_HUB_PASSWORD }} # More details about github context: # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context # # github.sha - The commit SHA that triggered the workflow run docker_image_tag: ${{ github.sha }}\n\nPush your changes to the main branch. After changes are pushed, the workflow will build and push a new image into the DockerHub registry.Now, you can use your new brand docker image.You can also extend your workflow, so that you do not have to manually update your Rasa X/Enterprise deployment. The example below shows how to extend your workflow with an additional step that updates a Rasa X/Enterprise Helm Chart deployment.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "203": {"text": "Copyon: push: branches: - main\njobs: build_and_deploy: runs-on: ubuntu-latest name: Build Action Server image and upgrade Rasa X/Enterprise deployment steps: [..]\n # This step shows only the example of output parameter usage # and it's not focused on deployment itself. - name: \"Upgrade a Rasa Action Server deployment\" run: |        helm upgrade --install --reuse-values \\          --set image.name=${{ steps.action_server.outputs.docker_image_name }} \\          --set image.tag=${{ steps.action_server.outputs.docker_image_tag }} rasa-action-server rasa/rasa-action-server\n\nAs you can see it's possible to use output variables from the action_server step. The steps.action_server.outputs.docker_image_name variable returns\na Docker image name and the steps.action_server.outputs.docker_image_tag variable returns a Docker image tag.\n\nMore examples on how to use and customize Rasa GitHub Actions you can find in the Rasa GitHub Actions repository.\n\nManually Building an Action Server#\n\nTo create your image:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "204": {"text": "Manually Building an Action Server#\n\nTo create your image:\n\nMake sure your actions are defined in actions/actions.py. The rasa/rasa-sdk\nimage will automatically look for the actions in this file.If your actions have any extra dependencies, create a list of them in a file,\nactions/requirements-actions.txt.Create a file named Dockerfile in your project directory,\nin which you'll extend the official SDK image, copy over your code, and add any custom dependencies (if necessary).\nFor example:Copy# Extend the official Rasa SDK imageFROM rasa/rasa-sdk:3.6.0\n# Use subdirectory as working directoryWORKDIR /app\n# Copy any additional custom requirements, if necessary (uncomment next line)# COPY actions/requirements-actions.txt ./\n# Change back to root user to install dependenciesUSER root\n# Install extra requirements for actions code, if necessary (uncomment next line)# RUN pip install -r requirements-actions.txt\n# Copy actions folder to working directoryCOPY ./actions /app/actions\n# By best practices, don't run the code with root userUSER 1001\n\nYou can then build the image via the following command:\n\nCopydocker build . -t <account_username>/<repository_name>:<custom_image_tag>\n\nThe <custom_image_tag> should reference how this image will be different from others. For\nexample, you could version or date your tags, as well as create different tags that have different code for production\nand development servers. You should create a new tag any time you update your code and want to re-deploy it.\n\nUsing your Custom Action Server Image#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "205": {"text": "Using your Custom Action Server Image#\n\nIf you're building this image to make it available from another server, you should push the image to a cloud repository.\n\nThis documentation assumes you are pushing your images to DockerHub.\nDockerHub will let you host multiple public repositories and\none private repository for free. Be sure to first create an account\nand create a repository to store your images. You could also push images to\na different Docker registry, such as Google Container Registry,\nAmazon Elastic Container Registry, or\nAzure Container Registry.\n\nYou can push the image to DockerHub via:\n\nCopydocker login --username <account_username> --password <account_password>docker push <account_username>/<repository_name>:<custom_image_tag>\n\nTo authenticate and push images to a different container registry, please refer to the documentation of\nyour chosen container registry.\n\nSetting a Custom Action Server Image#\n\nIn order to use a Custom Action Server image along with the Rasa Action Server deployment, you have to\nuse the following values for your deployment.\n\nCopy# values.yamlimage: name: \"image_name\" tag: \"image_tag\"\n\nthen upgrade your deployment by executing the command:\n\nCopyhelm upgrade --namespace <namespace> --reuse-values \\  -f values.yaml <release name> rasa/rasa-action-server\n\n2. Connect Rasa Action Server to a Rasa deployment#\n\nIf you have deployed your assistant using the Rasa Helm chart, and you have deployed your Rasa Action Server as well.\nNow it's time to connect them together. You can do this easily by following the steps:\n\na. Create a rasa-values.yaml file which will include configuration for the Rasa deployment.", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "206": {"text": "Copy# rasa-values.yamlrasa-action-server: external: # -- Determine if external URL is used enabled: true # -- URL to Rasa Action Server url: \"http://rasa-action-server/webhook\"\n\n  The configuration above tells Rasa which Rasa Action Server to use. In the example the http://rasa-action-server/webhook URL is used,\nthe URL indicates that Rasa Action Server is deployed with release name rasa-action-server, and is located in the same namespace as Rasa server deployment.\n\nb. Upgrade the Rasa deployment\n\nCopyhelm upgrade -n <namespace> --reuse-values -f rasa-values.yaml \\  <release name> rasa/rasa\n\nPrevious\u00ab Deploy RasaNextDeploy Rasa Plus in Production \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "207": {"text": "Version: 3.x\n\nDeploy Rasa Plus in Production\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nTo use the Rasa Plus image in a Helm deployment, you will need to substitute rasa with rasa-plus as\nthe image name. You will also need to pass your license in an env var\nand specify a pull secret for the image.\n\nStep 1: image pull secret#\n\nYou will need to create a pull secret to access the rasa-plus image. You should have\nbeen provided with a JSON credentials file to access the registry.\nThe file content should look similar to this:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "208": {"text": "Copy{ \"type\": \"service_account\", \"project_id\": \"rasa-platform\", \"private_key_id\": \"somerandomcharacters\", \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n\\nPBTu1lAJDLo136ZGTdMKi+/TuRqrIMg/..................................................................................................................................\\nsjAsuAH4Iz1XdfdenzGnyBZH\\n-----END PRIVATE KEY-----\\n\", \"client_email\": \"company@rasa-platform.iam.gserviceaccount.com\", \"client_id\": \"12345678910123\", \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://accounts.google.com/o/oauth2/token\", \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\", \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/company%40rasa-platform.iam.gserviceaccount.com\"}\n\nCreate the pull secret by running the corresponding command for your cluster environment:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "209": {"text": "Create the pull secret by running the corresponding command for your cluster environment:\n\nCopy# kuberneteskubectl --namespace <your namespace> \\    create secret docker-registry rasa-plus-pull-secret \\    --docker-server=gcr.io \\    --docker-email=company@rasa-platform.iam.gserviceaccount.com \\ # this value needs to be updated with correct client email    --docker-username=_json_key \\    --docker-password=\"$(cat <your-json-registry-creds-file>.json)\"\n\nCopy# openshiftoc --namespace <your namespace> \\    create secret docker-registry rasa-plus-pull-secret \\    --docker-server=gcr.io \\    --docker-email=company@rasa-platform.iam.gserviceaccount.com \\ # this value needs to be updated with correct client email    --docker-username=_json_key \\    --docker-password=\"$(cat <your-json-registry-creds-file>.json)\"\n\nStep 2: store license in a secret#\n\nStep a: Save the license string to a file, for example:\n\nCopyecho \"<rasaplus-license-key-you-were-emailed>\" > license.txt\n\nStep b: Create a secret to hold the license key:\n\nCopykubectl -n <your-namespace> create secret generic rasapro-license --from-file=licensekey=./license.txt\n\nStep c: Remove the file on disk, for example:\n\nCopy/bin/rm license.txt\n\nStep 3: update values.yml#\n\nFor the Rasa Helm Chart, update as follows:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "210": {"text": "For the Rasa Helm Chart, update as follows:\n\nCopyregistry: europe-west3-docker.pkg.dev/rasa-releases/rasa-plus/rasa-pluscommand: - rasaimage: name: rasa-plus tag: 3.6.2 pullSecrets: - name: rasa-plus-pull-secretextraEnv: - name: RASA_PRO_LICENSE valueFrom: secretKeyRef: name: rasapro-license key: licensekey\n\nFor the Rasa X/Enterprise Helm Chart, update as follows:\n\nCopyimages: imagePullSecrets: - name: rasa-plus-pull-secretrasa: command: - rasa name: europe-west3-docker.pkg.dev/rasa-releases/rasa-plus/rasa-plus tag: 3.6.2 extraEnv: - name: RASA_PRO_LICENSE valueFrom: secretKeyRef: name: rasapro-license key: licensekey\n\nPrevious\u00ab Deploy Rasa Action ServerNextDeploy Rasa Pro Services \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "211": {"text": "Version: 3.x\n\nDeploy Rasa Pro Services\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nRasa Pro Services Setup#\n\nInstalling Rasa Pro Services requires the deployment of a docker\ncontainer. The container can be deployed in a different environment than\nRasa Plus. Both deployments need to be able to connect to the same\nKafka cluster to communicate.\n\nPrerequisites#\n\nA Rasa Pro Services deployment needs to be connected to\n\na message broker (Kafka) anda data warehouse (e.g. PostgreSQL).\n\nThe Kafka deployment should be a production deployment. We recommend a\nmanaged deployment, e.g. using\nAmazon Managed Streaming for Apache Kafka.\n\nSystem Requirements#\n\nThe minimum hardware requirements include information about the\nrequirements you need to install and use Rasa Pro Services. Hardware\nrequirements are dependent on the average number of conversations and\nexpected workload. Your exact needs may be more, depending on your workload.\n\nThe following is the recommended minimum hardware guidance:\n\nCPU: 2 vCPUMemory: 4 GBDisk space: 10 GB\n\nThese requirements correspond to the t3.medium instance type on AWS.\n\nLicense#\n\nRunning Rasa Pro Services requires a valid license. You need to supply the\nlicense as an environment variable to the service.\n\nInstallation and Configuration#\n\nRasa Plus streams data to Kafka which gets consumed by Rasa Pro Services.\nThese different services need to be run and configured to be able to communicate.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "212": {"text": "Configure Rasa Plus to stream data to Kafka. The configuration for\nKafka should be put in a configuration\nfile endpoints.yml:endpoints.ymlCopyevent_broker:  type: kafka  partition_by_sender: True  topic: rasa-events  url: <BROKER URL>The <BROKER_URL> needs to be replaced with an address of a bootstrap\nserver of your Kafka cluster. Configuration examples for different\nsecurity protocols and other parameters can be found in the\nKafka Event Broker\ndocumentation.Rasa Pro Services is a docker image. Authenticate to pull\nthe docker images:Copygcloud auth configure-docker europe-west3-docker.pkg.devPull the Rasa Pro Services image to your machine:Copydocker pull europe-west3-docker.pkg.dev/rasa-releases/rasa-pro/rasa-pronoteFor a more complete walkthrough on how to manage the authentication\ncredentials and licenses in a production environment, see the\nRasa Plus Deployment Guide (select the Rasa Plus tab).Run the Rasa Pro Services docker image and configure it to receive data\nfrom your Rasa Plus assistant connected to Kafka:Copydocker run \\    -e RASA_PRO_LICENSE=<your_license> \\    -e KAFKA_BROKER_ADDRESS=<BROKER_URL> \\    -e KAFKA_TOPIC=rasa-events \\    europe-west3-docker.pkg.dev/rasa-releases/rasa-pro/rasa-proFor production deployments, we recommend to us\nAmazon Elastic Container Service.\n\nDocker Container Configuration (Reference)#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "213": {"text": "Docker Container Configuration (Reference)#\n\nThe Rasa Pro Services docker container supports configuration through\nseveral environment variables. The following table lists the available\nenvironment variables:\n\nEnvironment VariableDescriptionDefaultRASA_PRO_LICENSERequired. The license key for Rasa Pro Services.KAFKA_BROKER_ADDRESSRequired. The address of the Kafka broker.KAFKA_TOPICRequired. The topic Rasa Plus publishes events to and Rasa Pro consumes from.rasa_core_eventsLOGGING_LEVELSet the log level of the application. Valid levels are DEBUG, INFO, WARNING, ERROR, CRITICAL. (Available from 3.0.2)INFORASA_ANALYTICS_DB_URLThe URL of the data lake to store analytics data in.KAFKA_SASL_MECHANISMThe SASL mechanism to use for authentication. Valid mechanisms arePLAINKAFKA_SASL_USERNAMEThe username for SASL authentication.KAFKA_SASL_PASSWORDThe password for SASL authentication.KAFKA_SECURITY_PROTOCOLThe security protocol to use for communication with Kafka. Supported mechanisms are PLAINTEXT and SASL_PLAINTEXT.PLAINTEXTKAFKA_SSL_CA_LOCATIONThe filepath for SSL CA Certificate that will be used to connect with Kafka (Available from 3.1.0b1)\n\nHealthcheck Endpoint#\n\nRasa Pro Services exposes a health check endpoint at /healthcheck.\nThe endpoint will return a 200 status code if the service is healthy.\nIf any other status code is returned or if the endpoint is not reachable\nthe service is unhealthy.\n\nExample response for /healthcheck:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "214": {"text": "Example response for /healthcheck:\n\nCopy{ \"details\": { \"analytics-consumer\": { \"alive\": 1, \"isHealthy\": true } }, \"isHealthy\": true}\n\nConnect to a secured Kafka instance#\n\nThe connection to a secured Kafka instance can be configured by setting the\nfollowing environment variables on the Rasa Pro docker container:\nKAFKA_SASL_MECHANISM, KAFKA_SASL_USERNAME, KAFKA_SASL_PASSWORD and\nKAFKA_SECURITY_PROTOCOL. A detailed description of the parameters can\nbe found in the\nenvironment variable reference.\n\nThe environment variables need to be configured upon startup of the Rasa Pro\ndocker container.\n\nUsing Kafka truststores and keystores is currently not supported.\n\nUpgrading Versions#\n\nTo upgrade to the latest version of Rasa Pro Services, you must follow these steps:\n\nRead the changelog documentation on breaking changes.Download a new docker container and run it.\n\nContainer Start-upNote that the container might take some time to start-up as it is running\ndatabase schema migrations as part of its start-up.If the migrations have failed, the container will be shut down.\n\nPrevious\u00ab Deploy Rasa Plus in ProductionNextGetting started with Analytics \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "215": {"text": "Version: 3.x\n\nGetting started with Analytics\n\nVisualise and process Rasa assistant metrics in the tooling of choice.\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nAnalytics Data Pipeline helps visualize and process Rasa assistant metrics in the\ntooling (BI tools, data warehouses) of your choice. Visualizations\nand analysis of the production assistant and its conversations allow\nyou to assess ROI and improve the performance of the assistant over time.\n\n\n\nMeasuring a Rasa assistant's success and making strategic investments\nwill lead to better business outcomes. It will also help you understand\nthe needs of your end users and better serve them.\n\n\n\nRasa Pro will connect to your production assistant using Kafka.\nThe pipeline will compute analytics as soon as the docker container\nis successfully deployed and connected to your data warehouse and\nKafka instances.\n\nTypes of metrics#\n\nMetrics collected from your assistant can broadly be categorized as\n\nUser Analytics: Who are the users of the assistant, and how do they feel\nabout it?  Examples: demographics, channels, sentiment analysisUsage Analytics:  How is the assistant\u2019s overall health and what kind of\ntraffic is coming to it?  Examples:  total number of sessions, time per\nsession, errors and error ratesConversation Analytics: What happened during the conversation?\nExamples: number of messages sent, abandonment depth, number of topics\nintroduced by user, top N intentsBusiness Analytics: How is the assistant performing with regard to business goals?\nExamples: ROI of assistant per LoB, time comparison of assistant vs agent, containment rate\n\nIn this version of the Analytics pipeline, measurement of the following metrics\nis possible", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "216": {"text": "In this version of the Analytics pipeline, measurement of the following metrics\nis possible\n\nMetricCategoryMeaningNumber of conversationsUsage AnalyticsTotal number of conversationsNumber of usersUsage AnalyticsTotal number of usersNumber of sessionsUsage AnalyticsGross traffic to assistantChannels usedUsage AnalyticsSessions by channelUser session countUser AnalyticsTotal number of user sessions or average sessions per userTop N intentsConversation AnalyticsTop intents across all usersAvg response timeConversation AnalyticsAverage response time for assistantContainment rateBusiness Analytics% of conversations handled purely by assistant (not handed to human agentAbandonment rateBusiness Analytics% of abandoned conversationsEscalation rateBusiness Analytics% of conversations escalated to human agent\n\nFor examples of how you can extract these metrics,\nsee Example queries.\n\nPrerequisites#\n\nA production deployment of Kafka is required to set up Rasa Pro.\nWe recommend using Amazon Managed Streaming for\nApache Kafka.A production deployment of a data lake needs to be connected to\nthe data pipeline. Rasa Pro directly supports the following data lakes:PostgreSQL (\nrecommended. All PostgreSQL >= 11.0 are supported)Amazon RedshiftVirtually any other data lakes can be configured to sync with your deployment of PostgreSQL.\nYou can find additional instructions on how to connect your PostgreSQL deployment to either BigQuery\nor Snowflake in the Connect a data warehouse step.We recommend managed deployments of your data lake to minimize maintenance\nefforts.\n\n1. Connect an assistant#\n\nTo connect an assistant to Rasa Pro Services, you need to connect the assistant\nto an event broker. The assistant will stream all events to the event broker,\nwhich will then be consumed by Rasa Pro Services.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "217": {"text": "The configuration of the assistant is the first step of\nInstallation and Configuration.\nNo additional configuration is required to connect the assistant to the\nAnalytics pipeline. After the assistant is deployed, the Analytics pipeline\nwill receive the data from the assistant and persist it to your\ndata warehouse which will be configured in the next step.\n\n2. Connect a data warehouse#\n\nYou can choose to configure the analytics pipeline to stream the\ntransformed conversational data to two different data warehouse types in AWS:\n\nPostgreSQLRedshift\n\nAdditionally, any data warehouse is supported if it is configured in sync with\nyour deployment of PostgreSQL, as recommended for Redshift.\n\nWe have included brief instructions for syncing your PostgreSQL deployment with:\n\nBigQuerySnowflake\n\nPostgreSQL#\n\nYou can use Amazon Relational Database Service (RDS) to create a PostgreSQL\nDB instance which is the environment that will run your PostgreSQL database.\n\nFirst, you must set up Amazon RDS by completing the instructions listed\nhere.\nNext, create the PostgreSQL DB instance. You can follow one of the\nfollowing instruction sets:\n\nthe AWS Easy create instructions listed in the Creating a PostgreSQL DB instance sectionthe AWS Standard create instructions\n\nTo build the DB URL in the DBAPI format specified in the\nConnect an assistance section you must enter\nthe database credentials. You must obtain the database username and password\nafter you select a database authentication option during the process of\nthe PostgreSQL DB instance creation:\n\nPassword authentication to use database credentials only, in which\ncase you must enter a username for the master username, as well as generate\nthe master password.Password and IAM DB authentication\nto use IAM users and roles for the authentication of database users.Password and Kerberos authentication", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "218": {"text": "Finally, when running the Analytics pipeline Docker container, set the\nenvironment variable RASA_ANALYTICS_DB_URL\nto the PostgreSQL Amazon RDS DB instance URL.\n\nRedshift#\n\nIf you prefer instead to set up Amazon Redshift as your choice of data lake,\nyou can choose to either stream the data from the PostgreSQL source database\nwithin the Amazon RDS DB instance created at the PostgreSQL step\nto the Redshift target or connect directly to Amazon Redshift.\n\nStreaming from PostgreSQL to Redshift#\n\nIf you meet the prerequisites\nfor using an Amazon Redshift database as a target, you will need to implement two steps:\n\nconfigure the PostgreSQL source for AWS Database Migration Service\n(DMS) by following these instructionsconfigure the Redshift target for AWS DMS following the instructions\nhere.\n\nDirect connection#\n\nYou can get started on enabling the direct connection with Redshift by\nfollowing these resources on creating an Amazon Redshift cluster.\nBefore you do so, you should take into account that streaming historical\ndata directly to Redshift could take much longer than streaming directly\nto or via the PostgreSQL RDS instance.\n\nYou must update the RASA_ANALYTICS_DB_URL to the Redshift cluster DB URL\nwhich must follow the following format:\n\nCopyredshift://<USER>:<PASSWORD>@<AWS URL>:5439/<DB NAME>\n\nFor example:\n\nCopyredshift://awsuser:4324312adfaGQ@analytics.cp1yucixmagz.us-east-1.redshift.amazonaws.com:5439/analytics", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "219": {"text": "Redshift write performanceAs a result of performance considerations, we strongly advise against\nchoosing a direct connection to Redshift. Redshift is a great data lake for\nanalytics but lacks the necessary write performance to directly stream data to it.\n\nBigQuery#\n\nTo stream data from PostgreSQL to BigQuery, you can use Datastream for BigQuery.\nDatastream for BigQuery supports several PostgreSQL deployment types,\nincluding CloudSQL.\n\nBefore you begin, make sure to check the Datastream prerequisites, as well as\nadditional Datastream networking connectivity requirements.\n\nYou can closely follow this quickstart guide on replicating data from PostgreSQL CloudSQL to BigQuery with Datastream.\n\nAlternatively, you can deep dive into the following Datastream set-up guides:\n\nConfigure your source PostgreSQL databaseOptional: use customer-managed encryption keysCreate a connection profile for PostgreSQL databaseCreate a stream\n\nSnowflake#\n\nYou can sync your PostgreSQL deployment manually or via an automated partner solution.\n\nThe instructions for manual sync include the following steps:\n\nExtract data from PostgreSQL to file using COPY INTO command.\nYou should also explore the Snowflake data loading best practices before extraction.Stage the extracted data files to either internal or external locations such as AWS S3, Google Cloud Storage or Microsoft Azure.Copy staged files to Snowflake tables using COPY INTO command.\nYou can decide to use bulk data loading into Snowflake or to load continuously using Snowpipe.\nAlternatively you can also benefit from this plugin to load data to an existing Snowflake table.\n\n3. Ingest past conversations (optional)#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "220": {"text": "3. Ingest past conversations (optional)#\n\nWhen Analytics is connected to your Kafka instance, it will consume\nall prior events on the Kafka topic and ingest them into the database.\nKafka has a retention policy for events on a topic which defaults to\n7 days.\n\nIf you want to process events from conversations that are older than the\nretention policy configured for the Rasa topic, you can manually\ningest events from past conversations.\n\nManually ingesting data from past conversations requires a connection to the\ntracker store. The tracker store contains past conversations and a\nconnection to the Kafka cluster. Use the rasa export command to export\nthe events stored in the tracker store to Kafka:\n\nCopyrasa export --endpoints endpoints.yml\n\nConfigure the export to read from your production tracker store\nand write to Kafka as an event broker, e.g.\n\nendpoints.ymlCopy  tracker_store:      type: SQL      dialect: \"postgresql\"      url: \"localhost\"      db: \"tracker\"      username: postgres      password: password\n  event_broker:      type: kafka      topic: rasa-events      url: localhost:29092      partition_by_sender: true\n\nnoteRunning manual ingestion of past events multiple times will result in\nduplicated events. There is currently no deduplication implemented in\nAnalytics. Every ingested event will be stored in the database,\neven if it was processed previously.\n\n4. Connect a BI Solution#\n\nConnecting a business intelligence platform to the data warehouse varies for\neach platform. We provide example instructions for Metabase and Tableau but\nyou can use any BI platform which supports AWS Redshift or PostgreSQL.\n\nExample: Metabase#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "221": {"text": "Example: Metabase#\n\nMetabase is a free and open-source business intelligence platform. It\nprovides a simple interface to query and visualize data. Metabase can\nbe connected to PostgreSQL or Redshift databases.\n\nConnecting Metabase to PostgreSQLConnecting Metabase to Redshift\n\nExample: Tableau#\n\nTableau is a business intelligence platform. It provides a flexible interface\nto build business intelligence dashboards. Tableau can be connected to\nPostgreSQL or Redshift databases.\n\nConnecting Tableau to PostgreSQLConnecting Tableau to Redshift\n\nPrevious\u00ab Deploy Rasa Pro ServicesNextReal-Time Analysis of Markers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "222": {"text": "Version: 3.x\n\nReal-Time Analysis of Markers\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nNew in 3.6Process markers real-time from Rasa\nAssistants to track metrics like solution and abandonment rates,\nadd metatags to conversations,\nor filter conversations for Conversation Driven Development\n\nIn Rasa Pro, Markers are a powerful feature that allows\nyou to track and extract custom conversational events. With the Analytics\nData Pipeline, you can now process these markers in real-time, enabling\nyou to gain valuable insights and enhance the performance of your Rasa\nAssistant. In this guide, we'll explore how to leverage real-time\nanalysis of markers to track solution and abandonment rates in your conversations.\n\n\n\nDefining Markers#\n\nPlease consult the Markers section of Rasa documentation\nfor details about defining markers.\n\nEnable Real-time Processing#\n\nTo enable real-time analysis of markers in your Rasa project, you need to\nupload the markers to Analytics Data Pipeline with the rasa markers upload\ncommand. This command validates the marker YAML against the domain file to\nmake sure all the slots, intents and actions referred in the file also exist\nin the domain and uploads the marker configuration YAML to the\nAnalytics Data Pipeline (where they're persisted in a database) and exits.\nTo get started, make sure you have the latest\nversion of Rasa installed. Then, open your command line\ninterface and navigate to your Rasa project directory. Run the following command:\n\nCopyrasa markers upload --config=<path-to-config-file> -d=<path-to-domain-file> -rasa-pro-services-url=<url>", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "223": {"text": "By default, this command validates the marker configuration file against\nyour bot's domain.yml file. To specify a different domain file, use the\noptional -d argument.\n\nThis command should be run whenever there is a change in the marker\nconfiguration file. The changes might include addition of new markers,\nchanging an existing marker or removing an existing marker.\n\nnoteThis command uploads the marker configurations to the data pipeline. The pipeline assumes the configuration\nfile is the source of truth and only processes the markers defined in it. If you remove a marker from this file,\nand run this command, then the processing for that marker is stopped.\n\nConfiguring the CLI command#\n\nVisit our CLI page\nfor more information about the command line arguments available.\n\nHow are Markers processed?#\n\nThe markers YAML file describes the pattern of events for marker extraction.\nOnce the YAML files are uploaded, the patterns to be used for marker extraction are\nstored in the rasa_patterns table. As the Kafka Consumer starts receiving events\nfrom the Rasa Assistant, it starts analyzing them for markers. The Pipeline\nprocesses all the events from the Kafka Event Broker and identifies points of\ninterest in the conversation that match the marker. The extracted markers are then stored\nin the rasa_marker table.\n\nThe evaluation of Markers in the Pipeline is similar to the rasa evaluate markers\ncommand which can be used to process Markers from the conversations in Tracker Store.\nRead more about it here", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "224": {"text": "Extracted markers are added to the rasa_markers table in the database\nimmediately once they are processed. Each row in this table contains\nthe foreign key identifiers for the pattern, session, sender and\nlast event when marker was extracted along with num_preceding_user_turns\nwhich tracks the number of turns preceding the event at which the marker applied.\nCheck out the Data Structure Reference page for the\ndatabase schema of relevant tables.\n\nPrevious\u00ab Getting started with AnalyticsNextExample queries \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "225": {"text": "Version: 3.x\n\nExample queries\n\nThis section helps you get started with analyzing your assistant's conversations.\nThe examples use SQL queries together with an example visualization in Metabase.\n\nFor more metrics and categories of conversations,\nsee Types of metrics.\n\nNumber of sessions per month#\n\nA common high-level usage metric of your assistant is the number of\nsessions per month. Here is how it would look as an SQL query:\n\nCopySELECT  date_trunc('month', \"public\".\"rasa_session\".\"timestamp\") AS \"first_seen\", count(*) AS \"count\"FROM \"public\".\"rasa_session\"GROUP BY 1ORDER BY 1 ASC\n\nNumber of sessions per month visualized in Metabase.\n\nNumber of sessions per channel#\n\nIf you're connecting your assistant to multiple channels, it could be\nuseful to look at the number of sessions per channel, let's say per week.\nThe query you would need for this metric is:\n\nCopySELECT \"public\".\"rasa_sender\".\"channel\" AS \"channel\", \"public\".\"rasa_sender\".\"first_seen\" AS \"timestamp\", count(distinct \"public\".\"rasa_sender\".\"sender_key\") AS \"count\"FROM \"public\".\"rasa_sender\"GROUP BY 1, 2ORDER BY 1 ASC, 2 ASC\n\nThe number of sessions per channel as visualized in Metabase.\n\nTop N intents#\n\nTo improve your assistant, you could look into the variety of intents\nyour users express. The query below selects the top 5 intents which\ncould help you have a good perspective on that topic:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "226": {"text": "CopySELECT \"public\".\"rasa_user_message\".\"intent\" AS \"intent\", count(*) AS \"count\"FROM \"public\".\"rasa_user_message\"GROUP BY 1ORDER BY 2 DESC, 1 ASCLIMIT 5\n\nTop 5 intents visualized in Metabase.\n\nMoreover, you can look for the intent distribution over time:\n\nCopySELECT \"public\".\"rasa_user_message\".\"intent\" AS \"intent\",  date_trunc('month', \"public\".\"rasa_user_message\".\"timestamp\") AS \"timestamp\", count(*) AS \"count\" FROM \"public\".\"rasa_user_message\"GROUP BY 1, 2ORDER BY 1 ASC, 2 ASC\n\nIntent distribution over time visualized in Metabase.\n\nEscalation rate#\n\nThe escalation rate or human hand-off rate is a measure of the number of\nconversations the assistant passes to a human agent. This metric can\nhelp you gain a better understanding of what happens during a conversation.\nLet's say you have an intent named handoff_to_support. You'll get the\nescalation rate over time with this sample query:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "227": {"text": "CopyWITH \"sessions\" AS ( SELECT \"public\".\"rasa_user_message\".\"session_id\" AS \"session_id\",        date_trunc('month', \"public\".\"rasa_user_message\".\"timestamp\") AS \"timestamp\", ( CASE \"public\".\"rasa_user_message\".\"intent\" WHEN 'handoff_to_support' THEN 1 ELSE 0 END ) AS \"has_handoff_to_support\" FROM \"public\".\"rasa_user_message\"),\"sessions_with_handoff\" AS ( SELECT \"session_id\", \"timestamp\", SUM(\"has_handoff_to_support\") AS \"has_handoff_to_support\" FROM \"sessions\" GROUP BY 1, 2)SELECT \"timestamp\", SUM(\"has_handoff_to_support\") / count(*) AS \"escalation_rate\"FROM \"sessions_with_handoff\"GROUP BY 1 ASCORDER BY 1 ASC\n\nEscalation rate visualized in Metabase.\n\nAbandonment rate#\n\nAbandonment rate can be defined in many different custom ways,\nhowever here we'll define it as a session ending without a user message\nafter a specific message was uttered by the bot, e.g. utter_ask_name.\nYou could adapt the metric to detect sessions ending without a user\nmessage after a specific set of intents. The SQL query would look like this:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "228": {"text": "CopyWITH \"sessions\" AS ( SELECT DISTINCT ON (\"public\".\"rasa_event\".\"session_id\") \"public\".\"rasa_event\".\"session_id\", \"public\".\"rasa_event\".\"timestamp\" AS \"timestamp\", ( CASE WHEN \"public\".\"rasa_bot_message\".\"template_name\" = 'utter_ask_name' THEN 1 ELSE 0 END ) AS \"is_abandonned\" FROM \"public\".\"rasa_event\" INNER JOIN \"public\".\"rasa_bot_message\" ON \"public\".\"rasa_event\".\"id\" = \"public\".\"rasa_bot_message\".\"event_id\" WHERE \"public\".\"rasa_event\".\"event_type\" = 'bot' ORDER BY 1, 2 DESC)SELECT  date_trunc('month', \"timestamp\") AS \"timestamp\", SUM(\"is_abandonned\")::float / count(*) AS \"abandonment_rate\"FROM \"sessions\"GROUP BY 1ORDER BY 1 ASC\n\nAbandonment rate visualized in Metabase.\n\nPrevious\u00ab Real-Time Analysis of MarkersNextData structure reference \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "229": {"text": "Version: 3.x\n\nData structure reference\n\nOverview of the data structure created by the Analytics pipeline. Description of all tables and attributes that can be used to build analytics dashboards.\n\nThe data structure is created by the Analytics pipeline and treated as\na public API. The versioning of the API follows the\nRasa Product Release and Maintenance Policy.\nAll Internal Tables should be considered private and may\nchange without notice.\n\nDatabase Table Overview#\n\n\n\nCommon Terms#\n\na sender is a user who is talking to the assistant through a channel.\nA user might have multiple senders if they use multiple channels, e.g.\ncommunicating with the assistant through a website and through a\nchannel integrated into a mobile app.a session is a conversation between a sender and the assistant.\nA session is started when a sender sends a message to the assistant and\nends when the session either has been timed out or explicitly ended.\nIf a session is interrupted by a longer period of inactivity new\nactivity will trigger a new session to be created (configurable\nthrough the session timeout).a turn always starts with a message from a sender and ends right before\nthe next message from the sender. A turn can also end with a session\nbeing timed out or explicitly ended. A turn will usually contain at least\none bot response.\n\nTables#\n\nrasa_sender#\n\nA sender is a user who interacts with the assistant through a Rasa Channel.\nIf the assistant supports more than one channel, a user might have multiple\nsenders. For example, a user might have a sender for the Facebook channel\nand a sender for the Slack channel.\n\n\n\nid sender identifier#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "230": {"text": "id sender identifier#\n\nThe unique identifier of the sender is generated by Analytics. Sender\ngets a different, generated id assigned. The id differs from the sender_id\nused by the Rasa channels, the sender_id in Rasa is the\nsender_key in Analytics.\n\nType: varchar(36)Example: a78783c4-bef7-4e55-9ec7-5afb4420f19a\n\nsender_key Rasa channel sender identifier#\n\nThe unique identifier used by the Rasa channel to identify this sender. The\nsender_key is specific to the channel implementation in Rasa and\nthe format depends on the channel.\n\nType: varchar(255)Example: fb26ba0a9d8b4bd99e2b8716acb19e4b\n\nchannel Rasa channel name#\n\nName of the channel that is used for this sender. The channel names are\ndefined in the implementation of the respective Rasa channel.\n\nType: varchar(255)Example: socket.io\n\nfirst_seen first contact with this sender#\n\nThe date and time of the first contact with this sender. Corresponds to the\ntime of the first event of the first session created for this sender.\n\nType: DateTimeExample: 2022-06-28 02:15:49.326936\n\nlast_seen latest contact with this sender#\n\nThe date and time of the last contact with this sender. Corresponds to the\ntime of the latest event of the latest session created for this sender.\n\nType: DateTimeExample: 2022-10-28 02:15:49.326936\n\n\n\nrasa_session#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "231": {"text": "rasa_session#\n\nThe rasa_session table contains information about all conversation\nsessions that users started with the assistant. New sessions are created\nfor every new user and for users who return to the assistant. The\nconditions that trigger a new session to start can be\nconfigured in the Rasa Domain.\n\n\n\nid session identifier#\n\nThe unique identifier of the session. Every session gets a different,\ngenerated id assigned.\n\nType: varchar(36)Example: 63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1\n\nsender_id sender who started the session#\n\nThe unique identifier of the sender who started the session. It is a\nforeign key to the rasa_sender.id column.\n\nType: varchar(36)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53\n\ntimestamp creation date time#\n\nThe timestamp when the session was created. The timestamp is a UTC.\n\nType: DateTimeExample: 2022-06-28 02:15:49.326936\n\nstart_sequence_number start of the session#\n\nThe sequence number of the first event in this session. All events belong\nto exactly one session. The start sequence number is always smaller or equal\nto the end_sequence_number. The difference between start and end sequence\nnumbers does not equal the number of events in this session since\nsequence numbers are incremented across multiple conversations.\n\nType: IntegerExample: 78\n\nend_sequence_number end of the session#\n\nThe sequence number of the last event in the session.\n\nType: IntegerExample: 91\n\n\n\nrasa_turn#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "232": {"text": "Type: IntegerExample: 91\n\n\n\nrasa_turn#\n\nThe rasa_turn table contains information about all conversation\nturns. A turn is one interaction between a user and an assistant.\nA turn always starts with a user message. It ends with the last event\nbefore the next user message or with the end of a session. A turn\nwill usually be one user message followed by one or multiple assistant\nresponses. All events between the user message and the end of the turn\nbelong to the same turn.\n\n\n\nid session identifier#\n\nThe unique identifier of the turn. Every turn gets a different\ngenerated id assigned.\n\nType: varchar(36)Example: ffa5d0cd-f5a6-45a4-9506-ba7ffd76edf1\n\nsender_id sender who started the turn#\n\nThe unique identifier of the sender who started the turn. It is a\nforeign key to the rasa_sender.id column.\n\nType: varchar(36)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53\n\nsession_id session identifier#\n\nThe unique identifier of the session this turn is part of.\nIt is a foreign key to the rasa_session.id column.\n\nType: varchar(36)Example: 63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1\n\nstart_sequence_number start of the turn#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "233": {"text": "start_sequence_number start of the turn#\n\nThe sequence number of the first event in this turn. All events belong\nto exactly one session. The start sequence number is always smaller or equal\nto the end_sequence_number. The difference between start and end sequence\nnumbers does not equal the number of events in this session since\nsequence numbers are incremented across multiple conversations.\n\nType: IntegerExample: 79\n\nend_sequence_number end of the turn#\n\nThe sequence number of the last event in this turn.\n\nType: IntegerExample: 82\n\n\n\nrasa_event#\n\nThe rasa_event table contains all events that an assistant created. Events\nare created for every user message, bot response, and action that is executed\nas well as for a lot of internal changes to a conversation session.\nOverview of all Rasa Events.\n\n\n\nid event identifier#\n\nThe unique identifier of the event. Every event gets different,\ngenerated id assigned.\n\nType: varchar(36)Example: f5adcd16-b18d-4c5c-95f0-1747b20cb0e6\n\nsender_id sender whose conversation the event belongs to#\n\nThe unique identifier of the sender whose conversation this event is part of.\nIt is a foreign key to the rasa_sender.id column.\n\nType: varchar(36)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53\n\nsession_id session identifier#\n\nThe unique identifier of the session this event is part of.\nIt is a foreign key to the rasa_session.id column.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "234": {"text": "Type: varchar(36)Example: 63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1\n\ntimestamp creation date time#\n\nThe timestamp when the event was created. The timestamp is a UTC.\n\nType: DateTimeExample: 2022-06-28 02:15:49.326936\n\nevent_type kind of event#\n\nThe type of the event. The event type is a string and can be one of the\nfollowing:\n\nuser: The user sent a message to the assistant.bot: The assistant sent a message to the user.action: The assistant executed an action.session_started: A new session was started.action_execution_rejected: An action failed to execute.active_loop: The assistant is currently in a loop.slot: A slot was set.followup: A follow-up action was triggered.loop_interrupted: A loop was interrupted.pause: A session is paused, e.g. because the session was handed over\nto a human agent.restart: A session was restarted. This will trigger a new session to\nbe started. The state of the assistant will be reset.rewind: The assistant rewinds to a previous state.user_featurization: The assistant featurized the user input.\n\nThe event type defines how the event is interpreted and how the event\naffects the conversation. For example, the user event type will\nbe interpreted as a user message and the bot event type will be\ninterpreted as a bot response.\n\nType: varchar(255)Example: action\n\nmodel_id model identifier#\n\nThe identifier of the Rasa model that was running as part of the assistant\nwhen this event was created.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "235": {"text": "Type: varchar(255)Example: 75a985b7b86d442ca013d61ea4781b22\n\nenvironment name of the assistant environment#\n\nThe name of the environment of the assistant that created this event.\nThe environment is a string that is set up during the start of the assistant,\n\nType: varchar(255)Example: production\n\nsequence_number start of the event#\n\nThe sequence number of the event. The events of a session always have\nincreasing sequence numbers. Sequence numbers are not guaranteed to be\nsequential for events following one another. But sequence numbers can\nbe used to order the events of a session.\n\nType: IntegerExample: 78\n\n\n\nrasa_bot_message#\n\nA message sent by the assistant to a user will be tracked in the\nrasa_bot_message table. The table contains information about the\nsent message.\n\n\n\nid bot message identifier#\n\nThe unique identifier of the bot message is generated by Analytics.\n\nType: varchar(36)Example: 2f2e5384-1bfa-4b53-90a7-c75e5f20b117\n\nevent_id id of the event of this message#\n\nThe unique identifier of the event that created this bot message.\nIt is a foreign key to the rasa_event.id column.\n\nType: varchar(36)Example: f5adcd16-b18d-4c5c-95f0-1747b20cb0e6\n\nsender_id sender whose conversation the message belongs to#\n\nThe unique identifier of the sender whose conversation this message is part of.\nIt is a foreign key to the rasa_sender.id column.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "236": {"text": "Type: varchar(36)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53\n\nsession_id session identifier#\n\nThe unique identifier of the session this message is part of.\nIt is a foreign key to the rasa_session.id column.\n\nType: varchar(36)Example: 63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1\n\ntimestamp creation date time#\n\nThe timestamp when the message was created. The timestamp is a UTC.\n\nType: DateTimeExample: 2022-06-28 02:15:49.326936\n\ntemplate_name name of the template used to generate the message#\n\nThe name of the template that Rasa used to generate the bot message. Might\nbe empty if the message was not generated from a template but a custom\naction.\n\nType: varchar(255)Example: utter_greet\n\ntext message content#\n\nThe text of the bot message.\n\nType: varchar(65535)Example: Ok, what can I help you with?\n\nmodel_id model identifier#\n\nThe identifier of the Rasa model that was running as part of the assistant\nwhen this message was created.\n\nType: varchar(255)Example: 75a985b7b86d442ca013d61ea4781b22\n\nsequence_number start of the event#\n\nThe sequence number of the message. The events of a session always have\nincreasing sequence numbers. The sequence number of this message is the same\nas the one of the underlying event.\n\nType: IntegerExample: 78\n\n\n\nrasa_user_message#", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "237": {"text": "Type: IntegerExample: 78\n\n\n\nrasa_user_message#\n\nA message sent by a user to the assistant will be tracked in the\nrasa_user_message table. The table contains information about the\nsent message.\n\n\n\nid user message identifier#\n\nThe unique identifier of the user message is generated by Analytics.\n\nType: varchar(36)Example: 49fdd79e-976b-47c2-ab27-a4c3d743a1c9\n\nevent_id id of the event of this message#\n\nThe unique identifier of the event that created this user message.\nIt is a foreign key to the rasa_event.id column.\n\nType: varchar(36)Example: f5adcd16-b18d-4c5c-95f0-1747b20cb0e6\n\nsender_id sender whose conversation the message belongs to#\n\nThe unique identifier of the sender whose conversation this message is part of.\nIt is a foreign key to the rasa_sender.id column.\n\nType: varchar(36)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53\n\nsession_id session identifier#\n\nThe unique identifier of the session this message is part of.\nIt is a foreign key to the rasa_session.id column.\n\nType: varchar(36)Example: 63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1\n\nintent classification of the text#\n\nThe name of the intent that Rasa classified the text as. One of the intents\nin the domain used to train the model.", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "238": {"text": "Type: varchar(255)Example: book_flight\n\nretrieval_intent classification of the text#\n\nThe name of the retrieval intent that Rasa classified the text as. Only\npopulated if there is a configured retrieval intent.\n\nType: varchar(255)Example: book_flight/faq\n\nconfidence certainty the model predicted for classifications#\n\nThe confidence of the ML model's intent prediction. The confidence is a\nvalue between 0 and 1. The higher the value, the more certain the model is\nthat the intent is correct.\n\nType: FloatExample: 0.8798527419567108\n\ntext message content#\n\nThe text of the user message.\n\nType: varchar(65535)Example: I want to book a flight.\n\ntimestamp creation date time#\n\nThe timestamp when the message was created. The timestamp is a UTC.\n\nType: DateTimeExample: 2022-06-28 02:15:49.326936\n\nmodel_id model identifier#\n\nThe identifier of the Rasa model that was running as part of the assistant\nwhen this message was created.\n\nType: varchar(255)Example: 75a985b7b86d442ca013d61ea4781b22\n\nsequence_number start of the event#\n\nThe sequence number of the message. The events of a session always have\nincreasing sequence numbers. The sequence number of this message is the same\nas the one of the underlying event.\n\nType: IntegerExample: 78\n\nmessage_id unique id for the message text#\n\nA unique id that identifies the text of the message.\n\nType: varchar(255)Example: 7cdb5700ac9c493aa46987b77d91c363", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "239": {"text": "rasa_action#\n\nAn action executed by the assistant. All actions the bot executes are tracked\nin the rasa_action table. The table contains information about the\nexecuted action and its prediction.\n\n\n\nid action identifier#\n\nThe unique identifier of the action execution is generated by Analytics.\n\nType: varchar(36)Example: bd074dc7-e745-4db6-86d0-75b0af7bc067\n\nevent_id id of the event of this action execution#\n\nThe unique identifier of the event that created this action execution.\nIt is a foreign key to the rasa_event.id column.\n\nType: varchar(36)Example: f5adcd16-b18d-4c5c-95f0-1747b20cb0e6\n\nsender_id sender whose conversation triggered this action execution#\n\nThe unique identifier of the sender whose conversation triggered this action\nexecution. It is a foreign key to the rasa_sender.id column.\n\nType: varchar(36)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53\n\nsession_id session identifier#\n\nThe unique identifier of the session this action execution is part of.\nIt is a foreign key to the rasa_session.id column.\n\nType: varchar(36)Example: 63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1\n\nname name of the executed action#\n\nThe name of the action that Rasa has predicted and executed. One of the actions\nin the domain used to train the model.", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "240": {"text": "Type: varchar(255)Example: action_book_flight\n\nconfidence ML models certainty of the predicted action#\n\nThe confidence of ML model's action prediction. The confidence is a\nvalue between 0 and 1. The higher the value, the more certain the model is\nthat the action is correct.\n\nType: FloatExample: 0.9398527419567108\n\npolicy name of the policy that predicted the action#\n\nThe name of the policy that predicted this action. The policy is a component\nin the Rasa assistant that makes a prediction. The policy can be a rule\npolicy, a memoization policy, or an ML policy.\n\nType: varchar(255)Example: policy_2_TEDPolicy\n\ntimestamp creation date time#\n\nThe timestamp when the action was executed. The timestamp is a UTC.\n\nType: DateTimeExample: 2022-06-28 02:15:49.326936\n\nmodel_id model identifier#\n\nThe identifier of the Rasa model that was running as part of the assistant\nwhen this action was executed.\n\nType: varchar(255)Example: 75a985b7b86d442ca013d61ea4781b22\n\nsequence_number start of the event#\n\nThe sequence number of the executed action. The events of a session always have\nincreasing sequence numbers. The sequence number of this executed action is\nthe same as the one of the underlying event.\n\nType: IntegerExample: 78\n\n\n\nrasa_slot#\n\nA slot that has been set for a session. All changes to slot values are tracked\nin the rasa_slot table. The table contains information about the\nchange in the value of the slot.\n\n\n\nid slot change identifier#", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "241": {"text": "id slot change identifier#\n\nThe unique identifier of this change in slot values is generated by Analytics.\n\nType: varchar(36)Example: a793d284-b5b9-4cef-be8a-bc0f58c70c28\n\nevent_id id of the event that triggered this slot change#\n\nThe unique identifier of the event that triggered this change\nin the slot value. It is a foreign key to\nthe rasa_event.id column.\n\nType: varchar(36)Example: f5adcd16-b18d-4c5c-95f0-1747b20cb0e6\n\nsender_id sender whose conversation triggered this slot change#\n\nThe unique identifier of the sender whose conversation triggered this\nslot change. It is a foreign key to the rasa_sender.id column.\n\nType: varchar(36)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53\n\nsession_id session identifier#\n\nThe unique identifier of the session this slot change is part of.\nIt is a foreign key to the rasa_session.id column.\n\nType: varchar(36)Example: 63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1\n\nslot_path path of the slot#\n\nA path to the slot that was changed. The path identifies the slot by its\nname, the sender and the session. The path is a string that looks like\n<sender_id>/<session_id>/<slot_name>.", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "242": {"text": "Type: varchar(255)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53/63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1/email\n\nname name of the slot#\n\nThe name of the changed slot. The name of the slot is the same\nas the name of the slot in the domain.\n\nType: varchar(255)Example: email\n\nvalue new slot value#\n\nThe new value of the slot for the session. The value is a dumped\nJSON object.\n\nType: varchar(65535)Example: john@example.com\n\ntimestamp creation date time#\n\nThe timestamp when the slot value was changed. The timestamp is a UTC.\n\nType: DateTimeExample: 2022-06-28 02:15:49.326936\n\nsequence_number start of the event#\n\nThe sequence number of the slot change. The events of a session always have\nincreasing sequence numbers. The sequence number of the slot change is\nthe same as the one of the underlying event.\n\nType: IntegerExample: 78\n\n\n\nrasa_session_slot_state#\n\nThe state of a slot at the end of a session. The state of a slot is the\nvalue of the slot at the end of a session. The state of a slot is\nstored in the rasa_session_slot_state table.\n\n\n\nid path of the slot#\n\nA path to the slot. The path identifies the slot by its\nname, the sender and the session. The path is a string that looks like\n<sender_id>/<session_id>/<slot_name>.", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "243": {"text": "Type: varchar(255)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53/63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1/email\n\nsender_id sender whose conversation this slot is part of#\n\nThe unique identifier of the sender whose conversation this slot is part of.\nIt is a foreign key to the rasa_sender.id column.\n\nType: varchar(36)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53\n\nsession_id session identifier#\n\nThe unique identifier of the session this slot is part of.\nIt is a foreign key to the rasa_session.id column.\n\nType: varchar(36)Example: 63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1\n\nname name of the slot#\n\nThe name of the slot. The name of the slot is the same\nas the name of the slot in the domain.\n\nType: varchar(255)Example: email\n\nvalue last value of the slot in the session#\n\nThe value of the slot at the end of the session. The value is a dumped\nJSON object. If a slot is changed multiple times during a session,\nthe value is set to the last change.\n\nType: varchar(65535)Example: john@example.com\n\ntimestamp creation date time#\n\nTime of the last update of the slot in this session. The timestamp is a UTC.\n\nType: DateTimeExample: 2022-06-21 02:15:49.326936", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "244": {"text": "rasa_patterns#\n\nPatterns are marker definitions that have been received from Rasa. This table is called patterns\nto distinguish them from extracted markers which are stored in rasa_markers table. It\nstores the configuration of markers (which can be thought of as a pattern\nof conversational events) along with their metadata.\n\nid pattern identifier#\n\nThe unique identifier of the rasa pattern is generated by Analytics.\n\nType: varchar(36)Example: bd074dc7-e745-4db6-86d0-75b0af7bc067\n\nname pattern name#\n\nName of the pattern\n\nType: varchar()Example: registration success\n\ndescription pattern description#\n\nDescription of the pattern\n\nType: varchar()Example: This marker identifies successful account registration in the chat\n\nconfig pattern configuration#\n\nPattern configuration dictionary stored as an escaped string\n\nType: varchar()Example: \"{'or': [{'intent': 'mood_unhappy'},{'intent': 'mood_great'}]}\"\n\nis_active soft-delete flag#\n\nOnly patterns with is_active==True are processed during real-time analysis\n\nType: boolean\n\ncreated_at creation date time#\n\nTime of creation of this pattern. The timestamp is a UTC.\n\nType: DateTimeExample: 2022-06-21 02:15:49.326936\n\nupdated_at update date time#\n\nTime of the last update of the pattern in this session. The timestamp is a UTC.\n\nType: DateTimeExample: 2022-06-21 02:15:49.326936\n\nrasa_markers#", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "245": {"text": "rasa_markers#\n\nExtracted markers from the conversations. Each row in this table corresponds\nto a marker along with details of the pattern, sender, session and the last event where it was extracted.\n\nid marker identifier#\n\nThe unique identifier of the extracted rasa marker is generated by Analytics.\n\nType: varchar(36)Example: bd074dc7-e745-4db6-86d0-75b0af7bc067\n\npattern_id pattern which was applied in this marker#\n\nThe unique identifier of the pattern which was applied in this marker. It is\na foreign key to the rasa_patterns.id column\n\nType: varchar(36)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53\n\nsender_id sender identifier#\n\nThe unique identifier of the sender whose conversation this marker is part of.\nIt is a foreign key to the rasa_sender.id column.\n\nType: varchar(36)Example: 9e4ebded-f232-4cc5-af78-d98daa0c1a53\n\nsession_id session identifier#\n\nThe unique identifier of the session this marker is part of.\nIt is a foreign key to the rasa_session.id column.\n\nType: varchar(36)Example: 63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1\n\nevent_id event identifier#\n\nThe unique identifier of the event from event broker where this marker was applied.\nNote that a marker can be applied across multiple events, this is the ID of the last event in the sequence.", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "246": {"text": "Type: varchar(36)Example: 63b150a6-21a3-4e6c-bb24-5ab6ddc30cf1\n\nnum_preceding_user_turns Number of Proeeding User turns#\n\nan integer indicating the number of user turns preceding the event at which the marker applied.\n\nType: integerExample: 4\n\ncreated_at creation date time#\n\nTime of creation of this marker. The timestamp is a UTC.\n\nType: DateTimeExample: 2022-06-21 02:15:49.326936\n\nInternal Tables#\n\nInternal tables are used to store information about the assistant and\nthe events that are sent to the assistant. They are not meant to be\nqueried directly but are required for the functioning of Analytics. They\nare a private API that is used by the Analytics service internally\nand might change without notice.\n\nInternal tables:\n\n_rasa_raw_eventalembic_version\n\nPrevious\u00ab Example queriesNextTracing \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "247": {"text": "Version: 3.x\n\nTracing\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nTracing#\n\nDistributed tracing tracks requests as they flow through a distributed\nsystem (in this case: a Rasa assistant), sending data about the requests\nto a tracing backend which collects all trace data and enables\ninspecting it. Trace data helps you understand the flow of requests\nthrough both the components of a single service (Rasa itself), and across\ndifferent distributed services, for example, your action server.\n\nSupported Tracing Backends/Collectors#\n\nTo trace requests in Rasa Pro, you can either use\nJaeger as a backend, or use\nthe OTEL Collector (OpenTelemetry Collector).\nto collect traces and then send them to the backend of your choice.\nSee Configuring a Tracing Backend or Collector\nfor instructions.\n\nEnabling / Disabling#\n\nTracing is automatically enabled in Rasa Pro by\nconfiguring a supported tracing backend.\nNo further action is required to enable tracing.\n\nYou can disable tracing by leaving the tracing: configuration key empty\nin your endpoints file.\n\nAction Server#\n\nThe trace context is sent along with requests to the custom action server\nusing the W3C Trace Context Specification.\nYou can use this trace context to continue tracing the request through\nyour custom action code. See traced events for\ndetails on what attributes are made available as part of the trace context.\n\nConfiguring a Tracing Backend or Collector#\n\nTo configure a tracing backend or collector, add a tracing entry to your endpoints\ni.e. in your endpoints.yml file, or in the relevant section of your Helm values in a deployment.\n\nJaeger#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "248": {"text": "Jaeger#\n\nTo configure a Jaeger tracing backend, specify the type as jaeger.\n\nCopytracing: type: jaeger host: localhost port: 6831 service_name: rasa sync_export: ~\n\nOTEL Collector#\n\nCollectors are components that collect traces in a vendor-agnostic way and then forward them to various backends.\nFor example, the OpenTelemetry Collector (OTEL) can collect traces from multiple different components and instrumentation libraries, and then export them to multiple different backends e.g. jaeger.\n\nTo configure an OTEL Collector, specify the type as otlp.\n\nCopytracing: type: otlp endpoint: my-otlp-host:4318 insecure: false service_name: rasa root_certificates: ./tests/unit/tracing/fixtures/ca.pem\n\nTraced Events#\n\nThe Rasa service areas that are traceable cover the actions required to:\n\ntrain a model (i.e., the training of each graph component)handle a message\n\nModel Training#\n\nTracing is enabled for model training by instrumenting Rasa GraphTrainer and GraphNode classes.\n\nGraphTrainer Attributes#\n\nThe following attributes can be inspected during training of GraphTrainer:\n\ntraining_type of model configuration:\"NLU\"\"CORE\"\"BOTH\"\"END-TO-END\"language of model configurationrecipe_name used in the config.yml fileoutput_filename: the location where the packaged model is savedis_finetuning: boolean argument, if True enables incremental training\n\nGraphNode Attributes#\n\nThe following attributes are captured during the training (as well as prediction during message handling) of every graph node:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "249": {"text": "node_namecomponent_classfn_name: method of component class that gets called\n\nMessage Handling#\n\nThe following Rasa classes are instrumented to enable tracing during message handling:\n\nAgentMessageProcessorTrackerStoreLockStore\n\nNamely, these operations are now traceable:\n\nreceiving a messageparsing the messagepredicting the next actionrunning the actionretrieving and saving the trackerlocking the conversationpublishing to the event brokerpassing the trace context to the action server\n\nAgent Attributes#\n\nTracing the Agent instance handling a message captures the following attributes:\n\ninput_channel: the name of the channel connectorsender_id: the conversation idmodel_id: a unique identifier for the modelmodel_name: the model name\n\nMessageProcessor Attributes#\n\nThe following MessageProcessor attributes are extracted during the tracing:\n\nnumber_of_events: number of events in trackeraction_name: the name of the predicted and executed actionsender_id: the conversation id of the DialogueStateTracker objectmessage_id: the unique message id\n\nThe latter three attributes are also injected in the trace context that gets passed to the requests made to the custom action server.\n\nTrackerStore & LockStore Attributes#\n\nObservable TrackerStore and LockStore attributes include:\n\nnumber_of_streamed_events: number of new events to streambroker_class: the EventBroker on which the new events are publishedlock_store_class: Name of lock store used to lock conversations while messages are actively processed\n\nPrevious\u00ab Data structure referenceNextLoad Testing Guidelines \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "250": {"text": "Version: 3.x\n\nLoad Testing Guidelines\n\nOverview#\n\nIn order to gather metrics on our system's ability to handle increased loads and users, we have performed tests to evaluate the maximum number of concurrent users a Rasa assistant can handle with certain machine configurations.\nIn each test case we spawned the following number of concurrent users at peak concurrency using a spawn rate of 1000 users per second.\nIn our tests we used the Rasa HTTP-API and the Locust open source load testing tool.\n\nUsersCPUMemoryUp to 50,0006vCPU16 GBUp to 80,0006vCPU, with almost 90% CPU usage16 GB\n\nDebugging bot related issues while scaling up#\n\nTo test the Rasa HTTP-API ability to handle a large number of concurrent user activity we used the Rasa Pro tracing capability\nalong with a tracing backend or collector, such as Jaeger, to collect traces for the bot under test.\n\nnoteOur team is currently in the process of running additional performance-related tests. More information will be added here as we progress.\n\nPrevious\u00ab TracingNextPII Management \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "251": {"text": "Version: 3.x\n\nPII Management\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nNew in 3.6You can now anonymize personally identifiable information (PII) data in your logs and events streamed via Kafka event\nbroker only. Continue reading to learn how to enable the anonymization of PII data.\n\nManagement of sensitive customer data collected by assistants is a critical requirement for complying with regulations\nand managing the data securely while making it available for analysis.\nRasa Pro 3.6 introduces the ability to anonymize PII data in your logs and events streamed via the Kafka event broker.\n\nNote that the Tracker Store continues to store conversation data which is not anonymized. This is required so that we\nretain a source of truth of pristine data for non-repudiation purposes. Learn how to secure your Tracker Store\nusing Vault secrets manager to protect the source of truth with rotating credentials.\n\nIn addition, because the tracker store data plays a vital role in the assistant's dialogue management at inference time,\nanonymizing data in flight could have undesirable consequences for the assistant's dialogue management action predictions.\n\nArchitecture Overview#\n\nThe anonymization of the Rasa event is run through an anonymization pipeline at the end of the dialogue management\naction prediction and execution. Note that the processing done by the anonymization pipeline is scheduled as a background\ntask and does not affect the assistant's response time.\n\nThe anonymization steps are as follows:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "252": {"text": "The anonymization steps are as follows:\n\nThe Rasa agent invokes the anonymization pipeline during each user message handling.The anonymization pipeline runs through a sequence of anonymization rules that are applied to the new events.The pipeline publishes the anonymized events to the Kafka topic that is mapped to the anonymization rule list in\nendpoints.yml.The tracker store saves the original events that are not anonymized.\n\nSupported Rasa Events#\n\nThe Rasa events that are anonymized include the following:\n\nuserbotslotentities\n\nSupported PII entity types#\n\nThe anonymization pipeline uses Microsoft Presidio as both entity recognizer and\nanonymizer. Presidio is an open-source library that supports a wide range of entity types and anonymization methods.\n\nYou can specify any of the out-of-the-box supported Presidio entity types in the anonymization rules.\nNote that it is currently not possible to add custom entity types for the Rasa Pro anonymization pipeline.\n\nHow to write anonymization rules#\n\nYou can now write anonymization rules in endpoints.yml to explicitly declare which Presidio entities should be anonymized.\nThe anonymization pipeline is configurable via the anonymization section in the endpoints.yml file.\nThis section must have the structure given in the following example:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "253": {"text": "Copyanonymization: metadata: language: en model_name: en_core_web_lg model_provider: spacy rule_lists: - id: rules_1 rules: - entity: PERSON substitution: text value: John Doe - entity: LOCATION substitution: faker - entity: CREDIT_CARD substitution: faker - entity: IBAN_CODE substitution: faker - id: rules_2 rules: - entity: CREDIT_CARD substitution: mask - entity: IBAN_CODE substitution: mask\n\nHow to populate the metadata section#\n\nThe metadata section contains the following fields: language, model_name, and model_provider.\n\nThe language field specifies the language code of the text to be anonymized. Note that you can only specify one language\nper anonymization pipeline, therefore the capability is currently not able to handle language switching by end users.\n\nThe model_name and model_provider fields specify the name and provider of the Presidio model to be used for\nanonymization. The available model providers are spacy, stanza and transformers.\n\nIf you want to use spacy, we strongly recommend to use the available large models, such as en_core_web_lg or es_core_news_lg.\nThis is to ensure more accurate entity recognition.\n\ncautionWhen using large models, you must ensure that your Rasa Pro environment has enough memory to load the model.\n\nIf you opt for using the transformers model provider, you must specify two model names in the model_name field:\nthe HuggingFace model name and the spaCy model name, where the spaCy model would wrap the transformers NER model.\nFor example:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "254": {"text": "Copyanonymization: metadata: language: en model_name: spacy: en_core_web_lg transformers: dslim/bert-base-NER model_provider: transformers\n\nHow to install the language  model#\n\nYou must install the model you declare to the model_name field in your Rasa Pro environment.\nFor example, if you declare model_name: en_core_web_lg, you must install the spaCy en_core_web_lg model in your Rasa Pro environment.\nYou can follow model installation instructions for spaCy and stanza models in the Presidio official documentation.\n\nIn the case of the transformers model provider, you must install both  models that you declare in the model_name field\nin your Rasa Pro environment. For example, if you declare transformers: dslim/bert-base-NER in endpoints.yml, you must\ninstall the dslim/bert-base-NER model in your Rasa Pro environment. You can find model download instructions for\nHuggingFace in the Presidio official documentation.\n\nnoteNot all languages have a pre-trained language model available. If you want to use a language that does not have\na pre-trained language model available, you must train your own spaCy, stanza\nor huggingface model and install it in your Rasa Pro environment.\n\nHow to populate the rule_lists section#\n\nThe rule_lists section contains a list of anonymization rule lists. Each rule list must have a unique id of type\nstring and a list of rules. Each rule must have an entity field and a substitution field. The entity field\nspecifies the Presidio entity type to be anonymized and must be in uppercase. Note that regular expressions are currently\nnot supported for identifying entities.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "255": {"text": "The substitution field specifies the anonymization method to be used. Currently, the\nfollowing anonymization methods are supported: text, mask, and faker:\n\nThe text anonymization method replaces the original entity value with the value specified in the value field.\nIn the following example, the PERSON entity value will be replaced with John Doe.\n\nCopyanonymization: metadata: language: en model_name: en_core_web_lg model_provider: spacy rule_lists: - id: rules_1 rules: - entity: PERSON substitution: text value: John Doe\n\nThe mask anonymization method replaces the original entity value with a mask of the same length using the character '*'.\nFor example, if the original entity value is John Doe, the anonymized value will be ********.\n\nCopyanonymization: metadata: language: en model_name: en_core_web_lg model_provider: spacy rule_lists: - id: rules_1 rules: - entity: PERSON substitution: mask\n\nThe faker anonymization method replaces the original entity value with a fake value generated by the Faker library.\nFor example, if the original entity value is John Doe, the anonymized value will be replaced with a fake name generated by the Faker library.\n\nCopyanonymization: metadata: language: en model_name: en_core_web_lg model_provider: spacy rule_lists: - id: rules_1 rules: - entity: PERSON substitution: faker\n\nIf no substitution method is specified, the default substitution method is mask.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "256": {"text": "If no substitution method is specified, the default substitution method is mask.\n\nThe value field is only required for the text anonymization method. It specifies the text to be used as the anonymized value.\nIf the value field is not specified, the original entity value to be anonymized will be replaced with the entity type\nname between brackets. For example, if the value field is not specified for the PERSON entity type, the anonymized\nvalue will be <PERSON>.\n\nThe faker anonymization method uses the Faker library to generate fake data.\nBy default, the faker anonymization method will generate fake data in English unless a localized Presidio\nentity type is used. For example, if you use the faker substitution method for the ES_NIF entity type, the generated\nfake data will match the format of a Spanish NIF.\n\nThe faker substitution method does not support the following Presidio entity types:\n\nCRYPTO, NRP, MEDICAL_LICENSEUS_BANK_NUMBER, US_DRIVER_LICENSEUK_NHSIT_FISCAL_CODE, IT_DRIVER_LICENSE, IT_PASSPORT, IT_IDENTITY_CARDSG_NRIC_FINAU_ABN, AU_ACN, AU_TFN, AU_MEDICARE\n\nIf any of the above entities is used together with the faker substitution method, the anonymization pipeline will default\nto the mask substitution method.\n\nHow to update the Kafka event broker configuration#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "257": {"text": "How to update the Kafka event broker configuration#\n\nThe anonymization pipeline uses Kafka to publish the anonymized events to the Kafka topic that is mapped to the\nanonymization rule list. You can configure the Kafka event broker in the endpoints.yml file. The Kafka event broker\nmust contain the anonymization_topics section, which must have the following structure:\n\nCopyevent_broker: type: kafka partition_by_sender: True security_protocol: PLAINTEXT url: localhost anonymization_topics: - name: topic_1 anonymization_rules: rules_1 - name: topic_2 anonymization_rules: rules_2 client_id: kafka-python-rasa\n\nThe anonymization_topics section contains a list of Kafka topics to which the anonymized events will be published.\nEach Kafka topic must have a name field and an anonymization_rules field. The name field specifies the name of the\nKafka topic. The anonymization_rules field specifies the id of the anonymization rule list to be used for the Kafka topic.\n\nHow to enable anonymization of PII in logs#\n\nYou can enable anonymization of PII in logs by filling the logger section in the endpoints.yml file.\nThe logger section must have the following structure:\n\nCopylogger: formatter: anonymization_rules: rules_1\n\nThe anonymization_rules field specifies the id of the anonymization rule list to be used for the logs.\n\ncautionWe strongly recommend to run with log level INFO in production.\nRunning with log level DEBUG will increase the assistant's response latency because of processing delays.\n\nPrevious\u00ab Load Testing GuidelinesNextTraining Data Format \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "258": {"text": "Version: 3.x\n\nTraining Data Format\n\nThis page describes the different types of training data that go into a Rasa assistant and how this training data is structured.\n\nOverview#\n\nRasa uses YAML as\na unified and extendable way to manage all training data,\nincluding NLU data, stories and rules.\n\nYou can split the training data over any number of YAML files,\nand each file can contain any combination of NLU data, stories, and rules.\nThe training data parser determines the training data type using top level keys.\n\nThe domain uses\nthe same YAML format as the training data and can also be split across\nmultiple files or combined in one file. The domain includes\nthe definitions for responses and forms.\nSee the documentation for the domain for information on how to format your domain file.\n\nLegacy FormatsLooking for Markdown data format? It's removed in Rasa 3.0, but\nyou can still find the documentation for markdown NLU data and markdown stories.\nIf you still have your training data in Markdown format then the recommended approach is to use Rasa 2.x\nto convert your data from Markdown to YAML. The migration guide\nexplains how to do this.\n\nHigh-Level Structure#\n\nEach file can contain one or more keys with corresponding training\ndata. One file can contain multiple keys, but each key can only appear\nonce in a single file. The available keys are:\n\nversionnlustoriesrules", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "259": {"text": "versionnlustoriesrules\n\nYou should specify the version key in all YAML training data files.\nIf you don't specify a version key in your training data file, Rasa\nwill assume you are using the latest training data format specification supported\nby the version of Rasa you have installed.\nTraining data files with a Rasa version greater than the version you have\ninstalled on your machine will be skipped.\nCurrently, the latest training data format specification for Rasa 3.x is 3.1.\n\nExample#\n\nHere's a short example which keeps all training data in a single file:\n\nCopyversion: \"3.1\"\nnlu:- intent: greet  examples: |    - Hey    - Hi    - hey there [Sara](name)\n- intent: faq/language  examples: |    - What language do you speak?    - Do you only handle english?\nstories:- story: greet and faq  steps:  - intent: greet  - action: utter_greet  - intent: faq  - action: utter_faq\nrules:- rule: Greet user  steps:  - intent: greet  - action: utter_greet\n\n\nTo specify your test stories, you need to put them into a separate file:\n\ntests/test_stories.ymlCopystories:- story: greet and ask language- steps:  - user: |      hey    intent: greet  - action: utter_greet  - user: |      what language do you speak    intent: faq/language  - action: utter_faq\n\nTest stories use the same format as the story training data and should be placed\nin a separate file with the prefix test_.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "260": {"text": "The  | symbolAs shown in the above examples, the user and examples keys are followed by |\n(pipe) symbol. In YAML | identifies multi-line strings with preserved indentation.\nThis helps to keep special symbols like \", ' and others still available in the\ntraining examples.\n\nNLU Training Data#\n\nNLU training data consists of example user utterances categorized by\nintent. Training examples can also include entities. Entities are structured\npieces of information that can be extracted from a user's message. You can also\nadd extra information such as regular expressions and lookup tables to your\ntraining data to help the model identify intents and entities correctly.\n\nNLU training data is defined under the nlu key. Items that can be added under this key are:\n\nTraining examples grouped by user intent e.g.\noptionally with annotated entities\n\nCopynlu:- intent: check_balance  examples: |    - What's my [credit](account) balance?    - What's the balance on my [credit card account]{\"entity\":\"account\",\"value\":\"credit\"}\n\nSynonyms\n\nCopynlu:- synonym: credit  examples: |    - credit card account    - credit account\n\nRegular expressions\n\nCopynlu:- regex: account_number  examples: |    - \\d{10,12}\n\nLookup tables\n\nCopynlu:- lookup: banks  examples: |    - JPMC    - Comerica    - Bank of America\n\nTraining Examples#\n\nTraining examples are grouped by intent and listed under the\nexamples key. Usually, you'll list one example per line as follows:\n\nCopynlu:- intent: greet  examples: |    - hey    - hi    - whats up", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "261": {"text": "However, it's also possible to use an extended format if you have a custom NLU component and need metadata for your examples:\n\nCopynlu:- intent: greet  examples:  - text: |      hi    metadata:      sentiment: neutral  - text: |      hey there!\n\nThe metadata key can contain arbitrary key-value data that is tied to an example and\naccessible by the components in the NLU pipeline.\nIn the example above, the sentiment metadata could be used by a custom component in\nthe pipeline for sentiment analysis.\n\nYou can also specify this metadata at the intent level:\n\nCopynlu:- intent: greet  metadata:    sentiment: neutral  examples:  - text: |      hi  - text: |      hey there!\n\nIn this case, the content of the metadata key is passed to every intent example.\n\nIf you want to specify retrieval intents, then your NLU examples will look as follows:\n\nCopynlu:- intent: chitchat/ask_name  examples: |    - What is your name?    - May I know your name?    - What do people call you?    - Do you have a name for yourself?\n- intent: chitchat/ask_weather  examples: |    - What's the weather like today?    - Does it look sunny outside today?    - Oh, do you mind checking the weather for me please?    - I like sunny days in Berlin.\n\nAll retrieval intents have a suffix\nadded to them which identifies a particular response key for your assistant. In the\nabove example, ask_name and ask_weather are the suffixes. The suffix is separated from\nthe retrieval intent name by a / delimiter.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "262": {"text": "Special meaning of /As shown in the above examples, the / symbol is reserved as a delimiter to separate\nretrieval intents from their associated response keys. Make sure not to use it in the\nname of your intents.\n\nEntities#\n\nEntities are structured pieces of information that can be extracted from a user's message.\n\nEntities are annotated in training examples with the entity's name.\nIn addition to the entity name, you can annotate an entity with synonyms, roles, or groups.\n\nIn training examples, entity annotation would look like this:\n\nCopynlu:- intent: check_balance  examples: |    - how much do I have on my [savings](account) account    - how much money is in my [checking]{\"entity\": \"account\"} account    - What's the balance on my [credit card account]{\"entity\":\"account\",\"value\":\"credit\"}\n\n\nThe full possible syntax for annotating an entity is:\n\nCopy[<entity-text>]{\"entity\": \"<entity name>\", \"role\": \"<role name>\", \"group\": \"<group name>\", \"value\": \"<entity synonym>\"}\n\nThe keywords role, group, and value are optional in this notation.\nThe value field refers to synonyms. To understand what the labels role and group are\nfor, see the section on entity roles and groups.\n\nSynonyms#\n\nSynonyms normalize your training data by mapping an\nextracted entity to a value other than the literal text extracted.\nYou can define synonyms using the format:\n\nCopynlu:- synonym: credit  examples: |    - credit card account    - credit account\n\nYou can also define synonyms in-line in your training examples by\nspecifying the value of the entity:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "263": {"text": "Copynlu:- intent: check_balance  examples: |    - how much do I have on my [credit card account]{\"entity\": \"account\", \"value\": \"credit\"}    - how much do I owe on my [credit account]{\"entity\": \"account\", \"value\": \"credit\"}\n\nRead more about synonyms on the NLU Training Data page.\n\nRegular Expressions#\n\nYou can use regular expressions to improve intent classification and\nentity extraction using the RegexFeaturizer and RegexEntityExtractor components.\n\nThe format for defining a regular expression is as follows:\n\nCopynlu:- regex: account_number  examples: |    - \\d{10,12}\n\nHere account_number is the name of the regular expression. When used as features for the RegexFeaturizer the name of the regular expression does not matter. When using the RegexEntityExtractor, the name of the regular expression should match the name of the entity you want to extract.\n\nRead more about when and how to use regular expressions with each component on the NLU Training Data page.\n\nLookup Tables#\n\nLookup tables are lists of words used to generate\ncase-insensitive regular expression patterns. The format is as follows:\n\nCopynlu:- lookup: banks  examples: |    - JPMC    - Bank of America\n\nWhen you supply a lookup table in your training data, the contents of that table\nare combined into one large regular expression. This regex is used to check\neach training example to see if it contains matches for entries in the\nlookup table.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "264": {"text": "Lookup table regexes are processed identically to the regular\nexpressions directly specified in the training data and can be used\neither with the RegexFeaturizer\nor with the RegexEntityExtractor.\nThe name of the lookup table is subject to the same constraints as the\nname of a regex feature.\n\nRead more about using lookup tables on the NLU Training Data page.\n\nConversation Training Data#\n\nStories and rules are both representations of conversations between a user\nand a conversational assistant. They are used to train the dialogue management\nmodel. Stories are used to train a machine learning model\nto identify patterns in conversations and generalize to unseen conversation paths.\nRules describe small pieces of conversations that should always\nfollow the same path and are used to train the\nRulePolicy.\n\nStories#\n\nStories are composed of:\n\nstory: The story's name. The name is arbitrary and not used in training;\nyou can use it as a human-readable reference for the story.metadata: arbitrary and optional, not used in training,\nyou can use it to store relevant information about the story\nlike e.g. the authora list of steps: The user messages and actions that make up the story\n\nFor example:\n\nCopystories:- story: Greet the user  metadata:    author: Somebody    key: value  steps:  # list of steps  - intent: greet  - action: utter_greet\n\nEach step can be one of the following:\n\nA user message, represented by intent and entities.An or statement, which includes two or more user messages under it.A bot action.A form.A slot was set event.A checkpoint, which connects the story to another story.\n\nUser Messages#\n\nAll user messages are specified with the intent:\nkey and an optional entities: key.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "265": {"text": "All user messages are specified with the intent:\nkey and an optional entities: key.\n\nWhile writing stories, you do not have to deal with the specific\ncontents of the messages that the users send. Instead, you can take\nadvantage of the output from the NLU pipeline, which uses\na combination of an intent and entities to refer to all possible\nmessages the users can send with the same meaning.\n\nUser messages follow the format:\n\nCopystories:- story: user message structure  steps:    - intent: intent_name  # Required      entities:  # Optional      - entity_name: entity_value    - action: action_name\n\nFor example, to represent the sentence\nI want to check my credit balance, where credit is an entity:\n\nCopystories:- story: story with entities  steps:  - intent: account_balance    entities:    - account_type: credit  - action: action_credit_account_balance\n\nIt is important to include the entities here as well because the\npolicies learn to predict the next action based on a combination of\nboth the intent and entities (you can, however, change this behavior\nusing the use_entities attribute).\n\nActions#\n\nAll actions executed by the bot are specified with the action: key followed\nby the name of the action.\nWhile writing stories, you will encounter two types of actions:\n\nResponses: start with utter_ and\nsend a specific message to the user. e.g.\n\nCopystories:- story: story with a response  steps:  - intent: greet  - action: utter_greet\n\nCustom actions: start with action_, run\narbitrary code and send any number of messages (or none).", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "266": {"text": "Copystories:- story: story with a custom action  steps:  - intent: feedback  - action: action_store_feedback\n\nForms#\n\nA form is a specific kind of custom action that contains the logic to loop over\na set of required slots and ask the user for this information. You\ndefine a form in the forms section in your domain.\nOnce defined, you should specify the happy path\nfor a form as a rule. You should include interruptions of forms or\nother \"unhappy paths\" in stories so that the model can\ngeneralize to unseen conversation sequences.\nAs a step in a story, a form takes the following format:\n\nCopystories:- story: story with a form  steps:  - intent: find_restaurant  - action: restaurant_form                # Activate the form  - active_loop: restaurant_form           # This form is currently active  - active_loop: null                      # Form complete, no form is active  - action: utter_restaurant_found\n\nThe action step activates the form and begins looping over the required slots. The active_loop: restaurant_form\nstep indicates that there is a currently active form. Much like a slot_was_set step,\na form step doesn't set a form to active but indicates that it should already be activated.\nIn the same way, the active_loop: null step indicates that no form should be active before the subsequent\nsteps are taken.\n\nA form can be interrupted and remain active; in this case the interruption should come after the\naction: <form to activate> step and be followed by the active_loop: <active form> step.\nAn interruption of a form could look like this:", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "267": {"text": "Copystories:- story: interrupted food  steps:    - intent: request_restaurant    - action: restaurant_form    - intent: chitchat    - action: utter_chitchat    - active_loop: restaurant_form    - active_loop: null    - action: utter_slots_values\n\nSlots#\n\nA slot event is specified under the key slot_was_set: with the\nslot name and optionally the slot's value.\n\nSlots act as the bots memory.\nSlots are set by either the default action action_extract_slots according to the\nslot mappings specified in the domain, or by custom actions.\nThey are referenced by stories in slot_was_set steps. For example:\n\nCopystories:- story: story with a slot  steps:  - intent: celebrate_bot  - slot_was_set:    - feedback_value: positive  - action: utter_yay\n\nThis means the story requires that the current value for the feedback_value\nslot be positive for the conversation to continue as specified.\n\nWhether or not you need to include the slot's value depends on the\nslot type and whether the value can or should\ninfluence the dialogue. If the value doesn't matter, as is the case for e.g. text slots,\nyou can list only the slot's name:\n\nCopystories:- story: story with a slot  steps:  - intent: greet  - slot_was_set:    - name  - action: utter_greet_user_by_name\n\nThe initial value for any slot by default is null, and you can use it to check if the slot was not set:\n\nCopystories:- story: French cuisine  steps:  - intent: inform  - slot_was_set:    - cuisine: null", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "268": {"text": "How slots workStories do not set slots. The slot must be set by the default action action_extract_slots if a slot mapping applies, or custom\naction before the slot_was_set step.\n\nCheckpoints#\n\nCheckpoints are specified with the checkpoint: key, either at the beginning\nor the end of a story.\n\nCheckpoints are ways to connect stories together. They can be either the first\nor the last step in a story. If they are the last step in a story, that story\nwill be connected to each other story that starts with the checkpoint of the\nsame name when the model is trained. Here is an example of a story that ends\nwith a checkpoint, and one that starts with the same checkpoint:\n\nCopystories:- story: story_with_a_checkpoint_1  steps:  - intent: greet  - action: utter_greet  - checkpoint: greet_checkpoint\n- story: story_with_a_checkpoint_2  steps:  - checkpoint: greet_checkpoint  - intent: book_flight  - action: action_book_flight\n\nCheckpoints at the beginning of stories can also be conditional on\nslots being set, for example:\n\nCopystories:- story: story_with_a_conditional_checkpoint  steps:  - checkpoint: greet_checkpoint    # This checkpoint should only apply if slots are set to the specified value    slot_was_set:    - context_scenario: holiday    - holiday_name: thanksgiving  - intent: greet  - action: utter_greet_thanksgiving", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "269": {"text": "Checkpoints can help simplify your training data and reduce redundancy in it,\nbut do not overuse them. Using lots of checkpoints can quickly make your\nstories hard to understand. It makes sense to use them if a sequence of steps\nis repeated often in different stories, but stories without checkpoints\nare easier to read and write.\n\nOR statement#\n\nor steps are ways to handle multiple intents or slot events the same way,\nwithout writing a separate story for each intent. For example, if you ask the user to\nconfirm something, you might want to treat the affirm and thankyou intents in the\nsame way. Stories with or steps will be converted into multiple\nseparate stories at training time.\nFor example, the following story would be converted to two stories at training time:\n\nCopystories:- story: story with OR  steps:  - intent: signup_newsletter  - action: utter_ask_confirm  - or:    - intent: affirm    - intent: thanks  - action: action_signup_newsletter\n\nYou can also use or statements with slot events.\nThe following means the story requires that the current value for\nthe name slot is set and is either joe or bob. This story\nwould be converted to two stories at training time.\n\nCopystories:- story:  steps:  - intent: greet  - action: utter_greet  - intent: tell_name  - or:    - slot_was_set:        - name: joe    - slot_was_set:        - name: bob  # ... next actions\n\nJust like checkpoints, OR statements can be useful, but if you are using a lot of them,\nit is probably better to restructure your domain and/or intents.", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "270": {"text": "Don't overuseOverusing these features (both checkpoints and OR statements) will slow down training.\n\nRules#\n\nRules are listed under the rules key and look similar to stories. A rule also has a steps\nkey, which contains a list of the same steps as stories do. Rules can additionally\ncontain the conversation_started and conditions keys. These are used to specify conditions\nunder which the rule should apply.\n\nA rule that with a condition looks like this:\n\nCopyrules:- rule: Only say `hey` when the user provided a name  condition:  - slot_was_set:    - user_provided_name: true  steps:  - intent: greet  - action: utter_greet\n\nFor more information about writing rules, see Rules.\n\nTest Stories#\n\nTest stories check if a message is classified correctly as well as the action predictions.\n\nTest stories use the same format as stories,\nexcept that user message steps can include a user to specify the actual\ntext and entity annotations of the user message. Here's an example of a\ntest story:\n\nCopystories:- story: A basic end-to-end test  steps:  - user: |     hey    intent: greet  - action: utter_ask_howcanhelp  - user: |     show me [chinese]{\"entity\": \"cuisine\"} restaurants    intent: inform  - action: utter_ask_location  - user: |     in [Paris]{\"entity\": \"location\"}    intent: inform  - action: utter_ask_price\n\nYou can run the tests using the following command:\n\nCopyrasa test\n\nIf you want to know more about testing head over to\nTesting Your Assistant.\n\nEnd-to-end Training#", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "271": {"text": "End-to-end Training#\n\nNew in 2.2End-to-end training is an experimental feature.\nWe introduce experimental features to get feedback from our community, so we encourage you to try it out!\nHowever, the functionality might be changed or removed in the future.\nIf you have feedback (positive or negative) please share it with us on the Rasa Forum.\n\nWith end-to-end training, you do not have to deal with the specific\nintents of the messages that are extracted by the NLU pipeline.\nInstead, you can put the text of the user message directly in the stories,\nby using user key.\n\nThese end-to-end user messages follow the format:\n\nCopystories:- story: user message structure  steps:    - user: the actual text of the user message    - action: action_name\n\nIn addition, you can add entity tags that can be extracted\nby the TED Policy.\nThe syntax for entity tags is the same as in\nthe NLU training data.\nFor example, the following story contains the user utterance\n I can always go for sushi. By using the syntax from the NLU training data\n[sushi](cuisine), you can mark sushi as an entity of type cuisine.\n\nCopystories:- story: story with entities  steps:  - user: I can always go for [sushi](cuisine)  - action: utter_suggest_cuisine\n\nSimilarly, you can put bot utterances directly in the stories,\nby using the bot key followed by the text that you want your bot to say.\n\nA story with only a bot utterance might look like this:", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "272": {"text": "A story with only a bot utterance might look like this:\n\nCopystories:- story: story with an end-to-end response  steps:  - intent: greet    entities:    - name: Ivan  - bot: Hello, a person with a name!\n\nYou can also have a mixed end-to-end story:\n\nCopystories:- story: full end-to-end story  steps:  - intent: greet    entities:    - name: Ivan  - bot: Hello, a person with a name!  - intent: search_restaurant  - action: utter_suggest_cuisine  - user: I can always go for [sushi](cuisine)  - bot: Personally, I prefer pizza, but sure let's search sushi restaurants  - action: utter_suggest_cuisine  - user: Have a beautiful day!  - action: utter_goodbye\n\nRasa end-to-end training is fully integrated with standard Rasa approach.\nIt means that you can have mixed stories with some steps defined by actions or intents\nand other steps defined directly by user messages or bot responses.\n\nPrevious\u00ab PII ManagementNextNLU Training Data \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "273": {"text": "Version: 3.x\n\nNLU Training Data\n\nNLU training data stores structured information about user messages.\n\nThe goal of NLU (Natural Language Understanding) is to extract structured information from user messages. This usually includes the user's intent and any\nentities their message contains. You can\nadd extra information such as regular expressions and lookup tables to your\ntraining data to help the model identify intents and entities correctly. \n\nTraining Examples#\n\nNLU training data consists of example user utterances categorized by\nintent.\nTo make it easier to use your intents, give them names that relate to what the user wants to accomplish with that intent, keep them in lowercase, and avoid spaces and special characters. \n\nnoteThe / symbol is reserved as a delimiter to separate retrieval intents from response text identifiers. Make sure not\nto use it in the name of your intents.\n\nEntities#\n\nEntities are structured pieces of information inside a user message.\nFor entity extraction to work, you need to either specify training data to train an ML model or you need to define regular expressions to extract entities using the RegexEntityExtractor based on a character pattern.\n\nWhen deciding which entities you need to extract, think about what information your assistant needs for its user goals. The user might provide additional pieces of information that you don't need for any user goal; you don't need to extract these as entities.\n\nSee the training data format for details on how to annotate entities in your training data.\n\nSynonyms#\n\nSynonyms map extracted entities to a value other than the literal text extracted in a case-insensitive manner.\nYou can use synonyms when there are multiple ways users refer to the same\nthing. Think of the end goal of extracting an entity, and figure out from there which values should be considered equivalent.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "274": {"text": "Let's say you had an entity account that you use to look up the user's balance. One of the possible account types is \"credit\". Your users also refer to their \"credit\" account as \"credit\naccount\" and \"credit card account\".\n\nIn this case, you could define \"credit card account\" and \"credit account\" as\nsynonyms to \"credit\":\n\nCopynlu:- synonym: credit  examples: |    - credit card account    - credit account\n\nThen, if either of these phrases is extracted as an entity, it will be\nmapped to the value credit. Any alternate casing of these phrases (e.g. CREDIT, credit ACCOUNT) will also be mapped to the synonym.\n\nProvide Training ExamplesSynonym mapping only happens after entities have been extracted.\nThat means that your training examples should include the synonym examples\n(credit card account and credit account) so that the model will learn to\nrecognize these as entities and replace them with credit.\n\nSee the training data format for details on how to include synonyms in your training data.\n\nRegular Expressions#\n\nYou can use regular expressions to improve intent classification and\nentity extraction in combination with the RegexFeaturizer and RegexEntityExtractor components in the pipeline.\n\nRegular Expressions for Intent Classification#\n\nYou can use regular expressions to improve intent classification by including the RegexFeaturizer component in your pipeline. When using the RegexFeaturizer, a regex does not act as a rule for classifying an intent. It only provides a feature that the intent classifier will use\nto learn patterns for intent classification.\nCurrently, all intent classifiers make use of available regex features.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "275": {"text": "The name of a regex in this case is a human readable description. It can help you remember what a regex is used for, and it is the title of the corresponding pattern feature. It does not have to match any intent or entity name. A regex for a \"help\" request might look like this:\n\nCopynlu:- regex: help  examples: |    - \\bhelp\\b\n\nThe intent being matched could be greet,help_me, assistance or anything else.\n\nTry to create your regular expressions in a way that they match as few\nwords as possible. E.g. using \\bhelp\\b instead of help.*, as the\nlater one might match the whole message whereas the first one only\nmatches a single word.\n\nProvide Training ExamplesThe RegexFeaturizer provides features to the intent classifier, but it doesn't predict the intent directly. Include enough examples containing the regular expression so that the intent classifier can learn to use the regular expression feature.\n\nRegular Expressions for Entity Extraction#\n\nIf your entity has a deterministic structure, you can use regular expressions in one of two ways:\n\nRegular Expressions as Features#\n\nYou can use regular expressions to create features for the RegexFeaturizer component in your NLU pipeline.\n\nWhen using a regular expression with the  RegexFeaturizer, the\nname of the regular expression does not matter.\nWhen using the RegexFeaturizer, a regular expression provides a feature\nthat helps the model learn an association between intents/entities and inputs\nthat fit the regular expression. \n\nProvide Training ExamplesThe RegexFeaturizer provides features to the entity extractor, but it doesn't predict the entity directly. Include enough examples containing the regular expression so that the entity extractor can learn to use the regular expression feature.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "276": {"text": "Regex features for entity extraction\nare currently only supported by the CRFEntityExtractor and DIETClassifier components. Other entity extractors, like\nMitieEntityExtractor or SpacyEntityExtractor, won't use the generated\nfeatures and their presence will not improve entity recognition for\nthese extractors.\n\nRegular Expressions for Rule-based Entity Extraction#\n\nYou can use regular expressions for rule-based entity extraction using the RegexEntityExtractor component in your NLU pipeline.\n\nWhen using the RegexEntityExtractor, the name of the regular expression should\nmatch the name of the entity you want to extract.\nFor example, you could extract account numbers of 10-12 digits by including this regular expression and at least two annotated examples in your training data:\n\nCopynlu:- regex: account_number  examples: |    - \\d{10,12}- intent: inform  examples: |    - my account number is [1234567891](account_number)    - This is my account number [1234567891](account_number)\n\nWhenever a user message contains a sequence of 10-12 digits, it will be extracted as an account_number entity. RegexEntityExtractor doesn't require training examples to learn to extract the entity, but you do need at least two annotated examples of the entity so that the NLU model can register it as an entity at training time.\n\nLookup Tables#\n\nLookup tables are lists of words used to generate\ncase-insensitive regular expression patterns. They can be used in the same ways as regular expressions are used, in combination with the RegexFeaturizer and RegexEntityExtractor components in the pipeline.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "277": {"text": "You can use lookup tables to help extract entities which have a known set of possible values. Keep your lookup tables as specific as possible. For example, to extract country names, you could add a lookup table of all countries in the world:\n\nCopynlu:- lookup: country  examples: |    - Afghanistan    - Albania    - ...    - Zambia    - Zimbabwe\n\nWhen using lookup tables with RegexFeaturizer, provide enough examples for the intent or entity you want to match so that the model can learn to use the generated regular expression as a feature. When using lookup tables with RegexEntityExtractor, provide at least two annotated examples of the entity so that the NLU model can register it as an entity at training time.\n\nEntities Roles and Groups#\n\nAnnotating words as custom entities allows you to define certain concepts in your training data.\nFor example, you can identify cities by annotating them:\n\nCopyI want to fly from [Berlin]{\"entity\": \"city\"} to [San Francisco]{\"entity\": \"city\"} .\n\nHowever, sometimes you want to add more details to your entities.\n\nFor example, to build an assistant that should book a flight, the assistant needs to know which of the two cities in the example above is the departure city and which is the\ndestination city.\nBerlin and San Francisco are both cities, but they play different roles in the message.\nTo distinguish between the different roles, you can assign a role label in addition to the entity label.\n\nCopy- I want to fly from [Berlin]{\"entity\": \"city\", \"role\": \"departure\"} to [San Francisco]{\"entity\": \"city\", \"role\": \"destination\"}.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "278": {"text": "You can also group different entities by specifying a group label next to the entity label.\nThe group label can, for example, be used to define different orders.\nIn the following example, the group label specifies which toppings go with which pizza and\nwhat size each pizza should be.\n\nCopyGive me a [small]{\"entity\": \"size\", \"group\": \"1\"} pizza with [mushrooms]{\"entity\": \"topping\", \"group\": \"1\"} anda [large]{\"entity\": \"size\", \"group\": \"2\"} [pepperoni]{\"entity\": \"topping\", \"group\": \"2\"}\n\nSee the Training Data Format for details on how to define entities with roles and groups in your training data.\n\nThe entity object returned by the extractor will include the detected role/group label.\n\nCopy{ \"text\": \"Book a flight from Berlin to SF\", \"intent\": \"book_flight\", \"entities\": [ { \"start\": 19, \"end\": 25, \"value\": \"Berlin\", \"entity\": \"city\", \"role\": \"departure\", \"extractor\": \"DIETClassifier\", }, { \"start\": 29, \"end\": 31, \"value\": \"San Francisco\", \"entity\": \"city\", \"role\": \"destination\", \"extractor\": \"DIETClassifier\", } ]}\n\nnoteEntity roles and groups are currently only supported by the DIETClassifier and CRFEntityExtractor.\n\nIn order to properly train your model with entities that have roles and groups, make sure to include enough training\nexamples for every combination of entity and role or group label.\nTo enable the model to generalize, make sure to have some variation in your training examples.\nFor example, you should  include examples like fly TO y FROM x, not only fly FROM x TO y.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "279": {"text": "To fill slots from entities with a specific role/group, you need to define a from_entity slot mapping\nfor the slot and specify the role/group that is required. For example:\n\nCopyentities:   - city:       roles:       - departure       - destination\nslots:  departure:    type: any    mappings:    - type: from_entity      entity: city      role: departure  destination:    type: any    mappings:    - type: from_entity      entity: city      role: destination\n\nEntity Roles and Groups influencing dialogue predictions#\n\nIf you want to influence the dialogue predictions by roles or groups, you need to modify your stories to contain\nthe desired role or group label. You also need to list the corresponding roles and groups of an entity in your\ndomain file.\n\nLet's assume you want to output a different sentence depending on what the user's location is. E.g.\nif the user just arrived from London, you might want to ask how the trip to London was. But if the user is on the way\nto Madrid, you might want to wish the user a good stay. You can achieve this with the\nfollowing two stories:\n\nCopystories:- story: The user just arrived from another city.  steps:    - intent: greet    - action: utter_greet    - intent: inform_location      entities:        - city: London          role: from    - action: utter_ask_about_trip\n- story: The user is going to another city.  steps:    - intent: greet    - action: utter_greet    - intent: inform_location      entities:        - city: Madrid          role: to    - action: utter_wish_pleasant_stay\n\nBILOU Entity Tagging#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "280": {"text": "BILOU Entity Tagging#\n\nThe DIETClassifier and CRFEntityExtractor\nhave the option BILOU_flag, which refers to a tagging schema that can be\nused by the machine learning model when processing entities.\nBILOU is short for Beginning, Inside, Last, Outside, and Unit-length.\n\nFor example, the training example\n\nCopy[Alex]{\"entity\": \"person\"} is going with [Marty A. Rick]{\"entity\": \"person\"} to [Los Angeles]{\"entity\": \"location\"}.\n\nis first split into a list of tokens. Then the machine learning model applies the tagging schema\nas shown below depending on the value of the option BILOU_flag:\n\ntokenBILOU_flag = trueBILOU_flag = falsealexU-personpersonisOOgoingOOwithOOmartyB-personpersonaI-personpersonrickL-personpersontoOOlosB-locationlocationangelesL-locationlocation\n\nThe BILOU tagging schema is richer compared to the normal tagging schema. It may help to improve the\nperformance of the machine learning model when predicting entities.\n\ninconsistent BILOU tagsWhen the option BILOU_flag is set to True, the model may predict inconsistent BILOU tags, e.g.\nB-person I-location L-person. Rasa uses some heuristics to clean up the inconsistent BILOU tags.\nFor example, B-person I-location L-person would be changed into B-person I-person L-person.\n\nPrevious\u00ab Training Data FormatNextStories \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "281": {"text": "Version: 3.x\n\nStories\n\nStories are a type of training data used to train your assistant's dialogue management model. Stories can be used to train models that are able to generalize to unseen conversation paths.\n\nFormat#\n\nA story is a representation of a conversation between a user and an AI assistant,\nconverted into a specific format where user inputs are expressed as intents\n(and entities when necessary),\nwhile the assistant's responses and actions are expressed as action names.\n\nHere's an example of a dialogue in the Rasa story format:\n\nCopystories:- story: collect restaurant booking info  # name of the story - just for debugging  steps:  - intent: greet                         # user message with no entities  - action: utter_ask_howcanhelp  - intent: inform                        # user message with entities    entities:    - location: \"rome\"    - price: \"cheap\"  - action: utter_on_it                  # action that the bot should execute  - action: utter_ask_cuisine  - intent: inform    entities:    - cuisine: \"spanish\"  - action: utter_ask_num_people\n\nUser Messages#\n\nWhile writing stories, you do not have to deal with the specific contents of\nthe messages that the users send. Instead, you can take advantage of the output\nfrom the NLU pipeline, which lets you use just the combination of an intent and\nentities to refer to all the possible messages the users can send to mean the\nsame thing.\n\nIt is important to include the entities here as well because the policies learn\nto predict the next action based on a combination of both the intent and\nentities (you can, however, change this behavior using the\nuse_entities attribute).\n\nActions#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "282": {"text": "Actions#\n\nAll actions executed by the bot, including responses are listed\nin stories under the action key.\n\nYou can use a response from your domain as an action by listing it as one\nin a story. Similarly, you can indicate that a story should call a custom action by including\nthe name of the custom action from the actions list in your domain.\n\nEvents#\n\nDuring training, Rasa does not call the action server. This means\nthat your assistant's dialogue management model doesn't know which events a custom\naction will return.\n\nBecause of this, events such as setting a slot or activating/deactivating a form have to be\nexplicitly written out as part of the stories. For more info, see the documentation on\nEvents.\n\nSlot Events#\n\nSlot events are written under slot_was_set in a story. If this slot is set\ninside a custom action, add the slot_was_set event immediately following the\ncustom action call. If your custom action resets a slot value to None, the\ncorresponding event for that would look like this:\n\nCopystories:- story: set slot to none  steps:    # ... other story steps    - action: my_custom_action    - slot_was_set:      - my_slot: null\n\nForm Events#\n\nThere are three kinds of events that need to be kept in mind while dealing with\nforms in stories.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "283": {"text": "A form action event (e.g. - action: restaurant_form) is used in the beginning when first starting a form, and also while resuming the form action when the form is already active.A form activation event (e.g. - active_loop: restaurant_form) is used right after the first form action event.A form deactivation event (e.g. - active_loop: null), which is used to deactivate the form.\n\nwriting form storiesIn order to get around the pitfall of forgetting to add events, the recommended\nway to write these stories is to use interactive learning.\n\nCheckpoints and OR statements#\n\nCheckpoints and OR statements should be used with caution, if at all.\nThere is usually a better way to achieve what you want by using Rules or\nthe ResponseSelector.\n\nCheckpoints#\n\nYou can use checkpoints to modularize and simplify your training\ndata. Checkpoints can be useful, but do not overuse them. Using\nlots of checkpoints can quickly make your example stories hard to\nunderstand, and will slow down training.\n\nHere is an example of stories that\ncontain checkpoints:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "284": {"text": "Here is an example of stories that\ncontain checkpoints:\n\nCopystories:- story: beginning of flow  steps:  - intent: greet  - action: action_ask_user_question  - checkpoint: check_asked_question\n- story: handle user affirm  steps:  - checkpoint: check_asked_question  - intent: affirm  - action: action_handle_affirmation  - checkpoint: check_flow_finished\n- story: handle user deny  steps:  - checkpoint: check_asked_question  - intent: deny  - action: action_handle_denial  - checkpoint: check_flow_finished\n- story: finish flow  steps:  - checkpoint: check_flow_finished  - intent: goodbye  - action: utter_goodbye\n\nnoteUnlike regular stories, checkpoints are not restricted to starting with\nuser input. As long as the checkpoint is inserted at the right points\nin the main stories, the first event can be a custom action or a response\nas well.\n\nOr Statements#\n\nAnother way to write shorter stories, or to handle multiple intents\nor slot events the same way, is to use an or statement.\nFor example, if you ask the user to confirm something, and you want\nto treat the affirm and thankyou intents in the same way.\nThe story below will be converted into two stories at training time:\n\nCopystories:- story:  steps:  # ... previous steps  - action: utter_ask_confirm  - or:    - intent: affirm    - intent: thankyou  - action: action_handle_affirmation\n\nYou can also use or statements with slot events.\nThe following means the story requires that the current value for\nthe name slot is set and is either joe or bob:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "285": {"text": "Copystories:- story:  steps:  - intent: greet  - action: utter_greet  - intent: tell_name  - or:    - slot_was_set:        - name: joe    - slot_was_set:        - name: bob  # ... next actions\n\nor statements can be useful, but if you are using a\nlot of them, it is probably better to restructure your domain and/or intents.\nOverusing OR statements will slow down training.\n\nTest Conversation Format#\n\nThe test conversation format is a format that combines both NLU data and stories\ninto a single file for evaluation. Read more about this format in Testing Your Assistant.\n\ntesting onlyThis format is only used for testing and cannot be used for training.\n\nEnd-to-end Training#\n\nNew in 2.2End-to-end training is an experimental feature.\nWe introduce experimental features to get feedback from our community, so we encourage you to try it out!\nHowever, the functionality might be changed or removed in the future.\nIf you have feedback (positive or negative) please share it with us on the Rasa Forum.\n\nWith end-to-end training, you do not have to deal with the specific\nintents of the messages that are extracted by the NLU pipeline\nor with separate utter_ responses in the domain file.\nInstead, you can include the text of the user messages and/or bot responses directly in your stories.\nSee the training data format\nfor detailed description of how to write end-to-end stories.\n\nYou can mix training data in the end-to-end format with labeled training data which has\nintents and actions specified: Stories can have some steps defined by intents/actions\nand other steps defined directly by user or bot utterances.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "286": {"text": "We call it end-to-end training because policies can consume and predict actual text.\nFor end-to-end user inputs, intents classified by the NLU pipeline\nand extracted entities are ignored.\n\nOnly Rule Policy\nand TED Policy allow end-to-end training.\n\nRulePolicy uses simple string matching during prediction. Namely,\nrules based on user text will only match if the user\ntext strings inside your rules and input during prediction are identical.TEDPolicy passes user text through an additional Neural Network to create\nhidden representations of the text. In order to obtain robust performance you\nneed to provide enough training stories to capture a variety of user texts for any\nend-to-end dialogue turn.\n\nRasa policies are trained for next utterance selection.\nThe only difference to creating utter_ response is how TEDPolicy featurizes\nbot utterances.\nIn case of an utter_ action, TEDPolicy sees only the name of the action, while\nif you provide actual utterance using bot key,\nTEDPolicy will featurize it as textual input depending on the NLU configuration.\nThis can help in case of similar utterances in slightly different situations.\nHowever, this can also make things harder to learn because the fact that different\nutterances have similar texts make it easier for TEDPolicy to confuse these utterances.\n\nEnd-to-end training requires significantly more parameters in TEDPolicy.\nTherefore, training an end-to-end model might require significant computational\nresources depending on how many end-to-end turns you have in your stories.\n\nPrevious\u00ab NLU Training DataNextRules \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "287": {"text": "Version: 3.x\n\nRules\n\nRules are a type of training data used to train your assistant's dialogue management model. Rules describe short pieces of conversations that should always follow the same path.\n\nDon't overuse rules. Rules are great to handle small specific conversation patterns, but\nunlike stories, rules don't have the power to generalize to unseen conversation\npaths. Combine rules and stories to make your assistant robust and able to handle\nreal user behavior.\n\nIf you can't decide whether to write a story or a rule to implement a certain behavior, see the\nbest practices for Writing Conversation Data).\n\nFor additional examples on implementing rules in a Rasa assistant, refer to\nour Rules example bot.\n\nWriting a Rule#\n\nBefore you start writing rules, you have to make sure that the\nRule Policy is added to your model configuration:\n\nCopypolicies:- ... # Other policies- name: RulePolicy\n\nRules can then be added to the rules section of your training data.\n\nTo indicate that a rule can apply at any point in a conversation, start with the\nintent which starts the conversation and then add the actions which your assistant\nshould perform in response to that.\n\nCopyrules:\n- rule: Say `hello` whenever the user sends a message with intent `greet`  steps:  - intent: greet  - action: utter_greet\n\nThis example rule applies at the start of conversation as well as when the user decides\nto send a message with an intent greet in the middle of an ongoing conversation.\n\nDialogue turns that only appear as rules in the training data and do not appear in stories\nwill be ignored by ML-only policies like TEDPolicy at prediction time.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "288": {"text": "Copyrules:- rule: Say `hello` whenever the user sends a message with intent `greet`  steps:  - intent: greet  - action: utter_greet\nstories:- story: story to find a restaurant  steps:  - intent: find_restaurant  - action: restaurant_form  - action: utter_restaurant_found\n\nFor example if you define the greeting rule as above and don't add it to any of your stories,\nafter RulePolicy predicts utter_greet, TEDPolicy will\nmake predictions as if the greet, utter_greet turn did not occur.\n\nRules for the Conversation Start#\n\nTo write a rule which only applies at the beginning of a conversation, add a\nconversation_start: true to your rule:\n\nCopyrules:\n- rule: Say `hello` when the user starts a conversation with intent `greet`  conversation_start: true  steps:  - intent: greet  - action: utter_greet\n\nIf a user sends a message with the intent greet later in the conversation, the rule will not match.\n\nRules with Conditions#\n\nConditions describe requirements which have to be fulfilled for a rule to be\napplicable. To do so, add any information about the prior conversation under the\ncondition key:\n\nCopyrules:\n- rule: Only say `hello` if the user provided a name  condition:  - slot_was_set:    - user_provided_name: true  steps:  - intent: greet  - action: utter_greet\n\nPossible information that you can include under condition includes slot_was_set events\nand active_loop events.\n\nSkip Waiting for User Input at the End of a Rule#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "289": {"text": "Skip Waiting for User Input at the End of a Rule#\n\nBy default, rules will wait for the next user message when finished with the last step:\n\nCopyrules:\n- rule: Rule which will wait for user message when it was applied  steps:  - intent: greet  - action: utter_greet  # - action: action_listen  # Every rule implicitly includes a prediction for `action_listen` as last step.  # This means that Rasa will wait for the next user message.\n\nIf you want to hand over the next action prediction to another story or rule, add\nwait_for_user_input: false to your rule:\n\nCopyrules:\n- rule: Rule which will not wait for user message once it was applied  steps:  - intent: greet  - action: utter_greet  wait_for_user_input: false\n\nThis indicates that the assistant should execute another action\nbefore waiting for more user input.\n\nAbort a Rule#\n\nRules are designed to handle multiple output steps of a chatbot.\nThey are terminated as soon as user interaction is required.\nThis happens automatically via launching a form, since it starts with the user input of the first slot.\nTherefore all steps after launch are ignored.\n\nTermination, however, can also be achieved manually.\nThis can be useful to implement conditional termination criteria.\nHere is an example:\n\nCopyrules:\n- rule: Rule which will be conditionaly terminated  steps:  - intent: greet  - action: action_check_termination  - action: utter_greet  wait_for_user_input: true", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "290": {"text": "Copyfrom rasa_sdk import Actionfrom rasa_sdk.events import FollowupAction\nclass ActionCheckTermination(Action):\n def name(self): return \"action_check_termination\"\n def run(self, dispatcher, tracker, domain):\n # your business logic here        should_terminate = check_for_termination(<params>)\n if should_terminate: return [FollowupAction(\"action_listen\")]\n return []\n\nutter_greet is never executed when termination is done, even after user input, because it causes a new intent prediction.\n\nRules and Forms#\n\nWhen a Form is active, the bot will make predictions based on\nhow the form is defined, ignoring rules. Rules become applicable again if:\n\nthe form fills all required slotsthe form rejects its execution (see\nHandling Unhappy Paths for\nmore details)\n\nPrevious\u00ab StoriesNextDomain \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "291": {"text": "Version: 3.x\n\nDomain\n\nThe domain defines the universe in which your assistant operates. It specifies the intents, entities, slots, responses, forms, and actions your bot should know about. It also defines a configuration for conversation sessions.\n\nHere is a full example of a domain, taken from the\nconcertbot example:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "292": {"text": "Copyversion: \"3.1\"\nintents:  - affirm  - deny  - greet  - thankyou  - goodbye  - search_concerts  - search_venues  - compare_reviews  - bot_challenge  - nlu_fallback  - how_to_get_started\nentities:  - name\nslots:  concerts:    type: list    influence_conversation: false    mappings:    - type: custom  venues:    type: list    influence_conversation: false    mappings:    - type: custom  likes_music:    type: bool    influence_conversation: true    mappings:    - type: custom\nresponses:  utter_greet:    - text: \"Hey there!\"  utter_goodbye:    - text: \"Goodbye :(\"  utter_default:    - text: \"Sorry, I didn't get that, can you rephrase?\"  utter_youarewelcome:    - text: \"You're very welcome.\"  utter_iamabot:    - text: \"I am a bot, powered by Rasa.\"  utter_get_started:    - text: \"I can help you find concerts and venues. Do you like music?\"  utter_awesome:    - text: \"Awesome! You can ask me things like \\\"Find me some concerts\\\" or \\\"What's a good venue\\\"\"\nactions:  - action_search_concerts  - action_search_venues  - action_show_concert_reviews  - action_show_venue_reviews  - action_set_music_preference\nsession_config:  session_expiration_time: 60  # value in minutes  carry_over_slots_to_new_session: true", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "293": {"text": "Multiple Domain Files#\n\nThe domain can be defined as a single YAML file or split across multiple files in a directory.\nWhen split across multiple files, the domain contents will be read and automatically merged together.\n\nUsing the command line interface,\nyou can train a model with split domain files by running:\n\nCopyrasa train --domain path_to_domain_directory\n\nIntents#\n\nThe intents key in your domain file lists all intents\nused in your NLU data and conversation training data.\n\nIgnoring Entities for Certain Intents#\n\nTo ignore all entities for certain intents, you can\nadd the use_entities: [] parameter to the intent in your domain\nfile like this:\n\nCopyintents:  - greet:      use_entities: []\n\nTo ignore some entities or explicitly take only certain entities\ninto account you can use this syntax:\n\nCopyintents:- greet:    use_entities:      - name      - first_name- farewell:    ignore_entities:      - location      - age      - last_name\n\nYou can only use_entities or ignore_entities for any single intent.\n\nExcluded entities for those intents will be unfeaturized and therefore\nwill not impact the next action predictions. This is useful when you have\nan intent where you don't care about the entities being picked up.\n\nIf you list your intents without a use_entities or ignore_entities\nparameter, the entities will be featurized as normal.\n\nIt is also possible to ignore an entity for all intents\nby setting the influence_conversation flag to false for the entity itself.\nSee the entities section for details.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "294": {"text": "Excluded entities for intents will be unfeaturized and therefore\nwill not impact the next action predictions. This is useful when you have\nan intent where you don't care about the entities being picked up.\n\nIf you list your intents without this parameter, and without setting\ninfluence_conversation to false for any entities, all entities will be\nfeaturized as normal.\n\nnoteIf you want these entities not to influence action prediction via slots either,\nset the influence_conversation: false\nparameter for slots with the same name.\n\nEntities#\n\nNew in 3.1As of 3.1, you can use the influence_conversation flag under entities.\nThe flag can be set to false to declare that an entity should not\nbe featurized for any intents. It is a shorthand syntax for adding an entity to\nthe ignore_entities list of every intent in the domain. The flag is optional\nand default behaviour remains unchanged.\n\nThe entities section lists all entities that can be\nextracted by any entity extractor in your\nNLU pipeline.\n\nFor example:\n\nCopyentities:   - PERSON           # entity extracted by SpacyEntityExtractor   - time             # entity extracted by DucklingEntityExtractor   - membership_type  # custom entity extracted by DIETClassifier   - priority         # custom entity extracted by DIETClassifier\n\nWhen using multiple domain files, entities can be specified in any domain file,\nand can be used or ignored by any intent in any domain file.\n\nIf you are using the feature Entity Roles and Groups you also\nneed to list the roles and groups of an entity in this section.\n\nFor example:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "295": {"text": "For example:\n\nCopyentities:   - city:            # custom entity extracted by DIETClassifier       roles:       - from       - to   - topping:         # custom entity extracted by DIETClassifier       groups:       - 1       - 2   - size:            # custom entity extracted by DIETClassifier       groups:       - 1       - 2\n\nBy default, entities influence action prediction. To prevent extracted entities from\ninfluencing the conversation for specific intents you can ignore entities for certain intents.\nTo ignore an entity for all intents, without having to list it under the ignore_entities flag of each intent,\nyou can set the flag influence_conversation to false under the entity:\n\nCopyentities:- location:    influence_conversation: false\n\nThis syntax has the same effect as adding the entity to the ignore_entities\nlist for every intent in the domain.\n\nExplicitly setting influence_conversation: true does not change any behaviour. This is the default setting.\n\nSlots#\n\nSlots are your bot's memory. They act as a key-value store\nwhich can be used to store information the user provided (e.g their home city)\nas well as information gathered about the outside world (e.g. the result of a\ndatabase query).\n\nSlots are defined in the slots section of your domain with their name,\ntype and if and how they should influence the assistant's\nbehavior.\nThe following example defines a slot with name \"slot_name\", type text and\npredefined slot mapping from_entity.\n\nCopyslots: slot_name: type: text mappings: - type: from_entity entity: entity_name\n\nSlots and Conversation Behavior#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "296": {"text": "Slots and Conversation Behavior#\n\nYou can specify whether or not a slot influences the conversation with the\ninfluence_conversation property. \n\nIf you want to store information in a slot without it influencing the conversation,\nset influence_conversation: false when defining your slot. \n\nThe following example defines a slot age which will store information about the\nuser's age, but which will not influence the flow of the conversation. This means\nthat the assistant will ignore the value of the slot each time it predicts the next action.\n\nCopyslots: age: type: text # this slot will not influence the predictions # of the dialogue policies influence_conversation: false\n\nWhen defining a slot, if you leave out influence_conversation or set it to true,\nthat slot will influence the next action prediction, unless it has slot type any.\nThe way the slot influences the conversation\nwill depend on its slot type.\n\nThe following example defines a slot home_city that influences the conversation.\nA text slot will\ninfluence the assistant's behavior depending on whether the slot has a value.\nThe specific value of a text slot (e.g. Bangalore or New York or Hong Kong)\ndoesn't make any difference. \n\nCopyslots: # this slot will influence the conversation depending on # whether the slot is set or not home_city: type: text influence_conversation: true", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "297": {"text": "As an example, consider the two inputs \"What is the weather like?\" and \"What is the\nweather like in Bangalore?\" The conversation should diverge based on whether\nthe home_city slot was set automatically by the NLU. If the slot is already set, the bot\ncan predict the action_forecast action. If the slot is not set, it needs to get the home_city\ninformation before it is able to predict the weather.\n\nSlot Types#\n\nText Slot#\n\nTypetextUse ForStoring text values.ExampleCopyslots:   cuisine:      type: text      mappings:      - type: from_entity        entity: cuisineDescriptionIf influence_conversation is set to true, the assistant's behavior will change\ndepending on whether the slot is set or not. Different texts do not influence the\nconversation any further. This means the following two stories are equal:Copystories:- story: French cuisine  steps:  - intent: inform  - slot_was_set:    - cuisine: french\n- story: Vietnamese cuisine  steps:  - intent: inform  - slot_was_set:    - cuisine: vietnamese\n\nBoolean Slot#\n\nTypeboolUse ForStoring true or false values.ExampleCopyslots:   is_authenticated:      type: bool      mappings:      - type: customDescriptionIf influence_conversation is set to true, the assistant's behavior will change\ndepending on whether the slot is empty, set to true or set to false. Note that an\nempty bool slot influences the conversation differently than if the slot was set to\nfalse.\n\nCategorical Slot#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "298": {"text": "Categorical Slot#\n\nTypecategoricalUse ForStoring slots which can take one of N values.ExampleCopyslots:  risk_level:    type: categorical    values:      - low      - medium      - high    mappings:    - type: customDescriptionIf influence_conversation is set to true, the assistant's behavior will change\ndepending on the concrete value of the slot. This means the assistant's behavior is\ndifferent depending on whether the slot in the above example has the value low,\nmedium, or high.A default value __other__ is automatically added to the user-defined\nvalues. All values encountered which are not explicitly defined in the slot's values\nare mapped to __other__.\n__other__ should not be used as a user-defined value; if it is, it\nwill still behave as the default to which all unseen values are mapped.\n\nFloat Slot#\n\nTypefloatUse ForStoring real numbers.ExampleCopyslots:  temperature:    type: float    min_value: -100.0    max_value:  100.0    mappings:    - type: customDefaultsmax_value=1.0, min_value=0.0DescriptionIf influence_conversation is set to true, the assistant's behavior will change\ndepending on the value of the slot. If the value is between min_value and\nmax_value, the specific value of the number is used.\nAll values below min_value will be treated as min_value, and all values above\nmax_value will be treated as max_value. Hence, if max_value is set to 1,\nthere is no difference between the slot values 2 and 3.5.\n\nList Slot#", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "299": {"text": "List Slot#\n\nTypelistUse ForStoring lists of values.ExampleCopyslots:  shopping_items:    type: list    mappings:    - type: from_entity      entity: shopping_itemDescriptionIf influence_conversation is set to true, the assistant's behavior will change\ndepending on whether the list is empty or not. The length of the list stored in\nthe slot does not influence the dialogue. It only matters whether list length is zero or non-zero.\n\nAny Slot#\n\nTypeanyUse ForStoring arbitrary values (they can be of any type, such as dictionaries or lists).ExampleCopyslots:  shopping_items:    type: any    mappings:    - type: customDescriptionSlots of type any are always ignored during conversations. The property\ninfluence_conversation cannot be set to true for this slot type. If you want to\nstore a custom data structure which should influence the conversation, use a\ncustom slot type.\n\nCustom Slot Types#\n\nMaybe your restaurant booking system can only handle bookings\nfor up to 6 people. In this case you want the value of the\nslot to influence the next selected action (and not just whether\nit's been specified). You can do this by defining a custom slot class.\n\nThe code below defines a custom slot class called NumberOfPeopleSlot.\nThe featurization defines how the value of this slot gets converted to a vector\nso Rasa machine learning model can deal with it.\nThe NumberOfPeopleSlot has three possible \u201cvalues\u201d, which can be represented with\na vector of length 2.\n\n(0,0)not yet set(1,0)between 1 and 6(0,1)more than 6", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "300": {"text": "my_custom_slots.pyCopyfrom rasa.shared.core.slots import Slot\nclass NumberOfPeopleSlot(Slot):\n def feature_dimensionality(self): return 2\n def as_feature(self):        r = [0.0] * self.feature_dimensionality() if self.value: if self.value <= 6:                r[0] = 1.0 else:                r[1] = 1.0 return r\n\nYou can implement a custom slot class as an independent python module,\nseparate from custom action code. Save the code for your custom slot in a directory\nalongside an empty file called \"__init__.py\" so that it will be recognized as a python module.\nYou can then refer to the custom slot class by it's module path.\n\nFor example, say you have saved the code above in \"addons/my_custom_slots.py\", a directory relative to your bot project:\n\nCopy\u2514\u2500\u2500 rasa_bot    \u251c\u2500\u2500 addons    \u2502   \u251c\u2500\u2500 __init__.py    \u2502   \u2514\u2500\u2500 my_custom_slots.py    \u251c\u2500\u2500 config.yml    \u251c\u2500\u2500 credentials.yml    \u251c\u2500\u2500 data    \u251c\u2500\u2500 domain.yml    \u251c\u2500\u2500 endpoints.yml\n\nYour custom slot type's module path\nis then addons.my_custom_slots.NumberOfPeopleSlot.\nUse the module path to refer to the custom slot type in your domain file:\n\ndomain.yamlCopyslots:  people:    type: addons.my_custom_slots.NumberOfPeopleSlot    influence_conversation: true    mappings:    - type: custom", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "301": {"text": "Now that your custom slot class can be used by Rasa, add training stories that diverge based on the value of the people slot.\nYou could write one story for the case where people has a value between 1 and 6, and one for a value greater than six. You can choose any value within these ranges to put in your stories, since they are all featurized the same way (see the featurization table above).\n\nCopystories:- story: collecting table info  steps:  # ... other story steps  - intent: inform    entities:    - people: 3  - slot_was_set:    - people: 3  - action: action_book_table\n- story: too many people at the table  steps:  # ... other story steps  - intent: inform    entities:    - people: 9  - slot_was_set:    - people: 9  - action: action_explain_table_limit\n\nSlot Mappings#\n\nNew in 3.0As of 3.0, slot mappings are defined in the slots section of the domain.\nThis change removes the implicit mechanism of setting slots via auto-fill and replaces it with a new explicit\nmechanism of setting slots after every user message.\nYou will need to explicitly define slot mappings for each slot in the slots section of domain.yml.\nIf you are migrating from an earlier version, please read through the migration guide\nto update your assistant.\n\nRasa comes with four predefined mappings to fill slots\nbased on the latest user message.\n\nIn addition to the predefined mappings, you can define custom slot mappings.\nAll custom slot mappings should contain a mapping of type custom.", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "302": {"text": "Slot mappings are specified as a YAML list of dictionaries under the key mappings in the domain file.\nSlot mappings are prioritized in the order they are listed in the domain. The first slot mapping found to apply will be used to fill the slot.\n\nThe default behavior is for slot mappings to apply after every user message, regardless of the dialogue context.\nTo make a slot mapping apply only within the context of a form see Mapping Conditions.\nThere is one additional default limitation on applying from_entity slot mappings in the context of a form;\nsee unique from_entity mapping matching for details.\n\nNote that you can also define lists of intents for the optional parameters intent and not_intent.\n\nfrom_entity#\n\nThe from_entity slot mapping fills slots based on extracted entities.\nThe following parameters are required:\n\nentity: the entity that should fill the slot\n\nThe following parameters are optional and can be used to further specify when the mapping applies:\n\nintent: Only applies the mapping when this intent is predicted.not_intent: Does not apply the mapping when this intent is predictedrole: Only applies the mapping if the extracted entity has this rolegroup: Only applies the mapping if the extracted entity belongs to this group.\n\nCopyentities:- entity_nameslots:  slot_name:    type: any    mappings:    - type: from_entity      entity: entity_name      role: role_name      group: group name      intent: intent_name      not_intent: excluded_intent\n\nUnique from_entity mapping matching#\n\nThere is an intentional limitation on applying from_entity slot mappings in the context of a form.\nWhen a form is active, a from_entity slot mapping will be applied only if one or more of the following conditions are met:", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "303": {"text": "The slot with the from_entity mapping has just been requested by the formOnly one of the active form's required_slots has that specific from_entity mapping,\nincluding all the attributes of the extracted entity (i.e, entity name, role, group). This is known as a unique entity mapping for the form.\nThe extracted entity will be ignored if the mapping is not unique within the list of required_slots.\n\nThis limitation exists to prevent a form from filling multiple required slots with the same extracted entity value.\n\nFor example, in the example below, an entity date uniquely sets the slot arrival_date,\nan entity city with a role from uniquely sets the slot departure_city and\nan entity city with a role to uniquely sets the slot arrival_city,\ntherefore they can be used to fit corresponding slots\neven if these slots were not requested.\nHowever, entity city without a role can fill both departure_city and arrival_city\nslots, depending which one is requested, so if an entity city is extracted when\nslot arrival_date is requested, it'll be ignored by the form.\n\nCopyslots:  departure_city:    type: text    mappings:    - type: from_entity      entity: city      role: from    - type: from_entity      entity: city  arrival_city:    type: text    mappings:    - type: from_entity      entity: city      role: to    - type: from_entity      entity: city  arrival_date:    type: any    mappings:    - type: from_entity      entity: dateforms:  your_form:    required_slots:    - departure_city    - arrival_city    - arrival_date", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "304": {"text": "Note that the unique from_entity mapping constraint will not prevent filling slots which are not in the active form's required_slots;\nthose mappings will apply as usual, regardless of the uniqueness of the mapping. To limit applicability of a slot mapping to\na specific form, see Mapping Conditions.\n\nfrom_text#\n\nThe from_text mapping will use the text of the last user utterance to fill the slot\nslot_name. If intent_name is None, the slot will be filled regardless of intent name.\nOtherwise, the slot will only be filled if the user's intent is intent_name.\n\nThe slot mapping will not apply if the intent of the message is excluded_intent.\n\nCopyslots:  slot_name:    type: text    mappings:    - type: from_text      intent: intent_name      not_intent: excluded_intent\n\nnoteTo maintain the 2.x form behavior when using from_text slot mappings, you must use mapping conditions,\nwhere both active_loop and requested_slot keys are defined.\n\nfrom_intent#\n\nThe from_intent mapping will fill slot slot_name with value my_value if\nuser intent is intent_name. If you choose not to specify the parameter intent,\nthe slot mapping will apply regardless of the intent of the message as long as\nthe intent is not listed under not_intent parameter.\n\nThe following parameter is required:\n\nvalue: the value that fills the slot slot_name\n\nThe following parameters are optional and can be used to further specify when the mapping applies:\n\nintent: Only applies the mapping when this intent is predicted.not_intent: Does not apply the mapping when this intent is predicted", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "305": {"text": "Note that if you choose not to define the parameter intent, the slot mapping will apply regardless of the intent\nof the message as long as the intent is not listed under the not_intent parameter.\n\nCopyslots:  slot_name:    type: any    mappings:    - type: from_intent      value: my_value      intent: intent_name      not_intent: excluded_intent\n\nfrom_trigger_intent#\n\nThe from_trigger_intent mapping will fill slot slot_name with value my_value\nif a form is activated by a user message with intent intent_name.\nThe slot mapping will not apply if the intent of the message is\nexcluded_intent.\n\nCopyslots:  slot_name:    type: any    mappings:    - type: from_trigger_intent      value: my_value      intent: intent_name      not_intent: excluded_intent\n\nMapping Conditions#\n\nTo apply a slot mapping only within the context of a form, specify\nthe name of the form in the conditions key of a slot mapping. Conditions list the form name(s)\nfor which the mapping is applicable in the active_loop key.\n\nNew in 3.6Slot mappings can now specify null as the value of active_loop to indicate that the slot should only be filled when\nno form is active. Note that requested_slot cannot be used in conjunction with active_loop: null.\n\nConditions can also include the name of the requested_slot. If requested_slot is not mentioned,\nthen the slot will be set if relevant information is extracted, regardless of which slot is being\nrequested by the form.", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "306": {"text": "Copyslots:  slot_name:    type: text    mappings:    - type: from_text      intent: intent_name      conditions:      - active_loop: your_form        requested_slot: slot_name      - active_loop: another_form\n\nnoteIf conditions are not included in a slot mapping, the slot mapping will be applicable regardless of whether\nany form is active. As long as a slot is listed in a form's required_slots, the form will prompt for the slot\nif it is empty when the form is activated.\n\nCustom Slot Mappings#\n\nYou can define custom slot mappings using slot validation actions when none of the\npredefined mappings fit your use case. You must define this slot mapping to be of type custom, for example:\n\nCopyslots: day_of_week: type: text mappings: - type: custom action: action_calculate_day_of_week\n\nYou can also use the custom slot mapping to list slots that will be filled by arbitrary custom actions in the course\nof a conversation, by listing the type and no specific action. For example:\n\nCopyslots: handoff_completed: type: boolean mappings: - type: custom\n\nThis slot will not be updated on every user turn, but only once a custom action that returns a SlotSet event for it is predicted.\n\nInitial slot values#\n\nYou can provide an initial value for a slot in your domain file:\n\nCopyslots:  num_fallbacks:    type: float    initial_value: 0    mappings:    - type: custom\n\nResponses#", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "307": {"text": "Responses#\n\nResponses are actions that send a message to a user without running any custom code or\nreturning events. These responses can be defined directly in the domain file under the responses key\nand can include rich content such as buttons and attachments. For more information on responses and how to define them,\nsee Responses.\n\nForms#\n\nForms are a special type of action meant to help your assistant collect information from a user.\nDefine forms under the forms key in your domain file.\nFor more information on form and how to define them, see Forms.\n\nActions#\n\nActions are the things your bot can actually do.\nFor example, an action could:\n\nrespond to a user,make an external API call,query a database, orjust about anything!\n\nAll custom actions should be listed in your domain, except responses which need not be listed\nunder actions: as they are already listed under responses:.\n\nSelect which actions should receive domain#\n\nNew in 3.4.3You can control if an action should receive a domain or not.\n\nTo do this you must first enable selective domain in you endpoint configuration for\naction_endpoint in endpoints.yml.\n\nCopy# endpoints.ymlaction_endpoint: url: \"http://localhost:5055/webhook\" # URL to your action server enable_selective_domain: true", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "308": {"text": "After selective domain for custom actions is enabled, domain will be sent only to\nthose custom actions which have specifically stated that they need it.\nCustom actions inheriting from rasa-sdk FormValidationAction\nparent class are an exception to this rule as they will always have the domain sent to them.\nTo specify if an action needs the domain add {send_domain: true} to custom action in the list\nof actions in domain.yml:\n\nCopy# domain.ymlactions:  - action_hello_world: {send_domain: True} # will receive domain  - action_calculate_mass_of_sun # will not receive domain  - validate_my_form # will receive domain\n\nSession configuration#\n\nA conversation session represents the dialogue between the assistant and the user.\nConversation sessions can begin in three ways:\n\nthe user begins the conversation with the assistant,the user sends their first message after a configurable period of inactivity, ora manual session start is triggered with the /session_start intent message.\n\nYou can define the period of inactivity after which a new conversation\nsession is triggered in the domain under the session_config key.\n\nAvailable parameters are:\n\nsession_expiration_time defines the time of inactivity in minutes after which a\nnew session will begin.carry_over_slots_to_new_session determines whether\nexisting set slots should be carried over to new sessions.\n\nThe default session configuration looks as follows:\n\nCopysession_config:  session_expiration_time: 60  # value in minutes, 0 means infinitely long  carry_over_slots_to_new_session: true  # set to false to forget slots between sessions", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "309": {"text": "This means that if a user sends their first message after 60 minutes of inactivity, a\nnew conversation session is triggered, and that any existing slots are carried over\ninto the new session. Setting the value of session_expiration_time to 0 means\nthat sessions will not end (note that the action_session_start action will still\nbe triggered at the very beginning of conversations).\n\nnoteA session start triggers the default action action_session_start. Its default\nimplementation moves all existing slots into the new session. Note that all\nconversations begin with an action_session_start. Overriding this action could\nfor instance be used to initialize the tracker with slots from an external API\ncall, or to start the conversation with a bot message. The docs on\nCustomizing the session start action shows you how to do that.\n\nConfig#\n\nThe config key in the domain file maintains the store_entities_as_slots parameter.\nThis parameter is used only in the context of reading stories and turning them into trackers. If the parameter is set\nto True, this will result in slots being implicitly set from entities if applicable entities are present in the story.\nWhen an entity matches the from_entity slot mapping, store_entities_as_slots defines whether the entity value should\nbe placed in that slot. Therefore, this parameter skips adding an explicit slot_was_set step manually in the story.\nBy default, this behaviour is switched on.\n\nYou can turn off this functionality by setting the store_entities_as_slots parameter to false:\n\ndomain.ymlCopyconfig:  store_entities_as_slots: false\n\nlooking for config.yml?If you're looking for information on the config.yml file, check out the docs on\nModel Configuration.", "chunk": 18, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "310": {"text": "Previous\u00ab RulesNextModel Configuration \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 19, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "311": {"text": "Version: 3.x\n\nModel Configuration\n\nThe configuration file defines the components and policies that your model will use to make predictions based on user input.\n\nThe recipe key allows for different types of config and model architecture.\nCurrently, \"default.v1\" and the experimental \"graph.v1\" recipes are supported.\n\nNew in 3.5The config file now includes a new mandatory key assistant_id which represents the unique assistant identifier.\n\nThe assistant_id key must specify a unique value to distinguish multiple assistants in deployment.\nThe assistant identifier will be propagated to each event's metadata, alongside the model id.\nNote that if the config file does not include this required key or the placeholder default value is not replaced, a random\nassistant name will be generated and added to the configuration everytime when running rasa train.\n\nThe language and pipeline keys specify the components used by the  model to make NLU predictions.\nThe policies key defines the policies used by the model to predict the next action.\n\nIf you don't know which components or policies to choose, you can use\nthe Suggested Config feature, which will recommend sensible defaults.\n\nSuggested Config#\n\nYou can leave the pipeline and/or policies key out of your configuration file.\nWhen you run rasa train, the Suggested Config feature will select a default configuration\nfor the missing key(s) to train the model.\n\nMake sure to specify the language key in your config.yml file with the\n2-letter ISO language code.\n\nExample config.yml file:\n\nCopyrecipe: default.v1assistant_id: example_botlanguage: en\npipeline:# will be selected by the Suggested Config feature\npolicies:- name: MemoizationPolicy- name: TEDPolicy  max_history: 5  epochs: 10", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "312": {"text": "The selected configuration will also be written as comments into the config.yml file,\nso you can see which configuration was used. For the example above, the resulting file\nmight look e.g. like this:\n\nCopyrecipe: default.v1assistant_id: example_botlanguage: en\npipeline:# # No configuration for the NLU pipeline was provided. The following default pipeline was used to train your model.# # If you'd like to customize it, uncomment and adjust the pipeline.# # See https://rasa.com/docs/rasa/tuning-your-model for more information.#   - name: WhitespaceTokenizer#   - name: RegexFeaturizer#   - name: LexicalSyntacticFeaturizer#   - name: CountVectorsFeaturizer#   - name: CountVectorsFeaturizer#     analyzer: char_wb#     min_ngram: 1#     max_ngram: 4#   - name: DIETClassifier#     epochs: 100#   - name: EntitySynonymMapper#   - name: ResponseSelector#     epochs: 100#   - name: FallbackClassifier#     threshold: 0.3#     ambiguity_threshold: 0.1\npolicies:- name: MemoizationPolicy- name: TEDPolicy  max_history: 5  epochs: 10\n\n\nIf you like, you can then un-comment the suggested configuration for one or both of the\nkeys and make modifications. Note that this will disable automatic suggestions for this\nkey when training again.\nAs long as you leave the configuration commented out and don't specify any configuration\nfor a key yourself, a default configuration will be suggested whenever you train a new\nmodel.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "313": {"text": "nlu- or dialogue- only modelsOnly the default configuration for pipeline will be automatically selected\nif you run rasa train nlu, and only the default configuration for policies\nwill be selected if you run rasa train core.\n\nPrevious\u00ab DomainNextComponents \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "314": {"text": "Version: 3.x\n\nComponents\n\nComponents make up your NLU pipeline and work sequentially to process user input into structured output. There are components for entity extraction, for intent classification, response selection, pre-processing, and more.\n\nLanguage Models#\n\nThe following components load pre-trained models that are needed if you want to use pre-trained\nword vectors in your pipeline.\n\nMitieNLP#\n\nShortMITIE initializer\n\nOutputsNothing\n\nRequiresNothing\n\nDescriptionInitializes MITIE structures. Every MITIE component relies on this,\nhence this should be put at the beginning\nof every pipeline that uses any MITIE components.\n\nConfigurationThe MITIE library needs a language model file, that must be specified in\nthe configuration:Copypipeline:- name: \"MitieNLP\"  # language model to load  model: \"data/total_word_feature_extractor.dat\"For more information where to get that file from, head over to\ninstalling MITIE.\n\n  You can also pre-train your own word vectors from a language corpus using MITIE. To do so:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "315": {"text": "Get a clean language corpus (a Wikipedia dump works) as a set of text files.Build and run MITIE Wordrep Tool on your corpus.\nThis can take several hours/days depending on your dataset and your workstation.\nYou'll need something like 128GB of RAM for wordrep to run \u2013 yes, that's a lot: try to extend your swap.Set the path of your new total_word_feature_extractor.dat as the model parameter to the MitieNLP component in your\nconfiguration file.For a full example of how to train MITIE word vectors, check out\n\u7528Rasa NLU\u6784\u5efa\u81ea\u5df1\u7684\u4e2d\u6587NLU\u7cfb\u7edf,\na blogpost that goes through creating a MITIE model from a Chinese Wikipedia dump.\n\nSpacyNLP#\n\nShortspaCy language initializer\n\nOutputsNothing\n\nRequiresNothing\n\nDescriptionInitializes spaCy structures. Every spaCy component relies on this, hence this should be put at the beginning\nof every pipeline that uses any spaCy components.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "316": {"text": "ConfigurationYou need to specify the language model to use. The name will be passed to spacy.load(name).\nYou can find more information on the available models on the spaCy documentation.Copypipeline:- name: \"SpacyNLP\"  # language model to load  model: \"en_core_web_md\"\n  # when retrieving word vectors, this will decide if the casing  # of the word is relevant. E.g. `hello` and `Hello` will  # retrieve the same vector, if set to `False`. For some  # applications and models it makes sense to differentiate  # between these two words, therefore setting this to `True`.  case_sensitive: FalseFor more information on how to download the spaCy models, head over to\ninstalling SpaCy.In addition to SpaCy's pretrained language models, you can also use this component to\nattach spaCy models that you've trained yourself.\n\nTokenizers#\n\nTokenizers split text into tokens.\nIf you want to split intents into multiple labels, e.g. for predicting multiple intents or for\nmodeling hierarchical intent structure, use the following flags with any tokenizer:\n\nintent_tokenization_flag indicates whether to tokenize intent labels or not. Set it to True, so that intent\nlabels are tokenized.intent_split_symbol sets the delimiter string to split the intent labels, default is underscore\n(_).\n\nWhitespaceTokenizer#\n\nShortTokenizer using whitespaces as a separator\n\nOutputstokens for user messages, responses (if present), and intents (if specified)\n\nRequiresNothing", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "317": {"text": "RequiresNothing\n\nDescriptionCreates a token for every whitespace separated character sequence.Any character not in: a-zA-Z0-9_#@& will be substituted with whitespace before\nsplitting on whitespace if the character fulfills any of the following conditions:the character follows a whitespace: \" !word\" \u2192 \"word\"the character precedes a whitespace: \"word! \" \u2192 \"word\"the character is at the beginning of the string: \"!word\" \u2192 \"word\"the character is at the end of the string: \"word!\" \u2192 \"word\"Note that:\"wo!rd\" \u2192 \"wo!rd\"In addition, any character not in: a-zA-Z0-9_#@&.~:\\/?[]()!$*+,;=- will be\nsubstituted with whitespace before splitting on whitespace if the character is not\nbetween numbers:\"twenty{one\" \u2192 \"twenty\", \"one\"         (\"{\"` is not between numbers)\"20{1\" \u2192 \"20{1\"                          (\"{\"` is between numbers)Note that:\"name@example.com\" \u2192 \"name@example.com\"\"10,000.1\" \u2192 \"10,000.1\"\"1 - 2\" \u2192 \"1\",\"2\"\n\nConfigurationCopypipeline:- name: \"WhitespaceTokenizer\"  # Flag to check whether to split intents  \"intent_tokenization_flag\": False  # Symbol on which intent should be split  \"intent_split_symbol\": \"_\"  # Regular expression to detect tokens  \"token_pattern\": None\n\nJiebaTokenizer#\n\nShortTokenizer using Jieba for Chinese language\n\nOutputstokens for user messages, responses (if present), and intents (if specified)\n\nRequiresNothing", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "318": {"text": "RequiresNothing\n\nDescriptionCreates tokens using the Jieba tokenizer specifically for Chinese\nlanguage. It will only work for the Chinese language.noteTo use JiebaTokenizer you need to install Jieba with pip3 install jieba.\n\nConfigurationUser's custom dictionary files can be auto loaded by specifying the files' directory path via dictionary_path.\nIf the dictionary_path is None (the default), then no custom dictionary will be used.Copypipeline:- name: \"JiebaTokenizer\"  dictionary_path: \"path/to/custom/dictionary/dir\"  # Flag to check whether to split intents  \"intent_tokenization_flag\": False  # Symbol on which intent should be split  \"intent_split_symbol\": \"_\"  # Regular expression to detect tokens  \"token_pattern\": None\n\nMitieTokenizer#\n\nShortTokenizer using MITIE\n\nOutputstokens for user messages, responses (if present), and intents (if specified)\n\nRequiresMitieNLP\n\nDescriptionCreates tokens using the MITIE tokenizer.\n\nConfigurationCopypipeline:- name: \"MitieTokenizer\"  # Flag to check whether to split intents  \"intent_tokenization_flag\": False  # Symbol on which intent should be split  \"intent_split_symbol\": \"_\"  # Regular expression to detect tokens  \"token_pattern\": None\n\nSpacyTokenizer#\n\nShortTokenizer using spaCy\n\nOutputstokens for user messages, responses (if present), and intents (if specified)\n\nRequiresSpacyNLP\n\nDescriptionCreates tokens using the spaCy tokenizer.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "319": {"text": "RequiresSpacyNLP\n\nDescriptionCreates tokens using the spaCy tokenizer.\n\nConfigurationCopypipeline:- name: \"SpacyTokenizer\"  # Flag to check whether to split intents  \"intent_tokenization_flag\": False  # Symbol on which intent should be split  \"intent_split_symbol\": \"_\"  # Regular expression to detect tokens  \"token_pattern\": None\n\nFeaturizers#\n\nText featurizers are divided into two different categories: sparse featurizers and dense featurizers.\nSparse featurizers are featurizers that return feature vectors with a lot of missing values, e.g. zeros.\nAs those feature vectors would normally take up a lot of memory, we store them as sparse features.\nSparse features only store the values that are non zero and their positions in the vector.\nThus, we save a lot of memory and are able to train on larger datasets.\n\nAll featurizers can return two different kind of features: sequence features and sentence features.\nThe sequence features are a matrix of size (number-of-tokens x feature-dimension).\nThe matrix contains a feature vector for every token in the sequence.\nThis allows us to train sequence models.\nThe sentence features are represented by a matrix of size (1 x feature-dimension).\nIt contains the feature vector for the complete utterance.\nThe sentence features can be used in any bag-of-words model.\nThe corresponding classifier can therefore decide what kind of features to use.\nNote: The feature-dimension for sequence and sentence features does not have to be the same.\n\nMitieFeaturizer#\n\nShortCreates a vector representation of user message and response (if specified) using the MITIE featurizer.\n\nOutputsdense_features for user messages and responses", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "320": {"text": "Outputsdense_features for user messages and responses\n\nRequiresMitieNLP\n\nTypeDense featurizer\n\nDescriptionCreates features for entity extraction, intent classification, and response classification using the MITIE\nfeaturizer.noteNOT used by the MitieIntentClassifier component. But can be used by any component later in the pipeline\nthat makes use of dense_features.\n\nConfigurationThe sentence vector, i.e. the vector of the complete utterance, can be calculated in two different ways, either via\nmean or via max pooling. You can specify the pooling method in your configuration file with the option pooling.\nThe default pooling method is set to mean.Copypipeline:- name: \"MitieFeaturizer\"  # Specify what pooling operation should be used to calculate the vector of  # the complete utterance. Available options: 'mean' and 'max'.  \"pooling\": \"mean\"\n\nSpacyFeaturizer#\n\nShortCreates a vector representation of user message and response (if specified) using the spaCy featurizer.\n\nOutputsdense_features for user messages and responses\n\nRequiresSpacyNLP\n\nTypeDense featurizer\n\nDescriptionCreates features for entity extraction, intent classification, and response classification using the spaCy\nfeaturizer.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "321": {"text": "ConfigurationThe sentence vector, i.e. the vector of the complete utterance, can be calculated in two different ways, either via\nmean or via max pooling. You can specify the pooling method in your configuration file with the option pooling.\nThe default pooling method is set to mean.Copypipeline:- name: \"SpacyFeaturizer\"  # Specify what pooling operation should be used to calculate the vector of  # the complete utterance. Available options: 'mean' and 'max'.  \"pooling\": \"mean\"\n\nConveRTFeaturizer#\n\nShortCreates a vector representation of user message and response (if specified) using\nConveRT model.\n\nOutputsdense_features for user messages and responses\n\nTypeDense featurizer\n\nDescriptionCreates features for entity extraction, intent classification, and response selection.\nIt uses the default signature to compute vector\nrepresentations of input text.noteSince ConveRT model is trained only on an English corpus of conversations, this featurizer should only\nbe used if your training data is in English language.noteNote that this component cannot currently run on MacOS using M1 / M2 architecture.\nMore information on this limitation is available here.\n\nConfigurationCopypipeline:- name: \"ConveRTFeaturizer\"# Remote URL/Local directory of model files(Required)\"model_url\": NonecautionSince the public URL of the ConveRT model was taken offline recently, it is now mandatory\nto set the parameter model_url to a community/self-hosted URL or path to a local directory containing model files.:::\n\nLanguageModelFeaturizer#\n\nShortCreates a vector representation of user message and response (if specified) using a pre-trained language model.", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "322": {"text": "Outputsdense_features for user messages and responses\n\nTypeDense featurizer\n\nDescriptionCreates features for entity extraction, intent classification, and response selection.\nUses a pre-trained language model to compute vector representations of input text.notePlease make sure that you use a language model which is pre-trained on the same language corpus as that of your\ntraining data.", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "323": {"text": "ConfigurationInclude a Tokenizer component before this component.You should specify what language model to load via the parameter model_name. See the below table for the\ncurrently supported language models. The weights to be loaded can be specified by the additional parameter\nmodel_weights. If left empty, it uses the default model weights listed in the table.Copy+----------------+--------------+-------------------------+| Language Model | Parameter    | Default value for       ||                | \"model_name\" | \"model_weights\"         |+----------------+--------------+-------------------------+| BERT           | bert         | rasa/LaBSE              |+----------------+--------------+-------------------------+| GPT            | gpt          | openai-gpt              |+----------------+--------------+-------------------------+| GPT-2          | gpt2         | gpt2                    |+----------------+--------------+-------------------------+| XLNet          | xlnet        | xlnet-base-cased        |+----------------+--------------+-------------------------+| DistilBERT     | distilbert   | distilbert-base-uncased |+----------------+--------------+-------------------------+| RoBERTa        | roberta      | roberta-base            |+----------------+--------------+-------------------------+| camemBERT      | camembert    | camembert-base          |+----------------+--------------+-------------------------+Apart from the default pretrained model weights, further models can be used from\nHuggingFace models provided the following conditions are met (the mentioned\nfiles can be found in the \"Files and versions\" section of the model website):The model architecture is one of the supported language models (check that the model_type in config.json is", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "324": {"text": "listed in the table's column model_name)The model has pretrained Tensorflow weights (check that the file tf_model.h5 exists)The model uses the default tokenizer (config.json should not contain a custom tokenizer_class setting)noteThe LaBSE weights that are loaded as default for the bert architecture provide a multi-lingual model trained on\n112 languages (see our tutorial and the original\npaper). We strongly encourage using this as a baseline and testing your bot\nend-to-end before trying to optimize this component with other weights/architectures.", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "325": {"text": "The following configuration loads the language model BERT with rasa/LaBSE weights, which can be found\nhere:\n\nCopypipeline:  - name: LanguageModelFeaturizer    # Name of the language model to use    model_name: \"bert\"    # Pre-Trained weights to be loaded    model_weights: \"rasa/LaBSE\"\n    # An optional path to a directory from which    # to load pre-trained model weights.    # If the requested model is not found in the    # directory, it will be downloaded and    # cached in this directory for future use.    # The default value of `cache_dir` can be    # set using the environment variable    # `TRANSFORMERS_CACHE`, as per the    # Transformers library.    cache_dir: null\n\nRegexFeaturizer#\n\nShortCreates a vector representation of user message using regular expressions.\n\nOutputssparse_features for user messages and tokens.pattern\n\nRequirestokens\n\nTypeSparse featurizer\n\nDescriptionCreates features for entity extraction and intent classification.\nDuring training the RegexFeaturizer creates a list of regular expressions defined in the training\ndata format.\nFor each regex, a feature will be set marking whether this expression was found in the user message or not.\nAll features will later be fed into an intent classifier / entity extractor to simplify classification (assuming\nthe classifier has learned during the training phase, that this set feature indicates a certain intent / entity).\nRegex features for entity extraction are currently only supported by the CRFEntityExtractor and the\nDIETClassifier components!", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "326": {"text": "ConfigurationMake the featurizer case insensitive by adding the case_sensitive: False option, the default being\ncase_sensitive: True.To correctly process languages such as Chinese that don't use whitespace for word separation,\nthe user needs to add the use_word_boundaries: False option, the default being use_word_boundaries: True.Copypipeline:- name: \"RegexFeaturizer\"  # Text will be processed with case sensitive as default  \"case_sensitive\": True  # use match word boundaries for lookup table  \"use_word_boundaries\": TrueConfiguring for incremental trainingTo ensure that sparse_features are of fixed size during\nincremental training, the\ncomponent should be configured to account for additional patterns that may be\nadded to the training data in future. To do so, configure the number_additional_patterns\nparameter while training the base model from scratch:Copypipeline:- name: RegexFeaturizer  number_additional_patterns: 10If not configured by the user, the component will use twice the number of\npatterns currently present in the training data (including lookup tables and regex patterns)\nas the default value for number_additional_patterns.\nThis number is kept at a minimum of 10 in order to avoid running out of additional\nslots for new patterns too frequently during incremental training.\nOnce the component runs out of additional pattern slots, the new patterns are dropped\nand not considered during featurization. At this point, it is advisable\nto retrain a new model from scratch.\n\nCountVectorsFeaturizer#\n\nShortCreates bag-of-words representation of user messages, intents, and responses.\n\nOutputssparse_features for user messages, intents, and responses\n\nRequirestokens\n\nTypeSparse featurizer", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "327": {"text": "Requirestokens\n\nTypeSparse featurizer\n\nDescriptionCreates features for intent classification and response selection.\nCreates bag-of-words representation of user message, intent, and response using\nsklearn's CountVectorizer.\nAll tokens which consist only of digits (e.g. 123 and 99 but not a123d) will be assigned to the same feature.", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "328": {"text": "ConfigurationSee sklearn's CountVectorizer docs\nfor detailed description of the configuration parameters.This featurizer can be configured to use word or character n-grams, using the analyzer configuration parameter.\nBy default analyzer is set to word so word token counts are used as features.\nIf you want to use character n-grams, set analyzer to char or char_wb.\nThe lower and upper boundaries of the n-grams can be configured via the parameters min_ngram and max_ngram.\nBy default both of them are set to 1.\nBy default the featurizer takes the lemma of a word instead of the word directly if it is available. The lemma\nof a word is currently only set by the SpacyTokenizer. You can\ndisable this behavior by setting use_lemma to False.noteOption char_wb creates character n-grams only from text inside word boundaries;\nn-grams at the edges of words are padded with space.\nThis option can be used to create Subword Semantic Hashing.noteFor character n-grams do not forget to increase min_ngram and max_ngram parameters.\nOtherwise the vocabulary will contain only single letters.Handling Out-Of-Vocabulary (OOV) words:noteEnabled only if analyzer is word.Since the training is performed on limited vocabulary data, it cannot be guaranteed that during prediction\nan algorithm will not encounter an unknown word (a word that were not seen during training).\nIn order to teach an algorithm how to treat unknown words, some words in training data can be substituted\nby generic word OOV_token.\nIn this case during prediction all unknown words will be treated as this generic word OOV_token.For example, one might create separate intent outofscope in the training data containing messages of", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "329": {"text": "different number of OOV_token s and maybe some additional general words.\nThen an algorithm will likely classify a message with unknown words as this intent outofscope.You can either set the OOV_token or a list of words OOV_words:OOV_token set a keyword for unseen words; if training data contains OOV_token as words in some\nmessages, during prediction the words that were not seen during training will be substituted with\nprovided OOV_token; if OOV_token=None (default behavior) words that were not seen during\ntraining will be ignored during prediction time;OOV_words set a list of words to be treated as OOV_token during training; if a list of words\nthat should be treated as Out-Of-Vocabulary is known, it can be set to OOV_words instead of manually\nchanging it in training data or using custom preprocessor.noteThis featurizer creates a bag-of-words representation by counting words,\nso the number of OOV_token in the sentence might be important.noteProviding OOV_words is optional, training data can contain OOV_token input manually or by custom\nadditional preprocessor.\nUnseen words will be substituted with OOV_token only if this token is present in the training\ndata or OOV_words list is provided.If you want to share the vocabulary between user messages and intents, you need to set the option\nuse_shared_vocab to True. In that case a common vocabulary set between tokens in intents and user messages", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "330": {"text": "is build.Copypipeline:- name: \"CountVectorsFeaturizer\"  # Analyzer to use, either 'word', 'char', or 'char_wb'  \"analyzer\": \"word\"  # Set the lower and upper boundaries for the n-grams  \"min_ngram\": 1  \"max_ngram\": 1  # Set the out-of-vocabulary token  \"OOV_token\": \"_oov_\"  # Whether to use a shared vocab  \"use_shared_vocab\": FalseConfiguring for incremental training", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "331": {"text": "To ensure that sparse_features are of fixed size during\nincremental training, the\ncomponent should be configured to account for additional vocabulary tokens\nthat may be added as part of new training examples in the future.\nTo do so, configure the additional_vocabulary_size parameter while training the base model from scratch:\n\nCopypipeline:- name: CountVectorsFeaturizer  additional_vocabulary_size:    text: 1000    response: 1000    action_text: 1000\n\n  As in the above example, you can define additional vocabulary size for each of\ntext (user messages), response (bot responses used by ResponseSelector) and\naction_text (bot responses not used by ResponseSelector). If you are building a shared\nvocabulary (use_shared_vocab=True), you only need to define a value for the text attribute.\nIf any of the attribute is not configured by the user, the component takes half of the current\nvocabulary size as the default value for the attribute's additional_vocabulary_size.\nThis number is kept at a minimum of 1000 in order to avoid running out of additional vocabulary\nslots too frequently during incremental training. Once the component runs out of additional vocabulary slots,\nthe new vocabulary tokens are dropped and not considered during featurization. At this point,\nit is advisable to retrain a new model from scratch.\n\nThe above configuration parameters are the ones you should configure to fit your model to your data.\nHowever, additional parameters exist that can be adapted.", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "332": {"text": "More configurable parametersCopy+---------------------------+-------------------------+--------------------------------------------------------------+| Parameter                 | Default Value           | Description                                                  |+===========================+=========================+==============================================================+| use_shared_vocab          | False                   | If set to 'True' a common vocabulary is used for labels      ||                           |                         | and user message.                                            |+---------------------------+-------------------------+--------------------------------------------------------------+| analyzer                  | word                    | Whether the features should be made of word n-gram or        ||                           |                         | character n-grams. Option", "chunk": 18, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "333": {"text": "| character n-grams. Option 'char_wb' creates character        ||                           |                         | n-grams only from text inside word boundaries;               ||                           |                         | n-grams at the edges of words are padded with space.         ||                           |                         | Valid values: 'word', 'char', 'char_wb'.                     |+---------------------------+-------------------------+--------------------------------------------------------------+| strip_accents             | None                    | Remove accents during the pre-processing step.               ||                           |                         | Valid", "chunk": 19, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "334": {"text": "| Valid values: 'ascii', 'unicode', 'None'.                    |+---------------------------+-------------------------+--------------------------------------------------------------+| stop_words                | None                    | A list of stop words to use.                                 ||                           |                         | Valid values: 'english' (uses an internal list of            ||                           |                         | English stop words), a list of custom stop words, or         ||                           |                         | 'None'.", "chunk": 20, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "335": {"text": "|+---------------------------+-------------------------+--------------------------------------------------------------+| min_df                    | 1                       | When building the vocabulary ignore terms that have a        ||                           |                         | document frequency strictly lower than the given threshold.  |+---------------------------+-------------------------+--------------------------------------------------------------+| max_df                    | 1                       | When building the vocabulary ignore terms that have a        ||                           |                         | document frequency strictly higher than the given threshold  ||                           |                         | (corpus-specific stop words).                                |+---------------------------+-------------------------+--------------------------------------------------------------+|", "chunk": 21, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "336": {"text": "|+---------------------------+-------------------------+--------------------------------------------------------------+| min_ngram                 | 1                       | The lower boundary of the range of n-values for different    ||                           |                         | word n-grams or char n-grams to be extracted.                |+---------------------------+-------------------------+--------------------------------------------------------------+| max_ngram                 | 1                       | The upper boundary of the range of n-values for different    ||                           |                         | word n-grams or char n-grams to be extracted.                |+---------------------------+-------------------------+--------------------------------------------------------------+| max_features              | None                    | If not 'None', build a vocabulary that only consider the top ||", "chunk": 22, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "337": {"text": "|                         | max_features ordered by term frequency across the corpus.    |+---------------------------+-------------------------+--------------------------------------------------------------+| lowercase                 | True                    | Convert all characters to lowercase before tokenizing.       |+---------------------------+-------------------------+--------------------------------------------------------------+| OOV_token                 | None                    | Keyword for unseen words.                                    |+---------------------------+-------------------------+--------------------------------------------------------------+| OOV_words                 | []                      | List of words to be treated as 'OOV_token' during training.  |+---------------------------+-------------------------+--------------------------------------------------------------+| alias                     | CountVectorFeaturizer   | Alias name of featurizer.                                    |+---------------------------+-------------------------+--------------------------------------------------------------+| use_lemma", "chunk": 23, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "338": {"text": "|+---------------------------+-------------------------+--------------------------------------------------------------+| use_lemma                 | True                    | Use the lemma of words for featurization.                    |+---------------------------+-------------------------+--------------------------------------------------------------+| additional_vocabulary_size| text: 1000              | Size of additional vocabulary to account for incremental     ||                           | response: 1000          | training while training a model from scratch                 ||                           | action_text: 1000       |                                                              |+---------------------------+-------------------------+--------------------------------------------------------------+", "chunk": 24, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "339": {"text": "LexicalSyntacticFeaturizer#\n\nShortCreates lexical and syntactic features for a user message to support entity extraction.\n\nOutputssparse_features for user messages\n\nRequirestokens\n\nTypeSparse featurizer\n\nDescriptionCreates features for entity extraction.\nMoves with a sliding window over every token in the user message and creates features according to the\nconfiguration (see below). As a default configuration is present, you don't need to specify a configuration.", "chunk": 25, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "340": {"text": "ConfigurationYou can configure what kind of lexical and syntactic features the featurizer should extract.\nThe following features are available:Copy==============  ==========================================================================================Feature Name    Description==============  ==========================================================================================BOS             Checks if the token is at the beginning of the sentence.EOS             Checks if the token is at the end of the sentence.low             Checks if the token is lower case.upper           Checks if the token is upper case.title           Checks if the token starts with an uppercase character and all remaining characters are                lowercased.digit           Checks if the token contains just digits.prefix5         Take the first five characters of the token.prefix2         Take the first two characters of the token.suffix5         Take the last five characters of the token.suffix3         Take the last three characters of the token.suffix2         Take the last two characters of the token.suffix1         Take the last character of the token.pos             Take the Part-of-Speech tag of the token (``SpacyTokenizer`` required).pos2            Take the first two characters of the Part-of-Speech tag of the token                (``SpacyTokenizer`` required).==============  ==========================================================================================As the featurizer is moving over the tokens in a user message with a sliding window, you can define features for\nprevious tokens, the current token, and the next tokens in the sliding window.\nYou define the features as a [before, token, after] array.\nIf you want to define features for the token before, the current token, and the token after,", "chunk": 26, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "341": {"text": "your features configuration would look like this:Copypipeline:- name: LexicalSyntacticFeaturizer  \"features\": [    [\"low\", \"title\", \"upper\"],    [\"BOS\", \"EOS\", \"low\", \"upper\", \"title\", \"digit\"],    [\"low\", \"title\", \"upper\"],  ]This configuration is also the default configuration.noteIf you want to make use of pos or pos2 you need to add SpacyTokenizer to your pipeline.", "chunk": 27, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "342": {"text": "Intent Classifiers#\n\nIntent classifiers assign one of the intents defined in the domain file to incoming user messages.\n\nMitieIntentClassifier#\n\nShortMITIE intent classifier (using a\ntext categorizer)\n\nOutputsintent\n\nRequirestokens for user message and MitieNLP\n\nOutput-ExampleCopy{ \"intent\": {\"name\": \"greet\", \"confidence\": 0.98343}}\n\nDescriptionThis classifier uses MITIE to perform intent classification. The underlying classifier\nis using a multi-class linear SVM with a sparse linear kernel (see train_text_categorizer_classifier function at the\nMITIE trainer code).noteThis classifier does not rely on any featurizer as it extracts features on its own.\n\nConfigurationCopypipeline:- name: \"MitieIntentClassifier\"\n\nLogisticRegressionClassifier#\n\nShortLogistic regression intent classifier, using the scikit-learn implementation.\n\nOutputsintent and intent_ranking\n\nRequires Either sparse_features or dense_features need to be present. \n\nOutput-Example \n\nCopy{ \"intent\": {\"name\": \"greet\", \"confidence\": 0.780}, \"intent_ranking\": [ { \"confidence\": 0.780, \"name\": \"greet\" }, { \"confidence\": 0.140, \"name\": \"goodbye\" }, { \"confidence\": 0.080, \"name\": \"restaurant_search\" } ]}", "chunk": 28, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "343": {"text": "DescriptionThis classifier uses scikit-learn's logistic regression implementation to perform intent classification.\nIt's able to use only sparse features, but will also pick up any dense features that are present. In general,\nDIET should yield higher accuracy results, but this classifier should train faster and may be used as\na lightweight benchmark. Our implementation uses the base settings from scikit-learn, with the exception\nof the class_weight parameter where we assume the \"balanced\" setting.\n\nConfiguration\n\nAn example configuration with all the defaults can be found below.\n\nCopypipeline:- name: LogisticRegressionClassifier max_iter: 100 solver: lbfgs tol: 0.0001 random_state: 42 ranking_length: 10\n\nThere configuration parameters are briefly explained below. \n\nmax_iter: Maximum number of iterations taken for the solvers to converge.solver: Solver to be used. For very small datasets you might consider liblinear.tol: Tolerance for stopping criteria of the optimizer.random_state: Used to shuffle the data before training.ranking_length: Number of top intents to report. Set to 0 to report all intents\n\nMore details on the parameters can be found on the scikit-learn documentation page.\n\nSklearnIntentClassifier#\n\nShortSklearn intent classifier\n\nOutputsintent and intent_ranking\n\nRequiresdense_features for user messages\n\nOutput-ExampleCopy{ \"intent\": {\"name\": \"greet\", \"confidence\": 0.7800}, \"intent_ranking\": [ { \"confidence\": 0.7800, \"name\": \"greet\" }, { \"confidence\": 0.1400, \"name\": \"goodbye\" }, { \"confidence\": 0.0800, \"name\": \"restaurant_search\" } ]}", "chunk": 29, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "344": {"text": "DescriptionThe sklearn intent classifier trains a linear SVM which gets optimized using a grid search. It also provides\nrankings of the labels that did not \u201cwin\u201d. The SklearnIntentClassifier needs to be preceded by a dense\nfeaturizer in the pipeline. This dense featurizer creates the features used for the classification.\nFor more information about the algorithm itself, take a look at the\nGridSearchCV\ndocumentation.\n\nConfigurationDuring the training of the SVM a hyperparameter search is run to find the best parameter set.\nIn the configuration you can specify the parameters that will get tried.Copypipeline:- name: \"SklearnIntentClassifier\"  # Specifies the list of regularization values to  # cross-validate over for C-SVM.  # This is used with the ``kernel`` hyperparameter in GridSearchCV.  C: [1, 2, 5, 10, 20, 100]  # Specifies the kernel to use with C-SVM.  # This is used with the ``C`` hyperparameter in GridSearchCV.  kernels: [\"linear\"]  # Gamma parameter of the C-SVM.  \"gamma\": [0.1]  # We try to find a good number of cross folds to use during  # intent training, this specifies the max number of folds.  \"max_cross_validation_folds\": 5  # Scoring function used for evaluating the hyper parameters.  # This can be a name or a function.  \"scoring_function\": \"f1_weighted\"\n\nKeywordIntentClassifier#\n\nShortSimple keyword matching intent classifier, intended for small, short-term projects.\n\nOutputsintent\n\nRequiresNothing", "chunk": 30, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "345": {"text": "Outputsintent\n\nRequiresNothing\n\nOutput-ExampleCopy{ \"intent\": {\"name\": \"greet\", \"confidence\": 1.0}}\n\nDescriptionThis classifier works by searching a message for keywords.\nThe matching is case sensitive by default and searches only for exact matches of the keyword-string in the user\nmessage.\nThe keywords for an intent are the examples of that intent in the NLU training data.\nThis means the entire example is the keyword, not the individual words in the example.noteThis classifier is intended only for small projects or to get started. If\nyou have few NLU training data, you can take a look at the recommended pipelines in\nTuning Your Model.\n\nConfigurationCopypipeline:- name: \"KeywordIntentClassifier\"  case_sensitive: True\n\nDIETClassifier#\n\nShortDual Intent Entity Transformer (DIET) used for intent classification and entity extraction\n\nOutputsentities, intent and intent_ranking\n\nRequiresdense_features and/or sparse_features for user message and optionally the intent\n\nOutput-ExampleCopy{ \"intent\": {\"name\": \"greet\", \"confidence\": 0.7800}, \"intent_ranking\": [ { \"confidence\": 0.7800, \"name\": \"greet\" }, { \"confidence\": 0.1400, \"name\": \"goodbye\" }, { \"confidence\": 0.0800, \"name\": \"restaurant_search\" } ], \"entities\": [{ \"end\": 53, \"entity\": \"time\", \"start\": 48, \"value\": \"2017-04-10T00:00:00.000+02:00\", \"confidence\": 1.0, \"extractor\": \"DIETClassifier\" }]}", "chunk": 31, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "346": {"text": "DescriptionDIET (Dual Intent and Entity Transformer) is a multi-task architecture for intent classification and entity\nrecognition. The architecture is based on a transformer which is shared for both tasks.\nA sequence of entity labels is predicted through a Conditional Random Field (CRF) tagging layer on top of the\ntransformer output sequence corresponding to the input sequence of tokens.\nFor the intent labels the transformer output for the complete utterance and intent labels are embedded into a\nsingle semantic vector space. We use the dot-product loss to maximize the similarity with the target label and\nminimize similarities with negative samples.DIET does not provide pre-trained word embeddings or pre-trained language models but it is able to use these features if\nthey are added to the pipeline. If you want to learn more about the model, check out the\nAlgorithm Whiteboard series on YouTube,\nwhere we explain the model architecture in detail.noteIf during prediction time a message contains only words unseen during training\nand no Out-Of-Vocabulary preprocessor was used, an empty intent None is predicted with confidence\n0.0. This might happen if you only use the CountVectorsFeaturizer with a word analyzer\nas featurizer. If you use the char_wb analyzer, you should always get an intent with a confidence\nvalue > 0.0.ConfigurationIf you want to use the DIETClassifier just for intent classification, set entity_recognition to False.\nIf you want to do only entity recognition, set intent_classification to False.\nBy default DIETClassifier does both, i.e. entity_recognition and intent_classification are set to\nTrue.You can define a number of hyperparameters to adapt the model.\nIf you want to adapt your model, start by modifying the following parameters:epochs:", "chunk": 32, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "347": {"text": "If you want to adapt your model, start by modifying the following parameters:epochs:\nThis parameter sets the number of times the algorithm will see the training data (default: 300).\nOne epoch is equals to one forward pass and one backward pass of all the training examples.\nSometimes the model needs more epochs to properly learn.\nSometimes more epochs don't influence the performance.\nThe lower the number of epochs the faster the model is trained.hidden_layers_sizes:\nThis parameter allows you to define the number of feed forward layers and their output\ndimensions for user messages and intents (default: text: [], label: []).\nEvery entry in the list corresponds to a feed forward layer.\nFor example, if you set text: [256, 128], we will add two feed forward layers in front of\nthe transformer. The vectors of the input tokens (coming from the user message) will be passed on to those\nlayers. The first layer will have an output dimension of 256 and the second layer will have an output\ndimension of 128. If an empty list is used (default behavior), no feed forward layer will be\nadded.\nMake sure to use only positive integer values. Usually, numbers of power of two are used.\nAlso, it is usual practice to have decreasing values in the list: next value is smaller or equal to the\nvalue before.embedding_dimension:\nThis parameter defines the output dimension of the embedding layers used inside the model (default: 20).\nWe are using multiple embeddings layers inside the model architecture.\nFor example, the vector of the complete utterance and the intent is passed on to an embedding layer before\nthey are compared and the loss is calculated.number_of_transformer_layers:\nThis parameter sets the number of transformer layers to use (default: 2).", "chunk": 33, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "348": {"text": "This parameter sets the number of transformer layers to use (default: 2).\nThe number of transformer layers corresponds to the transformer blocks to use for the model.transformer_size:\nThis parameter sets the number of units in the transformer (default: 256).\nThe vectors coming out of the transformers will have the given transformer_size.\nThe transformer_size should be a multiple of the number_of_attention_heads parameter,\nthe training exits with an error otherwise.connection_density:\nThis parameter defines the fraction of kernel weights that are set to non zero values for all feed forward\nlayers in the model (default: 0.2). The value should be between 0 and 1. If you set connection_density\nto 1, no kernel weights will be set to 0, the layer acts as a standard feed forward layer. You should not\nset connection_density to 0 as this would result in all kernel weights being 0, i.e. the model is not able\nto learn.constrain_similarities:\nThis parameter when set to True applies a sigmoid cross entropy loss over all similarity terms.\nThis helps in keeping similarities between input and negative labels to smaller values.\nThis should help in better generalization of the model to real world test sets.model_confidence:\nThis parameter allows the user to configure how confidences are computed during inference. It can take only\none value as input which is softmax1. In softmax, confidences are in the range [0, 1]. The computed\nsimilarities are normalized with the softmax activation function.", "chunk": 34, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "349": {"text": "The above configuration parameters are the ones you should configure to fit your model to your data.\nHowever, additional parameters exist that can be adapted.", "chunk": 35, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "350": {"text": "More configurable parametersCopy+---------------------------------+------------------+--------------------------------------------------------------+| Parameter                       | Default Value    | Description                                                  |+=================================+==================+==============================================================+| hidden_layers_sizes             | text: []         | Hidden layer sizes for layers before the embedding layers    ||                                 | label: []        | for user messages and labels. The number of hidden layers is ||                                 |                  | equal to the length of the corresponding list.               |+---------------------------------+------------------+--------------------------------------------------------------+| share_hidden_layers             | False            | Whether to share the hidden layer weights between user       ||                                 |                  | messages and labels.", "chunk": 36, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "351": {"text": "| messages and labels.                                         |+---------------------------------+------------------+--------------------------------------------------------------+| transformer_size                | 256              | Number of units in transformer.                              |+---------------------------------+------------------+--------------------------------------------------------------+| number_of_transformer_layers    | 2                | Number of transformer layers.                                |+---------------------------------+------------------+--------------------------------------------------------------+| number_of_attention_heads       | 4                | Number of attention heads in transformer.                    |+---------------------------------+------------------+--------------------------------------------------------------+| use_key_relative_attention      | False            | If 'True' use key relative embeddings in attention.          |+---------------------------------+------------------+--------------------------------------------------------------+| use_value_relative_attention    | False            | If 'True' use value relative embeddings in attention.", "chunk": 37, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "352": {"text": "If 'True' use value relative embeddings in attention.        |+---------------------------------+------------------+--------------------------------------------------------------+| max_relative_position           | None             | Maximum position for relative embeddings.                    |+---------------------------------+------------------+--------------------------------------------------------------+| unidirectional_encoder          | False            | Use a unidirectional or bidirectional encoder.               |+---------------------------------+------------------+--------------------------------------------------------------+| batch_size                      | [64, 256]        | Initial and final value for batch sizes.                     ||                                 |                  | Batch size will be linearly increased for each epoch.        ||                                 |                  | If constant `batch_size` is required, pass an int, e.g. `8`. |+---------------------------------+------------------+--------------------------------------------------------------+| batch_strategy", "chunk": 38, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "353": {"text": "batch_strategy                  | \"balanced\"       | Strategy used when creating batches.                         ||                                 |                  | Can be either 'sequence' or 'balanced'.                      |+---------------------------------+------------------+--------------------------------------------------------------+| epochs                          | 300              | Number of epochs to train.                                   |+---------------------------------+------------------+--------------------------------------------------------------+| random_seed                     | None             | Set random seed to any 'int' to get reproducible results.    |+---------------------------------+------------------+--------------------------------------------------------------+| learning_rate                   | 0.001            | Initial learning rate for the optimizer.                     |+---------------------------------+------------------+--------------------------------------------------------------+| embedding_dimension", "chunk": 39, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "354": {"text": "embedding_dimension             | 20               | Dimension size of embedding vectors.                         |+---------------------------------+------------------+--------------------------------------------------------------+| dense_dimension                 | text: 128        | Dense dimension for sparse features to use.                  ||                                 | label: 20        |                                                              |+---------------------------------+------------------+--------------------------------------------------------------+| concat_dimension                | text: 128        | Concat dimension for sequence and sentence features.         ||                                 | label: 20        |", "chunk": 40, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "355": {"text": "|+---------------------------------+------------------+--------------------------------------------------------------+| number_of_negative_examples     | 20               | The number of incorrect labels. The algorithm will minimize  ||                                 |                  | their similarity to the user input during training.          |+---------------------------------+------------------+--------------------------------------------------------------+| similarity_type                 | \"auto\"           | Type of similarity measure to use, either 'auto' or 'cosine' ||                                 |                  | or 'inner'.                                                  |+---------------------------------+------------------+--------------------------------------------------------------+| loss_type                       | \"cross_entropy\"  | The type of the loss function, either 'cross_entropy'        ||", "chunk": 41, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "356": {"text": "|                  | or 'margin'. If type 'margin' is specified,                  ||                                 |                  | \"model_confidence=cosine\" will be used which is deprecated   ||                                 |                  | as of 2.3.4. See footnote (1).                               |+---------------------------------+------------------+--------------------------------------------------------------+| ranking_length                  | 10               | Number of top intents to report. Set to 0 to report all      ||                                 |                  | intents.", "chunk": 42, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "357": {"text": "|+---------------------------------+------------------+--------------------------------------------------------------+| renormalize_confidences         | False            | Normalize the reported top intents. Applicable only with loss||                                 |                  | type 'cross_entropy' and 'softmax' confidences.              |+---------------------------------+------------------+--------------------------------------------------------------+| maximum_positive_similarity     | 0.8              | Indicates how similar the algorithm should try to make       ||                                 |                  | embedding vectors for correct labels.                        ||                                 |                  | Should be 0.0 < ... < 1.0 for 'cosine' similarity type.      |+---------------------------------+------------------+--------------------------------------------------------------+| maximum_negative_similarity     | -0.4", "chunk": 43, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "358": {"text": "maximum_negative_similarity     | -0.4             | Maximum negative similarity for incorrect labels.            ||                                 |                  | Should be -1.0 < ... < 1.0 for 'cosine' similarity type.     |+---------------------------------+------------------+--------------------------------------------------------------+| use_maximum_negative_similarity | True             | If 'True' the algorithm only minimizes maximum similarity    ||                                 |                  | over incorrect intent labels, used only if 'loss_type' is    ||                                 |                  | set to 'margin'.                                             |+---------------------------------+------------------+--------------------------------------------------------------+| scale_loss                      | False            | Scale loss inverse proportionally to confidence of correct   ||", "chunk": 44, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "359": {"text": "| Scale loss inverse proportionally to confidence of correct   ||                                 |                  | prediction.                                                  |+---------------------------------+------------------+--------------------------------------------------------------+| regularization_constant         | 0.002            | The scale of regularization.                                 |+---------------------------------+------------------+--------------------------------------------------------------+| negative_margin_scale           | 0.8              | The scale of how important it is to minimize the maximum     ||                                 |                  | similarity between embeddings of different labels.           |+---------------------------------+------------------+--------------------------------------------------------------+| connection_density              | 0.2              | Connection density of the weights in dense layers.           ||", "chunk": 45, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "360": {"text": "||                                 |                  | Value should be between 0 and 1.                             |+---------------------------------+------------------+--------------------------------------------------------------+| drop_rate                       | 0.2              | Dropout rate for encoder. Value should be between 0 and 1.   ||                                 |                  | The higher the value the higher the regularization effect.   |+---------------------------------+------------------+--------------------------------------------------------------+| drop_rate_attention             | 0.0              | Dropout rate for attention. Value should be between 0 and 1. ||                                 |                  | The higher the value the higher the regularization effect.   |+---------------------------------+------------------+--------------------------------------------------------------+| use_sparse_input_dropout        | True             | If", "chunk": 46, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "361": {"text": "| True             | If 'True' apply dropout to sparse input tensors.             |+---------------------------------+------------------+--------------------------------------------------------------+| use_dense_input_dropout         | True             | If 'True' apply dropout to dense input tensors.              |+---------------------------------+------------------+--------------------------------------------------------------+| evaluate_every_number_of_epochs | 20               | How often to calculate validation accuracy.                  ||                                 |                  | Set to '-1' to evaluate just once at the end of training.    |+---------------------------------+------------------+--------------------------------------------------------------+| evaluate_on_number_of_examples  | 0                | How many examples to use for hold out validation set.        ||                                 |                  | Large values may hurt performance, e.g. model accuracy.      |+---------------------------------+------------------+--------------------------------------------------------------+| intent_classification           | True", "chunk": 47, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "362": {"text": "intent_classification           | True             | If 'True' intent classification is trained and intents are   ||                                 |                  | predicted.                                                   |+---------------------------------+------------------+--------------------------------------------------------------+| entity_recognition              | True             | If 'True' entity recognition is trained and entities are     ||                                 |                  | extracted.                                                   |+---------------------------------+------------------+--------------------------------------------------------------+| use_masked_language_model       | False            | If 'True' random tokens of the input message will be masked  ||                                 |", "chunk": 48, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "363": {"text": "|                  | and the model has to predict those tokens. It acts like a    ||                                 |                  | regularizer and should help to learn a better contextual     ||                                 |                  | representation of the input.                                 |+---------------------------------+------------------+--------------------------------------------------------------+| tensorboard_log_directory       | None             | If you want to use tensorboard to visualize training         ||                                 |                  | metrics, set this option to a valid output directory. You    ||                                 |                  | can view the training metrics after training in tensorboard  ||", "chunk": 49, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "364": {"text": "view the training metrics after training in tensorboard  ||                                 |                  | via 'tensorboard --logdir <path-to-given-directory>'.        |+---------------------------------+------------------+--------------------------------------------------------------+| tensorboard_log_level           | \"epoch\"          | Define when training metrics for tensorboard should be       ||                                 |                  | logged. Either after every epoch ('epoch') or for every      ||                                 |                  | training step ('batch').                                 |+---------------------------------+------------------+--------------------------------------------------------------+| featurizers                     | []               | List of featurizer names (alias names). Only features        ||", "chunk": 50, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "365": {"text": "|                  | coming from the listed names are used. If list is empty      ||                                 |                  | all available features are used.                             |+---------------------------------+------------------+--------------------------------------------------------------+| checkpoint_model                | False            | Save the best performing model during training. Models are   ||                                 |                  | stored to the location specified by `--out`. Only the one    ||                                 |                  | best model will be saved.                                    ||                                 |", "chunk": 51, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "366": {"text": "|                  | Requires `evaluate_on_number_of_examples > 0` and            ||                                 |                  | `evaluate_every_number_of_epochs > 0`                        |+---------------------------------+------------------+--------------------------------------------------------------+| split_entities_by_comma         | True             | Splits a list of extracted entities by comma to treat each   ||                                 |                  | one of them as a single entity. Can either be `True`/`False` ||                                 |                  | globally, or set per entity type, such as:                   ||                                 |", "chunk": 52, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "367": {"text": "|                  | ```                                                          ||                                 |                  | ...                                                          ||                                 |                  | - name: DIETClassifier                                       ||                                 |                  |   split_entities_by_comma:                                   ||", "chunk": 53, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "368": {"text": "||                                 |                  |     address: True                                            ||                                 |                  |     ...                                                      ||                                 |                  | ...                                                          ||                                 |                  | ```", "chunk": 54, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "369": {"text": "| ```                                                          |+---------------------------------+------------------+--------------------------------------------------------------+| constrain_similarities          | False            | If `True`, applies sigmoid on all similarity terms and adds  ||                                 |                  | it to the loss function to ensure that similarity values are ||                                 |                  | approximately bounded. Used only if `loss_type=cross_entropy`|+---------------------------------+------------------+--------------------------------------------------------------+| model_confidence                | \"softmax\"        | Affects how model's confidence for each intent               ||                                 |                  | is computed. Currently, only one value is supported:         ||", "chunk": 55, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "370": {"text": "||                                 |                  | 1. `softmax` - Similarities between input and intent         ||                                 |                  | embeddings are post-processed with a softmax function,       ||                                 |                  | as a result of which confidence for all intents sum up to 1. ||                                 |                  | This parameter does not affect the confidence for entity     ||                                 |                  | prediction.                                                  |+---------------------------------+------------------+--------------------------------------------------------------+noteParameter", "chunk": 56, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "371": {"text": "|+---------------------------------+------------------+--------------------------------------------------------------+noteParameter maximum_negative_similarity is set to a negative value to mimic the original", "chunk": 57, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "372": {"text": "starspace algorithm in the case maximum_negative_similarity = maximum_positive_similarity\nand use_maximum_negative_similarity = False.\nSee starspace paper for details.", "chunk": 58, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "373": {"text": "FallbackClassifier#", "chunk": 59, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "374": {"text": "ShortClassifies a message with the intent nlu_fallback if the NLU intent classification\nscores are ambiguous. The confidence is set to be the same as the fallback threshold.Outputsentities, intent and intent_rankingRequiresintent and intent_ranking output from a previous intent classifierOutput-ExampleCopy\n { \"intent\": {\"name\": \"nlu_fallback\", \"confidence\": 0.7183846840434321}, \"intent_ranking\": [ { \"confidence\": 0.7183846840434321, \"name\": \"nlu_fallback\" }, { \"confidence\": 0.28161531595656784, \"name\": \"restaurant_search\" } ], \"entities\": [{ \"end\": 53, \"entity\": \"time\", \"start\": 48, \"value\": \"2017-04-10T00:00:00.000+02:00\", \"confidence\": 1.0, \"extractor\": \"DIETClassifier\" }] }Description  The FallbackClassifier classifies a user message with the intent nlu_fallback\nin case the previous intent classifier wasn't\nable to classify an intent with a confidence greater or equal than the threshold\nof the FallbackClassifier. It can also predict the fallback intent in the\ncase when the confidence scores of the two top ranked intents are closer than the the\nambiguity_threshold.  You can use the FallbackClassifier to implement a\nFallback Action which handles message with uncertain\nNLU predictions.Copyrules:\n- rule: Ask the user to rephrase in case of low NLU confidence  steps:  - intent: nlu_fallback  - action: utter_please_rephraseConfiguration  The FallbackClassifier will only add its prediction for the nlu_fallback", "chunk": 60, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "375": {"text": "intent in case no other intent was predicted with a confidence greater or equal\nthan threshold.threshold:\nThis parameter sets the threshold for predicting the nlu_fallback intent.\nIf no intent predicted by a previous\nintent classifier has a confidence\nlevel greater or equal than threshold the FallbackClassifier will add\na prediction of the nlu_fallback intent with a confidence 1.0.ambiguity_threshold: If you configure an ambiguity_threshold, the\nFallbackClassifier will also predict the nlu_fallback intent in case\nthe difference of the confidence scores for the two highest ranked intents is\nsmaller than the ambiguity_threshold.", "chunk": 61, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "376": {"text": "Entity Extractors#\n\nEntity extractors extract entities, such as person names or locations, from the user message.\n\nnote  If you use multiple entity extractors, we advise that each extractor targets an exclusive\nset of entity types. For example, use Duckling to extract dates and times, and\nDIETClassifier to extract person names. Otherwise, if multiple extractors\ntarget the same entity types, it is very likely that entities will be extracted multiple times.  For example, if you use two or more general purpose extractors like MitieEntityExtractor,\nDIETClassifier, or CRFEntityExtractor,\nthe entity types in your training data will be found and\nextracted by all of them. If the slots you are filling with your entity types are of type text,\nthen the last extractor in your pipeline will win. If the slot is of type list, then all results\nwill be added to the list, including duplicates.  Another, less obvious case of duplicate/overlapping extraction can happen even if extractors focus on different\nentity types. Imagine a food delivery bot and a user message like I would like to order the Monday special.\nHypothetically, if your time extractor's performance isn't very good, it might extract Monday here as a time for the order,\nand your other extractor might extract Monday special as the meal.\nIf you struggle with overlapping entities of this sort, it might make sense to add additional training data\nto improve your extractor. If that does not suffice, you can add a\ncustom component that resolves conflicts in entity\nextraction according to your own logic.\n\nMitieEntityExtractor#\n\nShortMITIE entity extraction (using a MITIE NER trainer)\n\nOutputsentities\n\nRequiresMitieNLP and tokens", "chunk": 62, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "377": {"text": "Outputsentities\n\nRequiresMitieNLP and tokens\n\nOutput-ExampleCopy{ \"entities\": [{ \"value\": \"New York City\", \"start\": 20, \"end\": 33, \"confidence\": null, \"entity\": \"city\", \"extractor\": \"MitieEntityExtractor\" }]}\n\nDescriptionMitieEntityExtractor uses the MITIE entity extraction to find entities in a message. The underlying classifier\nis using a multi class linear SVM with a sparse linear kernel and custom features.\nThe MITIE component does not provide entity confidence values.noteThis entity extractor does not rely on any featurizer as it extracts features on its own.\n\nConfigurationCopypipeline:- name: \"MitieEntityExtractor\"\n\nSpacyEntityExtractor#\n\nShortspaCy entity extraction\n\nOutputsentities\n\nRequiresSpacyNLP\n\nOutput-ExampleCopy{ \"entities\": [{ \"value\": \"New York City\", \"start\": 20, \"end\": 33, \"confidence\": null, \"entity\": \"city\", \"extractor\": \"SpacyEntityExtractor\" }]}\n\nDescriptionUsing spaCy this component predicts the entities of a message. spaCy uses a statistical BILOU transition model.\nAs of now, this component can only use the spaCy builtin entity extraction models and can not be retrained.\nThis extractor does not provide any confidence scores.You can test out spaCy's entity extraction models in this interactive demo.\nNote that some spaCy models are highly case-sensitive.\n\nnoteThe SpacyEntityExtractor extractor does not provide a confidence level and will always return null.", "chunk": 63, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "378": {"text": "ConfigurationConfigure which dimensions, i.e. entity types, the spaCy component\nshould extract. A full list of available dimensions can be found in\nthe spaCy documentation.\nLeaving the dimensions option unspecified will extract all available dimensions.Copypipeline:- name: \"SpacyEntityExtractor\"  # dimensions to extract  dimensions: [\"PERSON\", \"LOC\", \"ORG\", \"PRODUCT\"]\n\nCRFEntityExtractor#\n\nShortConditional random field (CRF) entity extraction\n\nOutputsentities\n\nRequirestokens and dense_features (optional)\n\nOutput-ExampleCopy{ \"entities\": [{ \"value\": \"New York City\", \"start\": 20, \"end\": 33, \"entity\": \"city\", \"confidence\": 0.874, \"extractor\": \"CRFEntityExtractor\" }]}\n\nDescriptionThis component implements a conditional random fields (CRF) to do named entity recognition.\nCRFs can be thought of as an undirected Markov chain where the time steps are words\nand the states are entity classes. Features of the words (capitalization, POS tagging,\netc.) give probabilities to certain entity classes, as are transitions between\nneighbouring entity tags: the most likely set of tags is then calculated and returned.", "chunk": 64, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "379": {"text": "If you want to pass custom features, such as pre-trained word embeddings, to CRFEntityExtractor, you can\nadd any dense featurizer to the pipeline before the CRFEntityExtractor and subsequently configure\nCRFEntityExtractor to make use of the dense features by adding \"text_dense_feature\" to its feature configuration.\nCRFEntityExtractor automatically finds the additional dense features and checks if the dense features are an\niterable of len(tokens), where each entry is a vector.\nA warning will be shown in case the check fails.\nHowever, CRFEntityExtractor will continue to train just without the additional custom features.\nIn case dense features are present, CRFEntityExtractor will pass the dense features to sklearn_crfsuite\nand use them for training.", "chunk": 65, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "380": {"text": "ConfigurationCRFEntityExtractor has a list of default features to use.\nHowever, you can overwrite the default configuration.\nThe following features are available:Copy===================  ==========================================================================================Feature Name         Description===================  ==========================================================================================low                  word identity - use the lower-cased token as a feature.upper                Checks if the token is upper case.title                Checks if the token starts with an uppercase character and all remaining characters are                     lowercased.digit                Checks if the token contains just digits.prefix5              Take the first five characters of the token.prefix2              Take the first two characters of the token.suffix5              Take the last five characters of the token.suffix3              Take the last three characters of the token.suffix2              Take the last two characters of the token.suffix1              Take the last character of the token.pos                  Take the Part-of-Speech tag of the token (``SpacyTokenizer`` required).pos2                 Take the first two characters of the Part-of-Speech tag of the token                     (``SpacyTokenizer`` required).pattern              Take the patterns defined by ``RegexFeaturizer``.bias                 Add an additional \"bias\" feature to the list of features.text_dense_features  Adds additional features from a dense featurizer.===================  ==========================================================================================As the featurizer is moving over the tokens in a user message with a sliding window, you can define features for\nprevious tokens, the current token, and the next tokens in the sliding window.", "chunk": 66, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "381": {"text": "You define the features as [before, token, after] array.Additional you can set a flag to determine whether to use the BILOU tagging schema or not.BILOU_flag determines whether to use BILOU tagging or not. Default True.Copypipeline:- name: \"CRFEntityExtractor\"  # BILOU_flag determines whether to use BILOU tagging or not.  \"BILOU_flag\": True  # features to extract in the sliding window  \"features\": [    [\"low\", \"title\", \"upper\"],    [      \"bias\",      \"low\",      \"prefix5\",      \"prefix2\",      \"suffix5\",      \"suffix3\",      \"suffix2\",      \"upper\",      \"title\",      \"digit\",      \"pattern\",      \"text_dense_features\"    ],    [\"low\", \"title\", \"upper\"],  ]  # The maximum number of iterations for optimization algorithms.  \"max_iterations\": 50  # weight of the L1 regularization  \"L1_c\": 0.1  # weight of the L2 regularization  \"L2_c\": 0.1  # Name of dense featurizers to use.  # If list is empty all available dense features are used.  \"featurizers\": []  # Indicated whether a list of extracted entities should be split into individual entities for a given entity type  \"split_entities_by_comma\":      address: False      email: TruenoteIf POS features are used (pos or", "chunk": 67, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "382": {"text": "False      email: TruenoteIf POS features are used (pos or pos2), you need to have SpacyTokenizer in your pipeline.noteIf pattern features are used, you need to have RegexFeaturizer in your pipeline.noteIf text_dense_features features are used, you need to have a dense featurizer (e.g. LanguageModelFeaturizer) in", "chunk": 68, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "383": {"text": "your pipeline.", "chunk": 69, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "384": {"text": "DucklingEntityExtractor#\n\nShortDuckling lets you extract common entities like dates,\namounts of money, distances, and others in a number of languages.\n\nOutputsentities\n\nRequiresNothing\n\nOutput-ExampleCopy{ \"entities\": [{ \"end\": 53, \"entity\": \"time\", \"start\": 48, \"value\": \"2017-04-10T00:00:00.000+02:00\", \"confidence\": 1.0, \"extractor\": \"DucklingEntityExtractor\" }]}\n\nDescriptionTo use this component you need to run a duckling server. The easiest\noption is to spin up a docker container using\ndocker run -p 8000:8000 rasa/duckling.Alternatively, you can install duckling directly on your\nmachine and start the server.Duckling allows to recognize dates, numbers, distances and other structured entities\nand normalizes them.\nPlease be aware that duckling tries to extract as many entity types as possible without\nproviding a ranking. For example, if you specify both number and time as dimensions\nfor the duckling component, the component will extract two entities: 10 as a number and\nin 10 minutes as a time from the text I will be there in 10 minutes. In such a\nsituation, your application would have to decide which entity type is be the correct one.\nThe extractor will always return 1.0 as a confidence, as it is a rule\nbased system.The list of supported languages can be found in the\nDuckling GitHub repository.", "chunk": 70, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "385": {"text": "ConfigurationConfigure which dimensions, i.e. entity types, the duckling component\nshould extract. A full list of available dimensions can be found in\nthe duckling project readme.\nLeaving the dimensions option unspecified will extract all available dimensions.Copypipeline:- name: \"DucklingEntityExtractor\"  # url of the running duckling server  url: \"http://localhost:8000\"  # dimensions to extract  dimensions: [\"time\", \"number\", \"amount-of-money\", \"distance\"]  # allows you to configure the locale, by default the language is  # used  locale: \"de_DE\"  # if not set the default timezone of Duckling is going to be used  # needed to calculate dates from relative expressions like \"tomorrow\"  timezone: \"Europe/Berlin\"  # Timeout for receiving response from http url of the running duckling server  # if not set the default timeout of duckling http url is set to 3 seconds.  timeout : 3\n\nDIETClassifier#\n\nShortDual Intent Entity Transformer (DIET) used for intent classification and entity extraction\n\nDescriptionYou can find the detailed description of the DIETClassifier under the section\nIntent Classifiers.\n\nRegexEntityExtractor#\n\nShortExtracts entities using the lookup tables and/or regexes defined in the training data\n\nOutputsentities\n\nRequiresNothing", "chunk": 71, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "386": {"text": "Outputsentities\n\nRequiresNothing\n\nDescriptionThis component extract entities using the lookup tables and regexes defined in the training data.\nThe component checks if the user message contains an entry of one of the lookup tables or matches one of the\nregexes. If a match is found, the value is extracted as entity.This component only uses those regex features that have a name equal to one of the entities defined in the\ntraining data. Make sure to annotate at least one example per entity.noteWhen you use this extractor in combination with MitieEntityExtractor,\nCRFEntityExtractor, or DIETClassifier it can\nlead to multiple extraction of entities. Especially if many training sentences have entity annotations for\nthe entity types for which you also have defined regexes. See the big info box at the start of the\nentity extractor section for more info on multiple extraction.In the case where you seem to need both this RegexEntityExtractor and another of the aforementioned\nstatistical extractors, we advise you to consider one of the following two options.Option 1 is advisable when you have exclusive entity types for each type of extractor. To make the\nsure the extractors don't interfere with one another annotate only one example sentence for each\nregex/lookup entity type, but not more.Option 2 is useful when you want to use regexes matches as additional signal for your statistical extractor,\nbut you don't have separate entity types. In this case you will want to 1) add the\nRegexFeaturizer before the extractors in your pipeline 2)\nannotate all your entity examples in the training data and 3) remove the RegexEntityExtractor from your pipeline.\nThis way, your statistical extractors will receive additional signal about the presence of regex matches\nand will be able to statistically determine when to rely on these matches and when not to.", "chunk": 72, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "387": {"text": "ConfigurationMake the entity extractor case sensitive by adding the case_sensitive: True option, the default being\ncase_sensitive: False.To correctly process languages such as Chinese that don't use whitespace for word separation,\nthe user needs to add the use_word_boundaries: False option, the default being use_word_boundaries: True.Copy    pipeline:    - name: RegexEntityExtractor      # text will be processed with case insensitive as default      case_sensitive: False      # use lookup tables to extract entities      use_lookup_tables: True      # use regexes to extract entities      use_regexes: True      # use match word boundaries for lookup table      use_word_boundaries: True\n\nEntitySynonymMapper#\n\nShortMaps synonymous entity values to the same value.\n\nOutputsModifies existing entities that previous entity extraction components found.\n\nRequiresAn extractor from Entity Extractors", "chunk": 73, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "388": {"text": "RequiresAn extractor from Entity Extractors\n\nDescriptionIf the training data contains defined synonyms, this component will make sure that detected entity values will\nbe mapped to the same value. For example, if your training data contains the following examples:Copy[ { \"text\": \"I moved to New York City\", \"intent\": \"inform_relocation\", \"entities\": [{ \"value\": \"nyc\", \"start\": 11, \"end\": 24, \"entity\": \"city\", }] }, { \"text\": \"I got a new flat in NYC.\", \"intent\": \"inform_relocation\", \"entities\": [{ \"value\": \"nyc\", \"start\": 20, \"end\": 23, \"entity\": \"city\", }] }]This component will allow you to map the entities New York City and NYC to nyc. The entity\nextraction will return nyc even though the message contains NYC. When this component changes an\nexisting entity, it appends itself to the processor list of this entity.\n\nConfigurationCopypipeline:- name: \"EntitySynonymMapper\"noteWhen using the EntitySynonymMapper as part of an NLU pipeline, it will need to be placed\nbelow any entity extractors in the configuration file.\n\nCombined Intent Classifiers and Entity Extractors#\n\nDIETClassifier#\n\nShortDual Intent Entity Transformer (DIET) used for intent classification and entity extraction\n\nOutputsentities, intent and intent_ranking\n\nRequiresdense_features and/or sparse_features for user message and optionally the intent", "chunk": 74, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "389": {"text": "Requiresdense_features and/or sparse_features for user message and optionally the intent\n\nOutput-ExampleCopy{ \"intent\": {\"name\": \"greet\", \"confidence\": 0.7800}, \"intent_ranking\": [ { \"confidence\": 0.7800, \"name\": \"greet\" }, { \"confidence\": 0.1400, \"name\": \"goodbye\" }, { \"confidence\": 0.0800, \"name\": \"restaurant_search\" } ], \"entities\": [{ \"end\": 53, \"entity\": \"time\", \"start\": 48, \"value\": \"2017-04-10T00:00:00.000+02:00\", \"confidence\": 1.0, \"extractor\": \"DIETClassifier\" }]}", "chunk": 75, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "390": {"text": "DescriptionDIET (Dual Intent and Entity Transformer) is a multi-task architecture for intent classification and entity\nrecognition. The architecture is based on a transformer which is shared for both tasks.\nA sequence of entity labels is predicted through a Conditional Random Field (CRF) tagging layer on top of the\ntransformer output sequence corresponding to the input sequence of tokens.\nFor the intent labels the transformer output for the complete utterance and intent labels are embedded into a\nsingle semantic vector space. We use the dot-product loss to maximize the similarity with the target label and\nminimize similarities with negative samples.If you want to learn more about the model, check out the\nAlgorithm Whiteboard series on YouTube,\nwhere we explain the model architecture in detail.noteIf during prediction time a message contains only words unseen during training\nand no Out-Of-Vocabulary preprocessor was used, an empty intent None is predicted with confidence\n0.0. This might happen if you only use the CountVectorsFeaturizer with a word analyzer\nas featurizer. If you use the char_wb analyzer, you should always get an intent with a confidence\nvalue > 0.0.", "chunk": 76, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "391": {"text": "Configuration  If you want to use the DIETClassifier just for intent classification, set entity_recognition to False.\nIf you want to do only entity recognition, set intent_classification to False.\nBy default DIETClassifier does both, i.e. entity_recognition and intent_classification are set to\nTrue.  You can define a number of hyperparameters to adapt the model.\nIf you want to adapt your model, start by modifying the following parameters:epochs:\nThis parameter sets the number of times the algorithm will see the training data (default: 300).\nOne epoch is equals to one forward pass and one backward pass of all the training examples.\nSometimes the model needs more epochs to properly learn.\nSometimes more epochs don't influence the performance.\nThe lower the number of epochs the faster the model is trained.hidden_layers_sizes:\nThis parameter allows you to define the number of feed forward layers and their output\ndimensions for user messages and intents (default: text: [], label: []).\nEvery entry in the list corresponds to a feed forward layer.\nFor example, if you set text: [256, 128], we will add two feed forward layers in front of\nthe transformer. The vectors of the input tokens (coming from the user message) will be passed on to those\nlayers. The first layer will have an output dimension of 256 and the second layer will have an output\ndimension of 128. If an empty list is used (default behavior), no feed forward layer will be\nadded.\nMake sure to use only positive integer values. Usually, numbers of power of two are used.\nAlso, it is usual practice to have decreasing values in the list: next value is smaller or equal to the\nvalue before.embedding_dimension:", "chunk": 77, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "392": {"text": "value before.embedding_dimension:\nThis parameter defines the output dimension of the embedding layers used inside the model (default: 20).\nWe are using multiple embeddings layers inside the model architecture.\nFor example, the vector of the complete utterance and the intent is passed on to an embedding layer before\nthey are compared and the loss is calculated.number_of_transformer_layers:\nThis parameter sets the number of transformer layers to use (default: 2).\nThe number of transformer layers corresponds to the transformer blocks to use for the model.transformer_size:\nThis parameter sets the number of units in the transformer (default: 256).\nThe vectors coming out of the transformers will have the given transformer_size.\nThe transformer_size should be a multiple of the number_of_attention_heads parameter,\nthe training exits with an error otherwise.connection_density:\nThis parameter defines the fraction of kernel weights that are set to non zero values for all feed forward\nlayers in the model (default: 0.2). The value should be between 0 and 1. If you set connection_density\nto 1, no kernel weights will be set to 0, the layer acts as a standard feed forward layer. You should not\nset connection_density to 0 as this would result in all kernel weights being 0, i.e. the model is not able\nto learn.BILOU_flag:\nThis parameter determines whether to use BILOU tagging or not. Default True.The above configuration parameters are the ones you should configure to fit your model to your data.", "chunk": 78, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "393": {"text": "However, additional parameters exist that can be adapted.More configurable parametersCopy+---------------------------------+------------------+--------------------------------------------------------------+| Parameter                       | Default Value    | Description                                                  |+=================================+==================+==============================================================+| hidden_layers_sizes             | text: []         | Hidden layer sizes for layers before the embedding layers    ||                                 | label: []        | for user messages and labels. The number of hidden layers is ||                                 |                  | equal to the length of the corresponding.                    |+---------------------------------+------------------+--------------------------------------------------------------+| share_hidden_layers             | False            | Whether to share the hidden layer weights between user       ||                                 |", "chunk": 79, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "394": {"text": "|                  | messages and labels.                                         |+---------------------------------+------------------+--------------------------------------------------------------+| transformer_size                | 256              | Number of units in transformer.                              |+---------------------------------+------------------+--------------------------------------------------------------+| number_of_transformer_layers    | 2                | Number of transformer layers.                                |+---------------------------------+------------------+--------------------------------------------------------------+| number_of_attention_heads       | 4                | Number of attention heads in transformer.                    |+---------------------------------+------------------+--------------------------------------------------------------+| use_key_relative_attention      | False            | If 'True' use key relative embeddings in attention.          |+---------------------------------+------------------+--------------------------------------------------------------+| use_value_relative_attention    | False            | If 'True' use value relative", "chunk": 80, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "395": {"text": "False            | If 'True' use value relative embeddings in attention.        |+---------------------------------+------------------+--------------------------------------------------------------+| max_relative_position           | None             | Maximum position for relative embeddings.                    |+---------------------------------+------------------+--------------------------------------------------------------+| unidirectional_encoder          | False            | Use a unidirectional or bidirectional encoder.               |+---------------------------------+------------------+--------------------------------------------------------------+| batch_size                      | [64, 256]        | Initial and final value for batch sizes.                     ||                                 |                  | Batch size will be linearly increased for each epoch.        ||                                 |                  | If constant `batch_size` is required, pass an int, e.g. `8`. |+---------------------------------+------------------+--------------------------------------------------------------+|", "chunk": 81, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "396": {"text": "an int, e.g. `8`. |+---------------------------------+------------------+--------------------------------------------------------------+| batch_strategy                  | \"balanced\"       | Strategy used when creating batches.                         ||                                 |                  | Can be either 'sequence' or 'balanced'.                      |+---------------------------------+------------------+--------------------------------------------------------------+| epochs                          | 300              | Number of epochs to train.                                   |+---------------------------------+------------------+--------------------------------------------------------------+| random_seed                     | None             | Set random seed to any 'int' to get reproducible results.    |+---------------------------------+------------------+--------------------------------------------------------------+| learning_rate                   | 0.001            | Initial learning rate for the optimizer.", "chunk": 82, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "397": {"text": "|+---------------------------------+------------------+--------------------------------------------------------------+| embedding_dimension             | 20               | Dimension size of embedding vectors.                         |+---------------------------------+------------------+--------------------------------------------------------------+| dense_dimension                 | text: 128        | Dense dimension for sparse features to use if no dense       ||                                 | label: 20        | features are present.                                        |+---------------------------------+------------------+--------------------------------------------------------------+| concat_dimension                | text: 128        | Concat dimension for sequence and sentence features.         ||                                 | label: 20        |", "chunk": 83, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "398": {"text": "|+---------------------------------+------------------+--------------------------------------------------------------+| number_of_negative_examples     | 20               | The number of incorrect labels. The algorithm will minimize  ||                                 |                  | their similarity to the user input during training.          |+---------------------------------+------------------+--------------------------------------------------------------+| similarity_type                 | \"auto\"           | Type of similarity measure to use, either 'auto' or 'cosine' ||                                 |                  | or 'inner'.                                                  |+---------------------------------+------------------+--------------------------------------------------------------+| loss_type                       | \"cross_entropy\"  | The type of the loss function, either 'cross_entropy'        ||", "chunk": 84, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "399": {"text": "|                  | or 'margin'. Type 'margin' is only compatible with           ||                                 |                  | \"model_confidence=cosine\",                                   ||                                 |                  | which is deprecated (see changelog for 2.3.4).               |+---------------------------------+------------------+--------------------------------------------------------------+| ranking_length                  | 10               | Number of top intents  to report. Set to 0 to report all     ||                                 |                  | intents.", "chunk": 85, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "400": {"text": "|+---------------------------------+------------------+--------------------------------------------------------------+| renormalize_confidences         | False            | Normalize the reported top intents. Applicable only with loss||                                 |                  | type 'cross_entropy' and 'softmax' confidences.              |+---------------------------------+------------------+--------------------------------------------------------------+| maximum_positive_similarity     | 0.8              | Indicates how similar the algorithm should try to make       ||                                 |                  | embedding vectors for correct labels.                        ||                                 |                  | Should be 0.0 < ... < 1.0 for 'cosine' similarity type.      |+---------------------------------+------------------+--------------------------------------------------------------+| maximum_negative_similarity     |", "chunk": 86, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "401": {"text": "maximum_negative_similarity     | -0.4             | Maximum negative similarity for incorrect labels.            ||                                 |                  | Should be -1.0 < ... < 1.0 for 'cosine' similarity type.     |+---------------------------------+------------------+--------------------------------------------------------------+| use_maximum_negative_similarity | True             | If 'True' the algorithm only minimizes maximum similarity    ||                                 |                  | over incorrect intent labels, used only if 'loss_type' is    ||                                 |                  | set to 'margin'.                                             |+---------------------------------+------------------+--------------------------------------------------------------+| scale_loss                      | False            | Scale loss inverse proportionally to confidence of correct   ||", "chunk": 87, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "402": {"text": "| Scale loss inverse proportionally to confidence of correct   ||                                 |                  | prediction.                                                  |+---------------------------------+------------------+--------------------------------------------------------------+| regularization_constant         | 0.002            | The scale of regularization.                                 |+---------------------------------+------------------+--------------------------------------------------------------+| negative_margin_scale           | 0.8              | The scale of how important it is to minimize the maximum     ||                                 |                  | similarity between embeddings of different labels.           |+---------------------------------+------------------+--------------------------------------------------------------+| connection_density              | 0.2              | Connection density of the weights in dense layers.           ||", "chunk": 88, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "403": {"text": "||                                 |                  | Value should be between 0 and 1.                             |+---------------------------------+------------------+--------------------------------------------------------------+| drop_rate                       | 0.2              | Dropout rate for encoder. Value should be between 0 and 1.   ||                                 |                  | The higher the value the higher the regularization effect.   |+---------------------------------+------------------+--------------------------------------------------------------+| drop_rate_attention             | 0.0              | Dropout rate for attention. Value should be between 0 and 1. ||                                 |                  | The higher the value the higher the regularization effect.   |+---------------------------------+------------------+--------------------------------------------------------------+| use_sparse_input_dropout        | True             | If", "chunk": 89, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "404": {"text": "| True             | If 'True' apply dropout to sparse input tensors.             |+---------------------------------+------------------+--------------------------------------------------------------+| use_dense_input_dropout         | True             | If 'True' apply dropout to dense input tensors.              |+---------------------------------+------------------+--------------------------------------------------------------+| evaluate_every_number_of_epochs | 20               | How often to calculate validation accuracy.                  ||                                 |                  | Set to '-1' to evaluate just once at the end of training.    |+---------------------------------+------------------+--------------------------------------------------------------+| evaluate_on_number_of_examples  | 0                | How many examples to use for hold out validation set.        ||                                 |                  | Large values may hurt performance, e.g. model accuracy.      |+---------------------------------+------------------+--------------------------------------------------------------+| intent_classification           | True", "chunk": 90, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "405": {"text": "intent_classification           | True             | If 'True' intent classification is trained and intents are   ||                                 |                  | predicted.                                                   |+---------------------------------+------------------+--------------------------------------------------------------+| entity_recognition              | True             | If 'True' entity recognition is trained and entities are     ||                                 |                  | extracted.                                                   |+---------------------------------+------------------+--------------------------------------------------------------+| use_masked_language_model       | False            | If 'True' random tokens of the input message will be masked  ||                                 |", "chunk": 91, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "406": {"text": "|                  | and the model has to predict those tokens. It acts like a    ||                                 |                  | regularizer and should help to learn a better contextual     ||                                 |                  | representation of the input.                                 |+---------------------------------+------------------+--------------------------------------------------------------+| BILOU_flag                      | True             | If 'True', additional BILOU tags are added to entity labels. |+---------------------------------+------------------+--------------------------------------------------------------+| tensorboard_log_directory       | None             | If you want to use tensorboard to visualize training         ||                                 |                  | metrics, set this option to a valid output directory. You    ||", "chunk": 92, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "407": {"text": "set this option to a valid output directory. You    ||                                 |                  | can view the training metrics after training in tensorboard  ||                                 |                  | via 'tensorboard --logdir <path-to-given-directory>'.        |+---------------------------------+------------------+--------------------------------------------------------------+| tensorboard_log_level           | \"epoch\"          | Define when training metrics for tensorboard should be       ||                                 |                  | logged. Either after every epoch ('epoch') or for every      ||                                 |                  | training step ('batch').                                 |+---------------------------------+------------------+--------------------------------------------------------------+| featurizers", "chunk": 93, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "408": {"text": "featurizers                     | []               | List of featurizer names (alias names). Only features        ||                                 |                  | coming from the listed names are used. If list is empty      ||                                 |                  | all available features are used.                             |+---------------------------------+------------------+--------------------------------------------------------------+| checkpoint_model                | False            | Save the best performing model during training. Models are   ||                                 |                  | stored to the location specified by `--out`. Only the one    ||                                 |                  | best model will be saved.", "chunk": 94, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "409": {"text": "| best model will be saved.                                    ||                                 |                  | Requires `evaluate_on_number_of_examples > 0` and            ||                                 |                  | `evaluate_every_number_of_epochs > 0`                        |+---------------------------------+------------------+--------------------------------------------------------------+noteParameter maximum_negative_similarity is set to a negative value to mimic the original", "chunk": 95, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "410": {"text": "starspace algorithm in the case maximum_negative_similarity = maximum_positive_similarity\nand use_maximum_negative_similarity = False.\nSee starspace paper for details.", "chunk": 96, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "411": {"text": "Selectors#\n\nSelectors predict a bot response from a set of candidate responses.\n\nResponseSelector#\n\nShortResponse Selector\n\nOutputsA dictionary with the key as the retrieval intent of the response selector\nand value containing predicted responses, confidence and the response key under the retrieval intent\n\nRequiresdense_features and/or sparse_features for user messages and response", "chunk": 97, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "412": {"text": "Output-ExampleThe parsed output from NLU will have a property named response_selector\ncontaining the output for each response selector component. Each response selector is\nidentified by retrieval_intent parameter of that response selector\nand stores two properties:response: The predicted response key under the corresponding retrieval intent,\nprediction's confidence and the associated responses.ranking: Ranking with confidences of top 10 candidate response keys.Example result:Copy{ \"response_selector\": { \"faq\": { \"response\": { \"id\": 1388783286124361986, \"confidence\": 0.7, \"intent_response_key\": \"chitchat/ask_weather\", \"responses\": [ { \"text\": \"It's sunny in Berlin today\", \"image\": \"https://i.imgur.com/nGF1K8f.jpg\" }, { \"text\": \"I think it's about to rain.\" } ], \"utter_action\": \"utter_chitchat/ask_weather\" }, \"ranking\": [ { \"id\": 1388783286124361986, \"confidence\": 0.7, \"intent_response_key\": \"chitchat/ask_weather\" }, { \"id\": 1388783286124361986, \"confidence\": 0.3, \"intent_response_key\": \"chitchat/ask_name\" } ] } }}If the retrieval_intent parameter of a particular response selector was left to its default value,", "chunk": 98, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "413": {"text": "the corresponding response selector will be identified as default in the returned output.Copy{ \"response_selector\": { \"default\": { \"response\": { \"id\": 1388783286124361986, \"confidence\": 0.7, \"intent_response_key\": \"chitchat/ask_weather\", \"responses\": [ { \"text\": \"It's sunny in Berlin today\", \"image\": \"https://i.imgur.com/nGF1K8f.jpg\" }, { \"text\": \"I think it's about to rain.\" } ], \"utter_action\": \"utter_chitchat/ask_weather\" }, \"ranking\": [ { \"id\": 1388783286124361986, \"confidence\": 0.7, \"intent_response_key\": \"chitchat/ask_weather\" }, { \"id\": 1388783286124361986, \"confidence\": 0.3, \"intent_response_key\": \"chitchat/ask_name\" } ] } }}DescriptionResponse Selector component can be used to build a response retrieval model to directly predict a bot response from\na set of candidate responses. The prediction of this model is used by the dialogue manager to utter the predicted responses.\nIt embeds user inputs and response labels into the same space and follows the exact same\nneural network architecture and optimization as the DIETClassifier.To use this component, your training data should contain retrieval intents. To define these,\ncheckout documentation on NLU training examples and\ndocumentation on defining response utterances for retrieval intents.noteIf during prediction time a message contains only words unseen during training\nand no Out-Of-Vocabulary preprocessor was used, an empty response None is predicted with confidence\n0.0. This might happen if you only use the CountVectorsFeaturizer with a word analyzer", "chunk": 99, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "414": {"text": "as featurizer. If you use the char_wb analyzer, you should always get a response with a confidence\nvalue > 0.0.", "chunk": 100, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "415": {"text": "ConfigurationThe algorithm includes almost all the hyperparameters that DIETClassifier uses.\nIf you want to adapt your model, start by modifying the following parameters:epochs:\nThis parameter sets the number of times the algorithm will see the training data (default: 300).\nOne epoch is equals to one forward pass and one backward pass of all the training examples.\nSometimes the model needs more epochs to properly learn.\nSometimes more epochs don't influence the performance.\nThe lower the number of epochs the faster the model is trained.hidden_layers_sizes:\nThis parameter allows you to define the number of feed forward layers and their output\ndimensions for user messages and intents (default: text: [256, 128], label: [256, 128]).\nEvery entry in the list corresponds to a feed forward layer.\nFor example, if you set text: [256, 128], we will add two feed forward layers in front of\nthe transformer. The vectors of the input tokens (coming from the user message) will be passed on to those\nlayers. The first layer will have an output dimension of 256 and the second layer will have an output\ndimension of 128. If an empty list is used (default behavior), no feed forward layer will be\nadded.\nMake sure to use only positive integer values. Usually, numbers of power of two are used.\nAlso, it is usual practice to have decreasing values in the list: next value is smaller or equal to the\nvalue before.embedding_dimension:\nThis parameter defines the output dimension of the embedding layers used inside the model (default: 20).\nWe are using multiple embeddings layers inside the model architecture.\nFor example, the vector of the complete utterance and the intent is passed on to an embedding layer before", "chunk": 101, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "416": {"text": "they are compared and the loss is calculated.number_of_transformer_layers:\nThis parameter sets the number of transformer layers to use (default: 0).\nThe number of transformer layers corresponds to the transformer blocks to use for the model.transformer_size:\nThis parameter sets the number of units in the transformer (default: None).\nThe vectors coming out of the transformers will have the given transformer_size.\nThe transformer_size should be a multiple of the number_of_attention_heads parameter,\nthe training exits with an error otherwise.connection_density:\nThis parameter defines the fraction of kernel weights that are set to non zero values for all feed forward\nlayers in the model (default: 0.2). The value should be between 0 and 1. If you set connection_density\nto 1, no kernel weights will be set to 0, the layer acts as a standard feed forward layer. You should not\nset connection_density to 0 as this would result in all kernel weights being 0, i.e. the model is not able\nto learn.constrain_similarities:\nThis parameter when set to True applies a sigmoid cross entropy loss over all similarity terms.\nThis helps in keeping similarities between input and negative labels to smaller values.\nThis should help in better generalization of the model to real world test sets.model_confidence:\nThis parameter allows the user to configure how confidences are computed during inference. It can take only\none value as input which is softmax. In softmax, confidences are in the range [0, 1]. The computed\nsimilarities are normalized with the softmax activation function.The component can also be configured to train a response selector for a particular retrieval intent.\nThe parameter retrieval_intent sets the name of the retrieval intent for which this response selector model is trained.", "chunk": 102, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "417": {"text": "Default is None, i.e. the model is trained for all retrieval intents.In its default configuration, the component uses the retrieval intent with the response key(e.g. faq/ask_name) as the label for training.\nAlternatively, it can also be configured to use the text of the responses as the training label\nby switching use_text_as_label to True. In this mode, the component will use the first available response which has a text attribute for training. If none are found, it falls back to using the retrieval intent\ncombined with the response key as the label.examples and tutorialsCheck out the responseselectorbot for an example of\nhow you can use the ResponseSelector component in your assistant. Additionally, you will find this tutorial on\nhandling FAQs using a ResponseSelector useful as well.", "chunk": 103, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "418": {"text": "The above configuration parameters are the ones you should configure to fit your model to your data.\nHowever, additional parameters exist that can be adapted.", "chunk": 104, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "419": {"text": "More configurable parametersCopy+---------------------------------+-------------------+--------------------------------------------------------------+| Parameter                       | Default Value     | Description                                                  |+=================================+===================+==============================================================+| hidden_layers_sizes             | text: [256, 128]  | Hidden layer sizes for layers before the embedding layers    ||                                 | label: [256, 128] | for user messages and labels. The number of hidden layers is ||                                 |                   | equal to the length of the corresponding list. We recommend  ||                                 |                   | disabling the hidden layers (by providing empty lists) when  ||                                 |                   | the transformer is enabled.", "chunk": 105, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "420": {"text": "| the transformer is enabled.                                  |+---------------------------------+-------------------+--------------------------------------------------------------+| share_hidden_layers             | False             | Whether to share the hidden layer weights between user       ||                                 |                   | messages and labels.                                         |+---------------------------------+-------------------+--------------------------------------------------------------+| transformer_size                | None              | Number of units in the transformer. When a positive value is ||                                 |                   | provided for `number_of_transformer_layers`, the default size||                                 |                   | becomes `256`.", "chunk": 106, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "421": {"text": "| becomes `256`.                                               |+---------------------------------+-------------------+--------------------------------------------------------------+| number_of_transformer_layers    | 0                 | Number of transformer layers; positive values enable the     ||                                 |                   | transformer.                                                 |+---------------------------------+-------------------+--------------------------------------------------------------+| number_of_attention_heads       | 4                 | Number of attention heads in transformer.                    |+---------------------------------+-------------------+--------------------------------------------------------------+| use_key_relative_attention      | False             | If 'True' use key relative embeddings in attention.          |+---------------------------------+-------------------+--------------------------------------------------------------+| use_value_relative_attention    | False             | If 'True' use value relative embeddings in attention.", "chunk": 107, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "422": {"text": "If 'True' use value relative embeddings in attention.        |+---------------------------------+-------------------+--------------------------------------------------------------+| max_relative_position           | None              | Maximum position for relative embeddings.                    |+---------------------------------+-------------------+--------------------------------------------------------------+| unidirectional_encoder          | False             | Use a unidirectional or bidirectional encoder.               |+---------------------------------+-------------------+--------------------------------------------------------------+| batch_size                      | [64, 256]         | Initial and final value for batch sizes.                     ||                                 |                   | Batch size will be linearly increased for each epoch.        ||                                 |                   | If constant `batch_size` is required, pass an int, e.g. `8`. |+---------------------------------+-------------------+--------------------------------------------------------------+| batch_strategy", "chunk": 108, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "423": {"text": "|+---------------------------------+-------------------+--------------------------------------------------------------+| batch_strategy                  | \"balanced\"        | Strategy used when creating batches.                         ||                                 |                   | Can be either 'sequence' or 'balanced'.                      |+---------------------------------+-------------------+--------------------------------------------------------------+| epochs                          | 300               | Number of epochs to train.                                   |+---------------------------------+-------------------+--------------------------------------------------------------+| random_seed                     | None              | Set random seed to any 'int' to get reproducible results.    |+---------------------------------+-------------------+--------------------------------------------------------------+| learning_rate                   | 0.001             | Initial learning rate for the optimizer.", "chunk": 109, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "424": {"text": "|+---------------------------------+-------------------+--------------------------------------------------------------+| embedding_dimension             | 20                | Dimension size of embedding vectors.                         |+---------------------------------+-------------------+--------------------------------------------------------------+| dense_dimension                 | text: 512         | Dense dimension for sparse features to use if no dense       ||                                 | label: 512        | features are present.                                        |+---------------------------------+-------------------+--------------------------------------------------------------+| concat_dimension                | text: 512         | Concat dimension for sequence and sentence features.         ||                                 | label: 512        |", "chunk": 110, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "425": {"text": "|+---------------------------------+-------------------+--------------------------------------------------------------+| number_of_negative_examples     | 20                | The number of incorrect labels. The algorithm will minimize  ||                                 |                   | their similarity to the user input during training.          |+---------------------------------+-------------------+--------------------------------------------------------------+| similarity_type                 | \"auto\"            | Type of similarity measure to use, either 'auto' or 'cosine' ||                                 |                   | or 'inner'.                                                  |+---------------------------------+-------------------+--------------------------------------------------------------+| loss_type                       | \"cross_entropy\"   | The type of the loss function, either 'cross_entropy'        ||", "chunk": 111, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "426": {"text": "||                                 |                   | or 'margin'. Type 'margin' is only compatible with           ||                                 |                   | \"model_confidence=cosine\",                                   ||                                 |                   | which is deprecated (see changelog for 2.3.4).               |+---------------------------------+-------------------+--------------------------------------------------------------+| ranking_length                  | 10                | Number of top responses to report. Set to 0 to report all    ||                                 |                   | responses.", "chunk": 112, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "427": {"text": "|+---------------------------------+-------------------+--------------------------------------------------------------+| renormalize_confidences         | False             | Normalize the top responses. Applicable only with loss type  ||                                 |                   | 'cross_entropy' and 'softmax' confidences.                   |+---------------------------------+-------------------+--------------------------------------------------------------+| maximum_positive_similarity     | 0.8               | Indicates how similar the algorithm should try to make       ||                                 |                   | embedding vectors for correct labels.                        ||                                 |                   | Should be 0.0 < ... < 1.0 for 'cosine' similarity type.", "chunk": 113, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "428": {"text": "be 0.0 < ... < 1.0 for 'cosine' similarity type.      |+---------------------------------+-------------------+--------------------------------------------------------------+| maximum_negative_similarity     | -0.4              | Maximum negative similarity for incorrect labels.            ||                                 |                   | Should be -1.0 < ... < 1.0 for 'cosine' similarity type.     |+---------------------------------+-------------------+--------------------------------------------------------------+| use_maximum_negative_similarity | True              | If 'True' the algorithm only minimizes maximum similarity    ||                                 |                   | over incorrect intent labels, used only if 'loss_type' is    ||                                 |                   | set to 'margin'.                                             |+---------------------------------+-------------------+--------------------------------------------------------------+| scale_loss", "chunk": 114, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "429": {"text": "scale_loss                      | True              | Scale loss inverse proportionally to confidence of correct   ||                                 |                   | prediction.                                                  |+---------------------------------+-------------------+--------------------------------------------------------------+| regularization_constant         | 0.002             | The scale of regularization.                                 |+---------------------------------+-------------------+--------------------------------------------------------------+| negative_margin_scale           | 0.8               | The scale of how important is to minimize the maximum        ||                                 |                   | similarity between embeddings of different labels.           |+---------------------------------+-------------------+--------------------------------------------------------------+| connection_density              | 0.2", "chunk": 115, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "430": {"text": "| 0.2               | Connection density of the weights in dense layers.           ||                                 |                   | Value should be between 0 and 1.                             |+---------------------------------+-------------------+--------------------------------------------------------------+| drop_rate                       | 0.2               | Dropout rate for encoder. Value should be between 0 and 1.   ||                                 |                   | The higher the value the higher the regularization effect.   |+---------------------------------+-------------------+--------------------------------------------------------------+| drop_rate_attention             | 0.0               | Dropout rate for attention. Value should be between 0 and 1. ||                                 |                   | The higher the value the higher the", "chunk": 116, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "431": {"text": "| The higher the value the higher the regularization effect.   |+---------------------------------+-------------------+--------------------------------------------------------------+| use_sparse_input_dropout        | False             | If 'True' apply dropout to sparse input tensors.             |+---------------------------------+-------------------+--------------------------------------------------------------+| use_dense_input_dropout         | False             | If 'True' apply dropout to dense input tensors.              |+---------------------------------+-------------------+--------------------------------------------------------------+| evaluate_every_number_of_epochs | 20                | How often to calculate validation accuracy.                  ||                                 |                   | Set to '-1' to evaluate just once at the end of training.    |+---------------------------------+-------------------+--------------------------------------------------------------+| evaluate_on_number_of_examples  | 0                 | How many examples to use for hold out validation set.        ||                                 |", "chunk": 117, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "432": {"text": "|                   | Large values may hurt performance, e.g. model accuracy.      ||                                 |                   | Set to 0 for no validation.                                  |+---------------------------------+-------------------+--------------------------------------------------------------+| use_masked_language_model       | False             | If 'True' random tokens of the input message will be masked  ||                                 |                   | and the model should predict those tokens.                   |+---------------------------------+-------------------+--------------------------------------------------------------+| retrieval_intent                | None              | Name of the intent for which this response selector model is ||                                 |                   | trained.", "chunk": 118, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "433": {"text": "| trained.                                                     |+---------------------------------+-------------------+--------------------------------------------------------------+| use_text_as_label               | False             | Whether to use the actual text of the response as the label  ||                                 |                   | for training the response selector. Otherwise, it uses the   ||                                 |                   | response key as the label.                                   |+---------------------------------+-------------------+--------------------------------------------------------------+| tensorboard_log_directory       | None              | If you want to use tensorboard to visualize training         ||                                 |                   | metrics, set this option to a valid output directory. You", "chunk": 119, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "434": {"text": "| metrics, set this option to a valid output directory. You    ||                                 |                   | can view the training metrics after training in tensorboard  ||                                 |                   | via 'tensorboard --logdir <path-to-given-directory>'.        |+---------------------------------+-------------------+--------------------------------------------------------------+| tensorboard_log_level           | \"epoch\"           | Define when training metrics for tensorboard should be       ||                                 |                   | logged. Either after every epoch (\"epoch\") or for every      ||                                 |                   | training step (\"batch\").", "chunk": 120, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "435": {"text": "|+---------------------------------+-------------------+--------------------------------------------------------------+| featurizers                     | []                | List of featurizer names (alias names). Only features        ||                                 |                   | coming from the listed names are used. If list is empty      ||                                 |                   | all available features are used.                             |+---------------------------------+-------------------+--------------------------------------------------------------+| checkpoint_model                | False             | Save the best performing model during training. Models are   ||                                 |                   | stored to the location specified by `--out`. Only the one    ||", "chunk": 121, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "436": {"text": "|                   | best model will be saved.                                    ||                                 |                   | Requires `evaluate_on_number_of_examples > 0` and            ||                                 |                   | `evaluate_every_number_of_epochs > 0`                        |+---------------------------------+-------------------+--------------------------------------------------------------+| constrain_similarities          | False             | If `True`, applies sigmoid on all similarity terms and adds  ||                                 |                   | it to the loss function to ensure that similarity values are ||", "chunk": 122, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "437": {"text": "|                   | approximately bounded. Used only if `loss_type=cross_entropy`|+---------------------------------+-------------------+--------------------------------------------------------------+| model_confidence                | \"softmax\"         | Affects how model's confidence for each response label       ||                                 |                   | is computed. Currently, only one value is supported:         ||                                 |                   | 1. `softmax` - Similarities between input and response label ||                                 |                   | embeddings are post-processed with a softmax function,       ||                                 |                   | as a result of which confidence for all labels sum", "chunk": 123, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "438": {"text": "| as a result of which confidence for all labels sum up to 1.  |+---------------------------------+-------------------+--------------------------------------------------------------+noteParameter maximum_negative_similarity is set to a negative value to mimic the original", "chunk": 124, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "439": {"text": "starspace algorithm in the case maximum_negative_similarity = maximum_positive_similarity\nand use_maximum_negative_similarity = False.\nSee starspace paper for details.", "chunk": 125, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "440": {"text": "Custom Components#\n\nNew in 3.0Rasa 3.0 unified the implementation of NLU components and policies.\nThis requires changes to custom components written for earlier versions of Rasa Open\nSource. Please see the\nmigration guide for a\nstep-by-step guide for the migration.\n\nYou can create a custom component to perform a specific task which NLU doesn't currently offer (for example, sentiment analysis).\n\nYou can add a custom component to your pipeline by adding the module path.\nSo if you have a module called sentiment\ncontaining a SentimentAnalyzer class:\n\nCopypipeline:- name: \"sentiment.SentimentAnalyzer\"\n\nSee the guide on custom graph components for a complete guide on custom components.\nAlso be sure to read the section on the Component Lifecycle.\n\nNote that model_confidence: cosineis deprecated in 2.3.4 (see changelog)\nand cannot be specified in the config, however model_confidence: cosine will be used regardless of the config\nif loss_type: margin is specified. \u21a9\n\nPrevious\u00ab Model ConfigurationNextPolicies \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 126, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "441": {"text": "Version: 3.x\n\nPolicies\n\nYour assistant uses policies to decide which action to take at each step in a conversation. There are machine-learning and rule-based policies that your assistant can use in tandem.\n\nYou can customize the policies your assistant uses by specifying the policies\nkey in your project's config.yml.\nThere are different policies to choose from, and you can include\nmultiple policies in a single configuration. Here's an example of\nwhat a list of policies might look like:\n\nconfig.ymlCopyrecipe: default.v1language:  # your languagepipeline:  # - <pipeline components>\npolicies:  - name: MemoizationPolicy  - name: TEDPolicy    max_history: 5    epochs: 200  - name: RulePolicy\n\nStarting from scratch?If you don't know which policies to choose, leave out the policies key from your config.yml completely.\nIf you do, the Suggested Config\nfeature will provide default policies for you.\n\nAction Selection#\n\nAt every turn, each policy defined in your configuration will\npredict a next action with a certain confidence level. For more information\nabout how each policy makes its decision, read into the policy's description below.\nThe policy that predicts with the highest confidence decides the assistant's next action.\n\nMaximum number of predictionsBy default, your assistant can predict a maximum of 10 next actions\nafter each user message. To update this value,\nyou can set the environment variable MAX_NUMBER_OF_PREDICTIONS\nto the desired number of maximum predictions.\n\nPolicy Priority#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "442": {"text": "Policy Priority#\n\nIn the case that two policies predict with equal confidence (for example, the Memoization\nand Rule Policies might both predict with confidence 1), the priority of the\npolicies is considered. Rasa policies have default priorities that are set to ensure the\nexpected outcome in the case of a tie. They look like this, where higher numbers have higher priority:\n\n6 - RulePolicy3 - MemoizationPolicy or AugmentedMemoizationPolicy2 - UnexpecTEDIntentPolicy1 - TEDPolicy\n\nIn general, it is not recommended to have more\nthan one policy per priority level in your configuration. If you have 2 policies with the same priority and they predict\nwith the same confidence, the resulting action will be chosen randomly.\n\nIf you create your own policy, use these priorities as a guide for figuring out the priority of your policy.\nIf your policy is a machine learning policy, it should most likely have priority 1, the same as the TEDPolicy.\n\noverriding policy prioritiesAll policy priorities are configurable via the priority parameter in the policy's configuration,\nbut we do not recommend changing them outside of specific cases such as custom policies.\nDoing so can lead to unexpected and undesired bot behavior.\n\nMachine Learning Policies#\n\nTED Policy#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "443": {"text": "Machine Learning Policies#\n\nTED Policy#\n\nThe Transformer Embedding Dialogue (TED) Policy is\na multi-task architecture for next action prediction and entity\nrecognition. The architecture consists of several transformer encoders which are shared for both tasks.\nA sequence of entity labels is predicted through a Conditional Random Field (CRF) tagging layer on top of the\nuser sequence transformer encoder output corresponding to the input sequence of tokens.\nFor the next action prediction, the dialogue transformer encoder output and the system action labels are embedded into a\nsingle semantic vector space. We use the dot-product loss to maximize the similarity with the target label and\nminimize similarities with negative samples.\n\nIf you want to learn more about the model, check out\nour paper and on our\nyoutube channel.\nwhere we explain the model architecture in detail.\n\nTED Policy architecture comprises the following steps:\n\nConcatenate features foruser input (user intent and entities) or user text processed through a user sequence transformer encoder,previous system actions or bot utterances processed through a bot sequence transformer encoder,slots and active formsfor each time step into an input vector to the embedding layer that precedes the\ndialogue transformer.Feed the embedding of the input vector into the dialogue transformer encoder.Apply a dense layer to the output of the dialogue transformer to get embeddings of the dialogue for each time step.Apply a dense layer to create embeddings for system actions for each time step.Calculate the similarity between the dialogue embedding and embedded system actions.\nThis step is based on the StarSpace idea.Concatenate the token-level output of the user sequence transformer encoder\nwith the output of the dialogue transformer encoder for each time step.Apply CRF algorithm to predict contextual entities for each user text input.\n\nConfiguration:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "444": {"text": "Configuration:\n\nYou can pass configuration parameters to the TEDPolicy using the config.yml file.\nIf you want to fine-tune your model, start by modifying the following parameters:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "445": {"text": "epochs:\nThis parameter sets the number of times the algorithm will see the training data (default: 1).\nOne epoch is equals to one forward pass and one backward pass of all the training examples.\nSometimes the model needs more epochs to properly learn.\nSometimes more epochs don't influence the performance.\nThe lower the number of epochs the faster the model is trained.\nHere is how the config would look like:config.ymlCopypolicies:- name: TEDPolicy  epochs: 200max_history:\nThis parameter controls how much dialogue history the model looks at to decide which\naction to take next. Default max_history for this policy is None,\nwhich means that the complete dialogue history since session restart is taken into\naccount. If you want to limit the model to only see a certain number of previous\ndialogue turns, you can set max_history to a finite value.\nPlease note that you should pick max_history carefully, so that the model has enough\nprevious dialogue turns to create a correct prediction.\nSee Featurizers for more details.\nHere is how the config would look like:config.ymlCopypolicies:- name: TEDPolicy  max_history: 8number_of_transformer_layers:\nThis parameter sets the number of sequence transformer encoder layers to use for\nsequential transformer encoders for user, action and action label texts and for\ndialogue transformer encoder.\n(defaults: text: 1, action_text: 1, label_action_text: 1, dialogue: 1).\nThe number of sequence transformer encoder layers corresponds\nto the transformer blocks to use for the model.transformer_size:\nThis parameter sets the number of units in the sequence transformer encoder layers to use for\nsequential transformer encoders for user, action and action label texts and for", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "446": {"text": "sequential transformer encoders for user, action and action label texts and for\ndialogue transformer encoder.\n(defaults: text: 128, action_text: 128, label_action_text: 128, dialogue: 128).\nThe vectors coming out of the transformer encoders will have the given transformer_size.connection_density:\nThis parameter defines the fraction of kernel weights that are set to non zero values for all feed forward\nlayers in the model (default: 0.2). The value should be between 0 and 1. If you set connection_density\nto 1, no kernel weights will be set to 0, the layer acts as a standard feed forward layer. You should not\nset connection_density to 0 as this would result in all kernel weights being 0, i.e. the model is not able\nto learn.split_entities_by_comma:\nThis parameter defines whether adjacent entities separated by a comma should be treated as one, or split. For example,\nentities with the type ingredients, like \"apple, banana\" can be split into \"apple\" and \"banana\". An entity with type\naddress, like \"Sch\u00f6nhauser Allee 175, 10119 Berlin\" should be treated as one.Can either be\nTrue/False globally:config.ymlCopypolicies:  - name: TEDPolicy    split_entities_by_comma: Trueor set per entity type, such as:config.ymlCopypolicies:  - name: TEDPolicy    split_entities_by_comma:      address: False      ingredients: Trueconstrain_similarities:\nThis parameter when set to True applies a sigmoid cross entropy loss over all similarity terms.\nThis helps in keeping similarities between input and negative labels to smaller values.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "447": {"text": "This helps in keeping similarities between input and negative labels to smaller values.\nThis should help in better generalization of the model to real world test sets.model_confidence:\nThis parameter allows the user to configure how confidences are computed during inference. Currently, only one value is supported:softmax: Confidences are in the range [0, 1] (old behavior and current default). Computed similarities are normalized with the softmax activation function.use_gpu:\nThis parameter defines whether a GPU (if available) will be used training. By default, TEDPolicy will be trained on GPU\nif a GPU is available (i.e. use_gpu is True). To enforce that TEDPolicy uses only the CPU for training, set use_gpu to False.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "448": {"text": "The above configuration parameters are the ones you should configure to fit your model to your data.\nHowever, additional parameters exist that can be adapted.", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "449": {"text": "More configurable parametersCopy+---------------------------------------+------------------------+--------------------------------------------------------------+| Parameter                             | Default Value          | Description                                                  |+=======================================+========================+==============================================================+| hidden_layers_sizes                   | text: []               | Hidden layer sizes for layers before the embedding layers    ||                                       | action_text: []        | for user messages and bot messages in previous actions       ||                                       | label_action_text: []  | and labels. The number of hidden layers is                   ||                                       |                        | equal to the length of the corresponding list.", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "450": {"text": "| equal to the length of the corresponding list.               |+---------------------------------------+------------------------+--------------------------------------------------------------+| dense_dimension                       | text: 128              | Dense dimension for sparse features to use after they are    ||                                       | action_text: 128       | converted into dense features.                               ||                                       | label_action_text: 128 |                                                              ||                                       | intent: 20             |", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "451": {"text": "||                                       | action_name: 20        |                                                              ||                                       | label_action_name: 20  |                                                              ||                                       | entities: 20           |                                                              ||", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "452": {"text": "| slots: 20              |                                                              ||                                       | active_loop: 20        |                                                              |+---------------------------------------+------------------------+--------------------------------------------------------------+| concat_dimension                      | text: 128              | Common dimension to which sequence and sentence features of  ||                                       | action_text: 128       | different dimensions get converted before concatenation.     ||                                       | label_action_text: 128", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "453": {"text": "| label_action_text: 128 |                                                              |+---------------------------------------+------------------------+--------------------------------------------------------------+| encoding_dimension                    | 50                     | Dimension size of embedding vectors                          ||                                       |                        | before the dialogue transformer encoder.                     |+---------------------------------------+------------------------+--------------------------------------------------------------+| transformer_size                      | text: 128              | Number of units in user text sequence transformer encoder.   ||                                       | action_text: 128       | Number of units in bot text sequence transformer encoder.    ||", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "454": {"text": "units in bot text sequence transformer encoder.    ||                                       | label_action_text: 128 | Number of units in bot text sequence transformer encoder.    ||                                       | dialogue: 128          | Number of units in dialogue transformer encoder.             |+---------------------------------------+------------------------+--------------------------------------------------------------+| number_of_transformer_layers          | text: 1                | Number of layers in user text sequence transformer encoder.  ||                                       | action_text: 1         | Number of layers in bot text sequence transformer encoder.   ||                                       | label_action_text: 1   | Number of layers in bot text sequence transformer encoder.   ||                                       | dialogue: 1            | Number of layers in dialogue transformer", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "455": {"text": "1            | Number of layers in dialogue transformer encoder.            |+---------------------------------------+------------------------+--------------------------------------------------------------+| number_of_attention_heads             | 4                      | Number of self-attention heads in transformers.              |+---------------------------------------+------------------------+--------------------------------------------------------------+| unidirectional_encoder                | True                   | Use a unidirectional or bidirectional encoder                ||                                       |                        | for `text`, `action_text`, and `label_action_text`.          |+---------------------------------------+------------------------+--------------------------------------------------------------+| use_key_relative_attention            | False                  | If 'True' use key relative embeddings in attention.          |+---------------------------------------+------------------------+--------------------------------------------------------------+| use_value_relative_attention          | False", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "456": {"text": "| False                  | If 'True' use value relative embeddings in attention.        |+---------------------------------------+------------------------+--------------------------------------------------------------+| max_relative_position                 | None                   | Maximum position for relative embeddings.                    |+---------------------------------------+------------------------+--------------------------------------------------------------+| batch_size                            | [64, 256]              | Initial and final value for batch sizes.                     ||                                       |                        | Batch size will be linearly increased for each epoch.        ||                                       |                        | If constant `batch_size` is required, pass an int, e.g. `8`. |+---------------------------------------+------------------------+--------------------------------------------------------------+| batch_strategy", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "457": {"text": "|+---------------------------------------+------------------------+--------------------------------------------------------------+| batch_strategy                        | \"balanced\"             | Strategy used when creating batches.                         ||                                       |                        | Can be either 'sequence' or 'balanced'.                      |+---------------------------------------+------------------------+--------------------------------------------------------------+| epochs                                | 1                      | Number of epochs to train.                                   |+---------------------------------------+------------------------+--------------------------------------------------------------+| random_seed                           | None                   | Set random seed to any 'int' to get reproducible results.    |+---------------------------------------+------------------------+--------------------------------------------------------------+| learning_rate", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "458": {"text": "| 0.001                  | Initial learning rate for the optimizer.                     |+---------------------------------------+------------------------+--------------------------------------------------------------+| embedding_dimension                   | 20                     | Dimension size of dialogue & system action embedding vectors.|+---------------------------------------+------------------------+--------------------------------------------------------------+| number_of_negative_examples           | 20                     | The number of incorrect labels. The algorithm will minimize  ||                                       |                        | their similarity to the user input during training.          |+---------------------------------------+------------------------+--------------------------------------------------------------+| similarity_type                       | \"auto\"                 | Type of similarity measure to use, either 'auto' or 'cosine' ||                                       |", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "459": {"text": "|                        | or 'inner'.                                                  |+---------------------------------------+------------------------+--------------------------------------------------------------+| loss_type                             | \"cross_entropy\"        | The type of the loss function, either 'cross_entropy'        ||                                       |                        | or 'margin'.                                                 |+---------------------------------------+------------------------+--------------------------------------------------------------+| ranking_length                        | 0                      | Number of top actions to include in prediction. Confidences  ||", "chunk": 18, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "460": {"text": "|                        | of all other actions will be set to 0. Set to 0 to let the   ||                                       |                        | prediction include confidences for all actions.              |+---------------------------------------+------------------------+--------------------------------------------------------------+| renormalize_confidences               | False                  | Normalize the top predictions. Applicable only with loss     ||                                       |                        | type 'cross_entropy' and 'softmax' confidences.              |+---------------------------------------+------------------------+--------------------------------------------------------------+| maximum_positive_similarity           | 0.8                    | Indicates how similar the algorithm should try to make       ||", "chunk": 19, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "461": {"text": "|                        | embedding vectors for correct labels.                        ||                                       |                        | Should be 0.0 < ... < 1.0 for 'cosine' similarity type.      |+---------------------------------------+------------------------+--------------------------------------------------------------+| maximum_negative_similarity           | -0.2                   | Maximum negative similarity for incorrect labels.            ||                                       |                        | Should be -1.0 < ... < 1.0 for 'cosine' similarity type.     |+---------------------------------------+------------------------+--------------------------------------------------------------+| use_maximum_negative_similarity       | True                   | If 'True' the algorithm only minimizes maximum similarity    ||", "chunk": 20, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "462": {"text": "If 'True' the algorithm only minimizes maximum similarity    ||                                       |                        | over incorrect intent labels, used only if 'loss_type' is    ||                                       |                        | set to 'margin'.                                             |+---------------------------------------+------------------------+--------------------------------------------------------------+| scale_loss                            | True                   | Scale loss inverse proportionally to confidence of correct   ||                                       |                        | prediction.", "chunk": 21, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "463": {"text": "|+---------------------------------------+------------------------+--------------------------------------------------------------+| regularization_constant               | 0.001                  | The scale of regularization.                                 |+---------------------------------------+------------------------+--------------------------------------------------------------+| negative_margin_scale                 | 0.8                    | The scale of how important it is to minimize the maximum     ||                                       |                        | similarity between embeddings of different labels.           |+---------------------------------------+------------------------+--------------------------------------------------------------+| drop_rate_dialogue                    | 0.1                    | Dropout rate for embedding layers of dialogue features.      ||                                       |", "chunk": 22, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "464": {"text": "| Value should be between 0 and 1.                             ||                                       |                        | The higher the value the higher the regularization effect.   |+---------------------------------------+------------------------+--------------------------------------------------------------+| drop_rate_label                       | 0.0                    | Dropout rate for embedding layers of label features.         ||                                       |                        | Value should be between 0 and 1.                             ||                                       |                        | The higher the value the higher the regularization effect.", "chunk": 23, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "465": {"text": "| The higher the value the higher the regularization effect.   |+---------------------------------------+------------------------+--------------------------------------------------------------+| drop_rate_attention                   | 0.0                    | Dropout rate for attention. Value should be between 0 and 1. ||                                       |                        | The higher the value the higher the regularization effect.   |+---------------------------------------+------------------------+--------------------------------------------------------------+| connection_density                    | 0.2                    | Connection density of the weights in dense layers.           ||                                       |                        | Value should be between 0 and 1.                             |+---------------------------------------+------------------------+--------------------------------------------------------------+| use_sparse_input_dropout              | True                   |", "chunk": 24, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "466": {"text": "True                   | If 'True' apply dropout to sparse input tensors.             |+---------------------------------------+------------------------+--------------------------------------------------------------+| use_dense_input_dropout               | True                   | If 'True' apply dropout to sparse features after they are    ||                                       |                        | converted into dense features.                               |+---------------------------------------+------------------------+--------------------------------------------------------------+| evaluate_every_number_of_epochs       | 20                     | How often to calculate validation accuracy.                  ||                                       |                        | Set to '-1' to evaluate just once at the end of training.    |+---------------------------------------+------------------------+--------------------------------------------------------------+| evaluate_on_number_of_examples", "chunk": 25, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "467": {"text": "evaluate_on_number_of_examples        | 0                      | How many examples to use for hold out validation set.        ||                                       |                        | Large values may hurt performance, e.g. model accuracy.      ||                                       |                        | Keep at 0 if your data set contains a lot of unique examples ||                                       |                        | of dialogue turns.                                           ||                                       |                        | Set to 0 for no validation.", "chunk": 26, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "468": {"text": "| Set to 0 for no validation.                                  |+---------------------------------------+------------------------+--------------------------------------------------------------+| tensorboard_log_directory             | None                   | If you want to use tensorboard to visualize training         ||                                       |                        | metrics, set this option to a valid output directory. You    ||                                       |                        | can view the training metrics after training in tensorboard  ||                                       |                        | via 'tensorboard --logdir <path-to-given-directory>'.        |+---------------------------------------+------------------------+--------------------------------------------------------------+| tensorboard_log_level", "chunk": 27, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "469": {"text": "| \"epoch\"                | Define when training metrics for tensorboard should be       ||                                       |                        | logged. Either after every epoch ('epoch') or for every      ||                                       |                        | training step ('batch').                                     |+---------------------------------------+------------------------+--------------------------------------------------------------+| checkpoint_model                      | False                  | Save the best performing model during training. Models are   ||                                       |                        | stored to the location specified by `--out`. Only the one    ||", "chunk": 28, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "470": {"text": "Only the one    ||                                       |                        | best model will be saved.                                    ||                                       |                        | Requires `evaluate_on_number_of_examples > 0` and            ||                                       |                        | `evaluate_every_number_of_epochs > 0`                        |+---------------------------------------+------------------------+--------------------------------------------------------------+| e2e_confidence_threshold              | 0.5                    | The threshold that ensures that end-to-end is picked only if ||", "chunk": 29, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "471": {"text": "|                        | the policy is confident enough.                              |+---------------------------------------+------------------------+--------------------------------------------------------------+| featurizers                           | []                     | List of featurizer names (alias names). Only features        ||                                       |                        | coming from the listed names are used. If list is empty      ||                                       |                        | all available features are used.                             |+---------------------------------------+------------------------+--------------------------------------------------------------+| entity_recognition                    | True", "chunk": 30, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "472": {"text": "| True                   | If 'True' entity recognition is trained and entities are     ||                                       |                        | extracted.                                                   |+---------------------------------------+------------------------+--------------------------------------------------------------+| constrain_similarities                | False                  | If `True`, applies sigmoid on all similarity terms and adds  ||                                       |                        | it to the loss function to ensure that similarity values are ||                                       |                        | approximately bounded.", "chunk": 31, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "473": {"text": "||                                       |                        | Used only when `loss_type=cross_entropy`.                    |+---------------------------------------+------------------------+--------------------------------------------------------------+| model_confidence                      | \"softmax\"              | Affects how model's confidence for each action               ||                                       |                        | is computed. Currently, only one value is supported:         ||                                       |                        | 1. `softmax` - Similarities between input and action         ||", "chunk": 32, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "474": {"text": "|                        | embeddings are post-processed with a softmax function,       ||                                       |                        | as a result of which confidence for all labels sum up to 1.  |+---------------------------------------+------------------------+--------------------------------------------------------------+| BILOU_flag                            | True                   | If 'True', additional BILOU tags are added to entity labels. |+---------------------------------------+------------------------+--------------------------------------------------------------+| split_entities_by_comma               | True                   | Splits a list of extracted entities by comma to treat each   ||                                       |                        | one of them as a single entity. Can either be `True`/`False` ||", "chunk": 33, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "475": {"text": "||                                       |                        | globally, or set per entity type, such as:                   ||                                       |                        | ```                                                          ||                                       |                        | - name: TEDPolicy                                            ||                                       |                        |", "chunk": 34, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "476": {"text": "|   split_entities_by_comma:                                   ||                                       |                        |     address: True                                            ||                                       |                        | ```                                                          |+---------------------------------------+------------------------+--------------------------------------------------------------+noteThe parameter maximum_negative_similarity is set to a negative value to mimic the original", "chunk": 35, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "477": {"text": "starspace algorithm in the case maximum_negative_similarity = maximum_positive_similarity and\nuse_maximum_negative_similarity = False. See starspace paper\nfor details.", "chunk": 36, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "478": {"text": "noteIn addition to the config parameters above, TEDPolicy prediction performance and\ntraining time are affected by the --augmentation argument of the rasa train\ncommand. For more information see\nData Augmentation.\n\nUnexpecTED Intent Policy#\n\nNew in 2.8This feature is experimental.\nWe introduce experimental features to get feedback from our community, so we encourage you to try it out!\nHowever, the functionality might be changed or removed in the future.\nIf you have feedback (positive or negative) please share it with us on the Rasa Forum.\n\nUnexpecTEDIntentPolicy helps you review conversations and also allows your bot to react\nto unlikely user turns. It is an auxiliary policy that should only be used in\nconjunction with at least one other policy, as the only action that it can trigger\nis the special action_unlikely_intent action.\n\nUnexpecTEDIntentPolicy has the same model architecture as TEDPolicy.\nThe difference is at a task level. Instead of learning the best action to be triggered next,\nUnexpecTEDIntentPolicy learns the set of intents that are most likely to be expressed by the user\ngiven the conversation context from training stories. It uses the learned information at inference time by\nchecking if the predicted intent by NLU is the most likely intent. If the intent predicted\nby NLU is indeed likely to occur given the conversation context, UnexpecTEDIntentPolicy does not trigger\nany action. Otherwise, it triggers an action_unlikely_intent\nwith a confidence of 1.00.", "chunk": 37, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "479": {"text": "UnexpecTEDIntentPolicy should be viewed as an aid for TEDPolicy. Since, TEDPolicy is expected to improve\nwith better coverage of unique conversation paths that the assistant is expected to handle in the training data,\nUnexpecTEDIntentPolicy helps to surface these unique conversation paths from past conversations. For example, if you had\nthe following story in your training data:\n\nstories.ymlCopystories:- story: book_restaurant_table  steps:  - intent: request_restaurant  - action: restaurant_form  - active_loop: restaurant_form  - action: restaurant_form  - active_loop: null  - slot_was_set:    - requested_slot: null\n\nbut an actual conversation might encounter interjections inside the form which you haven't accounted for:\n\nstories.ymlCopystories:- story: actual_conversation  steps:  - user: |        I'm looking for a restaurant.    intent: request_restaurant  - action: restaurant_form  - active_loop: restaurant_form  - slot_was_set:    - requested_slot: cuisine  - user: |        Does it matter? I want to be quick.    intent: deny\n\nAs soon as the deny intent gets triggered, the policy handling the form will keep requesting for the cuisine slot\nto be filled, as the training stories don't say that this case should be treated differently.\nTo help you identify that a special story that handles the user's deny intent might be missing at this point,\nUnexpecTEDIntentPolicy can trigger an action_unlikely_intent action right after deny intent.\nSubsequently, you can improve your assistant by adding a new training story that handles this particular case.", "chunk": 38, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "480": {"text": "To reduce false warnings, UnexpecTEDIntentPolicy has two mechanisms in place at inference time:\n\nUnexpecTEDIntentPolicy's priority is intentionally kept lower than all\nrule based policies since rules may exist for situations that are novel for\nTEDPolicy or UnexpecTEDIntentPolicy.UnexpecTEDIntentPolicy does not predict an action_unlikely_intent if the last predicted intent\nisn't present in any of the training stories, which might happen if an intent is only used in rules.\n\nPrediction of action_unlikely_intent#\n\nUnexpecTEDIntentPolicy is invoked immediately after a user utterance and can either\ntrigger action_unlikely_intent or abstain (in which case other policies will predict actions).\nTo determine if action_unlikely_intent should be triggered, UnexpecTEDIntentPolicy computes a score\nfor the user's intent in the current dialogue context and checks if this score is below a\ncertain threshold score.\n\n This threshold score is computed by collecting the ML model's output on many \"negative examples\".\nThese negative examples are combinations of dialogue contexts and user\nintents that are incorrect. UnexpecTEDIntentPolicy generates these negative examples from your\ntraining data by picking a random story part and pairing it with a random intent that doesn't\noccur at this point. For example, if you had just one training story:\n\nstories.ymlCopyversion: 2.0stories:- story: happy path 1  steps:  - intent: greet  - action: utter_greet  - intent: mood_great  - action: utter_goodbye\n\n and an intent affirm, then a valid negative example will be:", "chunk": 39, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "481": {"text": "and an intent affirm, then a valid negative example will be:\n\nnegative_stories.ymlCopyversion: 2.0stories:- story: negative example with affirm unexpected  steps:  - intent: greet  - action: utter_greet  - intent: affirm\n\n Here, affirm intent is unexpected as it doesn't occur in this particular conversation context across all training stories.\nFor each intent, UnexpecTEDIntentPolicy uses these negative examples to figure out the range of scores the model\npredicts. The threshold score is picked from this range of scores in such a way that the predicted score for a\ncertain percentage of negative examples is higher than the threshold score and hence action_unlikely_intent\nis not triggered for them. This percentage of negative examples can be controlled by the tolerance parameter.\nThe higher the tolerance, the lower the intent's score (the more unlikely the intent) needs to be\nbefore UnexpecTEDIntentPolicy triggers the action_unlikely_intent action.\n\nConfiguration:\n\nYou can pass configuration parameters to the UnexpecTEDIntentPolicy using the config.yml file.\nIf you want to fine-tune model's performance, start by modifying the following parameters:", "chunk": 40, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "482": {"text": "epochs:\nThis parameter sets the number of times the algorithm will see the training data (default: 1).\nOne epoch is equals to one forward pass and one backward pass of all the training examples.\nSometimes the model needs more epochs to learn properly.\nSometimes more epochs don't influence the performance.\nThe lower the number of epochs the faster the model is trained.\nHere is how the config would look like:config.ymlCopypolicies:- name: UnexpecTEDIntentPolicy  epochs: 200max_history:\nThis parameter controls how much dialogue history the model looks at before making an inference.\nDefault max_history for this policy is None, which means that the complete dialogue history\nsince session (re)start is taken into account. If you want to limit the model\nto only see a certain number of previous\ndialogue turns, you can set max_history to a finite value.\nPlease note that you should pick max_history carefully, so that the model has enough\nprevious dialogue turns to create a correct prediction.\nDepending on your dataset, higher values of max_history can result in more frequent prediction of action_unlikely_intent\nas the number of unique possible conversation paths increases as more dialogue context is taken\ninto account. Similarly, lowering the value of max_history can result in action_unlikely_intent being\ntriggered less often but can also be a stronger indicator that the corresponding conversation path\nis highly unique and hence unexpected.\nWe recommend you to set the max_history of UnexpecTEDIntentPolicy equal to that of TEDPolicy.\nHere is how the config would look like:config.ymlCopypolicies:- name: UnexpecTEDIntentPolicy  max_history: 8ignore_intents_list:", "chunk": 41, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "483": {"text": "This parameter lets you configure UnexpecTEDIntentPolicy to not predict action_unlikely_intent for\na subset of intents. You might want to do this if you come across a certain list of intents for which there\nare too many false warnings generated.tolerance:\nThe tolerance parameter is a number that ranges from 0.0 to 1.0 (inclusive).\nIt helps to adjust the threshold score used during\nprediction of action_unlikely_intent\nat inference time.  Here, 0.0 means that the threshold score will be adjusted in such a way that 0% of negative\nexamples encountered during training are predicted with a score lower than the threshold score.\nHence, conversation contexts from all negative examples will trigger an action_unlikely_intent action.  A tolerance of 0.1 means that the threshold score will be adjusted in a way such that 10% of negative\nexamples encountered during training are predicted with a score lower than the threshold score.  A tolerance of 1.0 means that the threshold score is so low that UnexpecTEDIntentPolicy would not\ntrigger action_unlikely_intent for any of the negative examples that it has encountered\nduring training.use_gpu:\nThis parameter defines whether a GPU (if available) will be used training. By default, UnexpecTEDIntentPolicy will be trained on GPU\nif a GPU is available (i.e. use_gpu is True). To enforce that UnexpecTEDIntentPolicy uses only the CPU for training, set use_gpu to False.", "chunk": 42, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "484": {"text": "The above configuration parameters are the ones you should try tweaking according to your use case and training data.\nHowever, additional parameters exist that you could adapt.", "chunk": 43, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "485": {"text": "More configurable parametersCopy+---------------------------------------+------------------------+--------------------------------------------------------------+| Parameter                             | Default Value          | Description                                                  |+=======================================+========================+==============================================================+| hidden_layers_sizes                   | text: []               | Hidden layer sizes for layers before the embedding layers    ||                                       |                        | for user messages and bot messages in previous actions       ||                                       |                        | and labels. The number of hidden layers is                   ||                                       |", "chunk": 44, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "486": {"text": "|                        | equal to the length of the corresponding list.               |+---------------------------------------+------------------------+--------------------------------------------------------------+| dense_dimension                       | text: 128              | Dense dimension for sparse features to use after they are    ||                                       | intent: 20             | converted into dense features.                               ||                                       | action_name: 20        |                                                              ||                                       | label_intent: 20       |", "chunk": 45, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "487": {"text": "|                                                              ||                                       | entities: 20           |                                                              ||                                       | slots: 20              |                                                              ||                                       | active_loop: 20        |", "chunk": 46, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "488": {"text": "|+---------------------------------------+------------------------+--------------------------------------------------------------+| concat_dimension                      | text: 128              | Common dimension to which sequence and sentence features of  ||                                       |                        | different dimensions get converted before concatenation.     |+---------------------------------------+------------------------+--------------------------------------------------------------+| encoding_dimension                    | 50                     | Dimension size of embedding vectors                          ||                                       |                        | before the dialogue transformer encoder.                     |+---------------------------------------+------------------------+--------------------------------------------------------------+| transformer_size                      | text: 128", "chunk": 47, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "489": {"text": "| text: 128              | Number of units in user text sequence transformer encoder.   ||                                       | dialogue: 128          | Number of units in dialogue transformer encoder.             |+---------------------------------------+------------------------+--------------------------------------------------------------+| number_of_transformer_layers          | text: 1                | Number of layers in user text sequence transformer encoder.  ||                                       | dialogue: 1            | Number of layers in dialogue transformer encoder.            |+---------------------------------------+------------------------+--------------------------------------------------------------+| number_of_attention_heads             | 4                      | Number of self-attention heads in transformers.              |+---------------------------------------+------------------------+--------------------------------------------------------------+| unidirectional_encoder                | True                   | Use a unidirectional or bidirectional encoder", "chunk": 48, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "490": {"text": "a unidirectional or bidirectional encoder                ||                                       |                        | for `text`, `action_text`, and `label_action_text`.          |+---------------------------------------+------------------------+--------------------------------------------------------------+| use_key_relative_attention            | False                  | If 'True' use key relative embeddings in attention.          |+---------------------------------------+------------------------+--------------------------------------------------------------+| use_value_relative_attention          | False                  | If 'True' use value relative embeddings in attention.        |+---------------------------------------+------------------------+--------------------------------------------------------------+| max_relative_position                 | None                   | Maximum position for relative embeddings.                    |+---------------------------------------+------------------------+--------------------------------------------------------------+| batch_size                            | [64, 256]              | Initial and final", "chunk": 49, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "491": {"text": "256]              | Initial and final value for batch sizes.                     ||                                       |                        | Batch size will be linearly increased for each epoch.        ||                                       |                        | If constant `batch_size` is required, pass an int, e.g. `8`. |+---------------------------------------+------------------------+--------------------------------------------------------------+| batch_strategy                        | \"balanced\"             | Strategy used when creating batches.                         ||                                       |                        | Can be either 'sequence' or 'balanced'.", "chunk": 50, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "492": {"text": "|+---------------------------------------+------------------------+--------------------------------------------------------------+| epochs                                | 1                      | Number of epochs to train.                                   |+---------------------------------------+------------------------+--------------------------------------------------------------+| random_seed                           | None                   | Set random seed to any 'int' to get reproducible results.    |+---------------------------------------+------------------------+--------------------------------------------------------------+| learning_rate                         | 0.001                  | Initial learning rate for the optimizer.                     |+---------------------------------------+------------------------+--------------------------------------------------------------+| embedding_dimension                   | 20                     | Dimension size of dialogue & system action embedding vectors.|+---------------------------------------+------------------------+--------------------------------------------------------------+| number_of_negative_examples           | 20", "chunk": 51, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "493": {"text": "| 20                     | The number of incorrect labels. The algorithm will minimize  ||                                       |                        | their similarity to the user input during training.          |+---------------------------------------+------------------------+--------------------------------------------------------------+| ranking_length                        | 10                     | Number of top actions to normalize scores for. Applicable    ||                                       |                        | only with loss type 'cross_entropy' and 'softmax'            ||                                       |                        | confidences. Set to 0 to disable normalization.              |+---------------------------------------+------------------------+--------------------------------------------------------------+| scale_loss", "chunk": 52, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "494": {"text": "scale_loss                            | True                   | Scale loss inverse proportionally to confidence of correct   ||                                       |                        | prediction.                                                  |+---------------------------------------+------------------------+--------------------------------------------------------------+| regularization_constant               | 0.001                  | The scale of regularization.                                 |+---------------------------------------+------------------------+--------------------------------------------------------------+| drop_rate_dialogue                    | 0.1                    | Dropout rate for embedding layers of dialogue features.      ||                                       |", "chunk": 53, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "495": {"text": "|                        | Value should be between 0 and 1.                             ||                                       |                        | The higher the value the higher the regularization effect.   |+---------------------------------------+------------------------+--------------------------------------------------------------+| drop_rate_label                       | 0.0                    | Dropout rate for embedding layers of label features.         ||                                       |                        | Value should be between 0 and 1.                             ||                                       |                        | The higher the value the higher the regularization effect.", "chunk": 54, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "496": {"text": "| The higher the value the higher the regularization effect.   |+---------------------------------------+------------------------+--------------------------------------------------------------+| drop_rate_attention                   | 0.0                    | Dropout rate for attention. Value should be between 0 and 1. ||                                       |                        | The higher the value the higher the regularization effect.   |+---------------------------------------+------------------------+--------------------------------------------------------------+| use_sparse_input_dropout              | True                   | If 'True' apply dropout to sparse input tensors.             |+---------------------------------------+------------------------+--------------------------------------------------------------+| use_dense_input_dropout               | True                   | If 'True' apply dropout to sparse features after they are    ||                                       |                        | converted into dense features.", "chunk": 55, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "497": {"text": "| converted into dense features.                               |+---------------------------------------+------------------------+--------------------------------------------------------------+| evaluate_every_number_of_epochs       | 20                     | How often to calculate validation accuracy.                  ||                                       |                        | Set to '-1' to evaluate just once at the end of training.    |+---------------------------------------+------------------------+--------------------------------------------------------------+| evaluate_on_number_of_examples        | 0                      | How many examples to use for hold out validation set.        ||                                       |                        | Large values may hurt performance, e.g. model accuracy.      ||                                       |", "chunk": 56, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "498": {"text": "|                        | Keep at 0 if your data set contains a lot of unique examples ||                                       |                        | of dialogue turns.                                           |+---------------------------------------+------------------------+--------------------------------------------------------------+| tensorboard_log_directory             | None                   | If you want to use tensorboard to visualize training         ||                                       |                        | metrics, set this option to a valid output directory. You    ||                                       |                        | can view the training metrics after training in tensorboard  ||", "chunk": 57, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "499": {"text": "||                                       |                        | via 'tensorboard --logdir <path-to-given-directory>'.        |+---------------------------------------+------------------------+--------------------------------------------------------------+| tensorboard_log_level                 | \"epoch\"                | Define when training metrics for tensorboard should be       ||                                       |                        | logged. Either after every epoch ('epoch') or for every      ||                                       |                        | training step ('batch').                                     |+---------------------------------------+------------------------+--------------------------------------------------------------+| checkpoint_model                      | False", "chunk": 58, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "500": {"text": "| False                  | Save the best performing model during training. Models are   ||                                       |                        | stored to the location specified by `--out`. Only the one    ||                                       |                        | best model will be saved.                                    ||                                       |                        | Requires `evaluate_on_number_of_examples > 0` and            ||                                       |                        | `evaluate_every_number_of_epochs > 0`", "chunk": 59, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "501": {"text": "> 0`                        |+---------------------------------------+------------------------+--------------------------------------------------------------+| featurizers                           | []                     | List of featurizer names (alias names). Only features        ||                                       |                        | coming from the listed names are used. If list is empty      ||                                       |                        | all available features are used.                             |+---------------------------------------+------------------------+--------------------------------------------------------------+| ignore_intents_list                   | []                     | This parameter lets you configure `UnexpecTEDIntentPolicy` to ignore||", "chunk": 60, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "502": {"text": "|                        | the prediction of `action_unlikely_intent` for a subset of   ||                                       |                        | intents. You might want to do this if you come across a      ||                                       |                        | certain list of intents for which there are too many false   ||                                       |                        | warnings generated.                                          |+---------------------------------------+------------------------+--------------------------------------------------------------+| tolerance                             | 0.0                    | The `tolerance`", "chunk": 61, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "503": {"text": "| The `tolerance` parameter is a number that ranges from `0.0` ||                                       |                        | to `1.0` (inclusive). It helps to adjust the threshold score ||                                       |                        | used during prediction of `action_unlikely_intent` at        ||                                       |                        | inference time. Here, `0.0` means that the score threshold   ||                                       |                        | is the one that `UnexpecTEDIntentPolicy` had determined at training ||                                       |", "chunk": 62, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "504": {"text": "|                        | time. A tolerance of `1.0` means that the threshold score    ||                                       |                        | is so low that `IntentTED` would not trigger                 ||                                       |                        | `action_unlikely_intent` for any of the \"negative examples\"  ||                                       |                        | that it has encountered during training. These negative      ||                                       |                        | examples are combinations of dialogue contexts and user      ||", "chunk": 63, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "505": {"text": "dialogue contexts and user      ||                                       |                        | intents that are _incorrect_. `UnexpecTEDIntentPolicy` generates    ||                                       |                        | these negative examples from your training data by picking a ||                                       |                        | random story part and pairing it with a random intent that   ||                                       |                        | doesn't occur at this point.                                 |+---------------------------------------+------------------------+--------------------------------------------------------------+", "chunk": 64, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "506": {"text": "Tuning the tolerance parameter#\n\nWhen reviewing real conversations, we encourage you\nto tune the tolerance parameter in UnexpecTEDIntentPolicy's configuration to reduce the number\nof false warnings (intents that actually are likely given the conversation context).\nAs you increase the value of tolerance from 0 to 1 in steps of 0.05,\nthe number of false warnings should decrease. However, increasing the tolerance will\nalso result in fewer triggers of action_unlikely_intent and hence more conversation\npaths not present in training stories will be missing in the set of flagged conversations.\nIf you change the max_history value and retrain a model, you might have to re-adjust the tolerance value as well.\n\nnoteUnexpecTEDIntentPolicy is only trained on stories and not rules from the training data.\n\nMemoization Policy#\n\nThe MemoizationPolicy remembers the stories from your\ntraining data. It checks if the current conversation matches the stories in your\nstories.yml file. If so, it will predict the next action from the matching\nstories of your training data with a confidence of 1.0. If no matching conversation\nis found, the policy predicts None with confidence 0.0.\n\nWhen looking for a match in your training data, the policy will take the last\nmax_history number of turns of the conversation into account.\nOne \u201cturn\u201d includes the message sent by the user and any actions the\nassistant performed before waiting for the next message.\n\nYou can configure the number of turns the MemoizationPolicy should use in your\nconfiguration:\n\nconfig.ymlCopypolicies: - name: \"MemoizationPolicy\" max_history: 3\n\nAugmented Memoization Policy#", "chunk": 65, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "507": {"text": "Augmented Memoization Policy#\n\nThe AugmentedMemoizationPolicy remembers examples from training\nstories for up to max_history turns, just like the MemoizationPolicy.\nAdditionally, it has a forgetting mechanism that will forget a certain amount\nof steps in the conversation history and try to find a match in your stories\nwith the reduced history. It predicts the next action with confidence 1.0\nif a match is found, otherwise it predicts None with confidence 0.0.\n\nSlots and predictionsIf you have dialogues where some slots that are set during\nprediction time might not be set in training stories (e.g. in training\nstories starting with a reminder, not all previous slots are set),\nmake sure to add the relevant stories without slots to your training\ndata as well.\n\nRule-based Policies#\n\nRule Policy#\n\nThe RulePolicy is a policy that handles conversation parts that follow\na fixed behavior (e.g. business logic). It makes predictions based on\nany rules you have in your training data. See the\nRules documentation for further information on how to define rules.\n\nThe RulePolicy has the following configuration options:\n\nconfig.ymlCopypolicies: - name: \"RulePolicy\" core_fallback_threshold: 0.3 core_fallback_action_name: action_default_fallback enable_fallback_prediction: true restrict_rules: true check_for_contradictions: true", "chunk": 66, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "508": {"text": "core_fallback_threshold (default: 0.3): Please see the\nfallback documentation for\nfurther information.core_fallback_action_name (default: action_default_fallback): Please see the\nfallback documentation for\nfurther information.enable_fallback_prediction (default: true): Please see the\nfallback documentation for\nfurther information.check_for_contradictions (default: true):\nBefore training, the RulePolicy will perform a check to make sure that\nslots and active loops set by actions are defined consistently for all rules.\nThe following snippet contains an example of an incomplete rule:Copyrules:- rule: complete rule  steps:  - intent: search_venues  - action: action_search_venues  - slot_was_set:    - venues: [{\"name\": \"Big Arena\", \"reviews\": 4.5}]\n- rule: incomplete rule  steps:  - intent: search_venues  - action: action_search_venues In the second incomplete rule, action_search_venues should set\nthe venues slot because it is set in complete rule, but this event is missing.\nThere are several possible ways to fix this rule. In the case when action_search_venues can't find\na venue and the venues slot should not be set,\nyou should explicitly set the value of the slot to null.\nIn the following story RulePolicy will predict utter_venues_not_found", "chunk": 67, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "509": {"text": "In the following story RulePolicy will predict utter_venues_not_found\nonly if the slot venues is not set:Copyrules:- rule: fixes incomplete rule  steps:  - intent: search_venues  - action: action_search_venues  - slot_was_set:    - venues: null  - action: utter_venues_not_found If you want the slot setting to be handled by a different rule or story,\nyou should add wait_for_user_input: false to the end of the rule snippet:Copyrules:- rule: incomplete rule  steps:  - intent: search_venues  - action: action_search_venues  wait_for_user_input: false After training, the RulePolicy will check that none of the rules or stories contradict\neach other. The following snippet is an example of two contradicting rules:Copyrules:- rule: Chitchat  steps:  - intent: chitchat  - action: utter_chitchat\n- rule: Greet instead of chitchat  steps:  - intent: chitchat  - action: utter_greet  # `utter_greet` contradicts `utter_chitchat` from the rule aboverestrict_rules (default: true): Rules are restricted to one user turn, but\nthere can be multiple bot events, including e.g. a form being filled and its subsequent submission.\nChanging this parameter to false may result in unexpected behavior.Overusing rules  Overusing rules for purposes outside of the recommended use cases\nwill make it very hard to maintain your assistant as the complexity grows.", "chunk": 68, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "510": {"text": "Configuring Policies#\n\nMax History#\n\nOne important hyperparameter for Rasa policies is the max_history.\nThis controls how much dialogue history the model looks at to decide which\naction to take next.\n\nYou can set the max_history by passing it to your policy\nin the policy configuration in your config.yml.\nThe default value is None, which means that the complete dialogue history since session\nrestart is taken in the account.\n\nconfig.ymlCopypolicies:  - name: TEDPolicy    max_history: 5    epochs: 200    batch_size: 50    max_training_samples: 300\n\nnoteRulePolicy doesn't have max history parameter, it always consider the full length\nof provided rules. Please see Rules for further information.\n\nAs an example, let's say you have an out_of_scope intent which\ndescribes off-topic user messages. If your bot sees this intent multiple\ntimes in a row, you might want to tell the user what you can help them\nwith. So your story might look like this:\n\nCopystories:  - story: utter help after 2 fallbacks    steps:    - intent: out_of_scope    - action: utter_default    - intent: out_of_scope    - action: utter_default    - intent: out_of_scope    - action: utter_help_message\n\nFor your model to learn this pattern, the max_history\nhas to be at least 4.\n\nIf you increase your max_history, your model will become bigger and\ntraining will take longer. If you have some information that should\naffect the dialogue very far into the future, you should store it as a\nslot. Slot information is always available for every featurizer.\n\nData Augmentation#", "chunk": 69, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "511": {"text": "Data Augmentation#\n\nWhen you train a model, Rasa will create\nlonger stories by randomly combining\nthe ones in your stories files.\nTake the stories below as an example:\n\nCopystories:  - story: thank    steps:    - intent: thankyou    - action: utter_youarewelcome  - story: say goodbye    steps:    - intent: goodbye    - action: utter_goodbye\n\nYou actually want to teach your policy to ignore the dialogue history\nwhen it isn't relevant and to respond with the same action no matter\nwhat happened before. To achieve this, individual stories are\nconcatenated into longer stories. From the example above, data augmentation\nmight produce a story by combining thank with say goodbye and then thank again,\nequivalent to:\n\nCopystories:  - story: thank -> say goodbye -> thank    steps:    - intent: thankyou    - action: utter_youarewelcome    - intent: goodbye    - action: utter_goodbye    - intent: thankyou    - action: utter_youarewelcome\n\nYou can alter this behavior with the --augmentation flag,\nwhich allows you to set the augmentation_factor.\nThe augmentation_factor determines how many augmented stories are\nsubsampled during training. The augmented stories are subsampled before training\nsince their number can quickly become very large, and you want to limit it.\nThe number of sampled stories is augmentation_factor x10.\nBy default augmentation_factor is set to 50, resulting in a maximum of 500 augmented stories.\n\n--augmentation 0 disables all augmentation behavior. TEDPolicy is the only policy\naffected by augmentation. Other policies like MemoizationPolicy or RulePolicy\nautomatically ignore all augmented stories (regardless of the augmentation_factor).", "chunk": 70, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "512": {"text": "--augmentation is an important parameter when trying to reduce TEDPolicy training\ntime. Reducing the augmentation_factor decreases the size of the training data\nand subsequently the time to train the policy. However, reducing the amount of data\naugmentation can also reduce the performance of TEDPolicy. We recommend using\na memoization based policy along with TEDPolicy when reducing the amount of data\naugmentation to compensate.\n\nFeaturizers#\n\nIn order to apply machine learning algorithms to conversational AI, you need\nto build up vector representations of conversations.\n\nEach story corresponds to a tracker which consists of the states of the\nconversation just before each action was taken.\n\nState Featurizers#\n\nEvery event in a trackers history creates a new state (e.g. running a bot\naction, receiving a user message, setting slots). Featurizing a single state\nof the tracker has two steps:", "chunk": 71, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "513": {"text": "Tracker provides a bag of active features:features indicating intents and entities, if this is the first\nstate in a turn, e.g. it's the first action we will take after\nparsing the user's message. (e.g.\n[intent_restaurant_search, entity_cuisine] )features indicating which slots are currently defined, e.g.\nslot_location if the user previously mentioned the area\nthey're searching for restaurants.features indicating the results of any API calls stored in\nslots, e.g. slot_matchesfeatures indicating what the last bot action or bot utterance was (e.g.\nprev_action_listen)features indicating if any loop is active and which oneConvert all the features into numeric vectors:SingleStateFeaturizer uses the Rasa NLU pipeline to convert the intent and\nbot action names or bot utterances into numeric vectors.\nSee the NLU Model Configuration documentation\nfor the details on how to configure Rasa NLU pipeline.Entities, slots and active loops are featurized as one-hot encodings\nto indicate their presence.\n\nnoteIf the domain defines the possible actions,\n[ActionGreet, ActionGoodbye],\n4 additional default actions are added:\n[ActionListen(), ActionRestart(),\nActionDefaultFallback(), ActionDeactivateForm()].\nTherefore, label 0 indicates default action listen, label 1\ndefault restart, label 2 a greeting and 3 indicates goodbye.\n\nTracker Featurizers#\n\nA policy can be trained to learn two kinds of labels -\n\nThe next most appropriate action to be triggered by the assistant. For example, TEDPolicy is trained to do this.The next most likely intent that a user can express. For example, UnexpecTEDIntentPolicy is trained to learn this.", "chunk": 72, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "514": {"text": "Hence, a tracker can be featurized to learn one of the labels mentioned above.\nDepending on the policy, the target labels correspond to bot actions or bot utterances\nrepresented as an index in a list of all possible actions or\nset of intents represented as an index in a list of all possible intents.\n\nTracker Featurizers come in three different flavours:\n\n1. Full Dialogue#\n\nFullDialogueTrackerFeaturizer creates a numerical representation of\nstories to feed to a recurrent neural network where the whole dialogue\nis fed to a network and the gradient is backpropagated from all time steps.\nThe target label is the most appropriate bot action or bot utterance which should be triggered in the\ncontext of the conversation.\nThe TrackerFeaturizer iterates over tracker\nstates and calls a SingleStateFeaturizer for each state to create numeric input features for a policy.\n\n2. Max History#\n\nMaxHistoryTrackerFeaturizer operates very similarly to FullDialogueTrackerFeaturizer as\nit creates an array of previous tracker states for each bot action or bot utterance but with the parameter\nmax_history defining how many states go into each row of input features.\nIf max_history is not specified, the algorithm takes\nthe whole length of a dialogue into account.\nDeduplication is performed to filter out duplicated turns (bot actions\nor bot utterances) in terms of their previous states.\n\nFor some algorithms a flat feature vector is needed, so input features\nshould be reshaped to (num_unique_turns, max_history * num_input_features).\n\n3. Intent Max History#", "chunk": 73, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "515": {"text": "3. Intent Max History#\n\nIntentMaxHistoryTrackerFeaturizer inherits from MaxHistoryTrackerFeaturizer. Since, it is used by\nUnexpecTEDIntentPolicy, the target labels that it creates are the intents that can be\nexpressed by a user in the context of a conversation tracker. Unlike\nother tracker featurizers, there can be multiple target labels. Hence, it pads the\nlist of target labels with a constant value (-1) on the right to return an equally sized list of target labels\nfor each input conversation tracker.\n\nJust like MaxHistoryTrackerFeaturizer, it also performs deduplication to\nfilter out duplicated turns. However, it yields one featurized tracker per correct intent\nfor the corresponding tracker. For example, if the correct labels for an input conversation tracker have the following\nindices - [0, 2, 4], then the featurizer will yield three pairs of featurized trackers and target labels.\nThe featurized trackers will be identical to each other but the target labels in each pair will be\n[0, 2, 4], [4, 0, 2], [2, 4, 0].\n\nCustom Policies#\n\nNew in 3.0Rasa 3.0 unified the implementation of NLU components and policies.\nThis requires changes to custom policies written for earlier versions of Rasa Open\nSource. Please see the\nmigration guide for a\nstep-by-step guide for the migration.\n\nYou can also write custom policies and reference them in your configuration. In the example below, the\nlast two lines show how to use a custom policy class and pass arguments to it.\nSee the guide on custom graph components for a complete guide on custom policies.", "chunk": 74, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "516": {"text": "Copypolicies:  - name: \"TEDPolicy\"    max_history: 5    epochs: 200  - name: \"RulePolicy\"  - name: \"path.to.your.policy.class\"    arg1: \"...\"\n\nPrevious\u00ab ComponentsNextCustom Graph Components \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 75, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "517": {"text": "Version: 3.x\n\nCustom Graph Components\n\nYou can extend Rasa with custom NLU components and policies. This page provides a guide on how to develop your own custom graph components.\n\nRasa provides a variety of NLU components and\npolicies out of the box. You can customize them or create your\nown components from scratch by using custom graph components.\n\nTo use your custom graph component with Rasa it has to fulfill the following\nrequirements:\n\nIt has to implement the GraphComponent interfaceIt has to be registered\nwith the used model configurationIt has to be used in the configuration fileIt has to use type annotations. Rasa makes use of the type annotations\nto validate your model configuration.\nForward references\nare not allowed. If you're using Python 3.7 you can use\nfrom __future__ import annotations\nto get rid of forward references.\n\nGraph Components#\n\nRasa uses the passed in model configuration to build a\ndirected acyclic graph.\nThis graph describes the dependencies between the items in your model configuration and\nhow data flows between them. This has two major benefits:\n\nRasa can use the computational graph to optimize the execution of your\nmodel. Examples for this are efficient caching of training steps or executing\nindependent steps in parallel.Rasa can represent different model architectures flexibly. As long as the\ngraph remains acyclic Rasa can in theory pass any data to any graph\ncomponent based on the model configuration without having to tie the underlying\nsoftware architecture to the used model architecture.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "518": {"text": "When translating the model configuration to the computational graph\npolicies and NLU components become nodes within this graph.\nWhile there is a distinction between policies and NLU components in your model\nconfiguration, the distinction is abstracted away when they are placed within the graph.\nAt this point policies and NLU components become abstract graph components.\nIn practice this is represented by the\nGraphComponent\ninterface: Both policies and NLU components have to inherit from this interface to\nbecome compatible and executable for Rasa's graph.\n\n\n\nGetting Started#\n\nBefore you get started, you have to decide whether you want to implement a custom\nNLU component or a policy. If you are implementing\na custom policy, then we recommend extending the existing\nrasa.core.policies.policy.Policy class which already implements the GraphComponent\ninterface.\n\nCopyfrom rasa.core.policies.policy import Policyfrom rasa.engine.recipes.default_recipe import DefaultV1Recipe\n# TODO: Correctly register your graph component@DefaultV1Recipe.register( [DefaultV1Recipe.ComponentType.POLICY_WITHOUT_END_TO_END_SUPPORT], is_trainable=True)class MyPolicy(Policy): ...\n\nIf you want to implement a custom NLU component then start out with the following\nskeleton:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "519": {"text": "Copyfrom typing import Dict, Text, Any, List\nfrom rasa.engine.graph import GraphComponent, ExecutionContextfrom rasa.engine.recipes.default_recipe import DefaultV1Recipefrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStoragefrom rasa.shared.nlu.training_data.message import Messagefrom rasa.shared.nlu.training_data.training_data import TrainingData\n# TODO: Correctly register your component with its type@DefaultV1Recipe.register( [DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER], is_trainable=True)class CustomNLUComponent(GraphComponent):    @classmethod def create(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, ) -> GraphComponent: # TODO: Implement this ...\n def train(self, training_data: TrainingData) -> Resource: # TODO: Implement this if your component requires training ...\n def process_training_data(self, training_data: TrainingData) -> TrainingData: # TODO: Implement this if your component augments the training data with #       tokens or message features which are used by other components #       during training. ...\n return training_data\n def process(self, messages: List[Message]) -> List[Message]: # TODO: This is the method which Rasa Open Source will call during inference. ... return messages\n\n\nRead the following sections to find out how to solve the TODOs in the example above\nand what other methods need to be implemented in your custom component.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "520": {"text": "custom tokenizersIf you create a custom tokenizer, you should extend the\nrasa.nlu.tokenizers.tokenizer.Tokenizer class. The train and process methods are\nalready implemented so you only need to overwrite the tokenize method.\n\nThe GraphComponent interface#\n\nTo run your custom NLU component or policy with Rasa it must implement the GraphComponent interface.\n\nCopyfrom __future__ import annotationsfrom abc import ABC, abstractmethodfrom typing import List, Type, Dict, Text, Any, Optional\nfrom rasa.engine.graph import ExecutionContextfrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStorage", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "521": {"text": "class GraphComponent(ABC): \"\"\"Interface for any component which will run in a graph.\"\"\"\n @classmethod def required_components(cls) -> List[Type]: \"\"\"Components that should be included in the pipeline before this component.\"\"\" return []\n    @classmethod    @abstractmethod def create(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, ) -> GraphComponent: \"\"\"Creates a new `GraphComponent`.\n        Args:            config: This config overrides the `default_config`.            model_storage: Storage which graph components can use to persist and load                themselves.            resource: Resource locator for this component which can be used to persist                and load itself from the `model_storage`.            execution_context: Information about the current graph run.\n        Returns: An instantiated `GraphComponent`.        \"\"\" ...\n    @classmethod def load(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, **kwargs: Any, ) -> GraphComponent: \"\"\"Creates a component using a persisted version of itself.\n        If not overridden this method merely calls `create`.\n        Args:            config: The config for this graph component. This is the default config of                the component merged with config specified by the user.            model_storage: Storage which graph components can use to persist and load                themselves.            resource: Resource locator for this component which can be used to persist                and load itself from the `model_storage`.            execution_context: Information about the current graph run.            kwargs: Output values from previous nodes might be passed in as `kwargs`.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "522": {"text": "Returns:            An instantiated, loaded `GraphComponent`.        \"\"\" return cls.create(config, model_storage, resource, execution_context)\n    @staticmethod def get_default_config() -> Dict[Text, Any]: \"\"\"Returns the component's default config.\n        Default config and user config are merged by the `GraphNode` before the        config is passed to the `create` and `load` method of the component.\n        Returns:            The default config of the component.        \"\"\" return {}\n    @staticmethod def supported_languages() -> Optional[List[Text]]: \"\"\"Determines which languages this component can work with.\n        Returns: A list of supported languages, or `None` to signify all are supported.        \"\"\" return None\n    @staticmethod def not_supported_languages() -> Optional[List[Text]]: \"\"\"Determines which languages this component cannot work with.\n        Returns: A list of not supported languages, or            `None` to signify all are supported.        \"\"\" return None\n    @staticmethod def required_packages() -> List[Text]: \"\"\"Any extra python dependencies required for this component to run.\"\"\" return []", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "523": {"text": "create#\n\nThe create method is used to instantiate your graph component during training and has to be\noverridden. Rasa passes the following parameters when calling the method:\n\nconfig: This is your component's default configuration merged with the\nconfiguration provided to the graph component in the model configuration file.model_storage: You can use this to persist and load your graph component. See the\nmodel persistence section for further details on its usage.resource: The unique identifier of your component within the model_storage.\nSee the model persistence section for further\ndetails on its usage.execution_context: This provides additional information about the current\nmode of execution:model_id: A unique identifier for the model used during inference. This\nparameter is None during training.should_add_diagnostic_data: If True then additional diagnostic metadata\nshould be added to your graph component's predictions on top of the actual prediction.is_finetuning: If True then the graph component can be trained using\nfinetuning.graph_schema: The graph_schema describes the computational graph which is used\nto train your assistant or to make predictions with it.node_name: The node_name is a unique identifier for the step in the graph\nschema which is fulfilled by the called graph component\n\nload#\n\nThe load method is used to instantiate your graph component during inference. The default\nimplementation of this method calls your create method. It is recommended to override\nthis if your graph component\npersists data as part of the training.\nSee create for a description of the individual parameters.\n\nget_default_config#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "524": {"text": "get_default_config#\n\nThe method get_default_config returns the default configuration for your graph\ncomponent. Its default implementation returns an empty dictionary which implies that\nthe graph component\ndoes not have any configuration. Rasa will update the default configuration with the given\nin the configuration file at runtime.\n\nsupported_languages#\n\nThe method supported_languages specifies which\nlanguages\na graph component supports.\nRasa will use the language key in the model configuration file to\nvalidate that the graph component is valid for usage with the specified language.\nIf a graph component returns None (this is the default implementation), it indicates\nthat the graph component supports all languages which are not part of\nnot_supported_languages.\n\n   Examples:\n\n[]: The graph component does not support any languageNone: All languages are supported expect the languages defined in\nnot_supported_languages[\"en\"]: The graph component can only be used with English conversations.\n\nnot_supported_languages#\n\nThe method not_supported_languages specifies which languages your\ngraph component does not support. Rasa will use the language key in the\nmodel configuration file to validate that your graph component is valid for usage with\nthe specified language. If your graph component returns None (this is the default\nimplementation), you indicate that it supports all languages which are specified in\nsupported_languages.\n\n   Examples:\n\nNone or []: All languages specified in supported_languages are supported.[\"en\"]: The graph component can be used with any language except English.\n\nrequired_packages#", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "525": {"text": "required_packages#\n\nThe required_packages method indicates which extra Python packages need to\nbe installed to use this graph component. Rasa will raise an error\nduring execution if the required libraries are not found at runtime. By default, this method returns an empty list which implies that your graph\ncomponent does not have any extra dependencies.\n\nExamples:\n\n[]: No extra packages are required to use this graph component[\"spacy\"]: The Python package spacy needs to be installed to use\nthis graph component.\n\nModel Persistence#\n\nSome graph components require persisting data during training which should be available\nto the graph component at inference time. A typical use case is storing model\nweights. Rasa provides the\nmodel_storage and resource parameters to your graph component's create and load\nmethod for this purpose as shown in the snippet below. The model_storage provides\naccess to data from all graph components. The resource allows you to uniquely identify\nyour graph component's location in the model storage.\n\nCopyfrom __future__ import annotations\nfrom typing import Any, Dict, Text\nfrom rasa.engine.graph import GraphComponent, ExecutionContextfrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStorage\nclass MyComponent(GraphComponent):    @classmethod def create(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, ) -> MyComponent: ...\n    @classmethod def load(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, **kwargs: Any ) -> MyComponent: ...\n\nWriting to the Model Storage#", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "526": {"text": "Writing to the Model Storage#\n\nThe snippet below illustrates how to write your graph component's data to the model\nstorage.\nTo persist your graph component after training, the train method will need to access\nto the values of model_storage and resource. Therefore, you should store the values\nof model_storage and resource at initialization time.\n\nYour graph component's train method must return the value of resource so that Rasa can cache\nthe training results between trainings.\nThe self._model_storage.write_to(self._resource) context manager provides a path to\na directory where you can persist any data required by your\ngraph component.", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "527": {"text": "Copyfrom __future__ import annotationsimport jsonfrom typing import Optional, Dict, Any, Text\nfrom rasa.engine.graph import GraphComponent, ExecutionContextfrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStoragefrom rasa.shared.nlu.training_data.training_data import TrainingData\nclass MyComponent(GraphComponent):\n def __init__(        self,        model_storage: ModelStorage,        resource: Resource,        training_artifact: Optional[Dict], ) -> None: # Store both `model_storage` and `resource` as object attributes to be able # to utilize them at the end of the training        self._model_storage = model_storage        self._resource = resource\n    @classmethod def create(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, ) -> MyComponent: return cls(model_storage, resource, training_artifact=None)\n def train(self, training_data: TrainingData) -> Resource: # Train your graph component ...\n # Persist your graph component with self._model_storage.write_to(self._resource) as directory_path: with open(directory_path / \"artifact.json\", \"w\") as file:                json.dump({\"my\": \"training artifact\"}, file)\n # Return resource to make sure the training artifacts # can be cached. return self._resource\n\n\nReading from the Model Storage#", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "528": {"text": "Reading from the Model Storage#\n\nRasa will call the load method of your graph component to instantiate it for inference. You can use the context manager self._model_storage.read_from(resource) to get a path to the directory where your graph component's data was persisted. Using the provided path you can then load the\npersisted data and initialize your graph component with it. Note that the model_storage\nwill throw a ValueError in case no persisted data was found for the given resource.\n\nCopyfrom __future__ import annotationsimport jsonfrom typing import Optional, Dict, Any, Text\nfrom rasa.engine.graph import GraphComponent, ExecutionContextfrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStorage\nclass MyComponent(GraphComponent):\n def __init__(        self,        model_storage: ModelStorage,        resource: Resource,        training_artifact: Optional[Dict], ) -> None:        self._model_storage = model_storage        self._resource = resource\n    @classmethod def load(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, **kwargs: Any, ) -> MyComponent: try: with model_storage.read_from(resource) as directory_path: with open(directory_path / \"artifact.json\", \"r\") as file:                    training_artifact = json.load(file) return cls(                        model_storage, resource, training_artifact=training_artifact ) except ValueError: # This allows you to handle the case if there was no # persisted data for your component ...\n\nRegistering Graph Components with the Model Configuration#", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "529": {"text": "Registering Graph Components with the Model Configuration#\n\nTo make your graph component available to Rasa you may have to register your\ngraph component with a recipe. Rasa uses recipes to translate the content\nof your model configuration to executable\ngraphs.\nCurrently, Rasa supports the default.v1 and the experimental graph.v1 recipes.\nFor default.v1 recipe, you need to register your graph component by using the DefaultV1Recipe.register\ndecorator:\n\nCopyfrom rasa.engine.graph import GraphComponentfrom rasa.engine.recipes.default_recipe import DefaultV1Recipe\n\n@DefaultV1Recipe.register(    component_types=[DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER],    is_trainable=True,    model_from=\"SpacyNLP\",)class MyComponent(GraphComponent): ...\n\n\nRasa uses the information provided in the register decorator and the\nposition of your graph component within the configuration file to schedule the execution\nof your graph component with its required data. The DefaultV1Recipe.register decorator allows you\nto specify the following details:", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "530": {"text": "component_types: This specifies what purpose your graph component fulfills within the\nassistant. It is possible to specify multiple types (e.g. if your graph component is both\nintent classifier and entity extractor):ComponentType.MODEL_LOADER: Component type for\nlanguage models. Graph components of this type provide\npretrained models to other graph components' train, process_training_data and\nprocess methods if they have specified model_from=<model loader name>.\nThis graph component is run during training and\ninference. Rasa will use the graph component's provide method to\nretrieve the model which should be provided to dependent graph components.ComponentType.MESSAGE_TOKENIZER: Component type for\ntokenizers. This graph component is run during training and\ninference. Rasa will use the graph component's train method if\nis_trainable=True is specified. Rasa will use\nprocess_training_data for tokenizing training data examples and process\nto tokenize messages during inference.ComponentType.MESSAGE_FEATURIZER: Component type for\nfeaturizers. This graph component is run during training and\ninference. Rasa will use the graph component's train method if\nis_trainable=True is specified. Rasa will use\nprocess_training_data for featurizing training data examples and process\nto featurize messages during inference.ComponentType.INTENT_CLASSIFIER: Component type for\nintent classifiers. This graph component is run only\nduring training if is_trainable=True. The graph component is always run during\ninference.\nRasa will use the graph component's train method if\nis_trainable=True is specified. Rasa will use\nthe graph component's process method to classify the intent of messages during", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "531": {"text": "the graph component's process method to classify the intent of messages during\ninference.ComponentType.ENTITY_EXTRACTOR: Component type for\nentity extractors. This graph component is run only\nduring training if is_trainable=True. The graph component is always run during\ninference.\nRasa will use the graph component's train method if\nis_trainable=True is specified. Rasa will use\nthe graph component's process method to extract entities during inference.ComponentType.POLICY_WITHOUT_END_TO_END_SUPPORT: Component type for\npolicies which don't require additional end-to-end features\n(see end-to-end training for more information).\nThis graph component is run only during training if is_trainable=True.\nThe graph component is always run during inference.\nRasa will use the graph component's train method if\nis_trainable=True is specified. Rasa will use\nthe graph component's predict_action_probabilities to make predictions for the\nnext action which should be run within a conversation.ComponentType.POLICY_WITH_END_TO_END_SUPPORT: Component type for\npolicies which require additional end-to-end features\n(see end-to-end training for more information).\nThe end-to-end features are passed into the graph component's train and\npredict_action_probabilities as precomputations parameter.\nThis graph component is run only during training if is_trainable=True.\nThe graph component is always run during inference.\nRasa will use the graph component's train method if\nis_trainable=True is specified. Rasa will use\nthe graph component's predict_action_probabilities to make predictions for the", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "532": {"text": "the graph component's predict_action_probabilities to make predictions for the\nnext action which should be run within a conversation.is_trainable: Specifies if the graph component is required to train itself before it can\nprocess training data for other dependent graph components or before it can make\npredictionsmodel_from: Specifies if a pretrained\nlanguage model needs to be provided to the train,\nprocess_training_data and process methods of the graph component. These methods\nhave to support the parameter model to receive the language model. Note that you\nstill need to make sure that the graph component which provides this model is part\nof your model configuration. A common use case for this is if you want to expose the\nSpacyNLP language model to your other NLU components.", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "533": {"text": "Using Custom Components in your Model Configuration#\n\nYou can use custom graph components like any other NLU component or policy within your\nmodel configuration. The only change is that you have to specify\nthe full module name instead of the class name only. The full module name depends on\nyour module's location in relation to the specified\nPYTHONPATH.\nBy default, Rasa adds the directory from where you run the CLI to the\nPYTHONPATH. If you e.g. run the CLI from /Users/<user>/my-rasa-project\nand your module MyComponent is in /Users/<user>/my-rasa-project/custom_components/my_component.py\nthen the module path is custom_components.my_component.MyComponent. Everything except\nthe name entry will be passed as config to your component.\n\nconfig.ymlCopyrecipe: default.v1language: enpipeline:# other NLU components- name: your.custom.NLUComponent  setting_a: 0.01  setting_b: string_value\npolicies:# other dialogue policies- name: your.custom.Policy\n\nImplementation Hints#\n\nMessage Metadata#\n\nWhen you define metadata for your intent examples in your training data,\nyour NLU component can access both the intent metadata and the intent example metadata during processing:\n\nCopy# in your component class\n def process(self, message: Message, **kwargs: Any) -> None:        metadata = message.get(\"metadata\") print(metadata.get(\"intent\")) print(metadata.get(\"example\"))\n\nSparse and Dense Message Features#", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "534": {"text": "Sparse and Dense Message Features#\n\nIf you create a custom message featurizer, you can return two different kind of\nfeatures: sequence features and sentence\nfeatures. The sequence features are a matrix of size (number-of-tokens x\nfeature-dimension), i.e.\nthe matrix contains a feature vector for every token in the sequence.\nThe sentence features are represented by a matrix of size (1 x feature-dimension).\n\nExamples of Custom Components#\n\nDense Message Featurizer#\n\nThe following is the example of a dense message featurizer\nwhich uses a pretrained model:\n\nCopyimport numpy as npimport loggingfrom bpemb import BPEmbfrom typing import Any, Text, Dict, List, Type\nfrom rasa.engine.recipes.default_recipe import DefaultV1Recipefrom rasa.engine.graph import ExecutionContext, GraphComponentfrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStoragefrom rasa.nlu.featurizers.dense_featurizer.dense_featurizer import DenseFeaturizerfrom rasa.nlu.tokenizers.tokenizer import Tokenizerfrom rasa.shared.nlu.training_data.training_data import TrainingDatafrom rasa.shared.nlu.training_data.features import Featuresfrom rasa.shared.nlu.training_data.message import Messagefrom rasa.nlu.constants import (    DENSE_FEATURIZABLE_ATTRIBUTES,    FEATURIZER_CLASS_ALIAS,)from rasa.shared.nlu.constants import (    TEXT,    TEXT_TOKENS,    FEATURE_TYPE_SENTENCE,    FEATURE_TYPE_SEQUENCE,)", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "535": {"text": "logger = logging.getLogger(__name__)", "chunk": 18, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "536": {"text": "@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER, is_trainable=False)class BytePairFeaturizer(DenseFeaturizer, GraphComponent):    @classmethod def required_components(cls) -> List[Type]: \"\"\"Components that should be included in the pipeline before this component.\"\"\" return [Tokenizer]\n    @staticmethod def required_packages() -> List[Text]: \"\"\"Any extra python dependencies required for this component to run.\"\"\" return [\"bpemb\"]\n    @staticmethod def get_default_config() -> Dict[Text, Any]: \"\"\"Returns the component's default config.\"\"\" return { **DenseFeaturizer.get_default_config(), # specifies the language of the subword segmentation model \"lang\": None, # specifies the dimension of the subword embeddings \"dim\": None, # specifies the vocabulary size of the segmentation model \"vs\": None, # if set to True and the given vocabulary size can't be loaded for the given # model, the closest size is chosen \"vs_fallback\": True, }\n def __init__(        self,        config: Dict[Text, Any],        name: Text, ) -> None: \"\"\"Constructs a new byte pair vectorizer.\"\"\" super().__init__(name, config) # The configuration dictionary is saved in `self._config` for reference.        self.model = BPEmb(            lang=self._config[\"lang\"],            dim=self._config[\"dim\"],            vs=self._config[\"vs\"],            vs_fallback=self._config[\"vs_fallback\"], )", "chunk": 19, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "537": {"text": "@classmethod def create(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, ) -> GraphComponent: \"\"\"Creates a new component (see parent class for full docstring).\"\"\" return cls(config, execution_context.node_name)\n def process(self, messages: List[Message]) -> List[Message]: \"\"\"Processes incoming messages and computes and sets features.\"\"\" for message in messages: for attribute in DENSE_FEATURIZABLE_ATTRIBUTES:                self._set_features(message, attribute) return messages\n def process_training_data(self, training_data: TrainingData) -> TrainingData: \"\"\"Processes the training examples in the given training data in-place.\"\"\"        self.process(training_data.training_examples) return training_data\n def _create_word_vector(self, document: Text) -> np.ndarray: \"\"\"Creates a word vector from a text. Utility method.\"\"\"        encoded_ids = self.model.encode_ids(document) if encoded_ids: return self.model.vectors[encoded_ids[0]]\n return np.zeros((self.component_config[\"dim\"],), dtype=np.float32)\n def _set_features(self, message: Message, attribute: Text = TEXT) -> None: \"\"\"Sets the features on a single message. Utility method.\"\"\"        tokens = message.get(TEXT_TOKENS)\n # If the message doesn't have tokens, we can't create features. if not tokens: return None", "chunk": 20, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "538": {"text": "# We need to reshape here such that the shape is equivalent to that of sparsely # generated features. Without it, it'd be a 1D tensor. We need 2D (n_utterance, n_dim).        text_vector = self._create_word_vector(document=message.get(TEXT)).reshape( 1, -1 )        word_vectors = np.array( [self._create_word_vector(document=t.text) for t in tokens] )\n        final_sequence_features = Features(            word_vectors,            FEATURE_TYPE_SEQUENCE,            attribute,            self._config[FEATURIZER_CLASS_ALIAS], )        message.add_features(final_sequence_features)        final_sentence_features = Features(            text_vector,            FEATURE_TYPE_SENTENCE,            attribute,            self._config[FEATURIZER_CLASS_ALIAS], )        message.add_features(final_sentence_features)\n    @classmethod def validate_config(cls, config: Dict[Text, Any]) -> None: \"\"\"Validates that the component is configured properly.\"\"\" if not config[\"lang\"]: raise ValueError(\"BytePairFeaturizer needs language setting via `lang`.\") if not config[\"dim\"]: raise ValueError( \"BytePairFeaturizer needs dimensionality setting via `dim`.\" ) if not config[\"vs\"]: raise ValueError(\"BytePairFeaturizer needs a vector size setting via `vs`.\")", "chunk": 21, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "539": {"text": "Sparse Message Featurizer#\n\nThe following is the example of a dense message featurizer\nwhich trains a new model:\n\nCopyimport loggingfrom typing import Any, Text, Dict, List, Type\nfrom sklearn.feature_extraction.text import TfidfVectorizerfrom rasa.engine.recipes.default_recipe import DefaultV1Recipefrom rasa.engine.graph import ExecutionContext, GraphComponentfrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStoragefrom rasa.nlu.featurizers.sparse_featurizer.sparse_featurizer import SparseFeaturizerfrom rasa.nlu.tokenizers.tokenizer import Tokenizerfrom rasa.shared.nlu.training_data.training_data import TrainingDatafrom rasa.shared.nlu.training_data.features import Featuresfrom rasa.shared.nlu.training_data.message import Messagefrom rasa.nlu.constants import (    DENSE_FEATURIZABLE_ATTRIBUTES,    FEATURIZER_CLASS_ALIAS,)from joblib import dump, loadfrom rasa.shared.nlu.constants import (    TEXT,    TEXT_TOKENS,    FEATURE_TYPE_SENTENCE,    FEATURE_TYPE_SEQUENCE,)\nlogger = logging.getLogger(__name__)", "chunk": 22, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "540": {"text": "@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER, is_trainable=True)class TfIdfFeaturizer(SparseFeaturizer, GraphComponent):    @classmethod def required_components(cls) -> List[Type]: \"\"\"Components that should be included in the pipeline before this component.\"\"\" return [Tokenizer]\n    @staticmethod def required_packages() -> List[Text]: \"\"\"Any extra python dependencies required for this component to run.\"\"\" return [\"sklearn\"]\n    @staticmethod def get_default_config() -> Dict[Text, Any]: \"\"\"Returns the component's default config.\"\"\" return { **SparseFeaturizer.get_default_config(), \"analyzer\": \"word\", \"min_ngram\": 1, \"max_ngram\": 1, }\n def __init__(        self,        config: Dict[Text, Any],        name: Text,        model_storage: ModelStorage,        resource: Resource, ) -> None: \"\"\"Constructs a new tf/idf vectorizer using the sklearn framework.\"\"\" super().__init__(name, config) # Initialize the tfidf sklearn component        self.tfm = TfidfVectorizer(            analyzer=config[\"analyzer\"],            ngram_range=(config[\"min_ngram\"], config[\"max_ngram\"]), )\n # We need to use these later when saving the trained component.        self._model_storage = model_storage        self._resource = resource", "chunk": 23, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "541": {"text": "def train(self, training_data: TrainingData) -> Resource: \"\"\"Trains the component from training data.\"\"\"        texts = [e.get(TEXT) for e in training_data.training_examples if e.get(TEXT)]        self.tfm.fit(texts)        self.persist() return self._resource\n    @classmethod def create(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, ) -> GraphComponent: \"\"\"Creates a new untrained component (see parent class for full docstring).\"\"\" return cls(config, execution_context.node_name, model_storage, resource)\n def _set_features(self, message: Message, attribute: Text = TEXT) -> None: \"\"\"Sets the features on a single message. Utility method.\"\"\"        tokens = message.get(TEXT_TOKENS)\n # If the message doesn't have tokens, we can't create features. if not tokens: return None\n # Make distinction between sentence and sequence features        text_vector = self.tfm.transform([message.get(TEXT)])        word_vectors = self.tfm.transform([t.text for t in tokens])\n        final_sequence_features = Features(            word_vectors,            FEATURE_TYPE_SEQUENCE,            attribute,            self._config[FEATURIZER_CLASS_ALIAS], )        message.add_features(final_sequence_features)        final_sentence_features = Features(            text_vector,            FEATURE_TYPE_SENTENCE,            attribute,            self._config[FEATURIZER_CLASS_ALIAS], )        message.add_features(final_sentence_features)", "chunk": 24, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "542": {"text": "def process(self, messages: List[Message]) -> List[Message]: \"\"\"Processes incoming message and compute and set features.\"\"\" for message in messages: for attribute in DENSE_FEATURIZABLE_ATTRIBUTES:                self._set_features(message, attribute) return messages\n def process_training_data(self, training_data: TrainingData) -> TrainingData: \"\"\"Processes the training examples in the given training data in-place.\"\"\"        self.process(training_data.training_examples) return training_data\n def persist(self) -> None: \"\"\"        Persist this model into the passed directory.\n        Returns the metadata necessary to load the model again. In this case; `None`.        \"\"\" with self._model_storage.write_to(self._resource) as model_dir:            dump(self.tfm, model_dir / \"tfidfvectorizer.joblib\")\n    @classmethod def load(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, ) -> GraphComponent: \"\"\"Loads trained component from disk.\"\"\" try: with model_storage.read_from(resource) as model_dir:                tfidfvectorizer = load(model_dir / \"tfidfvectorizer.joblib\")                component = cls(                    config, execution_context.node_name, model_storage, resource )                component.tfm = tfidfvectorizer except (ValueError, FileNotFoundError):            logger.debug( f\"Couldn't load metadata for component '{cls.__name__}' as the persisted \" f\"model data couldn't be loaded.\" ) return component", "chunk": 25, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "543": {"text": "@classmethod def validate_config(cls, config: Dict[Text, Any]) -> None: \"\"\"Validates that the component is configured properly.\"\"\" pass", "chunk": 26, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "544": {"text": "NLU Meta Learners#\n\nAdvanced use caseNLU Meta learners are an advanced use case. The following section is only relevant\nif you have a component that learns parameters based on the output of previous\nclassifiers. For components that have manually set parameters or logic, you can create\na component with is_trainable=False and not worry about the preceding classifiers.\n\nNLU Meta learners are intent classifiers or entity extractors that use the predictions\nof other trained intent classifiers or entity extractors and try to improve upon their\nresults. An example for a meta learner would be a component that averages the output\nof two previous intent classifiers or a fallback classifier that sets it's threshold\naccording to the confidence of the intent classifier on training examples.\n\nConceptually, to built a trainable fallback classifier you first need to create that\nfallback classifier as a custom component:\n\nCopyfrom typing import Dict, Text, Any, List\nfrom rasa.engine.graph import GraphComponent, ExecutionContextfrom rasa.engine.recipes.default_recipe import DefaultV1Recipefrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStoragefrom rasa.shared.nlu.training_data.message import Messagefrom rasa.shared.nlu.training_data.training_data import TrainingDatafrom rasa.nlu.classifiers.fallback_classifier import FallbackClassifier", "chunk": 27, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "545": {"text": "@DefaultV1Recipe.register( [DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER], is_trainable=True)class MetaFallback(FallbackClassifier):\n def __init__(        self,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, ) -> None: super().__init__(config)\n        self._model_storage = model_storage        self._resource = resource\n    @classmethod def create(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, ) -> FallbackClassifier: \"\"\"Creates a new untrained component (see parent class for full docstring).\"\"\" return cls(config, model_storage, resource, execution_context)\n def train(self, training_data: TrainingData) -> Resource: # Do something here with the messages return self._resource\n\n\nNext, you will need to create a custom intent classifier that is also a featurizer,\nas the classifiers' output needs to be consumed by another component downstream.\nFor the custom intent classifier component you also need to define how its predictions\nshould be added to the message data specifying the process_training_data method.\nMake sure to not overwrite the true labels for the intents. Here's a template that\nshows how to subclass DIET for this purpose:\n\nCopyfrom rasa.engine.recipes.default_recipe import DefaultV1Recipefrom rasa.shared.nlu.training_data.training_data import TrainingDatafrom rasa.nlu.classifiers.diet_classifier import DIETClassifier", "chunk": 28, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "546": {"text": "@DefaultV1Recipe.register( [DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER,     DefaultV1Recipe.ComponentType.ENTITY_EXTRACTOR,     DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER], is_trainable=True)class DIETFeaturizer(DIETClassifier):\n def process_training_data(self, training_data: TrainingData) -> TrainingData: # classify and add the attributes to the messages on the training data return training_data\n\n\nPrevious\u00ab PoliciesNextTraining Data Importers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 29, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "547": {"text": "Version: 3.x\n\nTraining Data Importers\n\nRasa has built-in logic to collect and load training data written in Rasa format, but you can also customize how your training data gets imported using custom training data importers.\n\nUsing the --data command line argument you can specify where Rasa should look\nfor training data on your disk. Rasa then loads any potential training files and uses\nthem to train your assistant.\n\nIf needed, you can also customize how Rasa imports training data.\nPotential use cases for this might be:\n\nusing a custom parser to load training data in other formatsusing different approaches to collect training data (e.g. loading them from different resources)\n\nYou can write a custom importer and instruct Rasa to use it by adding the section\nimporters to your configuration file and specifying the importer with its\nfull class path:\n\nconfig.ymlCopyimporters:- name: \"module.CustomImporter\"  parameter1: \"value\"  parameter2: \"value2\"- name: \"RasaFileImporter\"\n\nThe name key is used to determine which importer should be loaded. Any extra\nparameters are passed as constructor arguments to the loaded importer.\n\nnoteTrainingDataImporter and its subclasses contain no async methods since Rasa 3.0.\nIn order to migrate your custom importers and make them work with Rasa 3.0, you also need to\nreplace your async methods with synchronized ones.\nPlease see the migration guide for more information.\n\ntipYou can specify multiple importers. Rasa will automatically merge their results.\n\nRasaFileImporter (default)#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "548": {"text": "RasaFileImporter (default)#\n\nBy default Rasa uses the importer RasaFileImporter. If you want to use it on its\nown, you don't have to specify anything in your configuration file.\nIf you want to use it together with other importers, add it to your\nconfiguration file:\n\nconfig.ymlCopyimporters:- name: \"module.CustomImporter\"  parameter1: \"value\"  parameter2: \"value2\"- name: \"RasaFileImporter\"\n\nMultiProjectImporter (experimental)#\n\nNew in 1.3This feature is currently experimental and might change or be removed in the future.\nShare your feedback on it in the forum to help\nus making this feature ready for production.\n\nWith this importer you can train a model by combining multiple\nreusable Rasa projects.\nYou might, for example, handle chitchat with one project and greet your users with\nanother. These projects can be developed in isolation, and then combined when you train\nyour assistant.\n\nFor example, consider the following directory structure:\n\nCopy.\u251c\u2500\u2500 config.yml\u2514\u2500\u2500 projects    \u251c\u2500\u2500 GreetBot    \u2502\u00a0\u00a0 \u251c\u2500\u2500 data    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 nlu.yml    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 stories.yml    \u2502\u00a0\u00a0 \u2514\u2500\u2500 domain.yml    \u2514\u2500\u2500 ChitchatBot        \u251c\u2500\u2500 config.yml        \u251c\u2500\u2500 data        \u2502\u00a0\u00a0 \u251c\u2500\u2500 nlu.yml        \u2502\u00a0\u00a0 \u2514\u2500\u2500 stories.yml        \u2514\u2500\u2500 domain.yml\n\nHere the contextual AI assistant imports the ChitchatBot project which in turn\nimports the GreetBot project. Project imports are defined in the configuration files of\neach project.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "549": {"text": "To instruct Rasa to use the MultiProjectImporter module, you need add it to the importers list in your root config.yml.\n\n./config.ymlCopyimporters:- name: MultiProjectImporter\n\nThen, in the same file, specify which projects you want to import by adding them to the imports list.\n\n./config.ymlCopyimports:- projects/ChitchatBot\n\nThe configuration file of the ChitchatBot needs to reference GreetBot:\n\n./ChitchatBot/config.ymlCopyimports:- ../GreetBot\n\nSince the GreetBot project does not specify further project to import, it doesn't need a config.yml.\n\nRasa uses paths relative from the configuration file to import projects.\nThese can be anywhere on your filesystem where file access is permitted.\n\nDuring the training process Rasa will import all required training files, combine\nthem, and train a unified AI assistant. The training data is merged at\nruntime, so no additional training data files are created.\n\nPolicies and NLU PipelinesRasa will use the policy and NLU pipeline configuration of the root project\ndirectory during training. Policy and NLU configurations of imported projects\nwill be ignored.\n\nwatch out for mergingEqual intents, entities, slots, responses, actions and forms will be merged,\ne.g. if two projects have training data for an intent greet,\ntheir training data will be combined.\n\nWriting a Custom Importer#\n\nIf you are writing a custom importer, this importer has to implement the interface of\nTrainingDataImporter:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "550": {"text": "Copyfrom typing import Optional, Text, Dict, List, Union\nimport rasafrom rasa.shared.core.domain import Domainfrom rasa.shared.nlu.interpreter import RegexInterpreterfrom rasa.shared.core.training_data.structures import StoryGraphfrom rasa.shared.importers.importer import TrainingDataImporterfrom rasa.shared.nlu.training_data.training_data import TrainingData", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "551": {"text": "class MyImporter(TrainingDataImporter): \"\"\"Example implementation of a custom importer component.\"\"\"\n def __init__(        self,        config_file: Optional[Text] = None,        domain_path: Optional[Text] = None,        training_data_paths: Optional[Union[List[Text], Text]] = None, **kwargs: Dict ): \"\"\"Constructor of your custom file importer.\n        Args:            config_file: Path to configuration file from command line arguments.            domain_path: Path to domain file from command line arguments.            training_data_paths: Path to training files from command line arguments.            **kwargs: Extra parameters passed through configuration in configuration file.        \"\"\"\n pass\n def get_domain(self) -> Domain:        path_to_domain_file = self._custom_get_domain_file() return Domain.load(path_to_domain_file)\n def _custom_get_domain_file(self) -> Text: pass\n def get_stories(        self,        interpreter: \"NaturalLanguageInterpreter\" = RegexInterpreter(),        exclusion_percentage: Optional[int] = None, ) -> StoryGraph: from rasa.shared.core.training_data.story_reader.yaml_story_reader import (            YAMLStoryReader, )\n        path_to_stories = self._custom_get_story_file() return YAMLStoryReader.read_from_file(path_to_stories, self.get_domain())\n def _custom_get_story_file(self) -> Text: pass", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "552": {"text": "def _custom_get_story_file(self) -> Text: pass\n def get_config(self) -> Dict:        path_to_config = self._custom_get_config_file() return rasa.utils.io.read_config_file(path_to_config)\n def _custom_get_config_file(self) -> Text: pass\n def get_nlu_data(self, language: Optional[Text] = \"en\") -> TrainingData: from rasa.shared.nlu.training_data import loading\n        path_to_nlu_file = self._custom_get_nlu_file() return loading.load_data(path_to_nlu_file)\n def _custom_get_nlu_file(self) -> Text: pass", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "553": {"text": "Previous\u00ab Custom Graph ComponentsNextLanguage Support \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "554": {"text": "Version: 3.x\n\nLanguage Support\n\nYou can use Rasa to build assistants in any language you want.\n\nYour Rasa assistant can be used on training data in any language.\nIf there are no word embeddings for your language, you can train your featurizers\nfrom scratch with the data you provide.\n\nIn addition, we also support pre-trained word embeddings such as spaCy. For information on\nwhat pipeline is best for your use case, check out choosing a pipeline.\n\nTraining a Model in Any Languages#\n\nThe following pipeline can be used to train models in whitespace tokenizable languages:\n\nCopyassistant_id: default_config_botlanguage: \"fr\"  # your two-letter language code\npipeline:  - name: WhitespaceTokenizer  - name: RegexFeaturizer  - name: LexicalSyntacticFeaturizer  - name: CountVectorsFeaturizer  - name: CountVectorsFeaturizer    analyzer: \"char_wb\"    min_ngram: 1    max_ngram: 4  - name: DIETClassifier    epochs: 100  - name: EntitySynonymMapper  - name: ResponseSelector    epochs: 100\n\nTo train a Rasa model in your preferred language, define the pipeline in your config.yml.\nAfter you define the pipeline and generate some NLU training data\nin your chosen language, train the model by running the command:\n\nCopyrasa train nlu\n\nOnce the training is finished, you can test your model's language skills.\nSee how your model interprets different input messages by running:\n\nCopyrasa shell nlu", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "555": {"text": "Copyrasa shell nlu\n\nnoteEven more so when training word embeddings from scratch, more training data will lead to a\nbetter model! If you find your model is having trouble discerning your inputs, try training\nwith more example sentences.\n\nUsing Pre-trained Language Models#\n\nIf you can find them in your language, language models with pre-trained word vectors are a great way to get started with less data,\nas the word vectors are trained on large amounts of data such as Wikipedia.\n\nspaCy#\n\nWith the Pre-trained Spacy Embeddings, you can use spaCy's\npre-trained language models or load fastText vectors, which are available\nfor hundreds of languages. If you want\nto incorporate a custom model you've found into spaCy, check out their page on\nadding languages. As described in the documentation, you need to\nregister your language model and link it to the language identifier, which will allow Rasa to load and use your new language\nby passing in your language identifier as the language option.\n\nMITIE#\n\nYou can also pre-train your own word vectors from a language corpus using MITIE. To do so:\n\nGet a clean language corpus (a Wikipedia dump works) as a set of text files.Build and run MITIE Wordrep Tool_ on your corpus.\nThis can take several hours/days depending on your dataset and your workstation.\nYou'll need something like 128GB of RAM for wordrep to run -- yes, that's a lot: try to extend your swap.Set the path of your new total_word_feature_extractor.dat as the model parameter in your\nconfiguration.\n\nFor a full example of how to train MITIE word vectors, check out\nthis blogpost\nof creating a MITIE model from a Chinese Wikipedia dump.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "556": {"text": "Previous\u00ab Training Data ImportersNextGraph Recipe \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "557": {"text": "Version: 3.x\n\nGraph Recipe\n\nGraph recipes provide a more fine tuned configuration for your executable graphs.\n\nDefault Recipe or Graph Recipe?You will probably only need graph recipes if you're running ML experiments or ablation studies on an existing model. We recommend starting with the default recipe and for many applications that will be all that's needed.\n\nWe now support graph recipes in addition to the default recipe. Graph recipes provide more granular control over how execution graph schemas are built.\n\nNew in 3.1This feature is experimental.\nWe introduce experimental features to get feedback from our community, so we encourage you to try it out!\nHowever, the functionality might be changed or removed in the future.\nIf you have feedback (positive or negative) please share it with us on the Rasa Forum.\n\nDifferences with Default Recipe#\n\nThere are some differences between the default recipe and the new graph recipe. Main differences are:\n\nDefault recipe is named default.v1 in the config file whereas graph recipes are named graph.v1.Default recipes provide an easy to use recipe structure whereas graph recipes are more advanced and powerful.Default recipes are very opinionated and provide various defaults whereas graph recipes are more explicit.Default recipes can auto-configure themselves and dump the defaults used to the file if some sections in config.yml are missing, whereas graph recipes do none of this and assume what you see is what you get. There are no surprises with graph recipes.Default recipe divides graph configuration into mainly two parts: pipeline and policies. These can also be described as NLU and core (dialogue management) parts. For graph recipe on the other hand, the separation is between training (ie. train_schema) and prediction (ie. predict_schema).", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "558": {"text": "Starting from scratch?If you don't know which recipe to choose, use the default recipe to bootstrap your project fast. If later you find that you need more fine-grained control, you can always change your recipe to be a graph recipe.\n\nGraph Configuration File Structure#\n\nGraph recipes share recipe and language keys with the same meaning. Similarities end there as graph recipes do not have pipeline or policies keys but they do have train_schema and predict_schema keys for determining the graph nodes during train and predict runs respectively. In addition to this, target nodes for NLU and core can be specified explicitly with graph recipes, these can be declared with nlu_target and core_target. If targets are omitted, node names used by default recipe will take over, and these are run_RegexMessageHandler and select_prediction for nlu and core respectively.\n\nHere's an example graph recipe:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "559": {"text": "Copy# The config recipe.# https://rasa.com/docs/rasa/model-configuration/recipe: graph.v1\nlanguage: en\ncore_target: custom_core_target\nnlu_target: custom_nlu_target", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "560": {"text": "train_schema:  nodes:    # We skip schema_validator node (we only have this for DefaultV1Recipe    # since we don't do validation for the GraphV1Recipe)    finetuning_validator:      needs:        importer: __importer__      uses: rasa.graph_components.validators.finetuning_validator.FinetuningValidator      constructor_name: create      fn: validate      config:        validate_core: true        validate_nlu: true      eager: false      is_target: false      is_input: true      resource: null    nlu_training_data_provider:      needs:        importer: finetuning_validator      uses: rasa.graph_components.providers.nlu_training_data_provider.NLUTrainingDataProvider      constructor_name: create      fn: provide      config:        language: en        persist: false      eager: false      is_target: false      is_input: true      resource: null    domain_provider:      needs:        importer: finetuning_validator      uses: rasa.graph_components.providers.domain_provider.DomainProvider", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "561": {"text": "uses: rasa.graph_components.providers.domain_provider.DomainProvider      constructor_name: create      fn: provide_train      config: { }      eager: false      is_target: true      is_input: true      resource: null    domain_for_core_training_provider:      needs:        domain: domain_provider      uses: rasa.graph_components.providers.domain_for_core_training_provider.DomainForCoreTrainingProvider      constructor_name: create      fn: provide      config: { }      eager: false      is_target: false      is_input: true      resource: null    story_graph_provider:      needs:        importer: finetuning_validator      uses: rasa.graph_components.providers.story_graph_provider.StoryGraphProvider      constructor_name: create      fn: provide      config:        exclusion_percentage: null      eager: false      is_target: false      is_input: true      resource: null    training_tracker_provider:      needs:        story_graph: story_graph_provider        domain:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "562": {"text": "story_graph: story_graph_provider        domain: domain_for_core_training_provider      uses: rasa.graph_components.providers.training_tracker_provider.TrainingTrackerProvider      constructor_name: create      fn: provide      config: { }      eager: false      is_target: false      is_input: false      resource: null    train_MemoizationPolicy0:      needs:        training_trackers: training_tracker_provider        domain: domain_for_core_training_provider      uses: rasa.core.policies.memoization.MemoizationPolicy      constructor_name: create      fn: train      config: { }      eager: false      is_target: true      is_input: false      resource: null", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "563": {"text": "predict_schema:  nodes:    nlu_message_converter:      needs:        messages: __message__      uses: rasa.graph_components.converters.nlu_message_converter.NLUMessageConverter      constructor_name: load      fn: convert_user_message      config: {}      eager: true      is_target: false      is_input: false      resource: null    custom_nlu_target:      needs:        messages: nlu_message_converter        domain: domain_provider      uses: rasa.nlu.classifiers.regex_message_handler.RegexMessageHandler      constructor_name: load      fn: process      config: {}      eager: true      is_target: false      is_input: false      resource: null    domain_provider:      needs: {}      uses: rasa.graph_components.providers.domain_provider.DomainProvider      constructor_name: load      fn: provide_inference      config: {}      eager: true      is_target: false      is_input: false      resource:        name: domain_provider", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "564": {"text": "resource:        name: domain_provider    run_MemoizationPolicy0:      needs:        domain: domain_provider        tracker: __tracker__        rule_only_data: rule_only_data_provider      uses: rasa.core.policies.memoization.MemoizationPolicy      constructor_name: load      fn: predict_action_probabilities      config: {}      eager: true      is_target: false      is_input: false      resource:        name: train_MemoizationPolicy0    rule_only_data_provider:      needs: {}      uses: rasa.graph_components.providers.rule_only_provider.RuleOnlyDataProvider      constructor_name: load      fn: provide      config: {}      eager: true      is_target: false      is_input: false      resource:        name: train_RulePolicy1    custom_core_target:      needs:        policy0: run_MemoizationPolicy0        domain: domain_provider        tracker: __tracker__      uses: rasa.core.policies.ensemble.DefaultPolicyPredictionEnsemble", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "565": {"text": "constructor_name: load      fn: combine_predictions_from_kwargs      config: {}      eager: true      is_target: false      is_input: false      resource: null", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "566": {"text": "graph targetsFor NLU, default target name of run_RegexMessageHandler will be used, while for core (dialogue management) the target will be called select_prediction if omitted. Make sure you have graph nodes with relevant names in your schema definitions.In a similar fashion, note that the default resource needed by the first graph node is fixed to be __importer__ (representing configuration, training data etc.) for training task and it is __message__ (representing the message received) for prediction task. Make sure your first nodes make use of these dependencies.\n\nGraph Node Configuration#\n\nAs you can see in the example above, graph recipes are very much explicit and you can configure each graph node as you would like. Here is an explanation of what some of the keys mean:\n\nneeds: You can define here what data your graph node requires and from which parent node. Key is the data name, whereas the value would refer to the node name.\n\nCopyneeds:    messages: nlu_message_converter\n\nCurrent graph node needs messages which is provided by nlu_message_converter node.\n\nuses: You can provide the class used to instantiate this node with this key. Please provide the full path in Python path syntax, eg.\n\nCopyuses: rasa.graph_components.converters.nlu_message_converter.NLUMessageConverter\n\nYou are not required to use Rasa internal graph component classes and you\ncan use your own components here. Refer to custom graph\ncomponents pages to find out how to write your\nown graph components.\n\nconstructor_name: This is the constructor used to instantiate your component. Example:\n\nCopyconstructor_name: load\n\nfn: This is the function used in executing the graph component. Example:", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "567": {"text": "fn: This is the function used in executing the graph component. Example:\n\nCopyfn: combine_predictions_from_kwargs\n\nconfig: You can provide any configuration parameters for your components using this key.\n\nCopyconfig:    language: en    persist: false\n\neager: This determines if your component should be eagerly loaded\nwhen the graph is constructed or if it should wait until the\nruntime (this is called lazy instantiation). Usually we always\ninstantiate lazily during training and eagerly during inference (to\navoid slow first prediction).\n\nCopyeager: true\n\nresource: If given, graph node is loaded from this resource instead of instantiated from scratch. This is e.g. used to load a trained component for predictions.\n\nCopyresource:    name: train_RulePolicy1\n\nis_target: Boolean value, if True then this node can't be pruned\nduring fingerprinting (it might be replaced with a cached value\nthough). This\nis e.g. used for all components which train as their result always needs\nto be added to the model archive so that the data is available during\ninference.\n\nCopyis_target: false\n\nis_input: Boolean value; nodes with is_input are always run (also during the\nfingerprint run). This makes sure that we e.g. detect changes in file\ncontents.\n\nCopy is_input: false\n\nPrevious\u00ab Language SupportNextSpaces \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "568": {"text": "Version: 3.x\n\nSpaces\n\nSpaces are a way to modularize your assistant that increases isolation between subparts and classification performance for intents and entities that are only relevant in specific contexts.\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nNew in 3.6.0a1This is an alpha release.\nThis alpha release will allow us to gather feedback from our users and integrate it into future releases. We encourage you to try this out!\nThe functionality of this alpha release might change in the future.\nIf you have feedback (positive or negative) please share it with us via your support contact.\n\nSpaces are a way to modularize your assistant. As assistants grow in scale and scope, the\npotential for conflicts between intents, entities, and other primitives grows as well.\nThat is because in a regular rasa assistant all intents, entities, and actions are\navailable at any time, giving the assistant more choices to distinguish between the more that gets\nadded. Spaces provide a basic separation between parts of the bot through the activation\nand deactivation of groups of rasa primitives. Each of these groups is called a Space.\nSpaces are activated when certain designated intents, called entry intents, are\npredicted. With the activation of a Space, all the primitives for the Space become\navailable for subsequent interactions with the user. Good ways to think about spaces are\n\nthat they allow you to specify follow-up primitives, which only become accessible after another intent has come beforehandthat they are like multiple sub-bots merged into one with the possibility of sharing primitives\n\nWhen to use Spaces#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "569": {"text": "When to use Spaces#\n\nSpaces can be helpful when you are dealing with multiple domains of your business in\na single assistant. Oftentimes, this leads to multitude of forms, entities, and inform\nintents that start to overlap at some point. Form filling and inform intents are a\ntypical case of having this follow-up structure mentioned above. Another good case is\nwhen you want to be able to define different behavior for help- or clarification\nrequests based on the subdomain or process the user is in. This is technically possible\ntoday with stories, but it can be cumbersome to describe the full event horizon\nfor every interaction route.\n\nWhen not to use Spaces / Limitations#\n\nBecause spaces split a rasa bot into multiple parts, it is interacting with almost\nevery of the existing features of rasa. We made it work with almost all of them, but\nthere are some exceptions. This means, however, if you have created\ncustomization beyond components that are aligned with the way rasa normally\nworks, spaces might not work for you.\n\nAnother important limitation is that spaces currently do not support stories. We know\nthis is a big limitations for many existing bots. However, because stories and their\nexisting policies work with a fixed event horizon (max_history), they are at this\npoint not compatible with the idea of being able to describe encapsulated units of logic\nwell.\n\nCurrently, the only entity extractor that is works with the boundaries that spaces\ncreate, is an adapted version of the CRFEntityExtractor. You can find more on this\nin the following sections.\n\nAn example spaces bot#\n\nWe have created a bot using spaces for you to look at, learn from and experiment with.\nIt features three different spaces in the financial domain. Here is the repository\n\nHow to use spaces#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "570": {"text": "How to use spaces#\n\nSpaces are defined by separate sets of domain, nlu, and rule files. These separate\nsets are then assembled to create a unified assistant. The assembly plan needs to be\nadded to the config.yml using the newly introduces spaces key. Second, you need\nto use a special data importer that reads and enacts the assembly plan. Third, you need\nto add some specific space-aware components to your NLU pipeline. The following is the\nconfig.yml of the financial spaces bot linked above:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "571": {"text": "Copy# https://rasa.com/docs/rasa/model-configuration/recipe: default.v1\n# Configuration for Rasa NLU.# https://rasa.com/docs/rasa/nlu/components/language: en\nspaces: - name: main domain: main/domain.yml nlu: main/nlu/training_data.yml nlu_test: main/nlu/test_data.yml rules: main/rules.yml - name: transfer_money domain: transfer_money/domain.yml nlu: transfer_money/nlu/training_data.yml nlu_test: transfer_money/nlu/test_data.yml rules: transfer_money/rules.yml entry_intents: - transfer_money - name: investment domain: investment/domain.yml nlu: investment/nlu/training_data.yml nlu_test: investment/nlu/test_data.yml rules: investment/rules.yml entry_intents: - buy_stock - name: pay_cc domain: pay_cc/domain.yml nlu: pay_cc/nlu/training_data.yml nlu_test: pay_cc/nlu/test_data.yml rules: pay_cc/rules.yml entry_intents: - pay_cc\nimporters: - name: \"rasa_plus.spaces.space_data_importer.SpaceDataImporter\" temporary_working_directory: spaces", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "572": {"text": "pipeline: - name: WhitespaceTokenizer - name: RegexFeaturizer - name: LexicalSyntacticFeaturizer - name: CountVectorsFeaturizer - name: CountVectorsFeaturizer analyzer: char_wb min_ngram: 1 max_ngram: 4 - name: rasa_plus.spaces.components.spaces_crf_entity_extractor.SpacesCRFEntityExtractor - name: EntitySynonymMapper - name: DIETClassifier epochs: 100 ranking_length: 0 entity_recognition: false BILOU_flag: false - name: rasa_plus.spaces.components.filter_and_rerank.FilterAndRerank - name: FallbackClassifier threshold: 0.3 ambiguity_threshold: 0.1\npolicies: - name: RulePolicy", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "573": {"text": "In the above config file, you can see the Spaces definition with the main space, which\nis a designated name for a space for shared primitives, and the three\nsubspaces for transferring money, investment, and credit card payments. The main space\nis not required, but the only way to share primitives between spaces. Each path value\ncan either point to a single file or a directory.\n\nSecond, you can also see the importer\nrasa_plus.spaces.space_data_importer.SpaceDataImporter being used. This importer\nreads the above spaces definition and assembles the bot. The results can be seen in the\ntemporary working directory.\n\nThird, you can see the specific NLU components that are necessary to make spaces work.\nThe most important is the FilterAndRerank component which is central to make spaces\nwork by post-processing intent rankings and entity extractions. If you also need entity\nextraction you need to use the SpacesCRFEntityExtractor to make that work with spaces.\n\nFinally, you can see that we are only using the RulePolicy here.\n\nAfter you have created your spaces and made adjustments to the config.yml, you can\ntrain your new assistant using rasa train -c config.yml and start it afterward with\nrasa shell.\n\nTraining only a specific subspace#\n\nWe have added --space argument to the rasa train command to give you the option to\nonly train one specific subspace:\n\nrasa train -> trains the full assistant with all spaces\nrasa train --space investment -> trains an assistant only containing the investment and the main space\n\nOther commands were not adjusted as they use trained assistants as inputs.\n\nHow do spaces work?#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "574": {"text": "How do spaces work?#\n\nIn the following we'll look at how things work under the hood in spaces to give you a\nbetter understanding of what is happening in case you should need it.\n\nOne of the most aspects is that spaces form a hierarchy with two layers. At the top\nis the main space which contains shared primitives that should be usable by all spaces.\nThe main space is always active. Anything that is defined in a subspace, can\nonly be used by that space and not by other subspaces or the main space.\n\n\n\nWhat happens during the assembly?#\n\nThe most important step during the assembly is the prefixing. During this step every\nintent, entity, slot, action, form, utterance that is defined in a space's domain file\nis prefixed (infixed for utterances) with this space's name. For example, an intent\nask_transfer_charge in the transfer_money domain would become\ntransfer_money.ask_transfer_charge and every reference of this intent would be\nadjusted. The final assistant then works on the prefixed data.\n\nAn exception to this is the main space. Anything in the main space and all its\nprimitives that are used in other spaces, will not be prefixed.\n\nAnother exception are rules. They don't have a name that can be prefixed. Instead,\nwe add a condition to each rule that it is only applicable while it's space is active.\n\nHow is space activation tracked?#\n\nA space is activated when any of their entry intents is predicted. A space can have\nmultiple entry intents. However, only a single space can be active at a given time.\nSo when space A is active and an entry intent of space B\nis predicted, space A will be deactivated and space B is active from now on.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "575": {"text": "Space activation is tracked through slots that are automatically\ngenerated during assembly.\n\nHow does filter and rerank work?#\n\nThe filter and rerank component post-processes the intent ranking of the intent\nclassification components. It accesses the tracker\nand checks which space are active or would be activated, in case an entry intent is at the top.\n\nIt then removes any intents from the ranking that are not possible. Further it also\nremoves any entities that are not possible given the space activation status or\nabout to be predicted entry intents.\n\nHow does entity recognition work differently?#\n\nUsually, entity recognizers in Rasa only return a single label per token in a message.\nThus, there is no ranking, that could be post-processed as in the case of intents. We\nhave built our SpacesCRFEntityExtractor in a way that it creates multiple extractors.\nOne for each space. Now, during the post-processing step, we can filter out the\nextractor of the spaces that are not activated.\n\nCustom Actions#\n\nCustom actions work as before. However, the tracker, the domain, and slots\nwill be stripped of any information from other spaces before being handed to your\naction. Additionally, every event such as slot sets, will be prefixed after they are\nreturned by your action. All of this ensures that from the view point of your custom\naction, you don't need to worry about the other spaces and accidentally leaking\nor altering information. This warrants isolation between your Spaces. Note that\ncustom actions from the main spaces are not inherited by subspaces.\n\nResponse Selection#", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "576": {"text": "Response Selection#\n\nResponse selection works as before. The only small difference is that in your\nconfig.yaml you'll need to specify the retrieval intent including it's final prefix.\nIf your retrieval intent is investment_faq in the investment space, then in your\nconfig you'll need to set investment.investment_faq as the retrieval intent. If the\nretrieval intent belongs to the main space, no prefix is added. That's why\n, in this case, during the definition of the retrieval intent, no prefixing is necessary.\n\nLookup tables and Synonyms#\n\nLookup Tables and\nSynonyms work with spaces. However, they are not\ntruly isolated between spaces. So there can be some unanticipated interactions.\nFor synonyms, specifically:\n\nAssume two spaces define the same synonym. Space A: \"IB\" -> \"Instant banking\".\nSpace B: \"IB\"-> \"iron bank\". A warning is given that one value overwrites the other.A similar thing can happen if \"IB\" is an entity in both spaces but only one\ndefines it a synonym. Any entity with value IB will always be mapped to that synonym\nno matter which space is active.\n\nFor lookup tables no adverse interactions are known.\n\nPrevious\u00ab Graph RecipeNextActions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "577": {"text": "Version: 3.x\n\nActions\n\nAfter each user message, the model will predict an action that the assistant should perform next. This page gives you an overview of the different types of actions you can use.\n\nResponses#\n\nA response is a message the assistant will send back to the user. This is\nthe action you will use most often, when you want the assistant to send text, images, buttons\nor similar to the user.\n\nCustom Actions#\n\nA custom action is an action that can run any code you want. This can be used to make an\nAPI call, or to query a database for example.\n\nForms#\n\nForms are a special type of custom action, designed to handle business logic. If you have\nany conversation designs where you expect the assistant to ask for a specific set of\ninformation, you should use forms.\n\nDefault Actions#\n\nDefault actions are actions that are built into the dialogue manager by default. Most of\nthese are automatically predicted based on certain conversation situations. You may want to\ncustomize these to personalize your assistant.\n\nSlot Validation Actions#\n\nA slot validation action is a special type of custom action, designed to handle custom extraction and/or validation of slot values.\nThis can be used to validate slots with predefined mappings or extract slots with custom mappings.\n\nPrevious\u00ab SpacesNextResponses \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "578": {"text": "Version: 3.x\n\nResponses\n\nResponses are messages that your assistant sends to the user. A response is usually only text, but can also include content like images and buttons.\n\nDefining Responses#\n\nResponses go under the responses key in your domain file or in a separate \"responses.yml\" file. Each response name should start with utter_.\nFor example, you could add responses for greeting and saying goodbye under the response names utter_greet and utter_bye:\n\ndomain.ymlCopyintents:  - greet\nresponses:  utter_greet:  - text: \"Hi there!\"  utter_bye:  - text: \"See you!\"\n\nIf you are using retrieval intents in your assistant, you also need to add responses\nfor your assistant's replies to these intents:\n\nCopyintents:  - chitchat\nresponses:  utter_chitchat/ask_name:  - text: Oh yeah, I am called the retrieval bot.\n  utter_chitchat/ask_weather:  - text: Oh, it does look sunny right now in Berlin.\n\nnoteNotice the special format of response names for retrieval intents. Each name starts with utter_,\nfollowed by the retrieval intent's name (here chitchat) and finally a suffix specifying\nthe different response keys (here ask_name and ask_weather). See the documentation for NLU\ntraining examples to learn more.\n\nUsing Variables in Responses#\n\nYou can use variables to insert information into responses.\nWithin a response, a variable is enclosed in curly brackets. For example, see the variable name below:\n\ndomain.ymlCopyresponses:  utter_greet:  - text: \"Hey, {name}. How are you?\"", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "579": {"text": "When the utter_greet response is used, Rasa automatically fills in the variable with the\nvalue found in the slot called name. If such a slot doesn't exist or is empty, the variable gets\nfilled with None.\n\nAnother way to fill in a variable is within a custom action.\nIn your custom action code, you can supply values to a response to fill in specific variables.\nIf you're using the Rasa SDK for your action server,\nyou can pass a value for the variable as a keyword argument to dispatcher.utter_message:\n\nCopydispatcher.utter_message(    template=\"utter_greet\",    name=\"Sara\")\n\nIf you use a different custom action server,\nsupply the values by adding extra parameters to the responses your server returns:\n\nCopy{ \"events\":[    ... ], \"responses\":[ { \"template\":\"utter_greet\", \"name\":\"Sara\" } ]}\n\nResponse Variations#\n\nYou can make your assistant's replies more interesting if you provide multiple response variations\nto choose from for a given response name:\n\ndomain.ymlCopyresponses:  utter_greet:  - text: \"Hey, {name}. How are you?\"  - text: \"Hey, {name}. How is your day going?\"\n\nIn this example, when utter_greet gets predicted as the next action, Rasa will randomly pick one\nof the two response variations to use.\n\nIDs for Responses#\n\nNew in Rasa 3.6You can now set an ID for any response.\nThis is useful when you want to use the NLG server to generate the response.Type for ID is string.\n\nExample of response variations with ID:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "580": {"text": "Example of response variations with ID:\n\ndomain.ymlCopyresponses:  utter_greet:  - id: \"greet_1\"    text: \"Hey, {name}. How are you?\"  - id: \"greet_2\"    text: \"Hey, {name}. How is your day going?\"\n\nChannel-Specific Response Variations#\n\nTo specify different response variations depending on which channel\nthe user is connected to, use channel-specific response variations.\n\nIn the following example, the channel key makes the first response variation channel-specific for\nthe slack channel while the second variation is not channel-specific:\n\ndomain.ymlCopyresponses:  utter_ask_game:  - text: \"Which game would you like to play on Slack?\"    channel: \"slack\"  - text: \"Which game would you like to play?\"\n\nnoteMake sure the value of the channel key matches the value returned by the name() method of your\ninput channel. If you are using a built-in channel, this value will also match the channel name used\nin your credentials.yml file.\n\nWhen your assistant looks for suitable response variations under a given response name, it will first\ntry to choose from channel-specific variations for the current channel.\nIf there are no such variations, the assistant will choose from any response variations which are not\nchannel-specific.\n\nIn the above example, the second response variation has no channel specified and can be used by\nyour assistant for all channels other than slack.\n\ncautionFor each response, try to have at least one response variation without the channel key.\nThis allows your assistant to properly respond in all environments, such as in new channels,\nin the shell and in interactive learning.\n\nConditional Response Variations#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "581": {"text": "Conditional Response Variations#\n\nSpecific response variations can also be selected based on one or more slot values using a conditional\nresponse variation. A conditional response variation is defined in the domain or responses YAML files\nsimilarly to a standard response variation but with an additional condition key. This key specifies\na list of slot name and value constraints.\n\nWhen a response is triggered during a dialogue, the constraints of each conditional response variation\nare checked against the current dialogue state. If all constraint slot values are equal to the corresponding\nslot values of the current dialogue state, the response variation is eligible to be used by your conversational\nassistant.\n\nnoteThe comparison of dialogue state slot values and constraint slot values is performed by the\nequality \"==\" operator which requires the type of slot values to match too.\nFor example, if the constraint is specified as value: true, then the slot needs to be filled\nwith a boolean true, not the string \"true\".\n\nIn the following example, we will define one conditional response variation with one constraint,\nthat the logged_in slot is set to true:\n\ndomain.ymlCopyslots:  logged_in:    type: bool    influence_conversation: False    mappings:    - type: custom  name:    type: text    influence_conversation: False    mappings:    - type: custom\nresponses:  utter_greet:    - condition:        - type: slot          name: logged_in          value: true      text: \"Hey, {name}. Nice to see you again! How are you?\"\n    - text: \"Welcome. How is your day going?\"", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "582": {"text": "stories.ymlCopystories:- story: greet  steps:  - action: action_log_in  - slot_was_set:    - logged_in: true  - intent: greet  - action: utter_greet\n\nIn the example above, the first response variation (\"Hey, {name}. Nice to see you again! How are you?\")\nwill be used whenever the utter_greet action is executed and the logged_in slot is set to true.\nThe second variation, which has no condition, will be treated as the default and used whenever\nlogged_in is not equal to true.\n\ncautionIt is highly recommended to always provide a default response variation without a condition\nto guard against those cases when no conditional response matches filled slots.\n\nDuring a dialogue, Rasa will choose from all conditional response variations whose constraints are satisfied.\nIf there are multiple eligible conditional response variations, Rasa will pick one at random.\nFor example, consider the following response:\n\ndomain.ymlCopyresponses:  utter_greet:    - condition:        - type: slot          name: logged_in          value: true      text: \"Hey, {name}. Nice to see you again! How are you?\"\n    - condition:        - type: slot          name: eligible_for_upgrade          value: true      text: \"Welcome, {name}. Did you know you are eligible for a free upgrade?\"\n    - text: \"Welcome. How is your day going?\"\n\nIf logged_in and eligible_for_upgrade are both set to true then both the first and second response\nvariations are eligible to be used, and will be chosen by the conversational assistant with equal probability.\n\nYou can continue using channel-specific response variations alongside conditional response variations\nas shown in the example below.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "583": {"text": "domain.ymlCopyslots:  logged_in:    type: bool    influence_conversation: False    mappings:    - type: custom  name:    type: text    influence_conversation: False    mappings:    - type: custom\nresponses:  utter_greet:    - condition:        - type: slot          name: logged_in          value: true      text: \"Hey, {name}. Nice to see you again on Slack! How are you?\"      channel: slack\n    - text: \"Welcome. How is your day going?\"\n\nRasa will prioritize the selection of responses in the following order:\n\nconditional response variations with matching channeldefault responses with matching channelconditional response variations with no matching channeldefault responses with no matching channel\n\nRich Responses#\n\nYou can make responses rich by adding visual and interactive elements.\nThere are several types of elements that are supported across many channels:\n\nButtons#\n\nHere is an example of a response that uses buttons:\n\ndomain.ymlCopyresponses:  utter_greet:  - text: \"Hey! How are you?\"    buttons:    - title: \"great\"      payload: \"/mood_great\"    - title: \"super sad\"      payload: \"/mood_sad\"\n\nEach button in the list of buttons should have two keys:\n\ntitle: The text displayed on the buttons that the user sees.payload: The message sent from the user to the assistant when the button is clicked.\n\nIf you would like the buttons to also pass entities to the assistant:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "584": {"text": "If you would like the buttons to also pass entities to the assistant:\n\ndomain.ymlCopyresponses:  utter_greet:  - text: \"Hey! Would you like to purchase motor or home insurance?\"    buttons:    - title: \"Motor insurance\"      payload: '/inform{{\"insurance\":\"motor\"}}'    - title: \"Home insurance\"      payload: '/inform{{\"insurance\":\"home\"}}'\n\nPassing multiple entities is also possible with:\n\nCopy'/intent_name{{\"entity_type_1\":\"entity_value_1\", \"entity_type_2\": \"entity_value_2\"}}'\n\noverwrite nlu with buttonsYou can use buttons to overwrite the NLU prediction and trigger a specific intent and entities.Messages starting with / are sent handled by the\nRegexInterpreter, which expects NLU input in a shortened /intent{entities} format.\nIn the example above, if the user clicks a button, the user input\nwill be classified as either the mood_great or mood_sad intent.You can include entities with the intent to be passed to the RegexInterpreter using the following format:/inform{\"ORG\":\"Rasa\", \"GPE\":\"Germany\"}The RegexInterpreter will classify the message above with the intent inform and extract the entities\nRasa and Germany which are of type ORG and GPE respectively.\n\nescaping curly braces in domain.ymlYou need to write the /intent{entities} shorthand response with double curly braces in domain.yml so that the assistant does not\ntreat it as a variable in a response and interpolate the content within the curly braces.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "585": {"text": "Check your channelKeep in mind that it is up to the implementation of the output\nchannel how to display the defined buttons. For example, some\nchannels have a limit on the number of\nbuttons you can provide. Check your channel's documentation under\nConcepts > Channel Connectors for any channel-specific restrictions.\n\nImages#\n\nYou can add images to a response by providing a URL to the image under the image key:\n\ndomain.ymlCopy  utter_cheer_up:  - text: \"Here is something to cheer you up:\"    image: \"https://i.imgur.com/nGF1K8f.jpg\"\n\nCustom Output Payloads#\n\nYou can send any arbitrary output to the output channel using the\ncustom key. The output channel receives the object stored under the custom key\nas a JSON payload.\n\nHere's an example of how to send a\ndate picker to the\nSlack Output Channel:\n\ndomain.ymlCopyresponses:  utter_take_bet:  - custom:      blocks:      - type: section        text:          text: \"Make a bet on when the world will end:\"          type: mrkdwn        accessory:          type: datepicker          initial_date: '2019-05-21'          placeholder:            type: plain_text            text: Select a date\n\nUsing Responses in Conversations#\n\nCalling Responses as Actions#\n\nIf the name of the response starts with utter_, the response can\ndirectly be used as an action, without being listed in the actions section of your domain. You would add the response\nto the domain:\n\ndomain.ymlCopyresponses:  utter_greet:  - text: \"Hey! How are you?\"", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "586": {"text": "You can use that same response as an action in your stories:\n\nstories.ymlCopystories:- story: greet user  steps:  - intent: greet  - action: utter_greet\n\nWhen the utter_greet action runs, it will send the message from\nthe response back to the user.\n\nChanging responsesIf you want to change the text, or any other part of the response,\nyou need to retrain the assistant before these changes will be picked up.\n\nCalling Responses from Custom Actions#\n\nYou can use the responses to generate response messages from your\ncustom actions. If you're using Rasa SDK as your action server, you can use the dispatcher to generate the response message, for example: \n\nactions.pyCopyfrom rasa_sdk.interfaces import Action\nclass ActionGreet(Action): def name(self): return 'action_greet'\n def run(self, dispatcher, tracker, domain):        dispatcher.utter_message(template=\"utter_greet\") return []\n\nIf you use a\ndifferent custom action server,\nyour server should return the following JSON to call the utter_greet response:\n\nCopy{ \"events\":[], \"responses\":[ { \"template\":\"utter_greet\" } ]}\n\nPrevious\u00ab ActionsNextCustom Actions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "587": {"text": "Version: 3.x\n\nCustom Actions\n\nA custom action can run any code you want, including API calls, database queries etc. They can turn on the lights, add an event to a calendar, check a user's bank balance, or anything else you can imagine.\n\nFor details on how to implement a custom action, see the SDK documentation.\nAny custom action that you want to use in your stories should be added into the\nactions section of your domain.\n\nWhen the dialogue engine predicts a custom action to be executed, it will call\nthe action server, with the following information:\n\nCopy{ \"next_action\": \"string\", \"sender_id\": \"string\", \"tracker\": { \"conversation_id\": \"default\", \"slots\": {}, \"latest_message\": {}, \"latest_event_time\": 1537645578.314389, \"followup_action\": \"string\", \"paused\": false, \"events\": [], \"latest_input_channel\": \"rest\", \"active_loop\": {}, \"latest_action\": {} }, \"domain\": { \"config\": {}, \"session_config\": {}, \"intents\": [], \"entities\": [], \"slots\": {}, \"responses\": {}, \"actions\": [], \"forms\": {}, \"e2e_actions\": [] }, \"version\": \"version\"}\n\nYour action server should respond with a list of events and responses:\n\nCopy{ \"events\": [{}], \"responses\": [{}]}\n\nPrevious\u00ab ResponsesNextForms \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "588": {"text": "Version: 3.x\n\nForms\n\nOne of the most common conversation patterns is to collect a few pieces of information from a user in order to do something (book a restaurant, call an API, search a database, etc.). This is also called **slot filling**.\n\nUsage#\n\nTo use forms with Rasa you need to make sure that the\nRule Policy is added to your policy configuration.\nFor example:\n\nCopypolicies:- name: RulePolicy\n\nDefining a Form#\n\nDefine a form by adding it to the forms section in your domain.\nThe name of the form is also the name of the action which you can use in\nstories or rules to handle form executions.\nYou will need to specify a list of slot names to the mandatory required_slots key.\n\nThe following example form restaurant_form will fill the slot\ncuisine and slot num_people.\n\nCopyentities:- cuisine- numberslots:  cuisine:    type: text    mappings:    - type: from_entity      entity: cuisine  num_people:    type: any    mappings:    - type: from_entity      entity: numberforms:  restaurant_form:    required_slots:        - cuisine        - num_people\n\nYou can define a list of intents to ignore for the whole form under the\nignored_intents key. Intents listed under ignored_intents will be added to the\nnot_intent key of each slot mapping.\n\nFor example, if you do not want any of the required slots of a form to be filled when\nthe intent is chitchat, then you would need to define the following (after the form\nname and under the ignored_intents keyword):", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "589": {"text": "Copyentities:- cuisine- numberslots:  cuisine:    type: text    mappings:    - type: from_entity      entity: cuisine  num_people:    type: any    mappings:    - type: from_entity      entity: numberforms:  restaurant_form:    ignored_intents:     - chitchat    required_slots:        - cuisine        - num_people\n\nOnce the form action gets called for the first time, the form gets activated and will\nprompt the user for the next required slot value. It does this by\nlooking for a response called\nutter_ask_<form_name>_<slot_name> or utter_ask_<slot_name> if the former isn't\nfound. Make sure to define these responses in your domain file for\neach required slot.\n\nActivating a Form#\n\nTo activate a form you need to add a story or rule,\nwhich describes when the assistant should run the form. In the case a specific intent\ntriggering a form, you can for example use the following rule:\n\nCopyrules:- rule: Activate form  steps:  - intent: request_restaurant  - action: restaurant_form  - active_loop: restaurant_form\n\nnoteThe active_loop: restaurant_form step indicates that the form should be activated after\nrestaurant_form was run.\n\nDeactivating a Form#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "590": {"text": "Deactivating a Form#\n\nA form will automatically deactivate itself once all required slots are filled.\nYou can describe your assistant's behavior for the end of a form with a rule or a story.\nIf you don't add an applicable story or rule, the assistant will automatically listen\nfor the next user message after the form is finished.\nThe following example runs the utterances utter_submit and utter_slots_values as soon as the form\nyour_form filled all required slots.\n\nCopyrules:- rule: Submit form  condition:  # Condition that form is active.  - active_loop: restaurant_form  steps:  # Form is deactivated  - action: restaurant_form  - active_loop: null  - slot_was_set:    - requested_slot: null  # The actions we want to run when the form is submitted.  - action: utter_submit  - action: utter_slots_values\n\nUsers might want to break out of a form early. Please see\nWriting Stories / Rules for Unhappy Form Paths on how to\nwrite stories or rules for this case.\n\nSlot Mappings#\n\nChanged in 3.0As of 3.0, slot mappings are defined in the slots section of the domain.\nThis change allows the same slot mapping to be reused across multiple forms, removing any unnecessary duplication.\nPlease follow the migration guide to update your assistant.Note specifically the role of Mapping Conditions and the\nunique entity mapping constraint.\n\nWriting Stories / Rules for Unhappy Form Paths#\n\nYour users will not always respond with the information you ask of them.\nTypically, users will ask questions, make chitchat, change their mind, or otherwise\nstray from the happy path.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "591": {"text": "While a form is active, if a user's input does not fill the requested slot, the execution of\nthe form action will be rejected i.e. the form will automatically raise an ActionExecutionRejection.\nThese are the specific scenarios in which a form will raise an ActionExecutionRejection:\n\na slot was requested, but the user didn't fill the slot with their last message and\nyou didn't define a custom action for\nvalidating slots or\nextracting slots.a slot was requested, but your custom action for\nvalidating slots or\nextracting slots didn't return any SlotSet events.\n\nTo intentionally reject the form execution, you can also return an ActionExecutionRejected event as part of your\ncustom validations or slot mappings.\n\nTo handle situations that might cause a form's execution to be rejected, you can write rules\nor stories that include the expected interruptions. For example, if you expect your users to chitchat with your bot,\nyou could add a rule to handle this:\n\nCopyrules:- rule: Example of an unhappy path  condition:  # Condition that form is active.  - active_loop: restaurant_form  steps:  # This unhappy path handles the case of an intent `chitchat`.  - intent: chitchat  - action: utter_chitchat  # Return to form after handling the `chitchat` intent  - action: restaurant_form  - active_loop: restaurant_form\n\nIn some situations, users may change their mind in the middle of the form action\nand decide not to go forward with their initial request. In cases like this, the\nassistant should stop asking for the requested slots.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "592": {"text": "You can handle such situations\ngracefully using a default action action_deactivate_loop which will deactivate\nthe form and reset the requested slot. An example story of such conversation could\nlook as follows:\n\nCopystories:- story: User interrupts the form and doesn't want to continue  steps:  - intent: request_restaurant  - action: restaurant_form  - active_loop: restaurant_form  - intent: stop  - action: utter_ask_continue  - intent: stop  - action: action_deactivate_loop  - active_loop: null\n\nIt is strongly recommended that you build these rules or stories using\ninteractive learning.\nIf you write these rules / stories by hand you will likely miss important\nthings.\n\nAdvanced Usage#\n\nForms are fully customizable using Custom Actions.\n\nValidating Form Input#\n\nAfter extracting a slot value from user input, you can validate the extracted slots.\nBy default Rasa only validates if any slot was filled after requesting\na slot.\n\nYou can implement a Custom Action validate_<form_name>\nto validate any extracted slots. Make sure to add this action to the actions\nsection of your domain:\n\nCopyactions:- validate_restaurant_form\n\nWhen the form is executed it will run your custom action after every user turn to validate the latest filled slots.\n\nThis custom action can extend FormValidationAction class to simplify\nthe process of validating extracted slots. In this case, you need to write functions\nnamed validate_<slot_name> for every extracted slot.\n\nThe following example shows the implementation of a custom action\nwhich validates that the slot named cuisine is valid.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "593": {"text": "Copyfrom typing import Text, List, Any, Dict\nfrom rasa_sdk import Tracker, FormValidationActionfrom rasa_sdk.executor import CollectingDispatcherfrom rasa_sdk.types import DomainDict\n\nclass ValidateRestaurantForm(FormValidationAction): def name(self) -> Text: return \"validate_restaurant_form\"\n @staticmethod def cuisine_db() -> List[Text]: \"\"\"Database of supported cuisines\"\"\"\n return [\"caribbean\", \"chinese\", \"french\"]\n def validate_cuisine(        self,        slot_value: Any,        dispatcher: CollectingDispatcher,        tracker: Tracker,        domain: DomainDict, ) -> Dict[Text, Any]: \"\"\"Validate cuisine value.\"\"\"\n if slot_value.lower() in self.cuisine_db(): # validation succeeded, set the value of the \"cuisine\" slot to value return {\"cuisine\": slot_value} else: # validation failed, set this slot to None so that the # user will be asked for the slot again return {\"cuisine\": None}\n\nYou can also extend the Action class and retrieve extracted slots with tracker.slots_to_validate\nto fully customize the validation process.\n\nCustom Slot Mappings#\n\nChanged in 3.0The slots_mapped_in_domain argument provided to the required_slots method of FormValidationAction\nhas been replaced by the domain_slots argument, please update your custom actions to the new argument name.\n\nIf none of the predefined Slot Mappings fit your use\ncase, you can use the\nCustom Action validate_<form_name> to write your own\nextraction code. Rasa will trigger this action when the form is run.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "594": {"text": "If you're using the Rasa SDK we recommend you to extend the provided\nFormValidationAction. When using the FormValidationAction, three steps are required\nto extract customs slots:\n\nDefine a method extract_<slot_name> for every slot that should be mapped in a custom way.\nEach slot which has been defined in the domain.yml file with a custom mapping must have its own independent\nimplementation of an extract_<slot_name> method.In your domain file, for your form's required_slots, list all required slots, with both predefined and custom mappings.\n\nIn addition, you can override the required_slots method to add dynamically requested slots: you can read more in the\nDynamic Form Behavior section.\n\nnoteIf you have added a slot with a custom mapping in the slots section of the domain file which you only\nwant to be validated within the context of a form by a custom action extending FormValidationAction,\nplease make sure that this slot has a mapping of type custom and that the slot name is included in the\nform's required_slots.\n\nThe following example shows the implementation of a form which extracts a slot\noutdoor_seating in a custom way, in addition to the slots which use predefined mappings.\nThe method extract_outdoor_seating sets the slot outdoor_seating based on whether\nthe keyword outdoor was present in the last user message.\n\nCopyfrom typing import Dict, Text, List, Optional, Any\nfrom rasa_sdk import Trackerfrom rasa_sdk.executor import CollectingDispatcherfrom rasa_sdk.forms import FormValidationAction", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "595": {"text": "class ValidateRestaurantForm(FormValidationAction): def name(self) -> Text: return \"validate_restaurant_form\"\n async def extract_outdoor_seating(        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict ) -> Dict[Text, Any]:        text_of_last_user_message = tracker.latest_message.get(\"text\")        sit_outside = \"outdoor\" in text_of_last_user_message\n return {\"outdoor_seating\": sit_outside}\n\nBy default the FormValidationAction\nwill automatically set the requested_slot to the\nfirst slot specified in required_slots which is not filled.\n\nDynamic Form Behavior#\n\nBy default, Rasa will ask for the next empty slot from the slots\nlisted for your form in the domain file. If you use\ncustom slot mappings and the FormValidationAction,\nit will ask for the first empty slot returned by the required_slots method. If all\nslots in required_slots are filled the form will be deactivated.\n\nYou can update the required slots of your form dynamically.\nThis is, for example, useful when you need to fill additional slots based on how\na previous slot was filled or when you want to change the order in which slots are requested.\n\nIf you are using the Rasa SDK, we strongly recommend that you use the FormValidationAction and\noverride required_slots to fit your dynamic behavior. You must implement\na method extract_<slot name> for every slot which doesn't use a predefined mapping,\nas described in Custom Slot Mappings.\nThe example below will ask the user if they want to sit in\nthe shade or in the sun in case they said they want to sit outside.", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "596": {"text": "Copyfrom typing import Text, List, Optional\nfrom rasa_sdk.forms import FormValidationAction\nclass ValidateRestaurantForm(FormValidationAction): def name(self) -> Text: return \"validate_restaurant_form\"\n async def required_slots(        self,        domain_slots: List[Text],        dispatcher: \"CollectingDispatcher\",        tracker: \"Tracker\",        domain: \"DomainDict\", ) -> List[Text]:        additional_slots = [\"outdoor_seating\"] if tracker.slots.get(\"outdoor_seating\") is True: # If the user wants to sit outside, ask # if they want to sit in the shade or in the sun.            additional_slots.append(\"shade_or_sun\")\n return additional_slots + domain_slots\n\nIf conversely, you want to remove a slot from the form's required_slots defined in the domain file under certain conditions,\nyou should copy the domain_slots over to a new variable and apply changes to that new variable instead of directly modifying\ndomain_slots. Directly modifying domain_slots can cause unexpected behaviour. For example:", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "597": {"text": "Copyfrom typing import Text, List, Optional\nfrom rasa_sdk.forms import FormValidationAction\nclass ValidateBookingForm(FormValidationAction): def name(self) -> Text: return \"validate_booking_form\"\n async def required_slots(        self,        domain_slots: List[Text],        dispatcher: \"CollectingDispatcher\",        tracker: \"Tracker\",        domain: \"DomainDict\", ) -> List[Text]:        updated_slots = domain_slots.copy() if tracker.slots.get(\"existing_customer\") is True: # If the user is an existing customer, # do not request the `email_address` slot            updated_slots.remove(\"email_address\")\n return updated_slots\n\nThe requested_slot slot#\n\nThe slot requested_slot is automatically added to the domain as a\nslot of type text. The value of the requested_slot will be\nignored during conversations. If you want to change this behavior, you need to add\nthe requested_slot  to your domain file as a categorical slot with\ninfluence_conversation set to true.\nYou might want to do this if you\nwant to handle your unhappy paths differently, depending on what slot is\ncurrently being asked from the user. For example, if your users respond\nto one of the bot's questions with another question, like why do you need to know that?\nThe response to this explain intent depends on where we are in the story.\nIn the restaurant case, your stories would look something like this:", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "598": {"text": "Copystories:- story: explain cuisine slot  steps:  - intent: request_restaurant  - action: restaurant_form  - active_loop: restaurant  - slot_was_set:    - requested_slot: cuisine  - intent: explain  - action: utter_explain_cuisine  - action: restaurant_form  - active_loop: null\n- story: explain num_people slot  steps:  - intent: request_restaurant  - action: restaurant_form  - active_loop: restaurant  - slot_was_set:    - requested_slot: cuisine  - slot_was_set:    - requested_slot: num_people  - intent: explain  - action: utter_explain_num_people  - action: restaurant_form  - active_loop: null\n\nAgain, it is strongly recommended that you use\ninteractive learning to build these stories.\n\nUsing a Custom Action to Ask For the Next Slot#\n\nAs soon as the form determines which slot has to be filled next by the user, it will\nexecute the action utter_ask_<form_name>_<slot_name> or utter_ask_<slot_name>\nto ask the user to provide the necessary information. If a regular utterance is not\nenough, you can also use a custom action action_ask_<form_name>_<slot_name> or\naction_ask_<slot_name> to ask for the next slot.\n\nCopyfrom typing import Dict, Text, List\nfrom rasa_sdk import Trackerfrom rasa_sdk.events import EventTypefrom rasa_sdk.executor import CollectingDispatcherfrom rasa_sdk import Action", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "599": {"text": "class AskForSlotAction(Action): def name(self) -> Text: return \"action_ask_cuisine\"\n def run(        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict ) -> List[EventType]:        dispatcher.utter_message(text=\"What cuisine?\") return []\n\nIf there is more than one asking option for the slot, Rasa prioritizes in the following order:\n\naction_ask_<form_name>_<slot_name>utter_ask_<form_name>_<slot_name>action_ask_<slot_name>utter_ask_<slot_name>\n\nPrevious\u00ab Custom ActionsNextDefault Actions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "600": {"text": "Version: 3.x\n\nDefault Actions\n\nDefault actions are actions that are built into the dialogue manager by default. Most of these are automatically predicted based on certain conversation situations. You may want to customize these to personalize your assistant.\n\nEach of these actions have a default behavior, described in the sections below.\nIn order to overwrite this default behavior, write a custom action\nwhose name() method returns the same name as the default action:\n\nCopyclass ActionRestart(Action):\n def name(self) -> Text: return \"action_restart\"\n async def run(      self, dispatcher, tracker: Tracker, domain: Dict[Text, Any] ) -> List[Dict[Text, Any]]:\n # custom behavior\n return [...]\n\nAdd this action to the actions section of your domain file so your assistant knows\nto use the custom definition instead of the default one:\n\nCopyactions:  - action_restart\n\ncautionAfter adding this action to your domain file, re-train your model with\nrasa train --force. Otherwise Rasa won't know you've changed anything\nand may skip re-training your dialogue model.\n\naction_listen#\n\nThis action is predicted to signal that the assistant should do nothing and wait\nfor the next user input.\n\naction_restart#\n\nThis action resets the whole conversation history, including any slots that were\nset during it.\n\nIt can be triggered by the user in a conversation by sending a\n\"/restart\" message, if the RulePolicy is included in the model configuration.\nIf you define an utter_restart response in your domain, this will be sent to the user as well.\n\naction_session_start#\n\nThis action starts a new conversation session, and is executed in the following\nsituations:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "601": {"text": "This action starts a new conversation session, and is executed in the following\nsituations:\n\nat the beginning of each new conversationafter a user was inactive for a period defined by the session_expiration_time parameter in the domain's\nsession configurationwhen a user sends a \"/session_start\" message during a conversation\n\nThe action will reset the conversation tracker, but by default will not clear any slots that were set.\n\nCustomization#\n\nThe default behavior of the session start action is to take all existing slots and to\ncarry them over into the next session. Let's say you do not want to carry over all\nslots, but only a user's name and their phone number. To do that, you'd override the\naction_session_start with a custom action that might look like this:\n\nCopyfrom typing import Any, Text, Dict, Listfrom rasa_sdk import Action, Trackerfrom rasa_sdk.events import SlotSet, SessionStarted, ActionExecuted, EventType", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "602": {"text": "class ActionSessionStart(Action): def name(self) -> Text: return \"action_session_start\"\n @staticmethod def fetch_slots(tracker: Tracker) -> List[EventType]: \"\"\"Collect slots that contain the user's name and phone number.\"\"\"\n        slots = [] for key in (\"name\", \"phone_number\"):            value = tracker.get_slot(key) if value is not None:                slots.append(SlotSet(key=key, value=value)) return slots\n async def run(      self, dispatcher, tracker: Tracker, domain: Dict[Text, Any] ) -> List[Dict[Text, Any]]:\n # the session should begin with a `session_started` event        events = [SessionStarted()]\n # any slots that should be carried over should come after the # `session_started` event        events.extend(self.fetch_slots(tracker))\n # an `action_listen` should be added at the end as a user message follows        events.append(ActionExecuted(\"action_listen\"))\n return events\n\nIf you want to access the metadata which was sent with the user message which triggered\nthe session start, you can access the special slot session_started_metadata:\n\nCopyfrom typing import Any, Text, Dict, Listfrom rasa_sdk import Action, Trackerfrom rasa_sdk.events import SessionStarted, ActionExecuted", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "603": {"text": "class ActionSessionStart(Action): def name(self) -> Text: return \"action_session_start\"\n async def run(      self, dispatcher, tracker: Tracker, domain: Dict[Text, Any] ) -> List[Dict[Text, Any]]:        metadata = tracker.get_slot(\"session_started_metadata\")\n # Do something with the metadata print(metadata)\n # the session should begin with a `session_started` event and an `action_listen` # as a user message follows return [SessionStarted(), ActionExecuted(\"action_listen\")]\n\naction_default_fallback#\n\nThis action undoes the last user-bot interaction and sends the utter_default response if it is defined.\nIt is triggered by low action prediction confidence, if you have this fallback mechanism enabled.\n\naction_deactivate_loop#\n\nThis action deactivates the active loop and resets the requested slot. This is used when\nhandling unhappy paths in forms.\n\nnoteIf you wish to reset all slots, we recommend using a custom action\nthat returns the AllSlotsReset event after form deactivation.\n\naction_two_stage_fallback#\n\nThis is a fallback loop that can be used to handle low NLU confidence. Read more about\nhandling low NLU confidence.\n\naction_default_ask_affirmation#\n\nThis action is used by the action_two_stage_fallback loop. It asks the user to confirm\nthe intent of their message. This action can be customized to be more personalized\nto your specific use case.\n\naction_default_ask_rephrase#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "604": {"text": "action_default_ask_rephrase#\n\nThis action is used by the action_two_stage_fallback loop if the user denies the\nintent action_default_ask_affirmation displays. It asks the user to rephrase\ntheir message.\n\naction_back#\n\nThis action undoes the last user-bot interaction. It can be triggered by the user\nby sending a \"/back\" message to the assistant if the RulePolicy is configured.\n|\n\nForm Action#\n\nBy default Rasa uses FormAction for processing any\nform logic. You can override this default action with a custom action by\nadding a custom action with the form's name to the domain.\nOverriding the default action for forms should only be used during the process of\nmigrating from Rasa 1.0 to 2.0.\n\naction_unlikely_intent#\n\nRasa triggers action_unlikely_intent via UnexpecTEDIntentPolicy.\nYou can control how often this action is predicted by tuning the tolerance\nparameter of UnexpecTEDIntentPolicy.\n\nCustomization#\n\nYou can customize your assistant's behaviour to configure what should happen once action_unlikely_intent\nis triggered. For example, as a follow up you can trigger a hand-off to a human agent with a rule:\n\nCopy- rule: trigger human handoff with action_unlikely_intent steps: - action: action_unlikely_intent - action: ask_human_handoff - intent: affirm - action: trigger_human_handoff\n\nAlternatively, you can also override it's behaviour as a custom action by\nadding action_unlikely_intent to the list of actions in the domain and implementing the custom behaviour:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "605": {"text": "Copyclass ActionUnlikelyIntent(Action):\n def name(self) -> Text: return \"action_unlikely_intent\"\n async def run(        self, dispatcher, tracker: Tracker, domain: Dict[Text, Any], ) -> List[Dict[Text, Any]]:\n # Implement custom logic here return []\n\nnoteSince action_unlikely_intent can be triggered at any conversation step during inference,\nall policies which are trained on only story data, for example - TEDPolicy, UnexpecTEDIntentPolicy,\nMemoizationPolicy ignore its presence in the tracker when making a prediction. However, RulePolicy\ntakes its presence into account so that conversation behaviour is customizable.\n\nnoteaction_unlikely_intent cannot be included in the training stories. It can only be added to rules.\n\naction_extract_slots#\n\nThis action runs after each user turn, before the next assistant action prediction and execution.\naction_extract_slots loops through the slot mappings of each domain slot in order to set or update\nslots throughout the conversation with information extracted from the latest user message.\n\nIf action_extract_slots finds a custom slot mapping, it will check first if a custom action was defined in the\nmapping via the action key and then run it.\n\nAfter applying all the slot mappings, action_extract_slots will run the custom validation action\naction_validate_slot_mappings if it is present in the domain actions. Otherwise it will immediately return the already\nextracted slots.\n\nNote that custom actions used by slot mappings or slot mapping validation should only return events of type SlotSet or\nBotUttered. Events of any other type are not permitted and will be ignored when updating the tracker.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "606": {"text": "The default action action_extract_slots replaces the slot extraction previously executed by FormAction.\nIf you wish to set a slot based on information extracted from intents that trigger forms, you must explicitly specify a\nmapping that does not contain the conditions key. A slot mapping with conditions applies only once the specified form is active.\naction_extract_slots runs directly after each user message, and thus before the activation of the form.\nTherefore a mapping that should apply to user messages that trigger a form must not specify conditions, or the form\nwill re-ask for the slot once it is activated.\n\nnoteIf action_default_fallback is the next action predicted and executed by the assistant, this will result in a\nUserUtteranceReverted event which will unset the slots previously filled in the last user turn.\n\nPrevious\u00ab FormsNextSlot Validation Actions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "607": {"text": "Version: 3.x\n\nSlot Validation Actions\n\nA slot validation action is a special type of custom action, designed to handle custom extraction and/or validation of slot values. This can be used to validate slots with predefined mappings or extract slots with custom mappings.\n\nYou can do custom extraction and validation of slot values by writing custom actions in three different ways.\n\naction_validate_slot_mappings#\n\nYou can use the action_validate_slot_mappings action to define custom extraction and / or validation of slots that\ncan be set or updated outside of a form context.\n\nThis action is called automatically at the end of the default action action_extract_slots,\nso the name must not be changed. If you are using Rasa SDK, you should extend the Rasa SDK ValidationAction class.\nIf you are using a different action server, you will need to implement an action class with equivalent functionality to\nthe Rasa SDK class. Please see the action server docs for details.\n\nWith this option, you do not need to specify the action key in the custom slot mapping,\nsince the default action action_extract_slots runs action_validate_slot_mappings\nautomatically if present in the actions section of the domain.\n\nvalidate_<form name>#\n\nCustom actions named validate_<form name> will run automatically if the form it specifies in its name is activated.\nIf you are using Rasa SDK, the custom action should inherit from the Rasa SDK FormValidationAction class.\nIf you are not using Rasa SDK, you will need to implement an action or action class with equivalent functionality to the\nFormValidationClass in your custom action server. Please see the action server docs for details.\n\nRegular Custom Action#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "608": {"text": "Regular Custom Action#\n\nYou can use a regular custom action custom action that returns slot\nevents for custom slot extraction. Use this option if neither action_validate_slot_mappings or\nvalidate_<form name> meet your needs.\nFor example, if you want to reuse the same custom action explicitly in a story or rule, you should use a regular custom\naction for custom slot extraction.\nA slot validation action should only return slot and bot events.\nAny other event type will be filtered out by the default action action_extract_slots.\nThe name of the custom action must be specified in the action key of the relevant custom slot mapping\nin the domain.\nNote that the action name must be listed in the domain actions section too.\n\nUsing different actions for extraction and validationYou can use both a regular custom action and action_validate_slot_mappings together to extract and validate a slot. For example, you can specify a regular custom action as the action for a custom slot mapping, and also add validation logic for the same slot to action_validate_slot_mappings. The custom action specified in the custom slot mapping will be called first, and action_validate_slot_mappings will be called afterwards.\n\nPrevious\u00ab Default ActionsNextMarkers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "609": {"text": "Version: 3.x\n\nMarkers\n\nMarkers are conditions used to describe and mark points of interest in dialogues.\n\ncautionThis feature is currently experimental and might change or be removed in the future. Share your feedback in the forum to help us make it production-ready.\n\ndangerIn the upcoming release version 3.7 of Rasa Open Source, we\u2019re removing this experimental feature. For documentation on the markers feature in Rasa Pro, please click here\n\nOverview#\n\nMarkers are conditions that allow you to describe and mark points of interest in dialogues for evaluating your bot.\n\nIn Rasa, a dialogue is represented as a sequence of events,\nwhich include bot actions that were executed, intents that were detected, and slots that were set.\nMarkers allow you to describe conditions over such events. When the conditions are met, the relevant events are marked for further analysis or inspection.\n\nThere are several downstream applications for Markers. For example, they can be used to define and measure your bot's Key Performance Indicators (KPIs),\nsuch as dialogue completion or task success. Take Carbon Bot\nfor example, which helps users offset their carbon emissions from flying. For Carbon Bot, you can define dialogue completion as \"all mandatory slots have been filled\",\nand task success as \"all mandatory slots have been filled and a carbon estimate has been successfully computed\".\nMarking when these important events occur allows you to measure Carbon Bot's success rate.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "610": {"text": "Markers also allow you to diagnose your dialogues by surfacing important events for further inspection.\nFor example, you might observe that Carbon Bot tends to successfully set the travel_departure and travel_destination slots,\nbut fails to set the travel_flight_class slot. You can define a marker to quantify how often this behavior occurs\nand surface relevant dialogues for review as part of\nConversation Driven Development (CDD).\n\nMarker definitions are written in YAML in a marker configuration file. For example, here are the markers that define dialogue completion and task success for Carbon Bot:\n\nCopymarker_dialogue_completion: and: - slot_was_set: travel_departure - slot_was_set: travel_destination - slot_was_set: travel_flight_class\nmarker_task_success: description: \"Measure task success where all required slots are set and the custom action was triggered\" and: - slot_was_set: travel_departure - slot_was_set: travel_destination - slot_was_set: travel_flight_class - action: provide_carbon_estimate\n\nAnd here is the marker for surfacing dialogues where all mandatory slots are set except travel_flight_class:\n\nCopymarker_dialogue_mandatory_slot_failure: and: - slot_was_set: travel_departure - slot_was_set: travel_destination - not: - slot_was_set: travel_flight_class\n\nThe next sections explain how to write marker definitions, how to apply them to your existing dialogues, and what the output format looks like.\n\nDefining Markers#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "611": {"text": "Defining Markers#\n\nMarkers should be defined in a marker configuration file written in YAML.\nEach marker should have a unique identifier, and consists of at least one event condition.\nMarkers can also contain operators, which allow you to express more nuanced behavior or\ncombine event conditions.\n\nConsider the following marker definition:\n\nCopymarker_mood_expressed: description: \"Mood expressed was either unhappy or great\" or: - intent: mood_unhappy - intent: mood_great\n\nThe unique marker identifier is marker_mood_expressed. This marker definition contains one operator or,\nand two event conditions intent: mood_unhappy and intent: mood_great.\n\nThis markers will be true at every point in the dialogue where the user\nexpressed either a mood_unhappy or a mood_great. More precisely, the marker will be true for every event\nwhich is a UserUttered() with the intent equal to mood_unhappy or a mood_great.\n\nEvent Conditions#\n\nThe following event condition labels are supported:\n\naction: the specified bot action was executed.intent: the specified user intent was detected.slot_was_set: the specified slot was set.\n\nThe negated forms of the labels are also supported:\n\nnot_action: the event is not the specified bot action.not_intent: the event is not the specified user intent.slot_was_not_set: the specified slot has not been set.\n\nOperators#\n\nThe following operators are supported:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "612": {"text": "Operators#\n\nThe following operators are supported:\n\nand: all listed conditions applied.or: any of the listed conditions applied.not: the condition did not apply. This operator only accepts 1 condition.seq: the list of conditions applied in the specified order, with any number of events occurring in-between.at_least_once: the listed marker definitions occurred at least once. Only the first occurrence will be marked.never: the listed marker definitions never occurred.\n\nMarker Configuration#\n\nHere is an example of a marker configuration file containing several marker definitions. The example is created for mood bot,\nwith a new slot name to illustrate the use of the label slot_was_set:\n\nCopymarker_name_provided: description: \"slot `name` was provided\" slot_was_set: name\nmarker_mood_expressed: or: - intent: mood_unhappy - intent: mood_great\nmarker_cheer_up_failed: seq: - intent: mood_unhappy - action: utter_cheer_up - action: utter_did_that_help - intent: deny\nmarker_bot_not_challenged: description: \"Example of a negated marker, it can be used to surface conversations without bot_challenge intent\" never: - intent: bot_challenge\nmarker_cheer_up_attempted: at_least_once: - action: utter_cheer_up\nmarker_mood_expressed_and_name_not_provided: and: - or: - intent: mood_unhappy - intent: mood_great - not: - slot_was_set: name\n\nNote the following:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "613": {"text": "Note the following:\n\nEach marker has a unique identifier (or name) such as marker_name_provided.Each marker can have an optional description key that can be used for documentation.A marker definition can contain a single condition, as shown in marker_name_provided.A marker definition can contain a single operator with a list of conditions, as shown in marker_mood_expressed,\nmarker_cheer_up_failed, marker_bot_not_challenged, and marker_cheer_up_attempted.A marker definition can contain nested operators, as shown in marker_mood_expressed_and_name_not_provided.The values assigned to event conditions must be valid according to your bot's domain.yml file. For example, in\nmarker_mood_expressed, the intents mood_unhappy and mood_unhappy are both intents listed in the mood bot's domain.yml file.\n\nnoteYou cannot reuse an existing marker name in the definition of another marker.\n\nExtracting Markers#\n\ninfoRasa Pro supports real-time processing of markers, Read more about Real-Time Markers\n\nMarkers are extracted from dialogues already stored in a tracker store. To learn how to store interactions with your bot in a tracker store,\nread the Tracker Store page.\n\nOnce you've created your marker definitions in the marker configuration file, and have stored some dialogues in your tracker store,\nyou can apply your markers to your trackers by running the following command:\n\nCopyrasa evaluate markers all --config markers.yml extracted_markers.csv", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "614": {"text": "Copyrasa evaluate markers all --config markers.yml extracted_markers.csv\n\nThis script will process the marker definitions you provide in the marker configuration file: markers.yml.\nThe script will output the extracted markers in the specified output file: extracted_markers.csv.\nIt will also produce two summary statistics files. The format of the output files are described in the next section.\n\nBy default, the script will validate your marker definitions against your bot's domain.yml file. To specify a different\ndomain file, use the optional --domain argument.\n\nBy default, the script will process the tracker store in your bot's endpoint.yml. However, you can specify a different\nendpoint file using the optional --endpoint argument.\n\nThree different tracker loading strategies are supported: all, sample_n, and first_n. The option all will process\nall the trackers in your tracker store. The other two strategies process a subset of N trackers, either sequentially\n(by using first_n), or by sampling uniformly without replacement (using sample_n). The sampling strategy also allows you to set the random seed.\nFor more information on the usage of each strategy, type the following command, replacing <strategy> with one of: all, first_n, and sample_n:\n\nCopyrasa evaluate markers <strategy> --help\n\nnoteEach tracker in the tracker store can contain multiple sessions. The script will process each session separately, indexing them by session_idx.\n\nThe next two sections describe the formats of the extracted markers and computed statistics.\n\nExtracted Markers#\n\nFor each marker defined in your marker configuration file, the following information is extracted:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "615": {"text": "For each marker defined in your marker configuration file, the following information is extracted:\n\nThe index of the event at which the marker applied.The number of user turns preceding the event at which the marker applied. Each UserUttered event is treated as a user turn.\n\nThe index of the event and the number of preceding user turns both give an indication of how\nlong it took to reach an important event, such as task success.\nThe index of the event will count all events, including ones that are not part of the dialogue,\nsuch as starting a new session or executing a custom action.\nThe number of preceding user turns, on the other hand, gives you a more intuitive indication of the dialogue length,\nand in particular from the perspective of your end user.\n\nThe number of preceding user turns can be used to evaluate and improve your bot.\nFor example, suppose a user had to rephrase their utterances multiple times, which caused their dialogue to become longer.\nThe dialogue may eventually reach task success, however, surfacing it would allow you identify utterances that your bot failed to understand.\nYou can then use these challenging utterances as additional training data to further improve your bot as part of\nConversation Driven Development (CDD).\n\nnoteFor markers defined using the at_least_once operator, the information above will only be extracted for the first occurrence.\n\nThe extracted markers are stored in a tabular format in the .csv file you specify in the script, for example, extracted_markers.csv.\nThe extracted markers output file contains the following columns:", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "616": {"text": "sender_id: taken from the trackers.session_idx: an integer indexing sessions, starting with 0.marker: the unique marker identifier.event_idx: an integer indexing events, starting with 0.num_preceding_user_turns: an integer indicating the number of user turns preceding the event at which the marker applied.\n\nHere is an example of the extracted markers output file (for a marker configuration file containing two markers: marker_mood_expressed and marker_cheer_up_failed):\n\nCopysender_id,session_idx,marker,event_idx,num_preceding_user_turns3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,2,04d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,7,14d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,14,2c00b3de97713427d85524c4374125db1,0,marker_mood_expressed,2,0\n\nEach row represents an occurrence of the marker specified under the marker column, for each sender_id and session_idx.\n\nComputed Statistics#\n\nBy default, the command computes summary statistics about the information gathered. To disable the statistics computation, use the optional flag --no-stats.\n\nThe script computes the following statistics:", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "617": {"text": "The script computes the following statistics:\n\nFor each session and each marker: \"per-session statistics\" which include the arithmetic mean, median, minimum, and maximum number of user turns preceding the event at which the marker applied.For all sessions and for each marker:Overall statistics including the arithmetic mean, median, minimum, and maximum number of user turns preceding the event where the marker applied in any session.The number of sessions and the percentage of sessions where each marker applied at least once.\n\nThe results are stored in a tabular format in stats-overall.csv and stats-per-session.csv. You can change prefix stats in the file names using the optional argument --stats-file-prefix .\nFor example, the following script will produce the files: my-statistics-overall.csv and my-statistics-per-session.csv:\n\nCopyrasa evaluate markers all --stats-file-prefix \"my-statistics\" extracted_markers.csv\n\nThe two statistics files contain the following columns:\n\nsender_id: taken from the trackers. If the statistic is computed over all sessions this will be equal to all.session_idx: an integer indexing sessions, starting with 0. If the statistic is computed over all sessions, this will be equal to nan (not a number).marker: the unique marker identifier.statistic: a description of the statistic computed.value: an integer or float value of the computed statistic. If the statistic is not available then value will be equal to nan (not a number).\n\nHere is a sample stats-per-session.csv output:", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "618": {"text": "Copysender_id,session_idx,marker,statistic,value3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_cheer_up_failed,count(number of preceding user turns),04d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,count(number of preceding user turns),1c00b3de97713427d85524c4374125db1,0,marker_cheer_up_failed,count(number of preceding user turns),03c1afa1ed72c4116ba6670a1668f1b4a,0,marker_cheer_up_failed,max(number of preceding user turns),nan4d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,max(number of preceding user turns),2c00b3de97713427d85524c4374125db1,0,marker_cheer_up_failed,max(number of preceding user turns),nan3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_cheer_up_failed,mean(number of preceding user turns),nan4d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,mean(number of preceding user turns),2.0c00b3de97713427d85524c4374125db1,0,marker_cheer_up_failed,mean(number of preceding user", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "619": {"text": "of preceding user turns),nan3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_cheer_up_failed,median(number of preceding user turns),nan4d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,median(number of preceding user turns),2.0c00b3de97713427d85524c4374125db1,0,marker_cheer_up_failed,median(number of preceding user turns),nan3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_cheer_up_failed,min(number of preceding user turns),nan4d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,min(number of preceding user turns),2c00b3de97713427d85524c4374125db1,0,marker_cheer_up_failed,min(number of preceding user turns),nan3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,count(number of preceding user turns),14d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,count(number of preceding user turns),1c00b3de97713427d85524c4374125db1,0,marker_mood_expressed,count(number of preceding user", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "620": {"text": "of preceding user turns),13c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,max(number of preceding user turns),04d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,max(number of preceding user turns),1c00b3de97713427d85524c4374125db1,0,marker_mood_expressed,max(number of preceding user turns),03c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,mean(number of preceding user turns),0.04d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,mean(number of preceding user turns),1.0c00b3de97713427d85524c4374125db1,0,marker_mood_expressed,mean(number of preceding user turns),0.03c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,median(number of preceding user turns),0.04d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,median(number of preceding user turns),1.0c00b3de97713427d85524c4374125db1,0,marker_mood_expressed,median(number of preceding user", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "621": {"text": "of preceding user turns),0.03c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,min(number of preceding user turns),04d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,min(number of preceding user turns),1c00b3de97713427d85524c4374125db1,0,marker_mood_expressed,min(number of preceding user turns),0", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "622": {"text": "Note that the value for unavailable statistics is nan. For example, because marker_cheer_up_failed never occurred in\ntracker 3c1afa1ed72c4116ba6670a1668f1b4a session 0, then the min, max, median, and mean number of preceding user turns\nare equal to nan.\n\nHere is a sample stats-overall.csv output:", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "623": {"text": "Copysender_id,session_idx,marker,statistic,valueall,nan,-,total_number_of_sessions,3all,nan,marker_cheer_up_failed,number_of_sessions_where_marker_applied_at_least_once,1all,nan,marker_cheer_up_failed,percentage_of_sessions_where_marker_applied_at_least_once,33.333all,nan,marker_mood_expressed,number_of_sessions_where_marker_applied_at_least_once,3all,nan,marker_mood_expressed,percentage_of_sessions_where_marker_applied_at_least_once,100.0all,nan,marker_cheer_up_failed,count(number of preceding user turns),1all,nan,marker_cheer_up_failed,mean(number of preceding user turns),2.0all,nan,marker_cheer_up_failed,median(number of preceding user turns),2.0all,nan,marker_cheer_up_failed,min(number of preceding user turns),2all,nan,marker_cheer_up_failed,max(number of preceding user turns),2all,nan,marker_mood_expressed,count(number of preceding user turns),3all,nan,marker_mood_expressed,mean(number of preceding user turns),0.333all,nan,marker_mood_expressed,median(number of preceding user turns),0.0all,nan,marker_mood_expressed,min(number of preceding user", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "624": {"text": "of preceding user turns),0all,nan,marker_mood_expressed,max(number of preceding user turns),1", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "625": {"text": "Note that because each row computes a statistic over all sessions, the sender_id is equal to all,\nand the session_idx is equal to nan.\n\nConfiguring the CLI command#\n\nVisit our CLI page for more information on configuring the marker extraction and statistics computation process.\n\nPrevious\u00ab Slot Validation ActionsNextYour Own Website \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "626": {"text": "Version: 3.x\n\nYour Own Website\n\nIf you already have an existing website and want to add a Rasa assistant to it,\nyou can use the Rasa Chat Widget a widget which you can incorporate into your existing webpage by adding a HTML snippet.\n\nAlternatively, you can also build your own chat widget.\n\nREST Channels#\n\nThe RestInput and CallbackInput channels can be used for custom integrations.\nThey provide a URL where you can post messages and either receive response messages\ndirectly, or asynchronously via a webhook.\n\nRestInput#\n\nThe REST channel will provide you with a REST endpoint where you can post\nuser messages and receive the assistant's messages in response.\n\nAdd the REST channel to your credentials.yml:\n\nCopyrest:  # you don't need to provide anything here - this channel doesn't  # require any credentials\n\nRestart your Rasa server\nto make the REST channel available to receive messages. You can then send messages to\nhttp://<host>:<port>/webhooks/rest/webhook, replacing\nthe host and port with the appropriate values from your running Rasa server.\n\nRequest and Response Format#\n\nAfter making the rest input channel available, you can POST messages to\nhttp://<host>:<port>/webhooks/rest/webhook, with the following format:\n\nCopy{ \"sender\": \"test_user\", // sender ID of the user sending the message \"message\": \"Hi there!\"}\n\nThe response from Rasa will be a JSON body of bot responses, for example:\n\nCopy[ {\"text\": \"Hey Rasa!\"}, {\"image\": \"http://example.com/image.jpg\"}]\n\nCallbackInput#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "627": {"text": "CallbackInput#\n\nThe Callback channel behaves very much like the REST channel,\nbut instead of directly returning the bot messages to the HTTP\nrequest that sends the message, it will call a URL you can specify\nto send bot messages.\n\nTo use the callback channel, add the credentials to your credentials.yml:\n\nCopycallback:  # URL to which Core will send the bot responses  url: \"http://localhost:5034/bot\"\n\nRestart your Rasa server\nto make the new channel endpoint available to receive messages.\nYou can then send messages to http://<host>:<port>/webhooks/callback/webhook, replacing\nthe host and port with the appropriate values from your running Rasa server.\n\nRequest and Response Format#\n\nAfter making the callback input available, you can POST messages to\nhttp://<host>:<port>/webhooks/callback/webhook with the following format:\n\nCopy{ \"sender\": \"test_user\", // sender ID of the user sending the message \"message\": \"Hi there!\"}\n\nIf successful, the response will be success. Once Rasa is ready to send a\nmessage to the user, it will call the url specified in your credentials.yml with a POST\nrequest containing a JSON body of the bot's responses:\n\nCopy[ {\"text\": \"Hey Rasa!\"}, {\"image\": \"http://example.com/image.jpg\"}]\n\nWebsocket Channel#\n\nThe SocketIO channel uses websockets and is real-time. To use the SocketIO channel,\nadd the credentials to your credentials.yml:\n\nCopysocketio:  user_message_evt: user_uttered  bot_message_evt: bot_uttered  session_persistence: true/false", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "628": {"text": "The first two configuration values define the event names used by Rasa\nwhen sending or receiving messages over socket.io.\n\nThe socket client can pass an object named metadata to supply metadata to the channel. You can configure an alternative key using the metadata_key setting. For example, if your client wants to pass metadata on a key named customData, the setting would be:\n\nCopysocketio:  metadata_key: customData\n\nRestart your Rasa server\nto make the new channel endpoint available to receive messages.\nYou can then send messages to http://<host>:<port>/socket.io, replacing\nthe host and port with the appropriate values from your running Rasa server.\n\nsession persistenceBy default, the SocketIO channel uses the socket id as sender_id, which causes\nthe session to restart at every page reload. session_persistence can be\nset to true to avoid that. In that case, the frontend is responsible\nfor generating a session id and sending it to the Rasa Core server by\nemitting the event session_request with {session_id: [session_id]}\nimmediately after the connect event.The example Webchat\nimplements this session creation mechanism (version >= 0.5.0).\n\nSocketIO client / server compatibilityThe version of the SocketIO client connecting to Rasa must be compatible with the versions of\nthe python-socketio and\npython-engineio packages used by\nRasa. Please refer to the\npyproject.toml\nfile relative to your version of Rasa and the official python-socketio compatibility table.\n\nJWT Authentication#\n\nThe SocketIO channel can be optionally configured to perform JWT authentication on connect\nby defining the jwt_key and optional jwt_method in the credentials.yml file.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "629": {"text": "Copysocketio:  user_message_evt: user_uttered  bot_message_evt: bot_uttered  session_persistence: true  jwt_key: my_public_key  jwt_method: HS256\n\nWhen initially requesting the connection, the client should pass in an encoded payload\nas a JSON object under the key token:\n\nCopy{ \"token\": \"jwt_encoded_payload\"}\n\nChat Widget#\n\nOnce you've set up your SocketIO channel, you can use the official Rasa Chat Widget on any webpage.\nJust paste the following into your site HTML and paste the URL of your Rasa instance into\nthe data-websocket-url attribute\n\nCopy<div id=\"rasa-chat-widget\" data-websocket-url=\"https://your-rasa-url-here/\"></div><script src=\"https://unpkg.com/@rasahq/rasa-chat\" type=\"application/javascript\"></script>\n\nFor more information, including how to fully customize the widget for your website, you can check out the full documentation.\n\nAlternatively, if you want to embed the widget in a React app, there is\na library in the NPM package repository.\n\nPrevious\u00ab MarkersNextFacebook Messenger \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "630": {"text": "Version: 3.x\n\nFacebook Messenger\n\nFacebook Setup#\n\nYou first need to set up a facebook page and app to get credentials to connect to\nFacebook Messenger. Once you have them you can add these to your credentials.yml.\n\nGetting Credentials#\n\nHow to get the Facebook credentials:\nYou need to set up a Facebook app and a page.\n\nTo create the app head over to\nFacebook for Developers\nand click on My Apps \u2192 Add New App.Go onto the dashboard for the app and under Products,\nfind the Messenger section and click Set Up. Scroll down to\nToken Generation and click on the link to create a new page for your\napp.Create your page and select it in the dropdown menu for the\nToken Generation. The shown Page Access Token is the\npage-access-token needed later on.Locate the App Secret in the app dashboard under Settings \u2192 Basic.\nThis will be your secret.Use the collected secret and page-access-token in your\ncredentials.yml, and add a field called verify containing\na string of your choice. Start rasa run with the\n--credentials credentials.yml option.Set up a Webhook and select at least the messaging and\nmessaging_postback subscriptions. Insert your callback URL, which will\nlook like https://<host>:<port>/webhooks/facebook/webhook, replacing\nthe host and port with the appropriate values from your running Rasa server.Insert the Verify Token which has to match the verify\nentry in your credentials.yml.\n\nconfigure httpsFacebook Messenger only forwards\nmessages to endpoints via https, so take appropriate measures to add\nit to your setup. For local testing of your bot, see Testing Channels on Your Local Machine.\n\nFor more detailed steps, visit the\nMessenger docs.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "631": {"text": "For more detailed steps, visit the\nMessenger docs.\n\nRunning On Facebook Messenger#\n\nAdd the Facebook credentials to your credentials.yml:\n\nCopyfacebook:  verify: \"rasa-bot\"  secret: \"3e34709d01ea89032asdebfe5a74518\"  page-access-token: \"EAAbHPa7H9rEBAAuFk4Q3gPKbDedQnx4djJJ1JmQ7CAqO4iJKrQcNT0wtD\"\n\nRestart your Rasa server\nto make the new channel endpoint available for Facebook Messenger to send messages to.\n\nSupported response attachments#\n\nIn addition to typical text, image, and custom responses, the Facebook Messenger\nchannel supports the following additional response attachments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "632": {"text": "Buttons\nare structured the same as other Rasa buttons. Facebook API limits the amount of\nbuttons you can sent in a message to 3. If more than 3 buttons are provided in a\nmessage, Rasa will ignore all provided buttons.Quick Replies\nprovide a way to present a set of up to 13 buttons in-conversation that contain a\ntitle and optional image, and appear prominently above the composer. You can also\nuse quick replies to request a person's email address or phone number.Copyutter_fb_quick_reply_example:   - text: Hello World!     quick_replies:       - title: Text quick reply         payload: /example_intent       - title: Image quick reply         payload: /example_intent         image_url: http://example.com/img/red.png       # below are Facebook provided quick replies       # the title and payload will be filled       # with the user's information from their profile       - content_type: user_email         title:         payload:       - content_type: user_phone_number         title:         payload:\n\nnoteBoth Quick Reply and Button titles in Facebook Messenger have a character limit of\n20. Titles longer than 20 characters will be truncated.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "633": {"text": "Elements\nprovide a way to create a horizontally scrollable list up to 10 content elements that\nintegrate buttons, images, and more alongside text a single message.Copyutter_fb_element_example:   - text: Hello World!     elements:       - title: Element Title 1         subtitle: Subtitles are supported         buttons: # note the button limit still applies here           - title: Example button A             payload: /example_intent           - title: Example button B             payload: /example_intent           - title: Example button C             payload: /example_intent       - title: Element Title 2         image_url: http://example.com/img/red.png         buttons:           - title: Example button D             payload: /example_intent           - title: Example button E             payload: /example_intent           - title: Example button F             payload: /example_intent\n\nPrevious\u00ab Your Own WebsiteNextSlack \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "634": {"text": "Version: 3.x\n\nSlack\n\nConnecting a bot to Slack requires you to configure it to send messages\n(using API credentials) and to receive messages (using a webhook).\n\nSending Messages#\n\nCreate a new file credentials.yml in the root folder of your Rasa\nproject (if you've used rasa init this file should already exist and you can\njust edit it). Add the following lines to the file:\n\ncredentials.ymlCopyslack:  slack_channel: \"CA003L0XZ\"    # channel ID, not a channel name!  slack_token: \"xoxb-XXX\"       # token obtained in the next step  slack_signing_secret: \"YYY\"   # secret obtained in the next step\n\nThe slack_channel can be a channel or an individual person that the bot should\nlisten to for communications, in addition to the default behavior of listening\nfor direct messages and app mentions, i.e. @app_name.\nTo get a channel id, right click on the channel in Slack and choose Copy Link.\nThe id will be the last component in the URL.\n\nIn the next couple steps, you'll create a Slack App to get the values for\nslack_token and slack_signing_secret:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "635": {"text": "To create the app go to Your Apps and click\non Create New App.Create New AppFill out your App Name and select the Development Workspace where\nyou'll play around and build your app.Head over to OAuth & Permissions and scroll down to Scopes. Scopes give\nyour app permission to do things in your workspace.To get started, you should at least add the following scopes:app_mentions:read,channels:history,chat:write,groups:history,im:history,mpim:history andreactions:write.Set up Slack PermissionsIn Slacks API documentation you can find a\nlist and explanation of all available scopes.On the OAuth & Permissions page, click Install App to Workspace to add\nthe bot to your workspace.Install Slack AppOnce added, Slack will show you a Bot User OAuth Access Token which you'll\nneed to add to your credentials.yml as the value for slack_token:credentials.ymlCopyslack:  slack_channel: \"your-channel\" # choose a channel for your bot  slack_token: \"xoxb-XXX\"       # token obtained in the next step  slack_signing_secret: \"YYY\"   # secret obtained in the next stepThe token should start with xoxb.Head over to Basic Information to gather the Signing Secret.Signing SecretCopy the signing secret into your credentials.yml as the value for slack_signing_secret:credentials.ymlCopyslack:  slack_channel: \"your-channel\" # choose a channel for your bot  slack_token: \"xoxb-XXX\"       # token obtained in the next step  slack_signing_secret: \"YYY\"   # secret obtained in the next step", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "636": {"text": "This setup will allow your bot to send messages. Now let's head over to the setup\nfor receiving and reacting to messages.\n\nReceiving Messages#\n\nBefore continuing, make sure you have configured a Slack App for Sending Messages and have added Slack credentials to your credentials.yml file.\n\nTo receive messages, you will need a publicly available URL for Slack to reach\nyour bot and tell you about new messages. If you are running locally, you can\ntest channels using ngrok", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "637": {"text": "To configure your bot to receive messages, your bot needs to be running.\nStart your bot e.g. usingCopyrasa runIf you are running locally, make sure ngrok (or another tool to retrieve a public\nurl) is running as well.To send messages directly to your bot using the slack UI, head to App Home,\nscroll to the bottom and select the checkbox for\nAllow users to send Slash commands and messages from the messages tab.You might have to quit the Slack app and re-open it before your changes take effect.Messages TabConfigure the webhook by heading to Event Subscriptions and\nturning Enable Events on.As a request URL enter the public url of your bot and append /webhooks/slack/webhook, e.g.\nhttps://<host>/webhooks/slack/webhook replacing <host> with your URL. If you\nare using ngrok, your url should look like https://92832de0.ngrok.io/webhooks/slack/webhook.You won't be able to use a localhost url.Request URLAs a last step, you'll need to Subscribe to bot events on the same page.\nYou'll need to add the following events:message.channels,message.groups,message.im andmessage.mpim.Subscribe to Bot EventsMake sure to hit Save Changes at the bottom of the page after you've added these events.(If you didn't grant all required permissions to your app while setting up\nsending of messages, you'll be prompted to reinstall your app which you will\nneed to do. Otherwise, Slack will confirm your change with a Success!)", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "638": {"text": "invite to channelsAs per Slack docs, make\nsure you invite your bot to a channel it should be accessing. You can do this\nby using /invite in the channel.\n\nYour bot is now ready to go and will receive webhook notifications about new messages.\n\nOptional: Interactive Components#\n\nAfter you've completed Sending Messages and\nReceiving Messages your bot is ready to go. If you\nwant to use Slack's interactive components (buttons or menus), you'll need to do\nsome additional configuration:\n\nOpen the Interactivity & Shortcuts page and toggle Interactivity to be on.\nAfterwards, you'll need to enter the same url into the Request URL field which\nyou used in Step 2 of Receiving Messages, e.g. https://<host>/webhooks/slack/webhook.\n\nEnabling Interactivity\n\nAdditional Slack Options#\n\nHere is a complete overview of all the configuration parameters for the Slack\nconnection:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "639": {"text": "Here is a complete overview of all the configuration parameters for the Slack\nconnection:\n\ncredentials.ymlCopyslack:  slack_channel: \"CA003L0XZ\"    # channel ID, not a channel name!  slack_token: \"xoxb-XXX\"       # token obtained in the next step  slack_signing_secret: \"YYY\"   # secret obtained in the next step  proxy: \"http://myProxy.online\"  # Proxy Server to route your traffic through. This configuration is optional. Only HTTP proxies are supported  slack_retry_reason_header: \"x-slack-retry-reason\"  # Slack HTTP header name indicating reason that slack send retry request. This configuration is optional.  slack_retry_number_header: \"x-slack-retry-num\"  # Slack HTTP header name indicating the attempt number. This configuration is optional.  errors_ignore_retry: None  # Any error codes given by Slack included in this list will be ignored. Error codes are listed [here](https://api.slack.com/events-api#errors).  use_threads: False  # If set to True, bot responses will appear as a threaded message in Slack. This configuration is optional and set to False by default.  conversation_granularity: \"sender\" # sender allows 1 conversation per user (across channels), channel allows 1 conversation per user per channel, thread allows 1 conversation per user per thread. This configuration is optional and set to sender by default.\n\nMake sure to restart your Rasa server after changing the\ncredentials.yml for the changes to take effect.\n\nPrevious\u00ab Facebook MessengerNextTelegram \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "640": {"text": "Version: 3.x\n\nTelegram\n\nYou first have to create a Telegram bot to get credentials.\nOnce you have them you can add these to your credentials.yml.\n\nGetting Credentials#\n\nHow to get the Telegram credentials:\nYou need to set up a Telegram bot.\n\nTo create the bot, go to Bot Father,\nenter /newbot and follow the instructions. The URL that Telegram should send messages to will look like\nhttp://<host>:<port>/webhooks/telegram/webhook, replacing\nthe host and port with the appropriate values from your running Rasa server.At the end you should get your access_token and the username you\nset will be your verify.If you want to use your bot in a group setting, it's advisable to\nturn on group privacy mode by entering /setprivacy. Then the bot\nwill only listen when a user's message starts with /bot.\n\nFor more information, check out the Telegram HTTP API.\n\nRunning on Telegram#\n\nAdd the Telegram credentials to your credentials.yml:\n\nCopytelegram:  access_token: \"490161424:AAGlRxinBRtKGb21_rlOEMtDFZMXBl6EC0o\"  verify: \"your_bot\"  webhook_url: \"https://your_url.com/webhooks/telegram/webhook\"\n\nRestart your Rasa server\nto make the new channel endpoint available for Telegram to send messages to.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "641": {"text": "Handling /start messageAt the beginning of a conversation, the user will press the 'Start' button in Telegram.\nThis will trigger a message with the content /start to be sent.\nMake sure your bot can handle this intro message by designing a specific intent in the nlu training data file.\nThen add this start intent to the domain alongside a story or rule to handle it.\n\nSupported Response Attachments#\n\nIn addition to standard text: responses, this channel also supports the following components from the Telegram API:\n\nbutton arguments:button_type: inline | vertical | replycustom arguments:photoaudiodocumentstickervideovideo_noteanimationvoicemedialatitude, longitude (location)latitude, longitude, title, address (venue)phone_numbergame_short_nameaction\n\nExamples:\n\nCopy\n  utter_ask_transfer_form_confirm:  - buttons:    - payload: /affirm      title: Yes    - payload: /deny      title: No, cancel the transaction    button_type: vertical    text: Would you like to transfer {currency}{amount_of_money} to {PERSON}?    image: \"https://i.imgur.com/nGF1K8f.jpg\"\n\nCopy  utter_giraffe_sticker:  - text: Here's my giraffe sticker!    custom:      sticker: \"https://github.com/TelegramBots/book/raw/master/src/docs/sticker-fred.webp\"\n\nPrevious\u00ab SlackNextTwilio \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "642": {"text": "Version: 3.x\n\nTwilio\n\nYou can use the Twilio connector to deploy an assistant that is available over text message.\n\nGetting Credentials#\n\nYou first have to create a Twilio app to get credentials.\nOnce you have them you can add these to your credentials.yml.\n\nHow to get the Twilio credentials:\nYou need to set up a Twilio account.\n\nOnce you have created a Twilio account, you need to create a new\nproject. The basic important product to select here\nis Programmable SMS.Once you have created the project, navigate to the Dashboard of\nProgrammable SMS and click on Get Started. Follow the\nsteps to connect a phone number to the project.Now you can use the Account SID, Auth Token, and the phone\nnumber you purchased in your credentials.yml.Configure your webhook URL by navigating to\nPhone Numbers in the Twilio\ndashboard and selecting your phone number. Find the Messaging section and add\nyour webhook URL (e.g. https://<host>:<port>/webhooks/twilio/webhook,\nreplacing the host and port with the appropriate values from your running Rasa server)\nto the A MESSAGE COMES IN setting.\n\nFor more information, see the Twilio REST API.\n\nConnecting to WhatsApp#\n\nYou can deploy a Rasa assistant to WhatsApp through Twilio. However, to do so, you have\nto have a WhatsApp Business profile. Associate\nyour Whatsapp Business profile with the phone number you purchased through Twilio to\naccess the Twilio API for WhatsApp.\n\nAccording to the Twilio API documentation,\nthe phone number you use should be prefixed with whatsapp: in the credentials.yml described below.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "643": {"text": "Running on Twilio#\n\nAdd the Twilio credentials to your credentials.yml:\n\nCopytwilio:  account_sid: \"ACbc2dxxxxxxxxxxxx19d54bdcd6e41186\"  auth_token: \"e231c197493a7122d475b4xxxxxxxxxx\"  twilio_number: \"+440123456789\"  # if using WhatsApp: \"whatsapp:+440123456789\"\n\nRestart your Rasa server\nto make the new channel endpoint available for Twilio to send messages to.\n\nReceiving Location Data from Whatsapp with Twilio connector#\n\nThis is how you can receive location data (WhatsApp Location) from a user on this channel:\n\nCreate an intent named \"locationData\" and define two entities and slots for Latitude and Longitude respectively.\n\ndomain.ymlCopyintents:  - locationData\nslots:   Latitude:     type: text     mappings:     - type: from_entity       entity: Latitude\n   Longitude:     type: text     mappings:     - type: from_entity       entity: Longitude\nentities:  - Latitude  - Longitude\n\n\nWhen the user sends a location message, the locationData intent will be triggered and the slots will be set from the entities. Note that you do not need to provide training data for the entities as they are handled by the channel.\n\nPrevious\u00ab TelegramNextGoogle Hangouts Chat \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "644": {"text": "Version: 3.x\n\nGoogle Hangouts Chat\n\nHangouts Chat Setup#\n\nThis channel works similar to the standard Rasa REST channel. For each request from the channel, your bot will\nsend one response. The response will be displayed to the user either as text or a so-called card (for\nmore information, see the Cards section).\n\nIn order to connect your Rasa bot to Google Hangouts Chat, you first need to create a project in\nGoogle Developer Console that includes the Hangouts API. There you can specify your bot's endpoint.\nThis endpoint should look like https://<host>:<port>/webhooks/hangouts/webhook, replacing\nthe host and port with the appropriate values from your running Rasa server.\n\nconfigure httpsHangouts Chat only forwards\nmessages to endpoints via https, so take appropriate measures to add\nit to your setup. For local testing of your bot, see Testing Channels on Your Local Machine.\n\nIn the Google Developer console, obtain your project id (also known as project number or app ID), which determines the scope for the OAuth2 authorization in case you\nwant to use OAuth2. The Hangouts Chat API sends a Bearer token with every request, but it is up to\nthe bot to actually verify the token, hence the channel also works without this.\nFor more information see the Google Hangouts documentation. If you want the verification to be done, be sure to include project_id inside your credentials.yml file as shown below.\n\nThe possibility to implement asynchronous communication between Hangouts Chat and bot exists, but due\nto the usually synchronous nature of Rasa bots, this functionality is not included in this channel.\n\nRunning On Hangouts Chat#\n\nAdd the Hangouts credentials to your credentials.yml:\n\nCopyhangouts:  # no credentials required here", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "645": {"text": "Copyhangouts:  # no credentials required here\n\nIf you want to use OAuth2, add the project id obtained from the Google Developer Console:\n\nCopyhangouts:  project_id: \"12345678901\"\n\nRestart your Rasa server\nto make the new channel endpoint available for Google Hangouts to send messages to.\n\nCards and Interactive Cards#\n\nThere are two ways in which Hangouts Chat will display bot messages, either as text or card. For each received\nrequest, your bot will send all messages in one response. If one of those messages is a card (e.g. an image),\nall other messages are converted to card format as well.\n\nInteractive cards trigger the CARD_CLICKED event for user interactions, e.g. when a button is clicked. When\ncreating an interactive card, e.g. via dispatcher.utter_button_message() in your actions.py, you can\nspecify a payload for each button that is going to be returned with the CARD_CLICKED event and extracted\nby the HangoutsInput channel (for example\nbuttons=[{\"text\":\"Yes!\", \"payload\":\"/affirm\"}, {\"text\":\"Nope.\", \"payload\":\"/deny\"}]).\nUpdating cards is not yet supported.\n\nFor more detailed information on cards, visit the\nHangouts docs.\n\nOther Hangouts Chat Events#\n\nExcept for MESSAGE and CARD_CLICKED, Hangouts Chat knows two other event types, ADDED_TO_SPACE and\nREMOVED_FROM_SPACE, which are triggered when your bot is added or removed from a direct message or chat room\nspace. The default intent names for these events can be modified in the HangoutsInput constructor method.\n\nPrevious\u00ab TwilioNextMicrosoft Bot Framework \u00bb", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "646": {"text": "Previous\u00ab TwilioNextMicrosoft Bot Framework \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "647": {"text": "Version: 3.x\n\nMicrosoft Bot Framework\n\nYou first have to create a Microsoft app to get credentials.\nOnce you have them you can add these to your credentials.yml.\n\nThe endpoint URL that Microsoft Bot Framework should send messages to will\nlook like http://<host>:<port>/webhooks/botframework/webhook, replacing\nthe host and port with the appropriate values from your running Rasa server.\n\nRunning on Microsoft Bot Framework#\n\nAdd the Botframework credentials to your credentials.yml:\n\nCopybotframework:  app_id: \"MICROSOFT_APP_ID\"  app_password: \"MICROSOFT_APP_PASSWORD\"\n\nRestart your Rasa server\nto make the new channel endpoint available for Microsoft Bot Framework to send messages to.\n\nPrevious\u00ab Google Hangouts ChatNextCisco Webex Teams \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "648": {"text": "Version: 3.x\n\nCisco Webex Teams\n\nYou first have to create a cisco webex app to get credentials.\nOnce you have them you can add these to your credentials.yml.\n\nGetting Credentials#\n\nHow to get the Cisco Webex Teams credentials:\n\nYou need to set up a bot. Check out the Cisco Webex for Developers\ndocumentation for information\nabout how to create your bot.\n\nAfter you have created the bot through Cisco Webex Teams, you need to create a\nroom in Cisco Webex Teams. Then add the bot in the room the same way you would\nadd a person in the room.\n\nYou need to note down the room ID for the room you created. This room ID will\nbe used in room variable in the credentials.yml file.\n\nPlease follow this link below to find the room ID\nhttps://developer.webex.com/endpoint-rooms-get.html\n\nIn the OAuth & Permissions section, add the URL of the Rasa endpoint\nthat Webex should forward the messages to. The endpoint for receiving Cisco Webex Teams messages\nis http://<host>:<port>/webhooks/webexteams/webhook, replacing\nthe host and port with the appropriate values from your running Rasa server.\n\nRunning on Cisco Webex Teams#\n\nAdd the Webex Teams credentials to your credentials.yml:\n\nCopywebexteams:  access_token: \"YOUR-BOT-ACCESS-TOKEN\"  room: \"YOUR-CISCOWEBEXTEAMS-ROOM-ID\"\n\nRestart your Rasa server\nto make the new channel endpoint available for Cisco Webex Teams to send messages to.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "649": {"text": "noteIf you do not set the room keyword\nargument, messages will by delivered back to\nthe user who sent them.\n\nPrevious\u00ab Microsoft Bot FrameworkNextRocketChat \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "650": {"text": "Version: 3.x\n\nRocketChat\n\nGetting Credentials#\n\nHow to set up Rocket.Chat:\n\nCreate a user that will be used to post messages, and set its\ncredentials at credentials file.Create a Rocket.Chat outgoing webhook by logging in as admin to\nRocket.Chat and going to\nAdministration > Integrations > New Integration.Select Outgoing Webhook.Set Event Trigger section to value Message Sent.Fill out the details, including the channel you want the bot\nlisten to. Optionally, it is possible to set the\nTrigger Words section with @yourbotname so that the bot\ndoesn't trigger on everything that is said.In the URLs section, set the URL to\nhttp://<host>:<port>/webhooks/rocketchat/webhook, replacing\nthe host and port with the appropriate values from your running Rasa server.\n\nFor more information on the Rocket.Chat Webhooks, see the\nRocket.Chat Guide.\n\nRunning on RocketChat#\n\nAdd the RocketChat credentials to your credentials.yml:\n\nCopyrocketchat:  user: \"yourbotname\"  password: \"YOUR_PASSWORD\"  server_url: \"https://demo.rocket.chat\"\n\nRestart your Rasa server\nto make the new channel endpoint available for RocketChat to send messages to.\n\nPrevious\u00ab Cisco Webex TeamsNextMattermost \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "651": {"text": "Version: 3.x\n\nMattermost\n\nYou first have to create a mattermost app to get credentials.\nOnce you have them you can add these to your credentials.yml.\n\nGetting Credentials#\n\nMattermost now uses bot accounts for better security.  So you can use their guide to create\nyour bot to get your token required for the credentials.yml file.\n\nFor more information on creating a bot account please see\nBot Creation.\n\nFor information on converting existing user account into bot account please see\nUser Conversion.\n\nHow to set up the outgoing webhook:\n\nTo create the Mattermost outgoing webhook, login to your Mattermost\nteam site and go to Main Menu > Integrations > Outgoing Webhooks.Click Add outgoing webhook.Fill out the details including the channel you want the bot in.\nYou will need to ensure the trigger words section is set up\nwith @yourbotname so that the bot doesn't trigger on everything\nthat is said.The Content Type must be set to application/json.Make sure trigger when is set to value\nfirst word matches a trigger word exactly.Add the Callback URL, which will\nlook like http://<host>:<port>/webhooks/mattermost/webhook, replacing\nthe host and port with the appropriate values from your running Rasa server.\n\nFor more detailed steps, visit the\nMattermost docs.\n\nRunning on Mattermost#\n\nAdd the Mattermost credentials to your credentials.yml:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "652": {"text": "Add the Mattermost credentials to your credentials.yml:\n\nCopymattermost:  url: \"https://chat.example.com/api/v4\"  token: \"xxxxx\" #  the token for the bot account from creating the bot step.  webhook_url: \"https://server.example.com/webhooks/mattermost/webhook\"  # this should match the callback url from step 6\n\nRestart your Rasa server\nto make the new channel endpoint available for Mattermost to send messages to.\n\nPrevious\u00ab RocketChatNextAudiocodes VoiceAI Connect \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "653": {"text": "Version: 3.x\n\nAudiocodes VoiceAI Connect\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nUse this channel to connect your Rasa assistant to Audiocodes VoiceAI connect.\n\nGetting Credentials#\n\nTo get credentials, create a bot on the VoiceAI connect portal.\n\nSelect Bots in the left sidebar.Click on the + sign to create a new bot.Select Rasa as the Bot FrameworkSet the bot URL and choose a token value.\n\nSetting the bot URL with a tunneling solution when testing locallyVisit this section to learn how to generate\nthe required bot URL when testing the channel on your local machine.\n\nSetting credentials#\n\nThe token value chosen above will be used in the credentials.yml:\n\nCopyrasa_plus.channels.audiocodes.AudiocodesInput: token: <token>\n\nYou can also specify optional parameters:\n\nParameterDefault valueDescriptiontokenNo default valueThe token to authenticate calls between your Rasa assistant and VoiceAI connectuse_websockettrueIf true, Rasa will send messages through a web socket. If set to false, Rasa will send messages through http API calls.keep_alive120In seconds. For each ongoing conversation, VoiceAI Connect will periodically verify the conversation is still active on the Rasa side.\n\nThen restart your Rasa server to make the new channel endpoint available.\n\nUsage#\n\nReceiving messages from a user#\n\nWhen a user speaks on the phone, VoiceAI Connect will send a text message (after it is processed by the speech-to-text engine) to your assistant like any other channel.\nThis message will be interpreted by the NLU and you can then drive the conversation with rules, stories and forms.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "654": {"text": "Sending messages to a user#\n\nYour bot will respond with text messages like with any other channel. The text-to-speech engine will convert the text and deliver it as a voice message to the user.\n\nHere is an example:\n\nCopyutter_greet: - text: 'Hello! isn\u2019t every life and every work beautiful?'\n\nnoteOnly text messages are allowed. Images, attachments, and buttons cannot be used with a voice channel. \n\nHandling conversation events#\n\nNon-voice events can also be handled by the bot. Here are a few examples:\n\nEventintentDescriptionstartvaig_event_startVoiceAI will send this intent when it picks-up a phone call. In general, the response to that intent is a welcome or greeting message. Call context will be provided through entitiesendvaig_event_endVoiceAI will send this intent when a call ends. You can use that to call an action that updates the call information.DTMFvaig_event_DTMFVoiceAI will send this intent when receiving a DTMF tone (i.e user presses digit on the keyboard of the phone). The digit(s) sent will be passed in the value entity\n\nThe general pattern is that for every event sent, the bot will receive the vaig_event_<event> intent, with context information in entities.\n\nHere is a simple rule to send a greeting message when a call to the bot is initiated:\n\nCopy- rule: New call steps: - intent: vaig_event_start - action: utter_greet\n\nCheck the VoiceAI Connect documentation for an exhaustive list of events.\n\nConfiguring calls#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "655": {"text": "Configuring calls#\n\nYou can send events from Rasa to VoiceAI Connect to make changes to the current call configuration.\nFor example, you might want to receive a notification when the user stays silent for more than 5 seconds, or you might need to customize how DTMF digits are sent by VoiceAI Connect.\n\nCall configuration events are sent with custom messages and are specific to the current conversation (sometimes to a message).\nWhich means they must be part of your stories or rules so the same behaviour is applied to all conversations.\n\nThose Rasa responses don't utter anything, they just configure the voice gateway. It is a good practice naming them differently, for example prefixing them with utter_config_<what_it_does>\n\nAll the supported events are exhaustively documented in the VoiceAI Connect documentation.\nWe will look at one example here to illustrate the use of custom messages and events.\n\nExample: changing a pin code#\n\nIn this example we create a flow to allow a user to change a pin code.\n\nCopy- rule: Set pin code steps: # User says \"I want to change my pin code\" - intent: set_pin_code # Send the noUserInput configuration event - action: utter_config_no_user_input # Send the DTMF format configuration event - action: utter_config_dtmf_pin_code  # A standard Rasa form to collect the pin code from the user - action: pin_code_form  - ...\n\nIn the domain, we can add the utter_config_<config_event> responses:\n\nnoUserInput event", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "656": {"text": "noUserInput event\n\nCopy utter_config_no_user_input: - custom: type: event name: config sessionParams: # If user stays silent for 5 seconds or more, the notification will be sent userNoInputTimeoutMS: 5000 # If you want to allow for more than one notification during a call userNoInputRetries: 2 # Enable the noUserInput notification userNoInputSendEvent: true\n\nDTMF event\n\nCopy utter_config_dtmf_pin_code: - custom: type: event name: config sessionParams: # Enable grouped collection (i.e will send all digits in a single payload) dtmfCollect: true # If more than 5 secs have passed since a digit was pressed,  # the input is considered completed and will be sent to the bot dtmfCollectInterDigitTimeoutMS: 5000 # If 6 digits are collected, VoiceAI will send those 6 digits # even if the user keeps pressing buttons dtmfCollectMaxDigits: 6 # If the user presses '#' the input is considered complete dtmfCollectSubmitDigit: \"#\"\n\nNow you can configure the pin_code slot in the pin_code_form to extract the pin code from the value entity with the vaig_event_DTMF intent:\n\nCopy pin_code: type: text influence_conversation: false mappings: - type: from_entity entity: value intent: vaig_event_DTMF not_intent: vaig_event_noUserInput conditions: - active_loop: pin_code_form requested_slot: pin_code\n\nNotice how vaig_event_noUserInput was declared in the not_intent field.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "657": {"text": "Since the vaig_event_noUserInput intent is sent by VoiceAI Connect when the user stays silent as per our configuration,\nwe must deactivate the form so we can pick up the conversation from a rule or a story and gracefully handle the failure.\n\nIn the following example, we simply cancel the current flow if we receive the vaig_event_noUserInput intent (i.e. user stays silent) while the pin_code_form loop is active.\n\nCopy- rule: Set pin code - happy path steps: - intent: set_pin_code - action: utter_config_no_user_input - action: utter_config_dtmf_pin_code - action: pin_code_form - active_loop: pin_code_form - active_loop: null - slot_was_set: - requested_slot: null - action: utter_pin_code_changed - action: action_pin_code_cleanup\n- rule: Set pin code - no response - cancel. condition: - active_loop: pin_code_form steps: - intent: vaig_event_noUserInput - action: utter_cancel_set_pin_code - action: action_deactivate_loop - active_loop: null\n\nPrevious\u00ab MattermostNextCustom Connectors \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "658": {"text": "Version: 3.x\n\nCustom Connectors\n\nYou can implement your own custom channel connector as a python class. You can\nuse the rasa.core.channels.rest.RestInput class as a template. \n\nA custom connector class must subclass rasa.core.channels.channel.InputChannel\nand implement at least a blueprint and name method. \n\nThe name method#\n\nThe name method defines the url prefix for the connector's webhook. It also defines the channel name you should use\nin any channel specific response variations and the name you\nshould pass to the output_channel query parameter on the trigger intent endpoint.\n\nFor example, if your custom channel is named myio, you would define the name method as:\n\nCopyfrom rasa.core.channels.channel import InputChannel\nclass MyIO(InputChannel): def name() -> Text: \"\"\"Name of your custom channel.\"\"\" return \"myio\"\n\nYou would write a response variation specific to the myio channel  as:\n\ndomain.ymlCopyresponses:  utter_greet:    - text: Hi! I'm the default greeting.    - text: Hi! I'm the custom channel greeting      channel: myio\n\nThe webhook you give to the custom channel to call would be\nhttp://<host>:<port>/webhooks/myio/webhook, replacing\nthe host and port with the appropriate values from your running Rasa server.\n\nThe blueprint method#\n\nThe blueprint method\nneeds to create a sanic blueprint\nthat can be attached to a sanic server.\nYour blueprint should have at least the two routes: health on the route /,\nand receive on the route /webhook (see example custom channel below).", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "659": {"text": "As part of your implementation of the receive endpoint, you will need to tell\nRasa to handle the user message. You do this by calling \n\nCopy    on_new_message(      rasa.core.channels.channel.UserMessage(        text,        output_channel,        sender_id ) )\n\nCalling on_new_message will send the user message to the handle_message method.\n\nSee more details on the UserMessage object here.\n\nThe output_channel argument refers to an output channel implementing the\nOutputChannel class. You can\neither implement your own output channel class with the methods for your particular chat channel\n(e.g. methods to send text and images) or you can use the\nCollectingOutputChannel\nto collect the bot responses Rasa creates while the bot is processing your messages and return\nthem as part of your endpoint response. This is the way the RestInput\nchannel is implemented. For examples on how to create and use your own output\nchannel, take a look at the implementations of the other\noutput channels, e.g. the SlackBot in rasa.core.channels.slack.\n\nHere is a simplified example of a custom channel connector that makes use of the CollectingOutputChannel:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "660": {"text": "custom_channel.pyCopyimport asyncioimport inspectfrom sanic import Sanic, Blueprint, responsefrom sanic.request import Requestfrom sanic.response import HTTPResponsefrom typing import Text, Dict, Any, Optional, Callable, Awaitable, NoReturn\nimport rasa.utils.endpointsfrom rasa.core.channels.channel import (    InputChannel,    CollectingOutputChannel,    UserMessage,)\nclass MyIO(InputChannel): def name() -> Text: \"\"\"Name of your custom channel.\"\"\" return \"myio\"\n def blueprint(        self, on_new_message: Callable[[UserMessage], Awaitable[None]] ) -> Blueprint:\n        custom_webhook = Blueprint( \"custom_webhook_{}\".format(type(self).__name__),            inspect.getmodule(self).__name__, )\n        @custom_webhook.route(\"/\", methods=[\"GET\"]) async def health(request: Request) -> HTTPResponse: return response.json({\"status\": \"ok\"})\n        @custom_webhook.route(\"/webhook\", methods=[\"POST\"]) async def receive(request: Request) -> HTTPResponse:            sender_id = request.json.get(\"sender\") # method to get sender_id             text = request.json.get(\"text\") # method to fetch text            input_channel = self.name() # method to fetch input channel            metadata = self.get_metadata(request) # method to get metadata\n            collector = CollectingOutputChannel()  # include exception handling\n await on_new_message(                UserMessage(                    text,                    collector,                    sender_id,                    input_channel=input_channel,                    metadata=metadata, ) )", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "661": {"text": "return response.json(collector.messages)\n return custom_webhook", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "662": {"text": "Metadata on messages#\n\nIf you need to use extra information from your front end in your custom\nactions, you can pass this information using the metadata key of your user\nmessage. This information will accompany the user message through the Rasa\nserver into the action server when applicable, where you can find it stored in\nthe tracker. Message metadata will not directly affect NLU classification\nor action prediction. \n\nThe InputChannel class's default implementation of get_metadata ignores all metadata.\nTo extract metadata in a custom connector, implement the get_metadata method.\nThe SlackInput channel provides one example of a get_metadata method that extracts metadata according to the channel's response format.\n\nCredentials for Custom Channels#\n\nTo use a custom channel, you need to supply credentials for it in a credentials configuration file\ncalled credentials.yml.\nThis credentials file has to contain the module path (not the channel name) of your custom channel and\nany required configuration parameters. \n\nFor example, for a custom connector class called MyIO saved in a file addons/custom_channel.py,\nthe module path would be addons.custom_channel.MyIO, and the credentials could look like:\n\ncredentials.ymlCopyaddons.custom_channel.MyIO:  username: \"user_name\"  another_parameter: \"some value\"\n\nTo make the Rasa\nserver aware of your custom channel, specify the path to credentials.yml to the Rasa server at startup with the command line argument --credentials .\n\nTesting the Custom Connector Webhook#\n\nTo test your custom connector, you can POST messages to the webhook using a json body with the following format:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "663": {"text": "Copy{ \"sender\": \"test_user\", // sender ID of the user sending the message \"message\": \"Hi there!\", \"metadata\": {} // optional, any extra info you want to add for processing in NLU or custom actions}\n\nFor a locally running Rasa server, the curl request would look like this:\n\nCopycurl --request POST \\     --url http://localhost:5005/webhooks/myio/webhook \\     --header 'Content-Type: application/json' \\     --data '{            \"sender\": \"test_user\",            \"message\": \"Hi there!\",            \"metadata\": {}          }'\n\nPrevious\u00ab Audiocodes VoiceAI ConnectNextRasa Architecture Overview \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "664": {"text": "Version: 3.x\n\nRasa Architecture Overview\n\nRasa has a scalable architecture. Read about the key components of the Rasa architecture.\n\nThe diagram below provides an overview of the Rasa architecture. The two primary\ncomponents are Natural Language Understanding (NLU) and dialogue management.\n\nNLU is the part that handles intent classification, entity extraction, and response retrieval.\nIt's shown below as the NLU Pipeline because it processes\nuser utterances using an NLU model that is generated by the trained pipeline.\n\nThe dialogue management component decides the next action in a conversation based on the\ncontext. This is displayed as the Dialogue Policies in the diagram.\n\n\n\nPrevious\u00ab Custom ConnectorsNextTracker Stores \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "665": {"text": "Version: 3.x\n\nTracker Stores\n\nYour assistant's conversations are stored within a tracker store. Rasa provides implementations for different store types out of the box, or you can create your own custom one.\n\nInMemoryTrackerStore (default)#\n\nInMemoryTrackerStore is the default tracker store. It is used if no other\ntracker store is configured. It stores the conversation history in memory.\n\nnoteAs this store keeps all history in memory, the entire history is lost if you restart the Rasa server.\n\nConfiguration#\n\nNo configuration is needed to use the InMemoryTrackerStore.\n\nSQLTrackerStore#\n\nYou can use an SQLTrackerStore to store your assistant's conversation history in an SQL database.\n\nConfiguration#\n\nTo set up Rasa with SQL the following steps are required:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "666": {"text": "Configuration#\n\nTo set up Rasa with SQL the following steps are required:\n\nAdd required configuration to your endpoints.yml:endpoints.ymlCopytracker_store:    type: SQL    dialect: \"postgresql\"  # the dialect used to interact with the db    url: \"\"  # (optional) host of the sql db, e.g. \"localhost\"    db: \"rasa\"  # path to your db    username:  # username used for authentication    password:  # password used for authentication    query: # optional dictionary to be added as a query string to the connection URL      driver: my-driverTo start the Rasa server using your SQL backend,\nadd the --endpoints flag, e.g.:Copyrasa run -m models --endpoints endpoints.ymlIf deploying your model in Docker Compose, add the service to your docker-compose.yml:docker-compose.ymlCopypostgres:  image: postgres:latestTo route requests to the new service, make sure that the url in your endpoints.yml\nreferences the service name:endpoints.ymlCopy  tracker_store:      type: SQL      dialect: \"postgresql\"  # the dialect used to interact with the db      url: \"postgres\"      db: \"rasa\"  # path to your db      username:  # username used for authentication      password:  # password used for authentication      query: # optional dictionary to be added as a query string to the connection URL        driver: my-driver\n\nConfiguration Parameters#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "667": {"text": "Configuration Parameters#\n\ndomain (default: None): Domain object associated with this tracker storedialect (default: sqlite): The dialect used to communicate with your SQL backend.  Consult the SQLAlchemy docs for available dialects.url (default: None): URL of your SQL serverport (default: None): Port of your SQL serverdb (default: rasa.db): The path to the database to be usedusername (default: None): The username which is used for authenticationpassword (default: None): The password which is used for authenticationevent_broker (default: None): Event broker to publish events tologin_db (default: None): Alternative database name to which initially  connect, and create the database specified by db (PostgreSQL only)query (default: None): Dictionary of options to be passed to the dialect and/or the DBAPI upon connect\n\nCompatible Databases#\n\nThe following databases are officially compatible with the SQLTrackerStore:\n\nPostgreSQLOracle > 11.0SQLite\n\nConfiguring Oracle#\n\nTo use the SQLTrackerStore with Oracle, there are a few additional steps.\nFirst, create a database tracker in your Oracle database and create a user with access to it.\nCreate a sequence in the database with the following command, where username is the user you created\n(read more about creating sequences in the Oracle Documentation):\n\nCopyCREATE SEQUENCE username.events_seq;\n\nNext you have to extend the Rasa image to include the necessary drivers and clients.\nFirst download the Oracle Instant Client,\nrename it to oracle.rpm and store it in the directory from where you'll be building the docker image.\nCopy the following into a file called Dockerfile:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "668": {"text": "CopyFROM rasa/rasa:3.6.2-full\n# Switch to root user to install packagesUSER root\nRUN apt-get update -qq && apt-get install -y --no-install-recommends alien libaio1 && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n# Copy in oracle instaclient# https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.htmlCOPY oracle.rpm oracle.rpm\n# Install the Python wrapper library for the Oracle driversRUN pip install cx-Oracle\n# Install Oracle client librariesRUN alien -i oracle.rpm\nUSER 1001\n\nThen build the docker image:\n\ndocker build . -t rasa-oracle:3.6.2-oracle-full\n\nNow you can configure the tracker store in the endpoints.yml as described above,\nand start the container. The dialect parameter with this setup will be oracle+cx_oracle.\nRead more about Deploying a Rasa Assistant.\n\nRedisTrackerStore#\n\nYou can store your assistant's conversation history in Redis by using the\nRedisTrackerStore.\nRedis is a fast in-memory key-value store which can optionally also persist data.\n\nConfiguration#\n\nTo set up Rasa with Redis the following steps are required:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "669": {"text": "Configuration#\n\nTo set up Rasa with Redis the following steps are required:\n\nStart your Redis instanceAdd required configuration to your endpoints.yml:endpoints.ymlCopytracker_store:    type: redis    url: <url of the redis instance, e.g. localhost>    port: <port of your redis instance, usually 6379>    key_prefix: <alphanumeric value to prepend to tracker store keys>    db: <number of your database within redis, e.g. 0>    password: <password used for authentication>    use_ssl: <whether or not the communication is encrypted, default `false`>Copyrasa run -m models --endpoints endpoints.ymlIf deploying your model in Docker Compose, add the service to your docker-compose.yml:docker-compose.ymlCopyredis:  image: redis:latestTo route requests to the new service, make sure that the url in your endpoints.yml\nreferences the service name:endpoints.ymlCopy tracker_store:     type: redis     url: <url of the redis instance, e.g. localhost>     port: <port of your redis instance, usually 6379>     db: <number of your database within redis, e.g. 0>     key_prefix: <alphanumeric value to prepend to tracker store keys>     password: <password used for authentication>     use_ssl: <whether or not the communication is encrypted, default `false`>", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "670": {"text": "url (default: localhost): The url of your redis instanceport (default: 6379): The port which redis is running ondb (default: 0): The number of your redis databasekey_prefix (default: None): The prefix to prepend to tracker store keys. Must\nbe alphanumericpassword (default: None): Password used for authentication\n(None equals no authentication)record_exp (default: None): Record expiry in secondsuse_ssl (default: False): whether or not to use SSL for transit encryption\n\nMongoTrackerStore#\n\nYou can store your assistant's conversation history in MongoDB using the MongoTrackerStore.\nMongoDB is a free and open-source cross-platform document-oriented NoSQL database.\n\nConfiguration#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "671": {"text": "Start your MongoDB instance.Add required configuration to your endpoints.yml:endpoints.ymlCopytracker_store:    type: mongod    url: <url to your mongo instance, e.g. mongodb://localhost:27017>    db: <name of the db within your mongo instance, e.g. rasa>    username: <username used for authentication>    password: <password used for authentication>    auth_source: <database name associated with the user's credentials>You can also add more advanced configurations (like enabling ssl) by appending\na parameter to the url field, e.g. mongodb://localhost:27017/?ssl=true.To start the Rasa server using your configured MongoDB instance,\nadd the --endpoints flag, for example:Copyrasa run -m models --endpoints endpoints.ymlIf deploying your model in Docker Compose, add the service to your docker-compose.yml:docker-compose.ymlCopymongo:  image: mongo  environment:    MONGO_INITDB_ROOT_USERNAME: rasa    MONGO_INITDB_ROOT_PASSWORD: examplemongo-express:  # this service is a MongoDB UI, and is optional  image: mongo-express  ports:    - 8081:8081  environment:    ME_CONFIG_MONGODB_ADMINUSERNAME: rasa    ME_CONFIG_MONGODB_ADMINPASSWORD: exampleTo route requests to this database, make sure to set the url in your endpoints.yml as the service name,", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "672": {"text": "and specify the user and password:endpoints.ymlCopy tracker_store:     type: mongod     url: mongodb://mongo:27017     db: <name of the db within your mongo instance, e.g. rasa>     username: <username used for authentication>     password: <password used for authentication>     auth_source: <database name associated with the user's credentials>", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "673": {"text": "Configuration Parameters#\n\nurl (default: mongodb://localhost:27017): URL of your MongoDBdb (default: rasa): The database name which should be usedusername (default: 0): The username which is used for authenticationpassword (default: None): The password which is used for authenticationauth_source (default: admin): database name associated with the user's credentials.collection (default: conversations): The collection name which is\nused to store the conversations\n\nDynamoTrackerStore#\n\nYou can store your assistant's conversation history in\nDynamoDB by using a DynamoTrackerStore.\nDynamoDB is a hosted NoSQL database offered by Amazon Web Services (AWS).\n\nConfiguration#\n\nStart your DynamoDB instance.Add required configuration to your endpoints.yml:endpoints.ymlCopytracker_store:    type: dynamo    table_name: <name of the table to create, e.g. rasa>    region: <name of the region associated with the client>To start the Rasa server using your configured DynamoDB instance,\nadd the --endpoints flag, e.g.:Copyrasa run -m models --endpoints endpoints.yml\n\nConfiguration Parameters#\n\ntable_name (default: states): name of the DynamoDB tableregion (default: us-east-1): name of the region associated with the client\n\nCustom Tracker Store#\n\nIf you need a tracker store which is not available out of the box, you can implement your own.\nThis is done by extending the base class TrackerStore and one of the provided mixin classes that implement the\nserialise_tracker method: SerializedTrackerAsText or SerializedTrackerAsDict.", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "674": {"text": "To write a custom tracker store, extend the TrackerStore base class. Your constructor has to\nprovide a parameter host.\nThe constructor also needs to make a super call to the base class TrackerStore using domain and event_broker arguments:\n\nCopysuper().__init__(domain, event_broker, **kwargs)\n\nYour custom tracker store class must also implement the following three methods:\n\nsave: saves the conversation to the tracker store. (source code - see for signature).retrieve: retrieves tracker for the latest conversation session. (source code - see for signature).keys: returns the set of values for the tracker store's primary key. (source code - see for signature).\n\nConfiguration#\n\nPut the module path to your custom tracker store and the parameters you require in your endpoints.yml:\n\nendpoints.ymlCopytracker_store:  type: path.to.your.module.Class  url: localhost  a_parameter: a value  another_parameter: another value\n\nIf you are deploying in Docker Compose, you have two options to add this store to Rasa:\nextending the Rasa image to include the module, or mounting the module as volume.\n\n Make sure to add the corresponding service as well. For example, mounting it as a volume would look like so:\n\ndocker-compose.ymlCopyrasa:  <existing rasa service configuration> volumes: - <existing volume mappings, if there are any> - ./path/to/your/module.py:/app/path/to/your/module.pycustom-tracker-store: image: custom-image:tag", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "675": {"text": "endpoints.ymlCopytracker_store:  type: path.to.your.module.Class  url: custom-tracker-store  a_parameter: a value  another_parameter: another value\n\nFallback Tracker Store#\n\nIn case the primary tracker store configured in endpoints.yml becomes unavailable, the rasa agent will issue an\nerror message and fall back on the InMemoryTrackerStore implementation. A new dialogue session will be started for\neach turn, which will be saved separately in the InMemoryTrackerStore fallback.\n\nAs soon as the primary tracker store comes back up, it will replace the fallback tracker store and save the\nconversation from this point going forward. However, note that any previous states saved in the InMemoryTrackerStore\nfallback will be lost.\n\nUsing the same redis instance as lock-store and tracker storeYou must not use the same Redis instance as both lock store and tracker store.\nIf the Redis instance becomes unavailable, the conversation will hang because there is no fall back mechanism\nimplemented for the lock store (as it is for the tracker store interfaces).\n\nPrevious\u00ab Rasa Architecture OverviewNextEvent Brokers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "676": {"text": "Version: 3.x\n\nEvent Brokers\n\nAn event broker allows you to connect your running assistant to other services that process the data coming\nin from conversations. The event broker publishes messages to a message streaming service,\nalso known as a message broker, to forward Rasa Events from the Rasa server to other services.\n\nFormat#\n\nAll events are streamed to the broker as serialized dictionaries every time\nthe tracker updates its state. An example event emitted from the default\ntracker looks like this:\n\nCopy{ \"sender_id\": \"default\", \"timestamp\": 1528402837.617099, \"event\": \"bot\", \"text\": \"what your bot said\", \"data\": \"some data about e.g. attachments\" \"metadata\" { \"a key\": \"a value\", }}\n\nThe event field takes the event's type_name (for more on event\ntypes, check out the events docs).\n\nPika Event Broker#\n\nThe example implementation we're going to show you here uses\nPika , the Python client library for\nRabbitMQ.\n\nAdding a Pika Event Broker Using the Endpoint Configuration#\n\nYou can instruct Rasa to stream all events to your Pika event broker by adding an event_broker section to your\nendpoints.yml:\n\nCopyevent_broker:  type: pika  url: localhost  username: username  password: password  queues:    - queue-1#   you may supply more than one queue to publish to#   - queue-2#   - queue-3  exchange_name: exchange\n\n\nA comprehensive list of all arguments that can be customized in the endpoints.yml file can be found in the reference documentation.\nRasa will automatically start streaming events when you restart the Rasa server.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "677": {"text": "Adding SSL options to the Pika Event Broker#\n\nYou can create RabbitMQ SSL options by setting the following required environment variables:\n\nRABBITMQ_SSL_CLIENT_CERTIFICATE: path to the SSL client certificateRABBITMQ_SSL_CLIENT_KEY: path to the SSL client key\n\nPlease note that specifying 'RABBITMQ_SSL_CA_FILE' via environment variables is no longer supported, as well as\nspecifying RABBITMQ_SSL_KEY_PASSWORD environment variable - please use a key file that is not encrypted instead.\n\nAdding a Pika Event Broker in Python#\n\nHere is how you add it using Python code:\n\nCopyimport asyncio\nfrom rasa.core.brokers.pika import PikaEventBrokerfrom rasa.core.tracker_store import InMemoryTrackerStore\npika_broker = PikaEventBroker('localhost', 'username', 'password',                              queues=['rasa_events'],                              event_loop=event_loop )asyncio.run(pika_broker.connect())\ntracker_store = InMemoryTrackerStore(domain=domain, event_broker=pika_broker)\n\nImplementing a Pika Event Consumer#\n\nYou need to have a RabbitMQ server running, as well as another application\nthat consumes the events. This consumer to needs to implement Pika's\nstart_consuming() method with a callback action. Here's a simple\nexample:\n\nCopyimport jsonimport pika", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "678": {"text": "Copyimport jsonimport pika\n\ndef _callback(ch, method, properties, body): # Do something useful with your incoming message body here, e.g. # saving it to a database print(\"Received event {}\".format(json.loads(body)))\nif __name__ == \"__main__\":\n # RabbitMQ credentials with username and password    credentials = pika.PlainCredentials(\"username\", \"password\")\n # Pika connection to the RabbitMQ host - typically 'rabbit' in a # docker environment, or 'localhost' in a local environment    connection = pika.BlockingConnection(        pika.ConnectionParameters(\"rabbit\", credentials=credentials) )\n # start consumption of channel    channel = connection.channel()    channel.basic_consume(queue=\"rasa_events\", on_message_callback=_callback, auto_ack=True)    channel.start_consuming()\n\nKafka Event Broker#\n\nWhile RabbitMQ is the default event broker, it is possible to use Kafka as the main broker for your\nevents. Rasa uses the confluent-kafka library, a Kafka client written in Python.\nYou will need a running Kafka server.\n\nPartition Key#\n\nRasa's Kafka producer can optionally be configured to partition messages by conversation ID.\nThis can be configured by setting partition_by_sender in the endpoints.yml file to True.\nBy default, this parameter is set to False and the producer will randomly assign a partition to each message.  \n\nendpoints.ymlCopyevent_broker:  type: kafka  partition_by_sender: True  security_protocol: PLAINTEXT  topic: topic  url: localhost  client_id: kafka-python-rasa", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "679": {"text": "Authentication and Authorization#\n\nRasa's Kafka producer accepts the following types of security protocols: SASL_PLAINTEXT, SSL, PLAINTEXT\nand SASL_SSL.\n\nFor development environments, or if the brokers servers and clients are located\ninto the same machine, you can use simple authentication with SASL_PLAINTEXT or PLAINTEXT.\nBy using this protocol, the credentials and messages exchanged between the clients and servers\nwill be sent in plaintext. Thus, this is not the most secure approach, but since it's simple\nto configure, it is useful for simple cluster configurations.\nSASL_PLAINTEXT protocol requires the setup of the username and password\npreviously configured in the broker server.\n\nIf the clients or the brokers in the kafka cluster are located in different\nmachines, it's important to use the SSL or SASL_SSL protocol to ensure encryption of data\nand client authentication. After generating valid certificates for the brokers and the\nclients, the path to the certificate and key generated for the producer must\nbe provided as arguments, as well as the CA's root certificate.\n\nWhen using the SASL_PLAINTEXT and SASL_SSL protocols, the sasl_mechanism can be\noptionally configured and is set to PLAIN by default. Valid values for sasl_mechanism\nare: PLAIN, GSSAPI, OAUTHBEARER, SCRAM-SHA-256, and SCRAM-SHA-512.\n\nIf GSSAPI is used for the sasl_mechanism, you will need to additionally install\npython-gssapi and the necessary C library\nKerberos dependencies.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "680": {"text": "If the ssl_check_hostname parameter is enabled, the clients will verify\nif the broker's hostname matches the certificate. It's used on client's connections\nand inter-broker connections to prevent man-in-the-middle attacks.\n\nAdding a Kafka Event Broker Using the Endpoint Configuration#\n\nYou can instruct Rasa to stream all events to your Kafka event broker by adding an event_broker section to your\nendpoints.yml.\n\nUsing the SASL_PLAINTEXT protocol the endpoints file must have the following entries:\n\nCopyevent_broker:  type: kafka  security_protocol: SASL_PLAINTEXT  topic: topic  url: localhost  partition_by_sender: True  sasl_username: username  sasl_password: password  sasl_mechanism: PLAIN\n\n\nUsing the PLAINTEXT protocol the endpoints file must have the following entries:\n\nCopyevent_broker:  type: kafka  security_protocol: PLAINTEXT  topic: topic  url: localhost  client_id: kafka-python-rasa\n\n\nIf using the SSL protocol, the endpoints file should look like:\n\nCopyevent_broker:  type: kafka  security_protocol: SSL  topic: topic  url: localhost  ssl_cafile: CARoot.pem  ssl_certfile: certificate.pem  ssl_keyfile: key.pem  ssl_check_hostname: True\n\nIf using the SASL_SSL protocol, the endpoints file should look like:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "681": {"text": "If using the SASL_SSL protocol, the endpoints file should look like:\n\nCopyevent_broker:  type: kafka  security_protocol: SASL_SSL  topic: topic  url: localhost  sasl_username: username  sasl_password: password  sasl_mechanism: PLAIN  ssl_cafile: CARoot.pem  ssl_certfile: certificate.pem  ssl_keyfile: key.pem  ssl_check_hostname: True\n\nSQL Event Broker#\n\nIt is possible to use an SQL database as an event broker. Connections to databases are established using\nSQLAlchemy, a Python library which can interact with many\ndifferent types of SQL databases, such as SQLite,\nPostgreSQL and more. The default Rasa installation allows connections to SQLite\nand PostgreSQL databases. To see other options, please see the\nSQLAlchemy documentation on SQL dialects.\n\nAdding a SQL Event Broker Using the Endpoint Configuration#\n\nTo instruct Rasa to save all events to your SQL event broker, add an event_broker section to your\nendpoints.yml. For example, a valid SQLite configuration\ncould look like this:\n\nendpoints.ymlCopyevent_broker:  type: SQL  dialect: sqlite  db: events.db\n\nPostgreSQL databases can be used as well:\n\nendpoints.ymlCopyevent_broker:  type: SQL  url: 127.0.0.1  port: 5432  dialect: postgresql  username: myuser  password: mypassword  db: mydatabase\n\nWith this configuration applied, Rasa will create a table called events on the database,\nwhere all events will be added.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "682": {"text": "FileEventBroker#\n\nIt is possible to use the FileEventBroker as an event broker. This implementation will log events to a file in json format.\nYou can provide a path key in the endpoints.yml file if you wish to override the default file name: rasa_event.log.\n\nCustom Event Broker#\n\nIf you need an event broker which is not available out of the box, you can implement your own.\nThis is done by extending the base class EventBroker.\n\nYour custom event broker class must also implement the following base class methods:\n\nfrom_endpoint_config: creates an EventBroker object from the endpoint configuration.\n(source code - see for signature).publish: publishes a json-formatted Rasa event into an event queue.\n(source code - see for signature).is_ready: determine whether or not the event broker is ready. (source code - see for signature).close: close the connection to an event broker. (source code - see for signature).\n\nConfiguration#\n\nPut the module path to your custom event broker and the parameters you require in your endpoints.yml:\n\nendpoints.ymlCopyevent_broker:  type: path.to.your.module.Class  url: localhost  a_parameter: a value  another_parameter: another value\n\nPrevious\u00ab Tracker StoresNextModel Storage \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "683": {"text": "Version: 3.x\n\nModel Storage\n\nModels can be stored in different places after you trained your assistant. This\npage explains how to configure Rasa to load your models.\n\n\nYou can load your trained model in three different ways:\n\nLoad the model from your local disk (see Load Model from Disk)Fetch the model from your own HTTP server (see Load Model from Server)Fetch the model from cloud storage like S3 (see Load Model from Cloud)\n\nBy default all commands of Rasa's CLI will load models from your local disk.\n\nLoad Model from Disk#\n\nBy default models will be loaded from your local disk. You can specify the path\nto your model with the --model parameter:\n\nCopyrasa run --model models/20190506-100418.tar.gz\n\nIf you want to load the latest model in a directory, you can specify\na directory instead of a file:\n\nCopyrasa run --model models/\n\nRasa will check all the models in that directory and load the one that was trained\nmost recently.\n\nIf you don't specify a --model argument, Rasa will look for models in the  models/ directory. The two following calls\nwill load the same model:\n\nCopy# this command will load the same modelrasa run --model models/# ... as this command (using defaults)rasa run\n\nLoad Model from Server#\n\nYou can configure the Rasa server to regularly fetch\na model from a server and deploy it.\n\nHow to Configure Rasa#\n\nYou can configure the HTTP server to fetch models from another URL\nby adding it to your endpoints.yml:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "684": {"text": "endpoints.ymlCopymodels:  url: http://my-server.com/models/default  wait_time_between_pulls: 10   # In seconds, optional, default: 100\n\nThe server will query the url for a zipped model every wait_time_between_pulls\nseconds.\n\nIf you want to pull the model only when starting up the server, you can set the time\nbetween pulls to null:\n\nendpoints.ymlCopymodels:  url: http://my-server.com/models/default  wait_time_between_pulls: null  # fetches model only once\n\nHow to Configure Your Server#\n\nRasa will send a GET request to the URL you specified in the\nendpoints.yml, e.g. http://my-server.com/models/default in the above examples.\nYou can use any URL.\nThe GET request will contain an If-None-Match header that contains the\nmodel hash of the last model it downloaded. An example request from Rasa Open\nSource to your server would look like this:\n\nCopycurl --header \"If-None-Match: d41d8cd98f00b204e9800998ecf8427e\" http://my-server.com/models/default\n\nThe response of your server to this GET request should be one of these:\n\na status code of 200, a zipped Rasa Model and set the ETag header in\nthe response to the hash of the model.a status code of 304 and an empty response if the If-None-Match\nheader of the request matches the model you want your server to return.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "685": {"text": "Rasa uses the If-None-Match and ETag headers for caching. Setting\nthe headers will avoid re-downloading the same model over and over, saving\nbandwidth and compute resources.\n\nLoad Model from Cloud#\n\nYou can also configure the Rasa server to fetch your model from a remote storage:\n\nCopyrasa run --model 20190506-100418.tar.gz --remote-storage aws\n\nThe zipped model will be downloaded from cloud storage, unzipped, and deployed.\nRasa supports loading models from:\n\nAmazon S3,Google Cloud Storage,Azure Storage andcustom implementations for\nOther Remote Storages.\n\nModels need to be stored in the root folder of the storage service. Currently, it is\nnot possible to manually specify the path on the cloud storage.\n\nAmazon S3 Storage#\n\nAmazon S3 is supported using the boto3 package which you need to install\nas an additional dependency using pip3:\n\nCopypip3 install boto3\n\nFor Rasa to be able to authenticate and download the model, you need to set the\nfollowing environment variables before running any command requiring the storage:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "686": {"text": "AWS_SECRET_ACCESS_KEY: environment variable containing your AWS S3 secret access keyAWS_ACCESS_KEY_ID: environment variable containing your AWS S3 access key IDAWS_DEFAULT_REGION: environment variable specifying the region of your AWS S3 bucketBUCKET_NAME: environment variable specifying the S3 bucketAWS_ENDPOINT_URL: The complete URL to use for the AWS S3 requests. You need to\nspecify a complete URL (including the \"http/https\" scheme), for example: https://s3.amazonaws.com.\nNote that by setting the bucket name to BUCKET_NAME environment variable, you should not provide the bucket or\nobject URL to AWS_ENDPOINT_URL.\n\nOnce all environment variables are set, you can start the Rasa server with\nremote-storage option set to aws:\n\nCopyrasa run --model 20190506-100418.tar.gz --remote-storage aws\n\nGoogle Cloud Storage#\n\nGoogle Cloud Storage (GCS) is supported using the google-cloud-storage package\nwhich you need to install as an additional dependency using pip3:\n\nCopypip3 install google-cloud-storage\n\nIf you are running Rasa on Google App Engine or Compute Engine, the auth\ncredentials are already set up (for the GCS in the same project). In this case,\nyou can skip setting any additional environment variables.\n\nIf you are running locally or on a machine outside of GAE or GCE you need to\nprovide the authentication details to Rasa manually:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "687": {"text": "Check out the GCS documentation\nand follow the descriptions on \"Creating a service account\" and\n\"Setting the environment variable.\"After you have completed the GCS instructions, you should have set an environment\nvariable called GOOGLE_APPLICATION_CREDENTIALS to the path of a service account\nkey file with access to your GCS.\n\nOnce all environment variable is set, you can start the Rasa server with\nremote-storage option set to gcs:\n\nCopyrasa run --model 20190506-100418.tar.gz --remote-storage gcs\n\nAzure Storage#\n\nAzure Storage is supported using the azure-storage-blob package which you need\nto install as an additional dependency using pip3:\n\nCopypip3 install azure-storage-blob\n\nFor Rasa to be able to authenticate and download the model, you need to set the\nfollowing environment variables before running any command requiring the storage:\n\nAZURE_CONTAINER: environment variable containing your azure container nameAZURE_ACCOUNT_NAME: environment variable containing your azure account nameAZURE_ACCOUNT_KEY: environment variable containing your account key\n\nOnce all environment variables are set, you can start the Rasa server with\nremote-storage option set to azure:\n\nCopyrasa run --model 20190506-100418.tar.gz --remote-storage azure\n\nOther Remote Storages#\n\nIf you want to use any other Cloud Storage, you can provide your own python\nimplementation of the rasa.nlu.persistor.Persistor class.\n\nYou can start the Rasa server with remote-storage option set to\nthe module path of your persistor implementation:\n\nCopyrasa run --remote-storage <your module>.<class name>", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "688": {"text": "Copyrasa run --remote-storage <your module>.<class name>\n\nPrevious\u00ab Event BrokersNextLock Stores \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "689": {"text": "Version: 3.x\n\nLock Stores\n\nRasa uses a ticket lock mechanism to ensure that incoming messages for a given\nconversation ID are processed in the right order, and locks conversations while\nmessages are actively processed. This means multiple Rasa servers can\nbe run in parallel as replicated services, and clients do not necessarily need to\naddress the same node when sending messages for a given conversation ID.\n\nInMemoryLockStore (default)#\n\nDescriptionInMemoryLockStore is the default lock store. It maintains conversation locks\nwithin a single process.noteThis lock store should not be used when multiple Rasa servers are run\nparallel.ConfigurationTo use the InMemoryTrackerStore no configuration is needed.\n\nConcurrentRedisLockStore#\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nConcurrentRedisLockStore is a new lock store that uses Redis as a persistence layer and is safe for use with multiple Rasa server replicas.\nSee the migration section to learn how to switch to this lock store.\n\nDescription#\n\nThe ConcurrentRedisLockStore uses Redis as a persistence layer for instances of issued tickets and the last issued ticket number.\n\nThe ticket number initialization begins at 1, in contrast to that of theRedisLockStore which begins at 0.\nIf the ticket expires, the ticket number will not be reassigned to future tickets; as a result ticket numbers are unique to ticket instances.\nTicket numbers are incremented using the Redis atomic transaction INCR on the persisted last issued ticket number.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "690": {"text": "The ConcurrentRedisLockStore ensures that only one Rasa instance can handle a conversation at any point in time.\nTherefore, this Redis implementation of the LockStore can handle messages received in parallel for the same conversation by different Rasa servers\nThis is the recommended lock store for running a replicated set of Rasa servers.\n\nConfiguration#\n\nTo set up Rasa with Redis the following steps are required:\n\nStart your Redis instanceAdd required configuration to your endpoints.yml\n\nCopylock_store:    type: rasa_plus.components.concurrent_lock_store.ConcurrentRedisLockStore    host: <host of the redis instance, e.g. localhost>    port: <port of your redis instance, usually 6379>    password: <password used for authentication>    db: <number of your database within redis, e.g. 0>    key_prefix: <alphanumeric value to prepend to lock store keys>\n\nTo start the Rasa Core server using your Redis backend, add the --endpoints\nflag, e.g.:Copyrasa run -m models --endpoints endpoints.yml\n\nParameters#\n\nurl (default: localhost): The url of your redis instanceport (default: 6379): The port which redis is running ondb (default: 1): The number of your redis databasekey_prefix (default: None): The prefix to prepend to lock store keys. Must\nbe alphanumericpassword (default: None): Password used for authentication\n(None equals no authentication)use_ssl (default: False): Whether or not the communication is encrypted -socket_timeout (default: 10): Time in seconds after which an\nerror is raised if Redis doesn't answer\n\nMigration Guide#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "691": {"text": "Migration Guide#\n\nTo switch from the RedisLockStore to the ConcurrentRedisLockStore, specify the complete module path to the ConcurrentRedisLockStore class as type in endpoints.yml:\n\nCopylock_store:    type: rasa_plus.components.concurrent_lock_store.ConcurrentRedisLockStore    host: <host of the redis instance, e.g. localhost>    port: <port of your redis instance, usually 6379>    password: <password used for authentication>    db: <number of your database within redis, e.g. 0>    key_prefix: <alphanumeric value to prepend to lock store keys>\n\nYou must replace the url field in the redis lock store configuration with a field host containing the hostname of the redis instance.\n\nNo database migration is required when switching to the ConcurrentRedisLockStore. You can use the same Redis instance and database number as you did previously when using the RedisLockStore.\nYou may want to delete all the preexisting keys if using the same Redis database number.\nThese former key-value items are no longer required by the ConcurrentRedisLockStore and the database can be cleared.\n\nThere is no overlap in key-value items stored when using the RedisLockStore and the ConcurrentRedisLockStore, because the RedisLockStore persists serialized TicketLock instances while the ConcurrentRedisLockStore instead stores individual Ticket instances, as well as the last issued ticket number.\nThe ConcurrentRedisLockStore recreates the TicketLock from the persisted Ticket instances, which allows it to handle concurrent messages for the same conversation ID.\n\nRedisLockStore#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "692": {"text": "RedisLockStore#\n\nDescriptionRedisLockStore maintains conversation locks using Redis as a persistence layer.\nThis is the recommended lock store for running a replicated set of Rasa servers.ConfigurationTo set up Rasa with Redis the following steps are required:Start your Redis instanceAdd required configuration to your endpoints.ymlCopylock_store:    type: \"redis\"    url: <url of the redis instance, e.g. localhost>    port: <port of your redis instance, usually 6379>    password: <password used for authentication>    db: <number of your database within redis, e.g. 0>    key_prefix: <alphanumeric value to prepend to lock store keys>To start the Rasa Core server using your Redis backend, add the --endpoints\nflag, e.g.:Copyrasa run -m models --endpoints endpoints.ymlParametersurl (default: localhost): The url of your redis instanceport (default: 6379): The port which redis is running ondb (default: 1): The number of your redis databasekey_prefix (default: None): The prefix to prepend to lock store keys. Must\nbe alphanumericpassword (default: None): Password used for authentication\n(None equals no authentication)use_ssl (default: False): Whether or not the communication is encryptedssl_keyfile (default: None): Path to an ssl private keyssl_certfile (default: None): Path to an ssl certificatessl_ca_certs (default: None): The path to a file of concatenated CA certificates in PEM formatsocket_timeout (default: 10): Time in seconds after which an\nerror is raised if Redis doesn't answer\n\nCustom Lock Store#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "693": {"text": "Custom Lock Store#\n\nIf you need a lock store which is not available out of the box, you can implement your own.\nThis is done by extending the base class LockStore.\n\nYour custom lock store class must also implement the following methods:\n\nget_lock: fetches lock for conversation_id from storage; requires conversation_id text parameter and returns TicketLock instance.\n(source code - see for signature).save_lock: commit lock object to storage; requires lock parameter which is of type TicketLockand returns None.\n(source code - see for signature).delete_lock: deletes lock for conversation_id from storage; requires conversation_id text parameter and returns None.\n(source code - see for signature).\n\nConfiguration#\n\nPut the module path to your custom event broker and the parameters you require in your endpoints.yml:\n\nendpoints.ymlCopylock_store:  type: path.to.your.module.Class  url: localhost  a_parameter: a value  another_parameter: another value\n\nPrevious\u00ab Model StorageNextSecrets Managers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "694": {"text": "Version: 3.x\n\nSecrets Managers\n\nYou can store your assistant's secrets in an external credentials manager. Rasa Pro currently supports credentials manager for the Tracker Store\n\nRasa Pro Only\n\nRasa Pro LicenseYou'll need a license to get started with Rasa Pro. Talk with Sales\n\nAvailable in Rasa Pro from 3.5.0\n\nRasa Pro supports the following secrets managers:\n\nHashiCorp Vault\n\nCurrently, Rasa Pro supports safeguarding credentials for the following services:\n\nTracker Stores\n\nHashiCorp Vault Secrets Manager#\n\nUse Vault Secrets Manager to store credentials used to authenticate access to external services.\nThe credentials are stored in a Vault instance and can be encrypted at rest.\nTo store credentials in a Vault instance, you can read the official Vault docs\nStoring secrets in Vault.\n\nYou can also encrypt credentials at rest with\nVault Transit Engine.\n\nnoteExpiring tokens need to be renewed periodically, and the renewal process is done over the network,\nRasa Pro will try to renew the token 15 seconds before it expires.\nIf the token's time-to-live (TTL) is less than 15 seconds, we will try to renew it after 1 second,\nbut it might fail due to network latency.Rasa Pro has a built-in retry mechanism for renewing the token.If the token is not renewed successfully it will be considered expired\nand Rasa Pro will not be able to access the secrets.\nYou will need to create a new renewable token and restart Rasa Pro with new token.\n\nAuthentication#\n\nRasa Pro can authenticate to Vault through\nToken authentication.\n\nBoth expiring and non-expiring (so called, root tokens) tokens are supported.\nRasa Pro will automatically renew the token if it is expiring.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "695": {"text": "How to configure access to Vault#\n\nAccess to Vault secrets manager can be configured with environment variables\nand through endpoints.yml configuration file.\n\nEnvironment variables and endpoints.yml configuration file are merged together\nand the values from the environment variables take precedence.\n\nThe following environment variables are available:\n\nEnvironment VariableDescriptionDefaultSECRET_MANAGERRequired. The secrets manager to use. Currently only \"vault\" is supportedvaultVAULT_HOSTRequired. The address of the vault serverVAULT_TOKENRequired. token to authenticate to the vault serverVAULT_RASA_SECRETS_PATHPath to the secrets in the vault serverrasa-secretsVAULT_TRANSIT_MOUNT_POINTIf transit secrets engine is enabled, set this to mount point of the transit engine\n\nTo configure the Vault secrets manager, you can fill the following section in endpoints.yml file:\n\nCopysecrets_manager:    type: vault # required - the secrets manager to use    token: <token> # required - token to authenticate to the vault server    url: \"http://localhost:1234\" # required - the address of the vault server    secrets_path: rasa-secrets  # path to the secrets in the vault server if not set it defaults to `rasa-secrets`    transit_mount_point: transit # if transit secrets engine is enabled, set this to mount point of the transit engine\n\nStore access credentials in environment variables#\n\nA simple example on how to combine environment variables and endpoints.yml configuration file\nwould be to store access token in the environment variable and the rest of the configuration\nin the endpoints.yml file.\n\nCopy# environment variablesVAULT_TOKEN=<token used to authenticate to Vault>", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "696": {"text": "Copysecrets_manager:    type: vault    url: \"http://localhost:1234\"    secrets_path: rasa-secrets  # if not set it defaults to `rasa-secrets`    transit_mount_point: transit # if you have enabled transit secrets engine, and you want to use it\n\nHow to configure Tracker Store with Vault Secrets Manager#\n\nConfigure Rasa to access the Vault instanceCheckout the How to configure access to Vault section for more details.Configure Rasa to use the Vault secrets manager to fetch credentials for the tracker storeCopytracker_store:      type: SQL      url: localhost:5432      username:            source: secrets_manager.vault            secret_key: sql_store_username      password:            source: secrets_manager.vault            secret_key: sql_store_password\n\nPrevious\u00ab Lock StoresNextUsing NLU Only \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "697": {"text": "Version: 3.x\n\nUsing NLU Only\n\nFind out how to use only Rasa NLU as a standalone NLU service for your chatbot or virtual assistant.\n\nIf you want to use Rasa only as an NLU component, you can!\n\nTraining NLU-only models#\n\nTo train an NLU model only, run:\n\nCopyrasa train nlu\n\nThis will look for NLU training data files in the data/ directory\nand saves a trained model in the models/ directory.\nThe name of the model will start with nlu-.\n\nTesting your NLU model on the command line#\n\nTo try out your NLU model on the command line, run the following command:\n\nCopyrasa shell nlu\n\nThis will start the rasa shell and ask you to type in a message to test.\nYou can keep typing in as many messages as you like.\n\nAlternatively, you can leave out the nlu argument and pass in a nlu-only model directly:\n\nCopyrasa shell -m models/nlu-20190515-144445.tar.gz\n\nRunning an NLU server#\n\nTo start a server with your NLU model, pass in the model name at runtime:\n\nCopyrasa run --enable-api -m models/nlu-20190515-144445.tar.gz\n\nYou can then request predictions from your model using the /model/parse endpoint.\nTo do this, run:\n\nCopycurl localhost:5005/model/parse -d '{\"text\":\"hello\"}'\n\nPrevious\u00ab Secrets ManagersNextNLG Servers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "698": {"text": "Version: 3.x\n\nNLG Servers\n\nRetraining the bot just to change the text copy can be suboptimal for\nsome workflows. That's why Rasa also allows you to outsource the\nresponse generation and separate it from the dialogue learning.\n\nThe assistant will still learn to predict actions and to react to user input\nbased on past dialogues, but the responses it sends back to the user\nwill be generated outside of Rasa.\n\nWhen the assistant wants to send a message to the user, it will call an\nexternal HTTP server that you define.\n\nResponding to Requests#\n\nRequest Format#\n\nWhen your model predicts that your bot should send a response to the user,\nit will send a request to your server, giving you the information\nrequired to select or generate a response.\n\nThe body of the POST request sent to your NLG endpoint will be structured\nlike this:\n\nNew in 3.6We have added an ids field to the request body.\nThis field contains a list of response variation IDs.\nYou can use this information to compose/select a proper response variation on your NLG server.\nIn case you are using responses with Conditional Response Variations,\non the NLG server side, you must implement the logic which will use content of the slots from\ntracker['slots'] along side the IDs from ids field to select the proper response variation.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "699": {"text": "Copy{ \"response\":\"utter_what_can_do\", \"arguments\":{  }, \"ids\": [\"<response_variation_id_1>\", \"<response_variation_id_2>\"], \"tracker\":{ \"sender_id\":\"user_0\", \"slots\":{  }, \"latest_message\":{ \"intent\":{ \"id\":3014457480322877053, \"name\":\"greet\", \"confidence\":0.9999994039535522 }, \"entities\":[  ], \"text\":\"Hello\", \"message_id\":\"94838d6f49ff4366b254b6f6d23a90cf\", \"metadata\":{  }, \"intent_ranking\":[ { \"id\":3014457480322877053, \"name\":\"greet\", \"confidence\":0.9999994039535522 }, { \"id\":8842445304628198686, \"name\":\"ask_forget_reminders\", \"confidence\":5.675940428773174e-07 }, { \"id\":-2566831912141022859, \"name\":\"bye\", \"confidence\":3.418941929567154e-08 }, { \"id\":8340513453672591403, \"name\":\"ask_id\", \"confidence\":2.5274500714544956e-08 }, { \"id\":5822154213939471096, \"name\":\"ask_remind_call\", \"confidence\":2.4177523982871207e-08 } ] }, \"latest_event_time\":1599476297.694504, \"followup_action\":null, \"paused\":false, \"events\":[ { \"event\":\"action\", \"timestamp\":1599476297.68784, \"name\":\"action_session_start\",", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "700": {"text": "\"name\":\"action_session_start\", \"policy\":null, \"confidence\":null }, { \"event\":\"session_started\", \"timestamp\":1599476297.6878452 }, { \"event\":\"action\", \"timestamp\":1599476297.6878562, \"name\":\"action_listen\", \"policy\":null, \"confidence\":null }, { \"event\":\"user\", \"timestamp\":1599476297.694504, \"text\":\"Hello\", \"parse_data\":{ \"intent\":{ \"id\":3014457480322877053, \"name\":\"greet\", \"confidence\":0.9999994039535522 }, \"entities\":[  ], \"text\":\"Hello\", \"message_id\":\"94838d6f49ff4366b254b6f6d23a90cf\", \"metadata\":{  }, \"intent_ranking\":[ { \"id\":3014457480322877053, \"name\":\"greet\", \"confidence\":0.9999994039535522 }, { \"id\":8842445304628198686, \"name\":\"ask_forget_reminders\", \"confidence\":5.675940428773174e-07 }, { \"id\":-2566831912141022859, \"name\":\"bye\", \"confidence\":3.418941929567154e-08 }, { \"id\":8340513453672591403, \"name\":\"ask_id\", \"confidence\":2.5274500714544956e-08 }, { \"id\":5822154213939471096, \"name\":\"ask_remind_call\", \"confidence\":2.4177523982871207e-08 } ] }, \"input_channel\":\"rest\",", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "701": {"text": "} ] }, \"input_channel\":\"rest\", \"message_id\":\"94838d6f49ff4366b254b6f6d23a90cf\", \"metadata\":{  } } ], \"latest_input_channel\":\"rest\", \"active_loop\":{  }, \"latest_action_name\":\"action_listen\" }, \"channel\":{ \"name\":\"collector\" }}", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "702": {"text": "Here is an overview of the high-level keys in the post request: \n\nKeyDescriptionresponseThe name of the response predicted by Rasa.idsA list of response variation IDs.argumentsOptional keyword arguments that can be provided by custom actions.trackerA dictionary containing the entire conversation history.channelThe output channel this message will be sent to.\n\nYou can use any or all of this information to decide\nhow to generate your response.\n\nResponse Format#\n\nThe endpoint needs to respond with the generated response.\nRasa will then send this response back to the user.\n\nBelow are the possible keys of a response and their (empty) types: \n\nCopy{ \"text\": \"Some text\", \"buttons\": [], \"image\": null,  # string of image URL \"elements\": [], \"attachments\": [],  \"custom\": {}}\n\nYou can choose to provide just text, or a combination of different types of rich responses.\nJust like the responses defined in the domain file, a response needs to contain at the very least\neither text or custom to be a valid response. \n\nCalling responses from storiesIf you use an external NLG service, you don't need to specify the\nresponses under responses in the domain. However, you still need to add the response names\nto the actions list of the domain if you want to call them directly from\nyour stories.\n\nConfiguring the Server URL#\n\nTo tell Rasa where to find your NLG server, add the URL to your endpoints.yml: \n\nendpoints.ymlCopynlg:  url: http://localhost:5055/nlg\n\nIf your NLG server is protected and Rasa will need authentication to\naccess it, you can configure authentication in the endpoints:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "703": {"text": "endpoints.ymlCopynlg:  url: http://localhost:5055/nlg  #   # You can also specify additional parameters, if you need them:  # headers:  #   my-custom-header: value  # token: \"my_authentication_token\"  # will be passed as a GET parameter  # basic_auth:  #   username: user  #   password: pass\n\nPrevious\u00ab Using NLU OnlyNextIntroduction to Rasa Action Server \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "704": {"text": "Version: 3.x\n\nIntroduction to Rasa Action Server\n\nA Rasa action server runs custom actions for a Rasa Open Source\nconversational assistant.\n\nHow it works#\n\nWhen your assistant predicts a custom action, the Rasa server sends\na POST request to the action server with a json payload including\nthe name of the predicted action,\nthe conversation ID, the contents of the tracker and the contents of the domain.\n\nWhen the action server finishes running a custom action, it returns a json payload\nof responses and events.\nSee the API spec for details about the request and response payloads.\n\nThe Rasa server then returns the responses to the user and adds the events\nto the conversation tracker.\n\nSDKs for Custom Actions#\n\nYou can use an action server written in any language to run your custom actions, as long as it implements\nthe required APIs.\n\nRasa SDK (Python)#\n\nRasa SDK is a Python SDK for running custom actions. Besides implementing\nthe required APIs, it offers methods for interacting with the conversation tracker\nand composing events and responses.\nIf you don't yet have an action server and don't need it\nto be in a language other than Python, using the Rasa SDK will be the easiest way\nto get started.\n\nOther Action Servers#\n\nIf you have legacy code or existing business logic in another language,\nyou may not want to use the Rasa SDK. In this case you can write\nyour own action server in any language you want. The only requirement\nfor the action server is that it provide a /webhook endpoint which accepts HTTP POST requests\nfrom the Rasa server and returns a payload of events and responses.\nSee the API spec for details about the required /webhook endpoint.\n\nPrevious\u00ab NLG ServersNextActions \u00bb", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "705": {"text": "Previous\u00ab NLG ServersNextActions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "706": {"text": "Version: 3.x\n\nActions\n\nWhen a Rasa assistant calls a custom action, it sends a request to the action server.\nRasa only knows about whatever events and responses come back in the request response;\nit's up to the action server to call the correct code based on the action name that Rasa provides.\n\nTo better understand what happens when Rasa calls a custom action, consider\nthe following example:\n\nYou have deployed a weather bot to both Facebook and Slack. The user\ncan ask for the weather with the intent ask_weather. There is a slot location\nwhich will be filled if the user has specified a location.\nThe action action_tell_weather will use an API to get the weather forecast ,\nusing a default location if the user doesn't specify one.\nThe action will set the temperature to the maximum temperature of the weather forecast.\nThe message returned will differ according to the channel they are using. \n\nCompressed body in HTTP requestsRasa has the capability to compress the HTTP request body for custom actions.\nBy default, this option is off to keep backward compatibility with older versions of\ncustom action servers which did not receive the compressed body in the HTTP request for custom actions.\nTo enable this option, set environment variable COMPRESS_ACTION_SERVER_REQUEST to True.Rasa SDK versions 3.2.2, 3.3.1, 3.4.1 and upwards,\nsupport both compressed and non-compressed body in the HTTP request for\nrunning custom action server. There is no additional setup required.\n\nCustom Action Input#\n\nYour action server receives the following payload from the Rasa server:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "707": {"text": "Copy{ \"next_action\": \"action_tell_weather\", \"sender_id\": \"2687378567977106\", \"tracker\": { \"sender_id\": \"2687378567977106\", \"slots\": { \"location\": null, \"temperature\": null }, \"latest_message\": { \"text\": \"/ask_weather\", \"intent\": { \"name\": \"ask_weather\", \"confidence\": 1 }, \"intent_ranking\": [ { \"name\": \"ask_weather\", \"confidence\": 1 } ], \"entities\": [] }, \"latest_event_time\": 1599850576.655345, \"followup_action\": null, \"paused\": false, \"events\": [ { \"event\": \"action\", \"timestamp\": 1599850576.654908, \"name\": \"action_session_start\", \"policy\": null, \"confidence\": null }, { \"event\": \"session_started\", \"timestamp\": 1599850576.654916 }, { \"event\": \"action\", \"timestamp\": 1599850576.654928, \"name\": \"action_listen\", \"policy\": null, \"confidence\": null }, { \"event\": \"user\", \"timestamp\": 1599850576.655345, \"text\": \"/ask_weather\", \"parse_data\": { \"text\": \"/ask_weather\", \"intent\": { \"name\": \"ask_weather\", \"confidence\": 1 }, \"intent_ranking\": [ { \"name\": \"ask_weather\", \"confidence\": 1 } ], \"entities\": [] }, \"input_channel\": \"facebook\", \"message_id\": \"3f2f2317dada4908b7a841fd3eab6bf9\", \"metadata\": {} } ], \"latest_input_channel\": \"facebook\",", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "708": {"text": "\"metadata\": {} } ], \"latest_input_channel\": \"facebook\", \"active_form\": {}, \"latest_action_name\": \"action_listen\" }, \"domain\": { \"config\": { \"store_entities_as_slots\": true }, \"session_config\": { \"session_expiration_time\": 60, \"carry_over_slots_to_new_session\": true }, \"intents\": [ { \"greet\": { \"use_entities\": true } }, { \"ask_weather\": { \"use_entities\": true } } ], \"entities\": [], \"slots\": { \"location\": { \"type\": \"rasa.core.slots.UnfeaturizedSlot\", \"initial_value\": null, \"auto_fill\": true }, \"temperature\": { \"type\": \"rasa.core.slots.UnfeaturizedSlot\", \"initial_value\": null, \"auto_fill\": true } }, \"responses\": { \"utter_greet\": [ { \"text\": \"Hey! How are you?\" } ] }, \"actions\": [ \"action_tell_weather\", \"utter_greet\" ], \"forms\": [] }, \"version\": \"2.0.0\"}", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "709": {"text": "next_action#\n\nThe next_action field tells your action server what action to run.\nYour actions don't have to be implemented as classes, but they do have\nto be callable by name. \n\nIn the example case, your action server should run the action action_tell_weather.\n\nsender_id#\n\nThe sender_id tells you the unique ID of the\nuser having the conversation. Its format varies according to the input channel.\nWhat it tells you about the user also depends on the input channel and how\nthe user is identified by the channel. \n\nIn the example case, the sender_id is not used for anything.\n\ntracker#\n\nThe tracker contains information about the conversation, including a history of events\nand a record of all slots:\n\nsender_id: The same sender_id as is available in the top level of the payloadslots: Each slot in your bot's domain and its value at the current timelatest_message: The attributes of the latest messagelatest_event_time: The timestamp at which the last event was added to the trackerfollowup_action: The action called was a forced follow up actionpaused: Whether the conversation is currently pausedevents: A list of all previous eventslatest_input_channel: The input channel from which the last user message was receivedactive_form: The name of the currently active form, if anylatest_action_name: The name of the last action the bot executed\n\nIn the example case, your custom action uses the value of the location slot (if it is set)\nto get the weather forecast. It also checks the latest_input_channel property\nand formats the message payload so that it will display correctly in Facebook Messenger.\n\ndomain#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "710": {"text": "domain#\n\nThe domain is a json representation of your domain.yaml file.\nIt is unlikely that a custom action\nwill refer to its contents, as they are static and do not indicate the state\nof the conversation. \n\nYou can control if an action should receive a domain or not.\nVisit selective-domain\n\nversion#\n\nThis is the version of the Rasa server. A custom action\nis also unlikely to refer to this, although you might use it in a\nverification step if your action server\nis only compatible with certain Rasa versions.\n\nCustom Action Output#\n\nThe Rasa server expects a dictionary of events and responses as a response\nto a custom action call. \n\nevents#\n\nEvents are how your action server can influence the conversation.\nIn the example case, your custom action should store the maximum temperature\nin the temperature slot, so it needs to return a slot event. To set the\nslot and do nothing else, your response payload would look like this:\n\nCopy { \"events\": [ { \"event\": \"slot\", \"timestamp\": null, \"name\": \"temperature\", \"value\": \"30\" } ], \"responses\": [] }\n\nNote that events will be applied to the tracker in the order you list them; with slot\nevents, the order won't matter, but with other event types it can.\n\nresponses#\n\nA response can be of any of the response types described in the\ndocumentation on rich responses.\nSee the response sample of the API spec for the expected formats. \n\nIn the example case, you want to send the user a message with the weather forecast.\nTo send a regular text message, the response payload would look like this:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "711": {"text": "Copy { \"events\": [ { \"event\": \"slot\", \"timestamp\": null, \"name\": \"temperature\", \"value\": \"30\" } ], \"responses\": [ { \"text\": \"This is your weather forecast!\" } ] }\n\nHowever, you want to make use of your channels' specific capabilities. Since\nthe latest_input_channel was Facebook, you add a response with\na custom payload that will be rendered as a media message according to Facebook's API spec.\nYour response payload then looks like this:\n\nCopy { \"events\": [ { \"event\": \"slot\", \"timestamp\": null, \"name\": \"temperature\", \"value\": \"30\" } ], \"responses\": [ { \"text\": \"This is your weather forecast!\" }, { \"attachment\": { \"type\": \"template\", \"payload\": { \"template_type\": \"media\", \"elements\": [ { \"media_type\": \"weather_forcast.gif\", \"attachment_id\": \"<id from facebook upload endpoint>\" } ] } } } ] }\n\nWhen this response is sent back to\nthe Rasa server, Rasa will apply the slot event and two responses to the tracker,\nand return both messages to the user.\n\nSpecial Action Types#\n\nThere are special action types that are automatically triggered under certain circumstances, namely default actions\nand  slot validation actions.\nThese special action types have predefined naming conventions that must be followed to maintain the automatic triggering behavior.\n\nYou can customize a default action by implementing a custom action with exactly the same name.\nPlease see the docs on default actions for the expected behavior of each action.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "712": {"text": "Slot validation actions are run on every user turn, depending on whether a form is active or not.\nA slot validation action that should run when a form is not active must be called action_validate_slot_mappings.\nA slot validation action that should run when a form is active must be called validate_<form name>.\nThese actions are expected to return SlotSet events only and to behave like the Rasa SDK ValidationAction class\nand FormValidationAction class respectively.\n\nPrevious\u00ab Introduction to Rasa Action ServerNextEvents \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "713": {"text": "Version: 3.x\n\nEvents\n\nConversations in Rasa are represented as a sequence of events. Custom actions can\ninfluence the course of a conversation by returning events in the response to the action server request.\n\nNot all events are typically returned by custom actions since\nthey are tracked automatically by Rasa (e.g. user messages).\nOthers events can only be tracked if they are returned by a custom action. \n\nEvent Types#\n\nslot#\n\nSets a slot on the tracker. It can set a slot to a value,\nor reset a slot by setting its value to null. \n\nAutomatic Tracking:\n\nWhen a slot is filled by an entity of the same name. \n\nA custom action is needed\nto set any slot not auto-filled by an entity. \n\nJSON:\n\nCopy{ \"event\": \"slot\", \"name\": \"departure_airport\",  \"value\": \"BER\"}\n\nParameters:\n\nname: Name of the slot to setvalue: Value to set the slot to. The datatype must match the type\nof the slot\n\nRasa Class: rasa.core.events.SlotSet\n\nreset_slots#\n\nResets all slots on the tracker to null. \n\nAutomatic Tracking: Never\n\nJSON:\n\nCopy{ \"event\": \"reset_slots\"}\n\nRasa Class: rasa.core.events.AllSlotsReset\n\nreminder#\n\nSchedules an intent to be triggered at a certain time in the future. \n\nAutomatic Tracking: Never\n\nJSON:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "714": {"text": "Automatic Tracking: Never\n\nJSON:\n\nCopy{ \"event\": \"reminder\", \"intent\": \"my_intent\", \"entities\": {\"entity1\": \"value1\", \"entity2\": \"value2\"}, \"date_time\": \"2018-09-03T11:41:10.128172\", \"name\": \"my_reminder\", \"kill_on_user_msg\": true,}\n\nParameters:\n\nintent: Intent which the reminder will trigger entities: Entities to send with the intentdate_time: Date at which the execution of the action should be triggered. This should either be in UTC or include a timezone.name: ID of the reminder. If there are multiple reminders with the same id only the last will be run.kill_on_user_msg: Whether a user message before the trigger time will abort the reminder\n\nRasa Class: rasa.core.events.ReminderScheduled\n\ncancel_reminder#\n\nCancels a scheduled reminder or reminders.\nAll reminders which match the supplied parameters will be cancelled.\n\nAutomatic Tracking: Never\n\nJSON:\n\nCopy{ \"event\": \"cancel_reminder\", \"name\": \"my_reminder\", \"intent\": \"my_intent\", \"entities\": [ {\"entity\": \"entity1\", \"value\": \"value1\"}, {\"entity\": \"entity2\", \"value\": \"value2\"}, ], \"date_time\": \"2018-09-03T11:41:10.128172\",}\n\nParameters:\n\nintent: Intent which the reminder will  trigger entities: Entities to send with the intentdate_time: Date at which the execution of the action should be triggered. This should either be in UTC or include a timezone.name: ID of the reminder.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "715": {"text": "Rasa Class: rasa.core.events.ReminderCancelled\n\npause#\n\nStops the bot from responding to user messages. The conversation will remain paused and no actions will be predicted until  the conversation is explicitly resumed.\n\nAutomatic Tracking: Never\n\nJSON:\n\nCopy{ \"event\": \"pause\"}\n\nRasa Class: rasa.core.events.ConversationPaused\n\nresume#\n\nResume a previously paused conversation. Once this event is added to the tracker the bot will start predicting actions again. It will not predict actions for user messages received while the conversation was paused.\n\nAutomatic Tracking: Never\n\nJSON:\n\nCopy{ \"event\": \"resume\"}\n\nRasa Class: rasa.core.events.ConversationResumed\n\nfollowup#\n\nForce a follow up action, bypassing action prediction. \n\nAutomatic Tracking: Never\n\nJSON:\n\nCopy{ \"event\": \"followup\", \"name\": \"my_action\"}\n\nParameters:\n\nname: The name of the follow up action that will be executed.\n\nRasa Class: rasa.core.events.FollowupAction\n\nrewind#\n\nReverts all side effects of the last user message and removes the last user event from the tracker. \n\nAutomatic Tracking: \n\nJSON:\n\nCopy{ \"event\": \"rewind\"}\n\nRasa Class: rasa.core.events.UserUtteranceReverted\n\nundo#\n\nUndoes all side effects of the last bot action and removes the last bot action from the tracker. \n\nAutomatic Tracking: \n\nJSON:\n\nCopy{ \"event\": \"undo\"}\n\nRasa Class: rasa.core.events.ActionReverted", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "716": {"text": "Rasa Class: rasa.core.events.ActionReverted\n\nrestart#\n\nResets the tracker. After a restart event, there will be no conversation history and no record of the restart.\n\nAutomatic Tracking: \n\nWhen the /restart default intent is triggered.\n\nJSON:\n\nCopy{ \"event\": \"restart\"}\n\nRasa Class: rasa.core.events.Restarted\n\nsession_started#\n\nStarts a new conversation by resetting the tracker and running the default action ActionSessionStart. This action will by default carry over existing SlotSet events to a new conversation session. You can configure this behaviour in your domain file under session_config.\n\nAutomatic Tracking: \n\nWhenever a user starts a conversation with the bot for the first time.Whenever a session expires (after session_expiration_time specified in the domain), and the user resumes their conversation\n\nRestarting a conversation with restart event does not automatically cause a session_started event. \n\nJSON:\n\nCopy{ \"event\": \"session_started\"}\n\nRasa Class: rasa.core.events.SessionStarted\n\nuser#\n\nThe user sent a message to the bot. \n\nAutomatic Tracking: \n\nWhen the user sends a message to the bot.\n\nThis event is not usually returned by a custom action.\n\nJSON:\n\nCopy{ \"event\": \"user\", \"text\": \"Hey\", \"parse_data\": { \"intent\": { \"name\": \"greet\", \"confidence\": 0.9 }, \"entities\": [] }, \"metadata\": {},}\n\nParameters:\n\ntext: Text of the user messageparse_data: Parsed data of user message. This is ordinarily filled by NLU.metadata: Arbitrary metadata that comes with the user message", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "717": {"text": "Rasa Class: rasa.core.events.UserUttered\n\nbot#\n\nThe bot sent a message to the user.\n\nAutomatic Tracking: \n\nWhenever responses are returned by a custom actionWhenever responses are sent to the user directly without being returned by a custom action (e.g. utter_ actions)\n\nThis event is not usually returned explicitly by a custom action; responses would be returned instead.\n\nJSON:\n\nCopy{ \"event\": \"bot\", \"text\": \"Hey there!\", \"data\": {}}\n\nParameters:\n\ntext: The text the bot sends to the userdata: Any non-text elements of the bot response. The structure of data matches that of responses given in the API spec.\n\nRasa Class: rasa.core.events.BotUttered\n\naction#\n\nLogs an action called by the bot. Only the action itself is logged; the events that the action creates are logged separately when they are applied. \n\nAutomatic Tracking: \n\nAny action (including custom actions and responses) that is called, even if the action does not execute successfully.\n\nThis event is not usually returned explicitly by a custom action. \n\nJSON:\n\nCopy{ \"event\": \"action\", \"name\": \"my_action\"}\n\nParameters:\n\nname: Name of the action that was called\n\nRasa Class: rasa.core.events.ActionExecuted\n\nPrevious\u00ab ActionsNextRunning a Rasa SDK Action Server \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "718": {"text": "Version: 3.x\n\nRunning a Rasa SDK Action Server\n\nThere are two ways to run the action server, depending on whether you\nare using an environment with\nrasa installed or not:\n\nIf rasa is installed, you can run the action server using a rasa command:\n\nCopyrasa run actions\n\nAlternatively you can make your assistant listen on a specific address using the SANIC_HOST environment\nvariable:\n\nCopySANIC_HOST=192.168.69.150 rasa run actions\n\nIf rasa is not installed, you can run the action server directly as a python module:\n\nCopypython -m rasa_sdk --actions actions\n\nRunning the action server directly as a python module allows for SANIC_HOST too:\n\nCopySANIC_HOST=192.168.69.150 python -m rasa_sdk --actions actions\n\nUsing the command above, rasa_sdk will expect to find your actions\nin a file called actions.py\nor in a package directory called actions.\nYou can specify a different actions module or package with the\n--actions flag.\n\nThe full list of options for running the action server with either command is:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "719": {"text": "Copyusage: __main__.py [-h] [-p PORT] [--cors [CORS ...]] [--actions ACTIONS]                   [--ssl-keyfile SSL_KEYFILE]                   [--ssl-certificate SSL_CERTIFICATE]                   [--ssl-password SSL_PASSWORD] [--auto-reload] [-v] [-vv]                   [--quiet] [--log-file LOG_FILE]                   [--logging-config_file LOGGING_CONFIG_FILE]\nstarts the action endpoint\noptions:  -h, --help            show this help message and exit  -p PORT, --port PORT  port to run the server at  --cors [CORS ...]     enable CORS for the passed origin. Use * to whitelist                        all origins  --actions ACTIONS     name of action package to be loaded  --ssl-keyfile SSL_KEYFILE                        Set the SSL certificate to create a TLS secured                        server.  --ssl-certificate SSL_CERTIFICATE                        Set the SSL certificate to create a TLS secured                        server.  --ssl-password SSL_PASSWORD                        If your ssl-keyfile is protected by a password, you                        can specify it using this paramer.  --auto-reload         Enable auto-reloading of modules containing Action                        subclasses.  -v, --verbose         Be verbose. Sets logging level to INFO  -vv, --debug          Print lots of debugging statements. Sets logging level                        to DEBUG  --quiet               Be quiet! Sets logging level to WARNING  --log-file LOG_FILE   Store logs in specified file.  --logging-config_file LOGGING_CONFIG_FILE                        If set, the name of the logging configuration file                        will be set to the given name.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "720": {"text": "Previous\u00ab EventsNextActions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "721": {"text": "Version: 3.x\n\nActions\n\nThe Action class is the base class for any custom action. To\ndefine a custom action, create a subclass of the Action class\nand overwrite the two required methods, name and run. The\naction server will call an action according to the return value\nof its name method when it receives a request to run an action.\n\nA skeleton custom action looks like this:\n\nCopyclass MyCustomAction(Action):\n def name(self) -> Text:\n return \"action_name\"\n async def run(        self, dispatcher, tracker: Tracker, domain: Dict[Text, Any], ) -> List[Dict[Text, Any]]:\n return []\n\nMethods#\n\nAction.name#\n\nDefines the action's name. The name returned by this method is the one used in your bot's domain.\n\nReturns:Name of actionReturn type: str\n\nAction.run#\n\nCopyasync Action.run(dispatcher, tracker, domain)\n\nThe run method executes the side effects of the action. \n\nParameters#\n\ndispatcher \u2013 the dispatcher which is used to\nsend messages back to the user. Use\ndispatcher.utter_message() or any other\nrasa_sdk.executor.CollectingDispatcher\nmethod. See the documentation for the dispatchertracker \u2013 the state tracker for the current\nuser. You can access slot values using\ntracker.get_slot(slot_name), the most recent user message\nis tracker.latest_message.text and any other\nrasa_sdk.Tracker property. See the documentation for the tracker.domain \u2013 the bot's domain\n\nReturns#\n\n  A list of rasa_sdk.events.Event instances. See the documentation for events.\n\nReturn type#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "722": {"text": "Return type#\n\n List[Dict[str, Any]]\n\nExample#\n\nIn a restaurant bot, if the user says \u201cshow me a Mexican restaurant\u201d,\nyour bot could execute the action ActionCheckRestaurants,\nwhich might look like this:\n\nCopyfrom typing import Text, Dict, Any, Listfrom rasa_sdk import Actionfrom rasa_sdk.events import SlotSet\nclass ActionCheckRestaurants(Action): def name(self) -> Text: return \"action_check_restaurants\"\n def run(self,           dispatcher: CollectingDispatcher,           tracker: Tracker,           domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n      cuisine = tracker.get_slot('cuisine')      q = \"select * from restaurants where cuisine='{0}' limit 1\".format(cuisine)      result = db.query(q)\n return [SlotSet(\"matches\", result if result is not None else [])]\n\nThis action queries a database to find restaurants matching\nthe requested cuisine, and uses the list of restaurants found\nto set the value of the matches slot. \n\nPrevious\u00ab Running a Rasa SDK Action ServerNextTracker \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "723": {"text": "Version: 3.x\n\nTracker\n\nThe Tracker class represents a Rasa conversation tracker.\nIt lets you access your bot's memory in your custom\nactions. You can get information about past events and the current state of the\nconversation through Tracker attributes and methods.\n\nAttributes#\n\nThe following are available as attributes of a Tracker object:\n\nsender_id - The unique ID of person talking to the bot.slots - The list of slots that can be filled as defined in the\n\u201cref\u201ddomains.latest_message - A dictionary containing the attributes of the latest\nmessage: intent, entities and text.events - A list of all previous events.active_loop - The name of the currently active loop.latest_action_name - The name of the last action the bot executed.\n\nMethods#\n\nThe available methods from the Tracker are:\n\nTracker.current_state#\n\nReturn the current tracker state as an object.\n\nReturn typeDict[str, Any]\n\nTracker.is_paused#\n\nState whether the tracker is currently paused.\n\nReturn typebool\n\nTracker.get_latest_entity_values#\n\nGet entity values found for the passed entity type and optional role and\ngroup in latest message.\nIf you are only interested in the first entity of a given type use:\n\nCopynext(tracker.get_latest_entity_values(\u201cmy_entity_name\u201d), None)\n\nIf no entity is found, then None is the default result.\n\nParametersentity_type \u2013 the entity type of interestentity_role \u2013 optional entity role of interestentity_group \u2013 optional entity group of interest\n\nReturnsList of entity values.\n\nReturn typeIterator[str]\n\nTracker.get_latest_input_channel#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "724": {"text": "Return typeIterator[str]\n\nTracker.get_latest_input_channel#\n\nGet the name of the input_channel of the latest UserUttered event\n\nReturn typeOptional[str]\n\nTracker.events_after_latest_restart#\n\nReturn a list of events after the most recent restart.\n\nReturn typeList[Dict]\n\nTracker.get_slot#\n\n  Retrieves the value of a slot.\n\nParameterskey \u2013 the name of the slot of which to retrieve the value\n\nReturn typeOptional[Any]\n\nTracker.get_intent_of_latest_message#\n\n  Retrieves the user's latest intent.\n\nParametersskip_fallback_intent (default: True) \u2013 Optionally skip the nlu_fallback intent and return the next highest ranked.\n\nReturnsThe intent of the latest message if available.\n\nReturn typeOptional[Text]\n\nPrevious\u00ab ActionsNextDispatcher \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "725": {"text": "Version: 3.x\n\nDispatcher\n\nA dispatcher is an instance of the CollectingDispatcher class used to generate responses to send back to the user.\n\nCollectingDispatcher#\n\nCollectingDispatcher has one method, utter_message, and one attribute, messages.\nIt is used in an action's run method to add responses to the payload returned to the Rasa server.\nThe Rasa server will in turn add BotUttered events to the tracker for each response. Responses\nadded using the dispatcher should therefore not be returned\nexplicitly as events. For example, the\nfollowing custom action returns no events explicitly but will return the response, \"Hi, User!\" to the user:\n\nCopyclass ActionGreetUser(Action): def name(self) -> Text: return \"action_greet_user\"\n async def run(        self,        dispatcher: CollectingDispatcher,        tracker: Tracker,        domain: Dict[Text, Any], ) -> List[EventType]:\n        dispatcher.utter_message(text = \"Hi, User!\")\n return []\n\nCollectingDispatcher.utter_message#\n\nThe utter_message method can be used to return any type\nof response to the user.\n\nParameters#\n\nThe utter_message method takes the following optional arguments.\nPassing no arguments will result in an empty message being returned to the user.\nPassing multiple arguments will result in a rich response (e.g. text and buttons) being returned to the user.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "726": {"text": "text: The text to return to the user.Copydispatcher.utter_message(text = \"Hey there\")image: An image URL or file path that will be used to display an image to the user.Copydispatcher.utter_message(image = \"https://i.imgur.com/nGF1K8f.jpg\")json_message: A custom json payload as a dictionary. It can be used to send channel specific responses.\nThe following example would return a date picker in Slack:Copydate_picker = { \"blocks\":[ { \"type\": \"section\", \"text\":{ \"text\": \"Make a bet on when the world will end:\", \"type\": \"mrkdwn\" }, \"accessory\": { \"type\": \"datepicker\", \"initial_date\": \"2019-05-21\", \"placeholder\": { \"type\": \"plain_text\", \"text\": \"Select a date\" } } } ]}dispatcher.utter_message(json_message = date_picker)response: The name of a response to return to the user. This response should\nbe specified in your assistants domain.Copydispatcher.utter_message(response = \"utter_greet\")attachment: A URL or file path of an attachment to return to the user.Copydispatcher.utter_message(attachment = \"\")buttons: A list of buttons to return to the user.\nEach button is a dictionary and should have a title and a payload key.\nA button can include other keys, but these will only be used if\na specific channel looks for them.\nThe button's payload will be sent as a user message if the user", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "727": {"text": "The button's payload will be sent as a user message if the user\nclicks the button.Copydispatcher.utter_message(buttons = [                {\"payload\": \"/affirm\", \"title\": \"Yes\"},                {\"payload\": \"/deny\", \"title\": \"No\"},            ])elements: These are specific to using Facebook as a messaging channel. For details\nof expected format see Facebook's documentation**kwargs: arbitrary keyword arguments, which can be\nused to specify values for variable interpolation in response variations. For example,\ngiven the following response:Copyresponses: utter_greet_name: - text: Hi {name}!You could specify the name with:Copydispatcher.utter_message(response = \"utter_greet_name\", name = \"Aimee\")", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "728": {"text": "Return type#\n\nNone\n\nPrevious\u00ab TrackerNextEvents \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "729": {"text": "Version: 3.x\n\nEvents\n\nInternally, Rasa conversations are represented as\na list of events. Rasa SDK provides classes\nfor each event, and takes care of turning instances of event classes into properly formatted\nevent payloads.\n\nThis page is about the event classes in rasa_sdk.\nThe side effects of events and their underlying\npayloads are identical regardless of whether you use rasa_sdk or another action\nserver.\nFor details about the side effects of an event, its underlying\npayload and the class in Rasa it is translated to\nsee the documentation for events for all action servers\n(also linked to in each section).\n\nImporting eventsAll events written in a Rasa SDK action server need to be imported from rasa_sdk.events.\n\nEvent Classes#\n\nSlotSet#\n\nCopyrasa_sdk.events.SlotSet(    key: Text,     value: Any = None,     timestamp: Optional[float] = None)\n\nUnderlying event: slot\n\nParameters:\n\nkey: Name of the slot to setvalue: Value to set the slot to. The datatype must match the type\nof the slottimestamp: Optional timestamp of the event\n\nExample\n\nCopyevt = SlotSet(key = \"name\", value = \"Mary\")\n\nAllSlotsReset#\n\nCopyrasa_sdk.events.AllSlotsReset(timestamp: Optional[float] = None)\n\nUnderlying event: reset_slots\n\nParameters:\n\ntimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = AllSlotsReset()\n\nReminderScheduled#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "730": {"text": "Copyevt = AllSlotsReset()\n\nReminderScheduled#\n\nCopyrasa_sdk.events.ReminderScheduled(    intent_name: Text,    trigger_date_time: datetime.datetime,    entities: Optional[Union[List[Dict[Text, Any]], Dict[Text, Text]]] = None,    name: Optional[Text] = None,    kill_on_user_message: bool = True,    timestamp: Optional[float] = None,)\n\nUnderlying event: reminder\n\nParameters:\n\nintent_name: Intent which the reminder will trigger trigger_date_time: Datetime at which the execution of the action should be triggered. entities: Entities to send with the intentname: ID of the reminder. If there are multiple reminders with the same id only the last will be run.kill_on_user_message: Whether a user message before the trigger time will abort the remindertimestamp: Optional timestamp of the event\n\nExample:\n\nCopyfrom datetime import datetime\nevt = ReminderScheduled(    intent_name = \"EXTERNAL_dry_plant\",    trigger_date_time = datetime(2020, 9, 15, 0, 36, 0, 851609),    entities = [{\"name\": \"plant\",\"value\":\"orchid\"}],     name = \"remind_water_plants\",)\n\nReminderCancelled#\n\nCopyReminderCancelled(    name: Optional[Text] = None,    intent_name: Optional[Text] = None,    entities: Optional[Union[List[Dict[Text, Any]], Dict[Text, Text]]] = None,    timestamp: Optional[float] = None,)", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "731": {"text": "Underlying event: cancel_reminder\n\nParameters:\n\nname: ID of the reminder.intent_name: Intent which the reminder triggers entities: Entities sent with the intenttimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = ReminderCancelled(name = \"remind_water_plants\") \n\nConversationPaused#\n\nCopyConversationPaused(timestamp: Optional[float] = None)\n\nUnderlying event: pause\n\nParameters:\n\ntimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = ConversationPaused()\n\nConversationResumed#\n\nCopyConversationResumed(timestamp: Optional[float] = None)\n\nUnderlying event: resume\n\nParameters:\n\ntimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = ConversationResumed()\n\nFollowupAction#\n\nCopyFollowupAction(    name: Text,     timestamp: Optional[float] = None)\n\nUnderlying event: followup\n\nParameters:\n\nname: The name of the follow up action that will be executed.timestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = FollowupAction(name = \"action_say_goodbye\")\n\nUserUtteranceReverted#\n\nCopyUserUtteranceReverted(timestamp: Optional[float] = None)\n\nUnderlying event: rewind\n\nParameters:\n\ntimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = UserUtteranceReverted()\n\nActionReverted#\n\nCopyActionReverted(timestamp: Optional[float] = None)\n\nUnderlying event: undo\n\nParameters:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "732": {"text": "Underlying event: undo\n\nParameters:\n\ntimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = ActionReverted()\n\nRestarted#\n\nCopyRestarted(timestamp: Optional[float] = None) \n\nUnderlying event: restart\n\nParameters:\n\ntimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = Restarted()\n\nSessionStarted#\n\nCopySessionStarted(timestamp: Optional[float] = None)\n\nUnderlying event: session_started\n\nParameters:\n\ntimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = SessionStarted()\n\nUserUttered#\n\nCopyUserUttered(    text: Optional[Text],    parse_data: Optional[Dict[Text, Any]] = None,    timestamp: Optional[float] = None,    input_channel: Optional[Text] = None,)\n\nUnderlying event: user\n\nParameters:\n\ntext: Text of the user messageparse_data: Parsed data of user message. This is ordinarily filled by NLU.input_channel: The channel on which the message was receivedtimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = UserUttered(text = \"Hallo bot\")\n\nBotUttered#\n\nCopyBotUttered(    text: Optional[Text] = None,    data: Optional[Dict[Text, Any]] = None,    metadata: Optional[Dict[Text, Any]] = None,    timestamp: Optional[float] = None,)\n\nUnderlying event: bot\n\nParameters:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "733": {"text": "Underlying event: bot\n\nParameters:\n\ntext: The text the bot sends to the userdata: Any non-text elements of the bot response. The structure of data matches that of responses given in the API spec.metadata: Arbitrary key-value metadatatimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = BotUttered(text = \"Hallo user\")\n\nActionExecuted#\n\nCopyActionExecuted(    action_name,    policy=None,    confidence: Optional[float] = None,    timestamp: Optional[float] = None,)\n\nUnderlying event: action\n\nParameters:\n\naction_name: Name of the action that was calledpolicy: The policy used to predict the actionconfidence: The confidence with which the action was predictedtimestamp: Optional timestamp of the event\n\nExample:\n\nCopyevt = ActionExecuted(\"action_greet_user\")\n\nPrevious\u00ab DispatcherNextKnowledge Base Actions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "734": {"text": "Version: 3.x\n\nKnowledge Base Actions\n\nLeverage information from knowledge bases inside conversations using `ActionQueryKnowledgeBase` in open source bot framework Rasa.\n\ncautionThis feature is experimental.\nWe introduce experimental features to get feedback from our community, so we encourage you to try it out!\nHowever, the functionality might be changed or removed in the future.\nIf you have feedback (positive or negative) please share it with us on the forum.\n\nKnowledge base actions enable you to handle the following kind of conversations:\n\n\n\nA common problem in conversational AI is that users do not only refer to certain objects by their names,\nbut also use reference terms such as \u201cthe first one\u201d or \u201cit\u201d.\nWe need to keep track of the information that was presented to resolve these mentions to\nthe correct object.\n\nIn addition, users may want to obtain detailed information about objects during a conversation \u2013\nfor example, whether a restaurant has outside seating, or how expensive it is.\nIn order to respond to those user requests, knowledge about the restaurant domain is needed.\nSince the information is subject to change, hard-coding the information isn't the solution.\n\nTo handle the above challenges, Rasa can be integrated with knowledge bases. To use this integration, you can create a\ncustom action that inherits from ActionQueryKnowledgeBase, a pre-written custom action that contains\nthe logic to query a knowledge base for objects and their attributes.\n\nYou can find a complete example in examples/knowledgebasebot\n(knowledge base bot), as well as instructions\nfor implementing this custom action below.\n\nUsing ActionQueryKnowledgeBase#\n\n\n\nCreate a Knowledge Base#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "735": {"text": "Using ActionQueryKnowledgeBase#\n\n\n\nCreate a Knowledge Base#\n\nThe data used to answer the user's requests will be stored in a knowledge base.\nA knowledge base can be used to store complex data structures.\nWe suggest you get started by using the InMemoryKnowledgeBase.\nOnce you want to start working with a large amount of data, you can switch to a custom knowledge base\n(see Creating Your Own Knowledge Base).\n\nTo initialize an InMemoryKnowledgeBase, you need to provide the data in a json file.\nThe following example contains data about restaurants and hotels.\nThe json structure should contain a key for every object type, i.e. \"restaurant\" and \"hotel\".\nEvery object type maps to a list of objects \u2013 here we have a list of 3 restaurants and a list of 3 hotels.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "736": {"text": "Copy{ \"restaurant\": [ { \"id\": 0, \"name\": \"Donath\", \"cuisine\": \"Italian\", \"outside-seating\": true, \"price-range\": \"mid-range\" }, { \"id\": 1, \"name\": \"Berlin Burrito Company\", \"cuisine\": \"Mexican\", \"outside-seating\": false, \"price-range\": \"cheap\" }, { \"id\": 2, \"name\": \"I due forni\", \"cuisine\": \"Italian\", \"outside-seating\": true, \"price-range\": \"mid-range\" } ], \"hotel\": [ { \"id\": 0, \"name\": \"Hilton\", \"price-range\": \"expensive\", \"breakfast-included\": true, \"city\": \"Berlin\", \"free-wifi\": true, \"star-rating\": 5, \"swimming-pool\": true }, { \"id\": 1, \"name\": \"Hilton\", \"price-range\": \"expensive\", \"breakfast-included\": true, \"city\": \"Frankfurt am Main\", \"free-wifi\": true, \"star-rating\": 4, \"swimming-pool\": false }, { \"id\": 2, \"name\": \"B&B\", \"price-range\": \"mid-range\", \"breakfast-included\": false, \"city\": \"Berlin\", \"free-wifi\": false, \"star-rating\": 1, \"swimming-pool\": false }, ]}\n\nOnce the data is defined in a json file, called, for example, data.json, you will be able use the this data file to create your\nInMemoryKnowledgeBase, which will be passed to the action that queries the knowledge base.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "737": {"text": "Every object in your knowledge base should have at least the \"name\" and \"id\" fields to use the default implementation.\nIf it doesn't, you'll have to customize your InMemoryKnowledgeBase.\n\nDefine the NLU Data#\n\nIn this section:\n\nwe will introduce a new intent, query_knowledge_basewe will annotate mention entities so that our model detects indirect mentions of objects like \u201cthe\nfirst one\u201dwe will use synonyms extensively\n\nFor the bot to understand that the user wants to retrieve information from the knowledge base, you need to define\na new intent. We will call it query_knowledge_base.\n\nWe can split requests that ActionQueryKnowledgeBase can handle into two categories:\n(1) the user wants to obtain a list of objects of a specific type, or (2) the user wants to know about a certain\nattribute of an object. The intent should contain lots of variations of both of these requests:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "738": {"text": "Copynlu:- intent: query_knowledge_base  examples: |    - what [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"} can you recommend?    - list some [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"}    - can you name some [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"} please?    - can you show me some [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"} options    - list [German](cuisine) [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"}    - do you have any [mexican](cuisine) [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"}?    - do you know the [price range]{\"entity\": \"attribute\", \"value\": \"price-range\"} of [that one](mention)?    - what [cuisine](attribute) is [it](mention)?    - do you know what [cuisine](attribute) the [last one]{\"entity\": \"mention\", \"value\": \"LAST\"} has?    - does the [first one]{\"entity\": \"mention\", \"value\": \"1\"} have [outside seating]{\"entity\": \"attribute\", \"value\": \"outside-seating\"}?    - what is the [price range]{\"entity\": \"attribute\", \"value\": \"price-range\"} of [Berlin Burrito Company](restaurant)?    - what about [I due forni](restaurant)?    - can you tell me the [price", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "739": {"text": "due forni](restaurant)?    - can you tell me the [price range](attribute) of [that restaurant](mention)?    - what [cuisine](attribute) do [they](mention) have?", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "740": {"text": "The above example just shows examples related to the restaurant domain.\nYou should add examples for every object type that exists in your knowledge base to the same query_knowledge_base intent.\n\nIn addition to adding a variety of training examples for each query type,\nyou need to specify and annotate the following entities in your training examples:\n\nobject_type: Whenever a training example references a specific object type from your knowledge base, the object type should\nbe marked as an entity. Use synonyms to map e.g. restaurants to restaurant, the correct\nobject type listed as a key in the knowledge base.mention: If the user refers to an object via \u201cthe first one\u201d, \u201cthat one\u201d, or \u201cit\u201d, you should mark those terms\nas mention. We also use synonyms to map some of the mentions to symbols. You can learn about that\nin resolving mentions.attribute: All attribute names defined in your knowledge base should be identified as attribute in the\nNLU data. Again, use synonyms to map variations of an attribute name to the one used in the\nknowledge base.\n\nRemember to add those entities to your domain file (as entities and slots):\n\nCopyentities:  - object_type  - mention  - attribute\nslots:  object_type:    type: any    influence_conversation: false    mappings:    - type: from_entity      entity: object_type  mention:    type: any    influence_conversation: false    mappings:    - type: from_entity      entity: mention  attribute:    type: any    influence_conversation: false    mappings:    - type: from_entity      entity: attribute\n\n\n\nCreate an Action to Query your Knowledge Base#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "741": {"text": "Create an Action to Query your Knowledge Base#\n\nTo create your own knowledge base action, you need to inherit ActionQueryKnowledgeBase and pass the knowledge\nbase to the constructor of ActionQueryKnowledgeBase.\n\nCopyfrom rasa_sdk.knowledge_base.storage import InMemoryKnowledgeBasefrom rasa_sdk.knowledge_base.actions import ActionQueryKnowledgeBase\nclass MyKnowledgeBaseAction(ActionQueryKnowledgeBase): def __init__(self):        knowledge_base = InMemoryKnowledgeBase(\"data.json\") super().__init__(knowledge_base)\n\nWhenever you create an ActionQueryKnowledgeBase, you need to pass a KnowledgeBase to the constructor.\nIt can be either an InMemoryKnowledgeBase or your own implementation of a KnowledgeBase\n(see Creating Your Own Knowledge Base).\nYou can only pull information from one knowledge base, as the usage of multiple knowledge bases at the same time is not supported.\n\nThis is the entirety of the code for this action! The name of the action is action_query_knowledge_base.\nDon't forget to add it to your domain file:\n\nCopyactions:- action_query_knowledge_base\n\nnoteIf you overwrite the default action name action_query_knowledge_base, you need to add the following three\nunfeaturized slots to your domain file: knowledge_base_objects, knowledge_base_last_object, and\nknowledge_base_last_object_type.\nThe slots are used internally by ActionQueryKnowledgeBase.\nIf you keep the default action name, those slots will be automatically added for you.\n\nYou also need to make sure to add a story to your stories file that includes the intent query_knowledge_base and\nthe action action_query_knowledge_base. For example:", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "742": {"text": "Copystories:- story: knowledge base happy path  steps:  - intent: greet  - action: utter_greet  - intent: query_knowledge_base  - action: action_query_knowledge_base  - intent: goodbye  - action: utter_goodbye\n\nThe last thing you need to do is to define the response utter_ask_rephrase in your domain file.\nIf the action doesn't know how to handle the user's request, it will use this response to ask the user to rephrase.\nFor example, add the following responses to your domain file:\n\nCopyresponses:  utter_ask_rephrase:  - text: \"Sorry, I'm not sure I understand. Could you rephrase it?\"  - text: \"Could you please rephrase your message? I didn't quite get that.\"\n\nAfter adding all the relevant pieces, the action is now able to query the knowledge base.\n\nHow It Works#\n\nActionQueryKnowledgeBase looks at both the entities that were picked up in the request as well as the\npreviously set slots to decide what to query for.\n\nQuery the Knowledge Base for Objects#\n\nIn order to query the knowledge base for any kind of object, the user's request needs to include the object type.\nLet's look at an example:\n\nCan you please name some restaurants?\n\nThis question includes the object type of interest: \u201crestaurant.\u201d\nThe bot needs to pick up on this entity in order to formulate a query \u2013 otherwise the action would not know what objects the user is interested in.\n\nWhen the user says something like:\n\nWhat Italian restaurant options in Berlin do I have?", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "743": {"text": "What Italian restaurant options in Berlin do I have?\n\nThe user wants to obtain a list of restaurants that (1) have Italian cuisine and (2) are located in\nBerlin. If the NER detects those attributes in the request of the user, the action will use those to filter the\nrestaurants found in the knowledge base.\n\nIn order for the bot to detect these attributes, you need to mark \u201cItalian\u201d and \u201cBerlin\u201d as entities in the NLU data:\n\nCopyintents:- intent: query_knowledge_base  examples: |    - What [Italian](cuisine) [restaurant](object_type) options in [Berlin](city) do I have?.\n\nThe names of the attributes, \u201ccuisine\u201d and \u201ccity,\u201d should be equal to the ones used in the knowledge base.\nYou also need to add those as entities and slots to the domain file.\n\nQuery the Knowledge Base for an Attribute of an Object#\n\nIf the user wants to obtain specific information about an object, the request should include both the object and\nattribute of interest.\n\nNew in 3.6The user is not required to query the knowledge base to list any kind of object prior to this.\nThe ActionQueryKnowledgeBase will extract the object type from the user's request and query the knowledge base for an attribute of the object. \n\nFor example, if the user asks something like:\n\nWhat is the cuisine of Berlin Burrito Company?\n\nThe user wants to obtain the \u201ccuisine\u201d (attribute of interest) for the restaurant \u201cBerlin Burrito Company\u201d (object of\ninterest).\n\nThe attribute and object of interest should be marked as entities in the NLU training data:", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "744": {"text": "The attribute and object of interest should be marked as entities in the NLU training data:\n\nCopyintents:- intent: query_knowledge_base  examples: |    - What is the [cuisine](attribute) of [Berlin Burrito Company](restaurant)?\n\nMake sure to add the object type, \u201crestaurant,\u201d to the domain file as entity and slot. This will support ActionQueryKnowledgeBase\nto extract the object type of the object the user is interested in.\n\n\n\nResolve Mentions#\n\nFollowing along from the above example, users may not always refer to restaurants by their names.\nUsers can either refer to the object of interest by its name, e.g. \u201cBerlin Burrito Company\u201d (representation string\nof the object), or they may refer to a previously listed object via a mention, for example:\n\nWhat is the cuisine of the second restaurant you mentioned?\n\nOur action is able to resolve these mentions to the actual object in the knowledge base.\nMore specifically, it can resolve two mention types: (1) ordinal mentions, such as \u201cthe first one\u201d, and (2)\nmentions such as \u201cit\u201d or \u201cthat one\u201d.\n\nOrdinal Mentions\n\nWhen a user refers to an object by its position in a list, it is called an ordinal mention. Here's an example:\n\nUser: What restaurants in Berlin do you know?Bot: Found the following objects of type 'restaurant':  1: I due forni  2: PastaBar  3: Berlin Burrito CompanyUser: Does the first one have outside seating?", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "745": {"text": "The user referred to \u201cI due forni\u201d by the term \u201cthe first one\u201d.\nOther ordinal mentions might include \u201cthe second one,\u201d \u201cthe last one,\u201d \u201cany,\u201d or \u201c3\u201d.\n\nOrdinal mentions are typically used when a list of objects was presented to the user.\nTo resolve those mentions to the actual object, we use an ordinal mention mapping which is set in the\nKnowledgeBase class.\nThe default mapping looks like:\n\nCopy{ \"1\": lambda l: l[0], \"2\": lambda l: l[1], \"3\": lambda l: l[2], \"4\": lambda l: l[3], \"5\": lambda l: l[4], \"6\": lambda l: l[5], \"7\": lambda l: l[6], \"8\": lambda l: l[7], \"9\": lambda l: l[8], \"10\": lambda l: l[9], \"ANY\": lambda l: random.choice(l), \"LAST\": lambda l: l[-1],}\n\nThe ordinal mention mapping maps a string, such as \u201c1\u201d, to the object in a list, e.g. lambda l: l[0], meaning the\nobject at index 0.\n\nAs the ordinal mention mapping does not, for example, include an entry for \u201cthe first one\u201d,\nit is important that you use Entity Synonyms to map \u201cthe first one\u201d in your NLU data to \u201c1\u201d:", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "746": {"text": "Copyintents:- intent: query_knowledge_base  examples: |    - Does the [first one]{entity: \"mention\", value\": 1} have [outside seating]{entity: \"attribute\", value\": \"outside-seating\"}\n\nThe NER detects \u201cfirst one\u201d as a mention entity, but puts \u201c1\u201d into the mention slot.\nThus, our action can take the mention slot together with the ordinal mention mapping to resolve \u201cfirst one\u201d to\nthe actual object \u201cI due forni\u201d.\n\nYou can overwrite the ordinal mention mapping by calling the function set_ordinal_mention_mapping() on your\nKnowledgeBase implementation (see Customizing the InMemoryKnowledgeBase).\n\nOther Mentions\n\nTake a look at the following conversation:\n\nUser: What is the cuisine of PastaBar?Bot: PastaBar has an Italian cuisine.User: Does it have wifi?Bot: Yes.User: Can you give me an address?\n\nIn the question \u201cDoes it have wifi?\u201d, the user refers to \u201cPastaBar\u201d by the word \u201cit\u201d.\nIf the NER detected \u201cit\u201d as the entity mention, the knowledge base action would resolve it to the last mentioned\nobject in the conversation, \u201cPastaBar\u201d.\n\nIn the next input, the user refers indirectly to the object \u201cPastaBar\u201d instead of mentioning it explicitly.\nThe knowledge base action would detect that the user wants to obtain the value of a specific attribute, in this case, the address.\nIf no mention or object was detected by the NER, the action assumes the user is referring to the most recently\nmentioned object, \u201cPastaBar\u201d.", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "747": {"text": "You can disable this behavior by setting use_last_object_mention to False when initializing the action.\n\nCustomization#\n\nCustomizing ActionQueryKnowledgeBase#\n\nYou can overwrite the following two functions of ActionQueryKnowledgeBase if you'd like to customize what the bot\nsays to the user:\n\nutter_objects()utter_attribute_value()\n\nutter_objects() is used when the user has requested a list of objects.\nOnce the bot has retrieved the objects from the knowledge base, it will respond to the user by default with a message, formatted like:\n\nFound the following objects of type 'restaurant':\n1: I due forni\n2: PastaBar\n3: Berlin Burrito Company\n\nOr, if no objects are found,\n\nI could not find any objects of type 'restaurant'.\n\nIf you want to change the utterance format, you can overwrite the method utter_objects() in your action.\n\nThe function utter_attribute_value() determines what the bot utters when the user is asking for specific information about\nan object.\n\nIf the attribute of interest was found in the knowledge base, the bot will respond with the following utterance:\n\n'Berlin Burrito Company' has the value 'Mexican' for attribute 'cuisine'.\n\nIf no value for the requested attribute was found, the bot will respond with\n\nDid not find a valid value for attribute 'cuisine' for object 'Berlin Burrito Company'.\n\nIf you want to change the bot utterance, you can overwrite the method utter_attribute_value().\n\nnoteThere is a tutorial on our blog about\nhow to use knowledge bases in custom actions. The tutorial explains the implementation behind\nActionQueryKnowledgeBase in detail.\n\nCreating Your Own Knowledge Base Actions#", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "748": {"text": "Creating Your Own Knowledge Base Actions#\n\nActionQueryKnowledgeBase should allow you to easily get started with integrating knowledge bases into your actions.\nHowever, the action can only handle two kind of user requests:\n\nthe user wants to get a list of objects from the knowledge basethe user wants to get the value of an attribute for a specific object\n\nThe action is not able to compare objects or consider relations between objects in your knowledge base.\nFurthermore, resolving any mention to the last mentioned object in the conversation might not always be optimal.\n\nIf you want to tackle more complex use cases, you can write your own custom action.\nWe added some helper functions to rasa_sdk.knowledge_base.utils\n(link to code )\nto help you when implement your own solution.\nWe recommend using KnowledgeBase interface so that you can still use the ActionQueryKnowledgeBase\nalongside your new custom action.\n\nIf you write a knowledge base action that tackles one of the above use cases or a new one, be sure to tell us about\nit on the forum!\n\n\n\nCustomizing the InMemoryKnowledgeBase#\n\nThe class InMemoryKnowledgeBase inherits KnowledgeBase.\nYou can customize your InMemoryKnowledgeBase by overwriting the following functions:", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "749": {"text": "get_key_attribute_of_object(): To keep track of what object the user was talking about last, we store the value\nof the key attribute in a specific slot. Every object should have a key attribute that is unique,\nsimilar to the primary key in a relational database. By default, the name of the key attribute for every object type\nis set to id. You can overwrite the name of the key attribute for a specific object type by calling\nset_key_attribute_of_object().get_representation_function_of_object(): Let's focus on the following restaurant:Copy{ \"id\": 0, \"name\": \"Donath\", \"cuisine\": \"Italian\", \"outside-seating\": true, \"price-range\": \"mid-range\"}When the user asks the bot to list any Italian restaurant, it doesn't need all of the details of the restaurant.\nInstead, you want to provide a meaningful name that identifies the restaurant \u2013 in most cases, the name of the object will do.\nThe function get_representation_function_of_object() returns a lambda function that maps the\nabove restaurant object to its name.Copylambda obj: obj[\"name\"]This function is used whenever the bot is talking about a specific object, so that the user is presented a meaningful\nname for the object.By default, the lambda function returns the value of the \"name\" attribute of the object.\nIf your object does not have a \"name\" attribute , or the \"name\" of an object is\nambiguous, you should set a new lambda function for that object type by calling\nset_representation_function_of_object().set_ordinal_mention_mapping(): The ordinal mention mapping is needed to resolve an ordinal mention, such as", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "750": {"text": "\u201csecond one,\u201d to an object in a list. By default, the ordinal mention mapping looks like this:Copy{ \"1\": lambda l: l[0], \"2\": lambda l: l[1], \"3\": lambda l: l[2], \"4\": lambda l: l[3], \"5\": lambda l: l[4], \"6\": lambda l: l[5], \"7\": lambda l: l[6], \"8\": lambda l: l[7], \"9\": lambda l: l[8], \"10\": lambda l: l[9], \"ANY\": lambda l: random.choice(l), \"LAST\": lambda l: l[-1],}You can overwrite it by calling the function set_ordinal_mention_mapping().\nIf you want to learn more about how this mapping is used, check out Resolve Mentions.", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "751": {"text": "See the example bot for an\nexample implementation of an InMemoryKnowledgeBase that uses the method set_representation_function_of_object()\nto overwrite the default representation of the object type \u201chotel.\u201d\nThe implementation of the InMemoryKnowledgeBase itself can be found in the\nrasa-sdk package.\n\n\n\nCreating Your Own Knowledge Base#\n\nIf you have more data or if you want to use a more complex data structure that, for example, involves relations between\ndifferent objects, you can create your own knowledge base implementation.\nJust inherit KnowledgeBase and implement the methods get_objects(), get_object(), get_object_types() and\nget_attributes_of_object(). The knowledge base code\nprovides more information on what those methods should do.\n\nYou can also customize your knowledge base further, by adapting the methods mentioned in the section\nCustomizing the InMemoryKnowledgeBase.\n\nnoteWe wrote a blog post\nthat explains how you can set up your own knowledge base.\n\nPrevious\u00ab EventsNextSlot Validation Actions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "752": {"text": "Version: 3.x\n\nSlot Validation Actions\n\nLearn how `ValidationAction` class is implemented in the Rasa SDK.\n\nThere are two helper classes in Rasa SDK with the role of executing custom slot extraction and validation:\n\nValidationAction: the base class for custom actions extracting and validating slots that can be set or updated\noutside of a form context.FormValidationAction: the base class for custom actions extracting and validating slots that are set only within\nthe context of a form.\n\nIn order to implement custom slot extraction and validation logic, you have the option of subclassing either\nValidationAction or FormValidationAction class, depending on the context in which you want to set or update slots.\n\nValidationAction class#\n\nYou can extend the ValidationAction class in the Rasa SDK to define custom extraction and / or validation of slots that\ncan be set or updated outside of a form context.\n\nnoteValidationAction is intended for extracting slots outside the context of a form.\nIt will ignore extraction and validation methods for any slots that have a form specified under the\nslot mapping's conditions.\nIt will not run these methods when the specified form is active nor when no form is active.\nPlease extend the FormValidationAction class to apply\ncustom slot mappings only within the context of a form.\n\nHow to subclass ValidationAction#\n\nFirstly, you must add the name of this action, action_validate_slot_mappings, to the domain actions list.\nNote that you do not need to implement the name method in the custom action extending ValidationAction, since this\nis already implemented. If you override the name method, the custom validation action will not run because the\noriginal name is hardcoded in the call that the default action action_extract_slots makes to the action server.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "753": {"text": "You should create only one subclass of ValidationAction which should contain all extraction and validation\nmethods for different slots according to your use-case.\n\nWith this option, you do not need to specify the action key in the custom slot mapping,\nsince the default action action_extract_slots runs action_validate_slot_mappings\nautomatically if present in the actions section of the domain.\n\nValidation of Slots with Predefined Mappings#\n\nTo validate slots with a predefined mapping, you must write functions named validate_<slot_name>.\n\nIn the following example, the value for slot location is capitalized only if the extracted value is of type string:\n\nCopyfrom typing import Text, Any, Dict\nfrom rasa_sdk import Tracker, ValidationActionfrom rasa_sdk.executor import CollectingDispatcherfrom rasa_sdk.types import DomainDict\n\nclass ValidatePredefinedSlots(ValidationAction): def validate_location(        self,        slot_value: Any,        dispatcher: CollectingDispatcher,        tracker: Tracker,        domain: DomainDict, ) -> Dict[Text, Any]: \"\"\"Validate location value.\"\"\" if isinstance(slot_value, str): # validation succeeded, capitalize the value of the \"location\" slot return {\"location\": slot_value.capitalize()} else: # validation failed, set this slot to None return {\"location\": None}\n\nExtraction of Custom Slot Mappings#\n\nTo define custom extraction code, write an extract_<slot_name> method for every slot with a\ncustom slot mapping.\n\nThe following example shows the implementation of a custom action that extracts the slot count_of_insults to keep\ntrack of the user's attitude.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "754": {"text": "Copyfrom typing import Dict, Text, Any\nfrom rasa_sdk import Trackerfrom rasa_sdk.executor import CollectingDispatcherfrom rasa_sdk.forms import ValidationAction\n\nclass ValidateCustomSlotMappings(ValidationAction): async def extract_count_of_insults(        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict ) -> Dict[Text, Any]:        intent_of_last_user_message = tracker.get_intent_of_latest_message()        current_count_of_insults = tracker.get_slot(\"count_of_insults\") if intent_of_last_user_message == \"insult\":           current_count_of_insults += 1\n return {\"count_of_insults\": current_count_of_insults}\n\nValidationAction class implementation#\n\nValidationAction is a subclass of the Action Rasa SDK class and the abstract Python ABC class.\nTherefore the class implements the name and run methods inherited from Action.\nIn addition, ValidationAction implements more specialized methods that will be called in the run method:\n\nget_extraction_events: Extracts custom slots using available extract_<slot name> methodsget_validation_events: Validates slots by calling available validate_<slot name> methods for each slotrequired_slots: Returns slots which the validation action should fill\n\nMethods#\n\nValidationAction.name#\n\nDefines the action's name: this must be hardcoded as action_validate_slot_mappings.\n\nReturns:Name of actionReturn type:str\n\nValidationAction.run#\n\nCopyasync ValidationAction.run(dispatcher, tracker, domain)", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "755": {"text": "Copyasync ValidationAction.run(dispatcher, tracker, domain)\n\nThe run method executes the custom extraction code defined in extract_<slot name> methods by calling the\nget_extraction_events method, then updates the tracker with the returned events.\nThe run method will also execute custom validation code defined in validate_<slot name> methods via the\nget_validation_events method and add the returned events to the tracker.\n\nParameters#\n\ndispatcher \u2013 the dispatcher which is used to\nsend messages back to the user. Use\ndispatcher.utter_message() or any other\nrasa_sdk.executor.CollectingDispatcher\nmethod. See the documentation for the dispatchertracker \u2013 the state tracker for the current\nuser. You can access slot values using\ntracker.get_slot(slot_name), the most recent user message\nis tracker.latest_message.text and any other\nrasa_sdk.Tracker property. See the documentation for the tracker.domain \u2013 the bot's domain\n\nReturns#\n\n  A list of rasa_sdk.events.Event instances. See the documentation for events.\n\nReturn type#\n\n List[Dict[str, Any]]\n\nValidationAction.required_slots#\n\nCopyasync ValidationAction.required_slots(domain_slots, dispatcher, tracker, domain)\n\nThe required_slots method will return the domain_slots which is a list of all slot names mapped in the domain that\ndo not include any slot mapping with conditions. domain_slots is returned by the domain_slots method, which only takes\nDomain as an argument.\n\nReturns#\n\n  A list of slot names of type Text.\n\nValidationAction.get_extraction_events#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "756": {"text": "ValidationAction.get_extraction_events#\n\nCopyasync ValidationAction.get_extraction_events(dispatcher, tracker, domain)\n\nThe get_extraction_events method will gather the list of slot names via required_slots method call and then loop\nthrough every slot name to run the extract_<slot name> method if available.\n\nReturns#\n\n  A list of rasa_sdk.events.SlotSet instances. See the documentation for SlotSet events.\n\nValidationAction.get_validation_events#\n\nCopyasync ValidationAction.get_validation_events(dispatcher, tracker, domain)\n\nThe get_validation_events method will gather the list of slot names to validate via required_slots method call.\nThen it will get a mapping of slots which were recently set and their values via tracker.slots_to_validate call.\nLooping through this mapping of recently extracted slots, it will check if the slot is in required_slots then run the\nvalidate_<slot name> method if available for that slot.\n\nReturns#\n\n  A list of rasa_sdk.events.SlotSet instances. See the documentation for SlotSet events.\n\nFormValidationAction class#\n\nA FormValidationAction custom action will only run if the form it specifies in its name is activated.\nIf certain custom slot mappings should only be extracted and / or validated within the context of a form,\nthe custom action should inherit from FormValidationAction rather than from ValidationAction.\n\nSince a custom action extending FormValidationAction runs on every user turn only as long as the form is active, it is\nnot required to use mapping conditions in this case.\n\nTo learn more about how to implement this class, see Forms Advanced Usage.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "757": {"text": "To learn more about how to implement this class, see Forms Advanced Usage.\n\nFormValidationAction class implementation#\n\nFormValidationAction is a subclass of the ValidationAction Rasa SDK class and the abstract Python ABC class.\nFormValidationAction inherits most methods from ValidationAction class, however it overrides the name and\ndomain_slots methods, implements a new method next_requested_slot and extends the implementation of run method.\n\nMethods#\n\nFormValidationAction.name#\n\nThe method name will raise a NotImplementedError exception if the bot custom action subclassing FormValidationAction\ndoes not return a custom name which follows this naming convention: validate_<form name>.\n\nFormValidationAction.required_slots#\n\nThe method required_slots will return the domain_slots which is a list of all slot names included in the form's\nrequired_slots. domain_slots is returned by the domain_slots method, which only takes\nDomain as an argument.\n\nFormValidationAction.next_requested_slot#\n\nThe method next_requested_slot will set the value of REQUESTED_SLOT to the next unset slot only if the\nrequired_slots method was overridden by the custom action subclassing FormValidationAction.\n\nIf users didn't override required_slots then we'll let the FormAction within Rasa Open\nSource request the next slot, and the method will return None.\n\nThe parameters the method requires are:\n\ndispatchertrackerthe bot's domain\n\nFormValidationAction.run#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "758": {"text": "dispatchertrackerthe bot's domain\n\nFormValidationAction.run#\n\nThe original implementation of the ValidationAction.run method is extended to add a call to the next_requested_slot\nmethod. The output of the next_requested_slot method call (if not None) is added to the list of events that run\nmethod returns.\n\nPrevious\u00ab Knowledge Base ActionsNextDeploy Rasa Action Server \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "759": {"text": "Version: 3.x\n\nDeploy Rasa Action Server\n\nThis page explains how to build an Action Server Image and deploy a Rasa Action Server using Helm. The second of three steps in deploying your Rasa assistant.\n\nnoteThe Rasa Action Server chart is open source and available in the\nhelm-charts repository.\nPlease\ncreate an issue in this\nrepository if you discover bugs or have suggestions for improvements.\n\nIn the sections below you can learn how to deploy Rasa Action Server by using helm, and how to connect an Action Server deployment to a Rasa deployment.\n\nInstallation Requirements#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "760": {"text": "Installation Requirements#\n\nCheck that you have installed the Kubernetes or OpenShift command line\ninterface (CLI). You can check this using the following command:KubernetesOpenShiftCopykubectl version --short --client\n# The output should be similar to this# Client Version: v1.19.11If this command resulted in an error, please install the\nKubernetes CLI or the\nOpenShift CLI\ndepending on the cluster you\u2019re using.Make sure that the Kubernetes / OpenShift CLI is correctly connected to\nyour cluster. You can do so by using the following commands:KubernetesOpenShiftCopykubectl version --short\n# The output should be similar to this# Client Version: v1.19.11# Server Version: v1.19.10If you get an error when executing the command, you are not connected to your\ncluster. To get the command to connect to the cluster please consult your cluster\u2019s\nadmin or the documentation of your cloud provider.Make sure you have the Helm CLI\ninstalled. To check this, run:Copyhelm version --short\n# The output should be similar to this# v3.6.0+g7f2df64If this command leads to an error, please install the\nHelm CLI.In case you are using a version <3.5 of Helm, please update to Helm version\n>=3.5.\n\n1. Installation#\n\na. Create Namespace#\n\nWe recommend installing Rasa Action Server in a separate\nnamespace\nto avoid interfering with existing cluster deployments. To create a new namespace\nrun the following command:\n\nKubernetesOpenShiftCopykubectl create namespace <your namespace>\n\nb. Deploy Rasa Action Server#\n\nRun the following commands:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "761": {"text": "b. Deploy Rasa Action Server#\n\nRun the following commands:\n\nCopy# Add the repository which contains the Rasa Action Server Helm charthelm repo add rasa https://helm.rasa.com\n# Deploy Rasa Action Serverhelm install \\    --namespace <your namespace> \\ <release name> \\    rasa/rasa-action-server\n\nc. Access Rasa Action Server#\n\nBy default the Rasa Action Server deployment is exposed via the rasa-action-server (<release name>) service and accessible only within a Kubernetes cluster. You can get\nthe IP address using this command:\n\nKubernetesOpenShiftCopy export SERVICE_PORT=$(kubectl get --namespace <your namespace> -o jsonpath=\"{.spec.ports[0].port}\" services <release name>)  kubectl port-forward --namespace <your namespace> svc/<release name> ${SERVICE_PORT}:${SERVICE_PORT} &\n\nYou can then access the deployment on http://127.0.0.1:${SERVICE_PORT}\n\nnoteThe Rasa Action Server Helm chart uses the rasa-x-demo Docker image as default. In the Building an Action Server Image\nyou can learn how to build and use your custom Action Server image.\n\nBuilding an Action Server Image#\n\nIf you build an image that includes your action code and store it in a container registry, you can run it\nas part of your deployment, without having to move code between servers.\nIn addition, you can add any additional dependencies of systems or Python libraries\nthat are part of your action code but not included in the base rasa/rasa-sdk image.\n\nAutomating your Action Server Image Builds#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "762": {"text": "Automating your Action Server Image Builds#\n\nIn addition to a manually creating a new Action Server image, you can use the Rasa Action Server GitHub Action to automate image builds.\nIf GitHub Actions are new to you, it might be helpful to get familiar with GitHub Actions Documentation.\n\nThe following steps assume that you already created a GitHub repository and you have a DockerHub account.\n\nTo create a workflow for building and pushing a Docker image into a DockerHub registry:\n\nAdd GitHub Secrets with your DockerHub login name and password.\nYou can find details on how to create encrypted secrets for a repository\nin the Github docsThe example uses the following secrets:DOCKER_HUB_LOGIN - a login name for DockerHubDOCKER_HUB_PASSWORD - a password for DockerHubIn your GitHub repository create a file .github/workflows/action_server.yml.\n\nThe GitHub Action workflow below builds a new docker image every time files inside the actions/ directory have changed and the changes are pushed into the main branch.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "763": {"text": "Copyon: push: branches: - main paths: - 'actions/**'\njobs: build_and_deploy: runs-on: ubuntu-latest name: Build Action Server image and upgrade Rasa X/Enterprise deployment steps: - name: Checkout repository uses: actions/checkout@v2\n - id: action_server name: Build an action server with custom actions uses: RasaHQ/action-server-gha@main # Full list of parameters: https://github.com/RasaHQ/action-server-gha/tree/master#input-arguments with: docker_image_name: 'account_username/repository_name' docker_registry_login: ${{ secrets.DOCKER_HUB_LOGIN }} docker_registry_password: ${{ secrets.DOCKER_HUB_PASSWORD }} # More details about github context: # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context # # github.sha - The commit SHA that triggered the workflow run docker_image_tag: ${{ github.sha }}\n\nPush your changes to the main branch. After changes are pushed, the workflow will build and push a new image into the DockerHub registry.Now, you can use your new brand docker image.You can also extend your workflow, so that you do not have to manually update your Rasa X/Enterprise deployment. The example below shows how to extend your workflow with an additional step that updates a Rasa X/Enterprise Helm Chart deployment.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "764": {"text": "Copyon: push: branches: - main\njobs: build_and_deploy: runs-on: ubuntu-latest name: Build Action Server image and upgrade Rasa X/Enterprise deployment steps: [..]\n # This step shows only the example of output parameter usage # and it's not focused on deployment itself. - name: \"Upgrade a Rasa Action Server deployment\" run: |        helm upgrade --install --reuse-values \\          --set image.name=${{ steps.action_server.outputs.docker_image_name }} \\          --set image.tag=${{ steps.action_server.outputs.docker_image_tag }} rasa-action-server rasa/rasa-action-server\n\nAs you can see it's possible to use output variables from the action_server step. The steps.action_server.outputs.docker_image_name variable returns\na Docker image name and the steps.action_server.outputs.docker_image_tag variable returns a Docker image tag.\n\nMore examples on how to use and customize Rasa GitHub Actions you can find in the Rasa GitHub Actions repository.\n\nManually Building an Action Server#\n\nTo create your image:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "765": {"text": "Manually Building an Action Server#\n\nTo create your image:\n\nMake sure your actions are defined in actions/actions.py. The rasa/rasa-sdk\nimage will automatically look for the actions in this file.If your actions have any extra dependencies, create a list of them in a file,\nactions/requirements-actions.txt.Create a file named Dockerfile in your project directory,\nin which you'll extend the official SDK image, copy over your code, and add any custom dependencies (if necessary).\nFor example:Copy# Extend the official Rasa SDK imageFROM rasa/rasa-sdk:3.6.0\n# Use subdirectory as working directoryWORKDIR /app\n# Copy any additional custom requirements, if necessary (uncomment next line)# COPY actions/requirements-actions.txt ./\n# Change back to root user to install dependenciesUSER root\n# Install extra requirements for actions code, if necessary (uncomment next line)# RUN pip install -r requirements-actions.txt\n# Copy actions folder to working directoryCOPY ./actions /app/actions\n# By best practices, don't run the code with root userUSER 1001\n\nYou can then build the image via the following command:\n\nCopydocker build . -t <account_username>/<repository_name>:<custom_image_tag>\n\nThe <custom_image_tag> should reference how this image will be different from others. For\nexample, you could version or date your tags, as well as create different tags that have different code for production\nand development servers. You should create a new tag any time you update your code and want to re-deploy it.\n\nUsing your Custom Action Server Image#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "766": {"text": "Using your Custom Action Server Image#\n\nIf you're building this image to make it available from another server, you should push the image to a cloud repository.\n\nThis documentation assumes you are pushing your images to DockerHub.\nDockerHub will let you host multiple public repositories and\none private repository for free. Be sure to first create an account\nand create a repository to store your images. You could also push images to\na different Docker registry, such as Google Container Registry,\nAmazon Elastic Container Registry, or\nAzure Container Registry.\n\nYou can push the image to DockerHub via:\n\nCopydocker login --username <account_username> --password <account_password>docker push <account_username>/<repository_name>:<custom_image_tag>\n\nTo authenticate and push images to a different container registry, please refer to the documentation of\nyour chosen container registry.\n\nSetting a Custom Action Server Image#\n\nIn order to use a Custom Action Server image along with the Rasa Action Server deployment, you have to\nuse the following values for your deployment.\n\nCopy# values.yamlimage: name: \"image_name\" tag: \"image_tag\"\n\nthen upgrade your deployment by executing the command:\n\nCopyhelm upgrade --namespace <namespace> --reuse-values \\  -f values.yaml <release name> rasa/rasa-action-server\n\n2. Connect Rasa Action Server to a Rasa deployment#\n\nIf you have deployed your assistant using the Rasa Helm chart, and you have deployed your Rasa Action Server as well.\nNow it's time to connect them together. You can do this easily by following the steps:\n\na. Create a rasa-values.yaml file which will include configuration for the Rasa deployment.", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "767": {"text": "Copy# rasa-values.yamlrasa-action-server: external: # -- Determine if external URL is used enabled: true # -- URL to Rasa Action Server url: \"http://rasa-action-server/webhook\"\n\n  The configuration above tells Rasa which Rasa Action Server to use. In the example the http://rasa-action-server/webhook URL is used,\nthe URL indicates that Rasa Action Server is deployed with release name rasa-action-server, and is located in the same namespace as Rasa server deployment.\n\nb. Upgrade the Rasa deployment\n\nCopyhelm upgrade -n <namespace> --reuse-values -f rasa-values.yaml \\  <release name> rasa/rasa\n\nPrevious\u00ab Slot Validation ActionsNextRasa HTTP API \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "768": {"text": "Version: 3.x\n\nRasa HTTP API\n\nYou can use the HTTP API to interact with a running Rasa server. With the API, you can train models, send messages, run tests, and more.\n\nLooking for API endpoints? Check out the API Spec for all of the available endpoints as well as their request and response formats.\n\nEnabling the HTTP API#\n\nBy default, running a Rasa server does not enable the API endpoints. Interactions\nwith the bot can happen over the exposed webhooks/<channel>/webhook endpoints.\n\nTo enable the API for direct interaction with conversation trackers and other\nbot endpoints, add the --enable-api parameter to your run command:\n\nCopyrasa run --enable-api\n\nNote that you start the server with an NLU-only model, not all the available endpoints\ncan be called. Some endpoints will return a 409 status code, as a trained\ndialogue model is needed to process the request.\n\ncautionMake sure to secure your server, either by restricting access to the server (e.g. using firewalls), or\nby enabling an authentication method. See Security Considerations.\n\nBy default, the HTTP server runs as a single process. You can change the number\nof worker processes using the SANIC_WORKERS environment variable. It is\nrecommended that you set the number of workers to the number of available CPU cores\n(check out the\nSanic docs\nfor more details). This will only work in combination with the\nRedisLockStore (see Lock Stores.\n\ncautionThe SocketIO channel does not support multiple worker processes. \n\nSecurity Considerations#\n\nWe recommend that you don't expose the Rasa Server to the outside world directly, but\nrather connect to it via e.g. Nginx.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "769": {"text": "Nevertheless, there are two authentication methods built in:\n\nToken Based Auth#\n\nTo use a plaintext token to secure your server, specify the token in the argument --auth-token thisismysecret when starting\nthe server:\n\nCopyrasa run \\    --enable-api \\    --auth-token thisismysecret\n\nAny clients sending requests to the server must pass the token\nas a query parameter, or the request will be rejected. For example, to fetch a tracker from the server:\n\nCopycurl -XGET localhost:5005/conversations/default/tracker?token=thisismysecret\n\nJWT Based Auth#\n\nTo use JWT based authentication, specify the JWT secret in the argument --jwt-secret thisismysecret\non startup of the server:\n\nCopyrasa run \\    --enable-api \\    --jwt-secret thisismysecret\n\nIf you want to sign a JWT token with asymmetric algorithms, you can specify the JWT private key to the --jwt-private-key\nCLI argument. You must pass the public key to the --jwt-secret argument, and also specify the algorithm to the\n--jwt-method argument:\n\nCopyrasa run \\    --enable-api \\    --jwt-secret <public_key> \\    --jwt-private-key <private_key> \\    --jwt-method RS512\n\nClient requests to the server will need to contain a valid JWT token in\nthe Authorization header that is signed using this secret\nand the HS256 algorithm e.g.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "770": {"text": "Copy\"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ\"                 \"zdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIi\"                 \"wiaWF0IjoxNTE2MjM5MDIyfQ.qdrr2_a7Sd80gmCWjnDomO\"                 \"Gl8eZFVfKXA6jhncgRn-I\"\n\nThe token's payload must contain an object under the user key,\nwhich in turn must contain the username and role attributes.\nThe following is an example payload for a JWT token:\n\nCopy{ \"user\": { \"username\": \"<sender_id>\", \"role\": \"user\" }}\n\nIf the role is admin, all endpoints are accessible.\nIf the role is user, endpoints with a sender_id parameter are only accessible\nif the sender_id matches the payload's username property.\n\nCopyrasa run \\    -m models \\    --enable-api \\    --jwt-secret thisismysecret\n\nTo create and encode the token, you can use tools such as the JWT Debugger, or a Python module such as PyJWT.\n\nPrevious\u00ab Deploy Rasa Action ServerNextNLU-Only Server \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "771": {"text": "Version: 3.x\n\nNLU-Only Server\n\nYou can run an NLU-only server and use the HTTP API to connect to it.\n\nConnecting to an NLU server#\n\nYou can connect a Rasa NLU-only server to a separately running Rasa dialogue management only server\nby adding the connection details to the dialogue management server's endpoint configuration file:\n\nendpoints.ymlCopynlu: url: \"http://<your nlu host>:<your nlu port>\" token: <token> # [optional] token_name: <name of the token> # [optional] (default: token)\n\nThe token and token_name refer to optional authentication parameters.\n\nThe dialogue management server should serve a model that does not include an NLU model.\nTo obtain a dialogue management only model, train a model with rasa train core or use\nrasa train but exclude all NLU data.\n\nWhen the dialogue management server receives a message, it will send a request to\nhttp://<your nlu host>:<your nlu port>/model/parse and use the parsing information returned.\n\nendpoint configurationThe endpoint configuration for the dialogue management server will include an nlu endpoint that refers to your NLU only server. Therefore you should use a separate endpoint configuration file for the NLU server, excluding the nlu endpoint.\n\nIf you are implementing a custom NLU server (i.e. not Rasa NLU), your server should provide a /model/parse endpoint that responds to requests in the same\nformat as a Rasa NLU server does.\n\nPrevious\u00ab Rasa HTTP APINextRasa Telemetry \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "772": {"text": "Version: 3.x\n\nRasa Telemetry\n\nRasa uses telemetry to report anonymous usage information. This information\nis essential to help improve Rasa for all users.\n\n\nFor the team working on Rasa it is important to understand\nhow the product is used. It allows us to properly prioritize our research\nefforts and feature development.\n\nYou will be notified about the telemetry reporting when running Rasa\nfor the first time.\n\nHow to opt-out#\n\nYou can opt out of telemetry reporting at any time by running the command:\n\nCopyrasa telemetry disable\n\nor by defining RASA_TELEMETRY_ENABLED=false as an environment variable.\nIf you want to enable reporting again, you can run:\n\nCopyrasa telemetry enable\n\nWhy do we use telemetry reporting?#\n\nAnonymous telemetry data allow us to prioritize our research efforts\nand feature development based on usage. We want to collect aggregated\ninformation on usage and reliability so that we can ensure a high-quality product.\n\nSo how will we use the reported telemetry data? Here are some examples\nof what we use the data for:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "773": {"text": "We will be able to know which languages, pipelines and policies are used.\nThis will enable us to direct our research efforts towards text and\ndialogue handling projects that will have the biggest impact for our users.We will be able to know data set sizes and general structure (e.g. the number\nof intents). This allows us to better test our software on different types\nof data sets and optimize the frameworks performance.We will be able to get more detail on the types of errors you are running\ninto while building an assistant (e.g. initialization, training, etc.).\nThis will let us improve the quality of our framework and better focus our\ntime on solving more common, frustrating issues.\n\nWhat about sensitive data?#\n\nYour sensitive data never leaves your machine. We:\n\ndon't report any personal identifiable informationdon't report your training datadon't report any messages your assistant receives or sends\n\nInspect what is reportedYou can view all the telemetry information that is reported\nby defining the environment variable RASA_TELEMETRY_DEBUG=true, for example when running the train command:CopyRASA_TELEMETRY_DEBUG=true rasa trainWhen you set RASA_TELEMETRY_DEBUG no information will be sent to any server,\ninstead it will be logged to the commandline as a json dump for you to inspect.\n\nWhat do we report?#\n\nRasa reports aggregated usage details, command invocations, performance\nmeasurements and errors.\nWe use the telemetry data to better understand usage patterns. The reported data\nwill directly allow us to better decide how to design future features\nand prioritize current work.\n\nSpecifically, we collect the following information for all telemetry events:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "774": {"text": "Specifically, we collect the following information for all telemetry events:\n\nType of the reported event (e.g. Training Started)Rasa machine ID: This is generated with a UUID and stored in the global Rasa\nconfig at ~/.config/rasa/global.yml and sent as metrics_idOne-way hash of the current working directory or a hash of the git remoteGeneral OS level information (operating system, number of CPUs, number of\nGPUs and whether the command is run inside a CI)Current Rasa and Python versionWhether the command is run inside a Docker containerHash of the license (if you are using Rasa Pro)\n\nHere is an example report that shows the data reported to Rasa after running\nrasa train:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "775": {"text": "Copy{ \"userId\": \"38d23c36c9be443281196080fcdd707d\", \"event\": \"Training Started\", \"properties\": { \"language\": \"en\", \"num_intent_examples\": 68, \"num_entity_examples\": 0, \"num_actions\": 17, \"num_templates\": 6, \"num_conditional_response_variations\": 5, \"num_slot_mappings\": 10, \"num_custom_slot_mappings\": 2, \"num_conditional_slot_mappings\": 3, \"num_slots\": 0, \"num_forms\": 0, \"num_intents\": 6, \"num_entities\": 0, \"num_story_steps\": 5, \"num_lookup_tables\": 0, \"num_synonyms\": 0, \"num_regexes\": 0, \"metrics_id\": \"38d23c36c9be443281196080fcdd707d\" }, \"context\": { \"os\": { \"name\": \"Darwin\", \"version\": \"19.4.0\" }, \"ci\": false, \"project\": \"a0a7178e6e5f9e6484c5cfa3ea4497ffc0c96d0ad3f3ad8e9399a1edd88e3cf4\", \"python\": \"3.7.5\", \"rasa_open_source\": \"2.0.0\", \"cpu\": 16, \"docker\": false, \"license_hash\": \"t1a7170e6e5f9e6484c5cfa3ea4497ffc0c96a0ad3f3ad8e9399adadd88e3cf5\" }}", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "776": {"text": "We cannot identify individual users from the dataset. It is anonymized and\nuntraceable back to the user.\n\nPrevious\u00ab NLU-Only ServerNextTelemetry Event Reference \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "777": {"text": "Version: 3.x\n\nTelemetry Event Reference\n\nEvent descriptions of telemetry data we report in order to improve our products.\n\n\nTelemetry events are only reported if telemetry is enabled. A detailed explanation\non the reasoning behind collecting optional telemetry events can be found in our\ntelemetry documentation.\n\nModel Training#\n\nTraining Started#\n\nbackend\n\n A training of a Rasa machine learning model got started. The event provides information on aggregated training data statistics. Event properties:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "778": {"text": "language (string): Language model is trained with, e.g. 'en'.training_id (string): Generated unique identifier for this training.type (string): Type of model trained, either 'nlu', 'core' or 'rasa'.pipeline (undefined): List of the pipeline configurations used for training.policies (undefined): List of the policy configurations used for training.train_schema (undefined): Training graph schema for graph recipepredict_schema (undefined): Predict graph schema for graph recipenum_intent_examples (integer): Number of NLU examples.num_entity_examples (integer): Number of entity examples.num_actions (integer): Number of actions defined in the domain.num_templates (integer): Number of templates or responses defined in the domain.num_conditional_response_variations (integer): Number of conditional response variations defined in the domain.num_slot_mappings (integer): Number of total slot mappings defined in the domain.num_custom_slot_mappings (integer): Number of custom slot mappings defined in the domain.num_conditional_slot_mappings (integer): Number of slot mappings with conditions attached defined in the domain.num_slots (integer): Number of slots defined in the domain.num_forms (integer): Number of forms defined in the domain.num_intents (integer): Number of intents defined in the domain.num_entities (integer): Number of entities defined in the domain.num_story_steps (integer): Number of story steps available.num_lookup_tables (integer): Number of different lookup tables.num_synonyms (integer): Total number of entity synonyms defined.num_regexes (integer): Total number of regexes defined.is_finetuning (boolean): True if a model is trained by", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "779": {"text": "regexes defined.is_finetuning (boolean): True if a model is trained by finetuning an existing model.recipe (string): Recipe used in training the model, either 'default.v1' or 'graph.v1'.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "780": {"text": "Training Completed#\n\nbackend\n\n The training of a Rasa machine learning model finished. The event provides information about the resulting model. Event properties:\n\ntraining_id (string): Generated unique identifier for this training. Can be used to join with 'Training Started'.type (string): Type of model trained, either 'nlu', 'core' or 'rasa'.runtime (integer): The time in seconds it took to train the model.\n\nModel Testing#\n\nModel Core Tested#\n\nbackend\n\n Triggered when a Core model is getting tested. Event properties:\n\nproject (string,null): Fingerprint of the project the tested model got trained in.num_story_steps (integer): Number of story steps used for testingend_to_end (boolean): Indicates if tests are running in end-to-end mode, testing message handling and dialogue handling at the same time\n\nModel NLU Tested#\n\nbackend\n\n Triggered when an NLU model is getting tested. Event properties:\n\nnum_intent_examples (integer): Number of NLU examples.num_entity_examples (integer): Number of entity examples.num_lookup_tables (integer): Number of different lookup tables.num_synonyms (integer): Total number of entity synonyms defined.num_regexes (integer): Total number of regexes defined.\n\nEnd-to-End Testing#\n\nEnd-to-End Testing Started#\n\nbackend\n\n Triggered when end-to-end testing has been started. Event properties:\n\nnumber_of_test_cases (integer): Number of test cases to be run.number_of_fixtures (integer): Number of fixtures defined globally.uses_fixtures (boolean): Indicates if any fixtures have been defined globally.\n\nModel Serving#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "781": {"text": "Model Serving#\n\nInteractive Learning Started#\n\nbackend\n\n Triggered when an interactive learning session got started. Event properties:\n\nskip_visualization (boolean): Whether the visualization of stories should be shown during the interactive learning sessionsave_in_e2e (boolean): Whether the data should be stored in end-to-end format\n\nServer Started#\n\nbackend\n\n Triggered when a Rasa Open Source server gets started. Event properties:\n\ninput_channels (array): Names of the used input channelsapi_enabled (boolean): Indicator if the API is enabled or if only the input channel is runningnumber_of_workers (integer): Amount of Sanic workers started as part of the serverendpoints_nlg (string,null): Type of the used NLG endpointendpoints_nlu (string,null): Type of the used NLU endpointendpoints_action_server (string,null): Type of the used action serverendpoints_model_server (string,null): Type of the used model serverendpoints_tracker_store (string,null): Type of the used tracker storeendpoints_lock_store (string,null): Type of the used lock storeendpoints_event_broker (string,null): Type of the used event brokerproject (string,null): Hash of the deployed model the server is started with\n\nShell Started#\n\nbackend\n\n Triggered when a shell session is started to talk to a trained bot. Event properties:\n\ntype (string): Type of the model, either 'nlu', 'core' or 'rasa'.\n\nRasa X Local Started#\n\nbackend\n\n Triggered when a Rasa X is started in local mode.\n\nMarkers Extraction#\n\nMarkers Extraction Initiated#\n\nbackend", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "782": {"text": "Markers Extraction#\n\nMarkers Extraction Initiated#\n\nbackend\n\n Triggered when marker extraction has been initiated. Event properties:\n\nstrategy (string): Strategy to use when selecting trackers to extract from.only_extract (boolean): Indicates if path to write out statistics hasn't been specified.seed (boolean): The seed to initialise the random number generator for use with the 'sample' strategy.count (integer,null): Number of trackers to extract from (for any strategy except 'all').\n\nMarkers Extracted#\n\nbackend\n\n Triggered when markers have been extracted. Event properties:\n\ntrackers_count (integer): Number of processed trackers.\n\nMarkers Parsed#\n\nbackend\n\n Triggered when markers have been successfully parsed. Event properties:\n\nmarker_count (integer): Number of parsed markers.max_depth (integer): Maximum depth of the parsed markers.branching_factor (integer): Maximum number of children of any of the parsed markers.\n\nMarkers Statistics Computed#\n\nbackend\n\n Triggered when marker statistics have been computed. Event properties:\n\ntrackers_count (integer): Number of processed trackers.\n\nData Handling#\n\nTraining Data Split#\n\nbackend\n\n Triggered when training data gets split. Event properties:\n\nfraction (number): Percentage of the data which goes into training data (the rest goes into the test set).type (string): Type of data, either 'nlu', 'core' or 'rasa'.\n\nTraining Data Validated#\n\nbackend\n\n Triggered when training data gets validated. Event properties:\n\nvalidation_success (boolean): whether the validation was successful\n\nTraining Data Converted#\n\nbackend", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "783": {"text": "Training Data Converted#\n\nbackend\n\n Triggered when training data gets converted. Event properties:\n\noutput_format (string): target format of the convertertype (string): Type of data, either 'nlu', 'core', 'config' or 'nlg'.\n\nTracker Exported#\n\nbackend\n\n Triggered when conversations get exported from a tracker store through an event broker. Event properties:\n\nevent_broker (string): Name of the used event brokertracker_store (string): Name of the used tracker storenumber_of_exported_events (integer): Number of events exported through the event broker\n\nStory Visualization Started#\n\nbackend\n\n Triggered when stories are getting visualized.\n\nMiscellaneous#\n\nTelemetry Disabled#\n\nbackend\n\n Triggered when telemetry reporting gets disabled. Last event sent before disabling telemetry. This event is not sent, if the user never enabled telemetry reporting before deactivating it.\n\nProject Created#\n\nbackend\n\n Triggered when a project is created using rasa init. Event properties:\n\ninit_directory (string): Hash of the directory path the project is created in\n\nPrevious\u00ab Rasa TelemetryNextrasa.cli.arguments.data \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "784": {"text": "Version: 3.x\n\nrasa.cli.arguments.data\n\nset_convert_arguments#\n\nCopydef set_convert_arguments(parser: argparse.ArgumentParser,                          data_type: Text) -> None\n\nSets convert command arguments.\n\nset_migrate_arguments#\n\nCopydef set_migrate_arguments(parser: argparse.ArgumentParser) -> None\n\nSets migrate command arguments.\n\nPrevious\u00ab Telemetry Event ReferenceNextrasa.cli.arguments.default_arguments \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "785": {"text": "Version: 3.x\n\nrasa.cli.arguments.default_arguments\n\nadd_endpoint_param#\n\nCopydef add_endpoint_param(        parser: Union[argparse.ArgumentParser, argparse._ActionsContainer],        help_text: Text,        default: Optional[Text] = DEFAULT_ENDPOINTS_PATH) -> None\n\nAdds an option to an argument parser to configure endpoints path.\n\nadd_logging_options#\n\nCopydef add_logging_options(parser: argparse.ArgumentParser) -> None\n\nAdd options to an argument parser to configure logging levels.\n\nPrevious\u00ab rasa.cli.arguments.dataNextrasa.cli.arguments.evaluate \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "786": {"text": "Version: 3.x\n\nrasa.cli.arguments.evaluate\n\nset_markers_arguments#\n\nCopydef set_markers_arguments(parser: argparse.ArgumentParser) -> None\n\nSpecifies arguments for rasa evaluate markers.\n\nset_markers_first_n_arguments#\n\nCopydef set_markers_first_n_arguments(parser: argparse.ArgumentParser) -> None\n\nSpecifies arguments for rasa evaluate markers first_n.\n\nset_markers_sample_arguments#\n\nCopydef set_markers_sample_arguments(parser: argparse.ArgumentParser) -> None\n\nSpecifies arguments for rasa evaluate markers sample_n.\n\nPrevious\u00ab rasa.cli.arguments.default_argumentsNextrasa.cli.arguments.interactive \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "787": {"text": "Version: 3.x\n\nrasa.cli.arguments.interactive\n\nset_interactive_arguments#\n\nCopydef set_interactive_arguments(parser: argparse.ArgumentParser) -> None\n\nSpecifies arguments for rasa interactive.\n\nset_interactive_core_arguments#\n\nCopydef set_interactive_core_arguments(parser: argparse.ArgumentParser) -> None\n\nSpecifies arguments for rasa interactive core.\n\nPrevious\u00ab rasa.cli.arguments.evaluateNextrasa.cli.arguments.run \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "788": {"text": "Version: 3.x\n\nrasa.cli.arguments.run\n\nset_run_arguments#\n\nCopydef set_run_arguments(parser: argparse.ArgumentParser) -> None\n\nArguments for running Rasa directly using rasa run.\n\nset_run_action_arguments#\n\nCopydef set_run_action_arguments(parser: argparse.ArgumentParser) -> None\n\nSet arguments for running Rasa SDK.\n\nadd_interface_argument#\n\nCopydef add_interface_argument(        parser: Union[argparse.ArgumentParser,                      argparse._ArgumentGroup]) -> None\n\nBinds the RASA process to a network interface.\n\nadd_port_argument#\n\nCopydef add_port_argument(        parser: Union[argparse.ArgumentParser,                      argparse._ArgumentGroup]) -> None\n\nAdd an argument for port.\n\nadd_server_arguments#\n\nCopydef add_server_arguments(parser: argparse.ArgumentParser) -> None\n\nAdd arguments for running API endpoint.\n\nPrevious\u00ab rasa.cli.arguments.interactiveNextrasa.cli.arguments.test \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "789": {"text": "Version: 3.x\n\nrasa.cli.arguments.test\n\nset_test_arguments#\n\nCopydef set_test_arguments(parser: argparse.ArgumentParser) -> None\n\nSets test arguments for a parser.\n\nPrevious\u00ab rasa.cli.arguments.runNextrasa.cli.arguments.train \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "790": {"text": "Version: 3.x\n\nrasa.cli.arguments.train\n\nset_train_arguments#\n\nCopydef set_train_arguments(parser: argparse.ArgumentParser) -> None\n\nSpecifies CLI arguments for rasa train.\n\nset_train_core_arguments#\n\nCopydef set_train_core_arguments(parser: argparse.ArgumentParser) -> None\n\nSpecifies CLI arguments for rasa train core.\n\nset_train_nlu_arguments#\n\nCopydef set_train_nlu_arguments(parser: argparse.ArgumentParser) -> None\n\nSpecifies CLI arguments for rasa train nlu.\n\nadd_force_param#\n\nCopydef add_force_param(    parser: Union[argparse.ArgumentParser,                  argparse._ActionsContainer]) -> None\n\nSpecifies if the model should be trained from scratch.\n\nadd_data_param#\n\nCopydef add_data_param(    parser: Union[argparse.ArgumentParser,                  argparse._ActionsContainer]) -> None\n\nSpecifies path to training data.\n\nadd_dry_run_param#\n\nCopydef add_dry_run_param(    parser: Union[argparse.ArgumentParser,                  argparse._ActionsContainer]) -> None\n\nAdds --dry-run argument to a specified parser.\n\nArguments:\n\nparser - An instance of ArgumentParser or _ActionsContainer.\n\nadd_validate_before_train#\n\nCopydef add_validate_before_train(    parser: Union[argparse.ArgumentParser,                  argparse._ActionsContainer]) -> None\n\nAdds parameters for validating the domain and data files before training.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "791": {"text": "Adds parameters for validating the domain and data files before training.\n\nArguments:\n\nparser - An instance of ArgumentParser or _ActionsContainer.\n\nadd_augmentation_param#\n\nCopydef add_augmentation_param(    parser: Union[argparse.ArgumentParser,                  argparse._ActionsContainer]) -> None\n\nSets the augmentation factor for the Core training.\n\nArguments:\n\nparser - An instance of ArgumentParser or _ActionsContainer.\n\nadd_debug_plots_param#\n\nCopydef add_debug_plots_param(    parser: Union[argparse.ArgumentParser,                  argparse._ActionsContainer]) -> None\n\nSpecifies if conversation flow should be visualized.\n\nadd_persist_nlu_data_param#\n\nCopydef add_persist_nlu_data_param(    parser: Union[argparse.ArgumentParser,                  argparse._ActionsContainer]) -> None\n\nAdds parameters for persisting the NLU training data with the model.\n\nadd_finetune_params#\n\nCopydef add_finetune_params(    parser: Union[argparse.ArgumentParser,                  argparse._ActionsContainer]) -> None\n\nAdds parameters for model finetuning.\n\nPrevious\u00ab rasa.cli.arguments.testNextrasa.cli.arguments.visualize \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "792": {"text": "Version: 3.x\n\nrasa.cli.arguments.visualize\n\nset_visualize_stories_arguments#\n\nCopydef set_visualize_stories_arguments(parser: argparse.ArgumentParser) -> None\n\nSets the CLI arguments for `rasa data visualize.\n\nPrevious\u00ab rasa.cli.arguments.trainNextrasa.cli.arguments.x \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "793": {"text": "Version: 3.x\n\nrasa.cli.arguments.x\n\nset_x_arguments#\n\nCopydef set_x_arguments(parser: argparse.ArgumentParser) -> None\n\nAdd CLI arguments for running rasa x --production.\n\nPrevious\u00ab rasa.cli.arguments.visualizeNextrasa.cli.data \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "794": {"text": "Version: 3.x\n\nrasa.cli.data\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all data parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\nsplit_nlu_data#\n\nCopydef split_nlu_data(args: argparse.Namespace) -> None\n\nLoad data from a file path and split the NLU data into test and train examples.\n\nArguments:\n\nargs - Commandline arguments\n\nsplit_stories_data#\n\nCopydef split_stories_data(args: argparse.Namespace) -> None\n\nLoad data from a file path and split stories into test and train examples.\n\nArguments:\n\nargs - Commandline arguments\n\nPrevious\u00ab rasa.cli.arguments.xNextrasa.cli.evaluate \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "795": {"text": "Version: 3.x\n\nrasa.cli.evaluate\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all evaluate parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\nPrevious\u00ab rasa.cli.dataNextrasa.cli.export \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "796": {"text": "Version: 3.x\n\nrasa.cli.export\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd subparser for rasa export.\n\nArguments:\n\nsubparsers - Subparsers action object to which argparse.ArgumentParser\nobjects can be added.parents - argparse.ArgumentParser objects whose arguments should also be\nincluded.\n\nexport_trackers#\n\nCopydef export_trackers(args: argparse.Namespace) -> None\n\nExport events for a connected tracker store using an event broker.\n\nArguments:\n\nargs - Command-line arguments to process.\n\nPrevious\u00ab rasa.cli.evaluateNextrasa.cli.interactive \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "797": {"text": "Version: 3.x\n\nrasa.cli.interactive\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all interactive cli parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\nperform_interactive_learning#\n\nCopydef perform_interactive_learning(args: argparse.Namespace,                                 zipped_model: Union[Text, \"Path\"],                                 file_importer: TrainingDataImporter) -> None\n\nPerforms interactive learning.\n\nArguments:\n\nargs - Namespace arguments.zipped_model - Path to zipped model.file_importer - File importer which provides the training data and model config.\n\nget_provided_model#\n\nCopydef get_provided_model(arg_model: Text) -> Optional[Union[Text, Path]]\n\nChecks model path input and selects model from it.\n\nvalidate_assistant_id_key_in_config#\n\nCopydef validate_assistant_id_key_in_config(        file_importer: TrainingDataImporter) -> None\n\nVerifies that config contains a unique value for assistant identifier.\n\nPrevious\u00ab rasa.cli.exportNextrasa.cli.run \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "798": {"text": "Version: 3.x\n\nrasa.cli.run\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all run parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\nrun#\n\nCopydef run(args: argparse.Namespace) -> None\n\nEntrypoint for rasa run.\n\nArguments:\n\nargs - The CLI arguments.\n\nPrevious\u00ab rasa.cli.interactiveNextrasa.cli.scaffold \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "799": {"text": "Version: 3.x\n\nrasa.cli.scaffold\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all init parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\nprint_train_or_instructions#\n\nCopydef print_train_or_instructions(args: argparse.Namespace) -> None\n\nTrain a model if the user wants to.\n\ninit_project#\n\nCopydef init_project(args: argparse.Namespace, path: Text) -> None\n\nInits project.\n\ncreate_initial_project#\n\nCopydef create_initial_project(path: Text) -> None\n\nCreates directory structure and templates for initial project.\n\nPrevious\u00ab rasa.cli.runNextrasa.cli.shell \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "800": {"text": "Version: 3.x\n\nrasa.cli.shell\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all shell parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\nshell_nlu#\n\nCopydef shell_nlu(args: argparse.Namespace) -> None\n\nTalk with an NLU only bot though the command line.\n\nshell#\n\nCopydef shell(args: argparse.Namespace) -> None\n\nTalk with a bot though the command line.\n\nPrevious\u00ab rasa.cli.scaffoldNextrasa.cli.telemetry \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "801": {"text": "Version: 3.x\n\nrasa.cli.telemetry\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all telemetry tracking parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\ninform_about_telemetry#\n\nCopydef inform_about_telemetry(_: argparse.Namespace) -> None\n\nInform user about telemetry tracking.\n\ndisable_telemetry#\n\nCopydef disable_telemetry(_: argparse.Namespace) -> None\n\nDisable telemetry tracking.\n\nenable_telemetry#\n\nCopydef enable_telemetry(_: argparse.Namespace) -> None\n\nEnable telemetry tracking.\n\nPrevious\u00ab rasa.cli.shellNextrasa.cli.test \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "802": {"text": "Version: 3.x\n\nrasa.cli.test\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all test parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\nrun_core_test_async#\n\nCopyasync def run_core_test_async(args: argparse.Namespace) -> None\n\nRun core tests.\n\nrun_nlu_test_async#\n\nCopyasync def run_nlu_test_async(config: Optional[Union[Text, List[Text]]],                             data_path: Text, models_path: Text,                             output_dir: Text, cross_validation: bool,                             percentages: List[int], runs: int,                             no_errors: bool, domain_path: Text,                             all_args: Dict[Text, Any]) -> None\n\nRuns NLU tests.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "803": {"text": "Runs NLU tests.\n\nArguments:\n\nall_args - all arguments gathered in a Dict so we can pass it as one argument\nto other functions.config - it refers to the model configuration file. It can be a single file or\na list of multiple files or a folder with multiple config files inside.data_path - path for the nlu data.models_path - path to a trained Rasa model.output_dir - output path for any files created during the evaluation.cross_validation - indicates if it should test the model using cross validation\nor not.percentages - defines the exclusion percentage of the training data.runs - number of comparison runs to make.domain_path - path to domain.no_errors - indicates if incorrect predictions should be written to a file\nor not.\n\nrun_nlu_test#\n\nCopydef run_nlu_test(args: argparse.Namespace) -> None\n\nRuns NLU tests.\n\nArguments:\n\nargs - the parsed CLI arguments for 'rasa test nlu'.\n\nrun_core_test#\n\nCopydef run_core_test(args: argparse.Namespace) -> None\n\nRuns Core tests.\n\nArguments:\n\nargs - the parsed CLI arguments for 'rasa test core'.\n\ntest#\n\nCopydef test(args: argparse.Namespace) -> None\n\nRun end-to-end tests.\n\nPrevious\u00ab rasa.cli.telemetryNextrasa.cli.train \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "804": {"text": "Version: 3.x\n\nrasa.cli.train\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all training parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\nrun_training#\n\nCopydef run_training(args: argparse.Namespace,                 can_exit: bool = False) -> Optional[Text]\n\nTrains a model.\n\nArguments:\n\nargs - Namespace arguments.can_exit - If True, the operation can send sys.exit in the case\ntraining was not successful.\n\nReturns:\n\n  Path to a trained model or None if training was not successful.\n\nrun_core_training#\n\nCopydef run_core_training(args: argparse.Namespace) -> Optional[Text]\n\nTrains a Rasa Core model only.\n\nArguments:\n\nargs - Command-line arguments to configure training.\n\nReturns:\n\n  Path to a trained model or None if training was not successful.\n\nrun_nlu_training#\n\nCopydef run_nlu_training(args: argparse.Namespace) -> Optional[Text]\n\nTrains an NLU model.\n\nArguments:\n\nargs - Namespace arguments.\n\nReturns:\n\n  Path to a trained model or None if training was not successful.\n\nPrevious\u00ab rasa.cli.testNextrasa.cli.utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "805": {"text": "Version: 3.x\n\nrasa.cli.utils\n\nget_validated_path#\n\nCopydef get_validated_path(        current: Optional[Union[\"Path\", Text]],        parameter: Text,        default: Optional[Union[\"Path\", Text]] = None,        none_is_valid: bool = False) -> Optional[Union[\"Path\", Text]]\n\nChecks whether a file path or its default value is valid and returns it.\n\nArguments:\n\ncurrent - The parsed value.parameter - The name of the parameter.default - The default value of the parameter.none_is_valid - True if None is valid value for the path,\nelse `False``\n\nReturns:\n\n  The current value if it was valid, else the default value of the\nargument if it is valid, else None.\n\nmissing_config_keys#\n\nCopydef missing_config_keys(path: Union[\"Path\", Text],                        mandatory_keys: List[Text]) -> List[Text]\n\nChecks whether the config file at path contains the mandatory_keys.\n\nArguments:\n\npath - The path to the config file.mandatory_keys - A list of mandatory config keys.\n\nReturns:\n\n  The list of missing config keys.\n\nvalidate_assistant_id_in_config#\n\nCopydef validate_assistant_id_in_config(config_file: Union[\"Path\", Text]) -> None\n\nVerifies that the assistant_id key exists and has a unique value in config.\n\nIssues a warning if the key does not exist or has the default value and replaces it\nwith a pseudo-random string value.\n\nvalidate_config_path#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "806": {"text": "validate_config_path#\n\nCopydef validate_config_path(config: Optional[Union[Text, \"Path\"]],                         default_config: Text = DEFAULT_CONFIG_PATH) -> Text\n\nVerifies that the config path exists.\n\nExit if the config file does not exist.\n\nArguments:\n\nconfig - Path to the config file.default_config - default config to use if the file at config doesn't exist.Returns - The path to the config file.\n\nvalidate_mandatory_config_keys#\n\nCopydef validate_mandatory_config_keys(config: Union[Text, \"Path\"],                                   mandatory_keys: List[Text]) -> Text\n\nGet a config from a config file and check if it is valid.\n\nExit if the config isn't valid.\n\nArguments:\n\nconfig - Path to the config file.mandatory_keys - The keys that have to be specified in the config file.Returns - The path to the config file if the config is valid.\n\nget_validated_config#\n\nCopydef get_validated_config(config: Optional[Union[Text, \"Path\"]],                         mandatory_keys: List[Text],                         default_config: Text = DEFAULT_CONFIG_PATH) -> Text\n\nValidates config and returns path to validated config file.\n\nvalidate_files#\n\nCopydef validate_files(fail_on_warnings: bool,                   max_history: Optional[int],                   importer: TrainingDataImporter,                   stories_only: bool = False) -> None\n\nValidates either the story structure or the entire project.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "807": {"text": "Validates either the story structure or the entire project.\n\nArguments:\n\nfail_on_warnings - True if the process should exit with a non-zero statusmax_history - The max history to use when validating the story structure.importer - The TrainingDataImporter to use to load the training data.stories_only - If True, only the story structure is validated.\n\ncancel_cause_not_found#\n\nCopydef cancel_cause_not_found(current: Optional[Union[\"Path\",                                                   Text]], parameter: Text,                           default: Optional[Union[\"Path\", Text]]) -> None\n\nExits with an error because the given path was not valid.\n\nArguments:\n\ncurrent - The path given by the user.parameter - The name of the parameter.default - The default value of the parameter.\n\nparse_last_positional_argument_as_model_path#\n\nCopydef parse_last_positional_argument_as_model_path() -> None\n\nFixes the parsing of a potential positional model path argument.\n\nbutton_to_string#\n\nCopydef button_to_string(button: Dict[Text, Any], idx: int = 0) -> Text\n\nCreate a string representation of a button.\n\nelement_to_string#\n\nCopydef element_to_string(element: Dict[Text, Any], idx: int = 0) -> Text\n\nCreate a string representation of an element.\n\nbutton_choices_from_message_data#\n\nCopydef button_choices_from_message_data(        message: Dict[Text, Any],        allow_free_text_input: bool = True) -> List[Text]", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "808": {"text": "Return list of choices to present to the user.\n\nIf allow_free_text_input is True, an additional option is added\nat the end along with the response buttons that allows the user\nto type in free text.\n\npayload_from_button_question#\n\nCopyasync def payload_from_button_question(button_question: \"Question\") -> Text\n\nPrompt user with a button question and returns the nlu payload.\n\nsignal_handler#\n\nCopydef signal_handler(_: int, __: FrameType) -> None\n\nKills Rasa when OS signal is received.\n\nPrevious\u00ab rasa.cli.trainNextrasa.cli.visualize \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "809": {"text": "Version: 3.x\n\nrasa.cli.visualize\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all visualization parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\nPrevious\u00ab rasa.cli.utilsNextrasa.cli.x \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "810": {"text": "Version: 3.x\n\nrasa.cli.x\n\nadd_subparser#\n\nCopydef add_subparser(subparsers: SubParsersAction,                  parents: List[argparse.ArgumentParser]) -> None\n\nAdd all rasa x parsers.\n\nArguments:\n\nsubparsers - subparser we are going to attach toparents - Parent parsers, needed to ensure tree structure in argparse\n\nrasa_x#\n\nCopydef rasa_x(args: argparse.Namespace) -> None\n\nRun Rasa with the x subcommand.\n\nrun_in_enterprise_connection_mode#\n\nCopydef run_in_enterprise_connection_mode(args: argparse.Namespace) -> None\n\nRun Rasa in a mode that enables using Rasa X as the config endpoint.\n\nPrevious\u00ab rasa.cli.visualizeNextrasa.core.actions.action \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "811": {"text": "Version: 3.x\n\nrasa.core.actions.action\n\ndefault_actions#\n\nCopydef default_actions(        action_endpoint: Optional[EndpointConfig] = None) -> List[\"Action\"]\n\nList default actions.\n\naction_for_index#\n\nCopydef action_for_index(index: int, domain: Domain,                     action_endpoint: Optional[EndpointConfig]) -> \"Action\"\n\nGet an action based on its index in the list of available actions.\n\nArguments:\n\nindex - The index of the action. This is usually used by Policys as they\npredict the action index instead of the name.domain - The Domain of the current model. The domain contains the actions\nprovided by the user + the default actions.action_endpoint - Can be used to run custom_actions\n(e.g. using the rasa-sdk).\n\nReturns:\n\n  The instantiated Action or None if no Action was found for the given\nindex.\n\nis_retrieval_action#\n\nCopydef is_retrieval_action(action_name: Text,                        retrieval_intents: List[Text]) -> bool\n\nCheck if an action name is a retrieval action.\n\nThe name for a retrieval action has an extra utter_ prefix added to\nthe corresponding retrieval intent name.\n\nArguments:\n\naction_name - Name of the action.retrieval_intents - List of retrieval intents defined in the NLU training data.\n\nReturns:\n\n True if the resolved intent name is present in the list of retrieval\nintents, False otherwise.\n\naction_for_name_or_text#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "812": {"text": "action_for_name_or_text#\n\nCopydef action_for_name_or_text(        action_name_or_text: Text, domain: Domain,        action_endpoint: Optional[EndpointConfig]) -> \"Action\"\n\nRetrieves an action by its name or by its text in case it's an end-to-end action.\n\nArguments:\n\naction_name_or_text - The name of the action.domain - The current model domain.action_endpoint - The endpoint to execute custom actions.\n\nRaises:\n\nActionNotFoundException - If action not in current domain.\n\nReturns:\n\n  The instantiated action.\n\ncreate_bot_utterance#\n\nCopydef create_bot_utterance(message: Dict[Text, Any]) -> BotUttered\n\nCreate BotUttered event from message.\n\nAction Objects#\n\nCopyclass Action()\n\nNext action to be taken in response to a dialogue state.\n\nname#\n\nCopydef name() -> Text\n\nUnique identifier of this simple action.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nExecute the side effects of this action.\n\nArguments:\n\nnlg - which nlg to use for response generationoutput_channel - output_channel to which to send the resulting message.tracker DialogueStateTracker - the state tracker for the current\nuser. You can access slot values using\ntracker.get_slot(slot_name) and the most recent user\nmessage is tracker.latest_message.text.``1 Domain - the bot's domain\n\nReturns:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "813": {"text": "Returns:\n\n  A list of :class:``2 instances\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of form.\n\nevent_for_successful_execution#\n\nCopydef event_for_successful_execution(        prediction: PolicyPrediction) -> ActionExecuted\n\nEvent which should be logged for the successful execution of this action.\n\nArguments:\n\nprediction - Prediction which led to the execution of this event.\n\nReturns:\n\n  Event which should be logged onto the tracker.\n\nActionBotResponse Objects#\n\nCopyclass ActionBotResponse(Action)\n\nAn action which only effect is to utter a response when it is run.\n\n__init__#\n\nCopydef __init__(name: Text, silent_fail: Optional[bool] = False) -> None\n\nCreates action.\n\nArguments:\n\nname - Name of the action.silent_fail - True if the action should fail silently in case no response\nwas defined for this action.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nSimple run implementation uttering a (hopefully defined) response.\n\nname#\n\nCopydef name() -> Text\n\nReturns action name.\n\nActionEndToEndResponse Objects#\n\nCopyclass ActionEndToEndResponse(Action)\n\nAction to utter end-to-end responses to the user.\n\n__init__#\n\nCopydef __init__(action_text: Text) -> None\n\nCreates action.\n\nArguments:\n\naction_text - Text of end-to-end bot response.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "814": {"text": "action_text - Text of end-to-end bot response.\n\nname#\n\nCopydef name() -> Text\n\nReturns action name.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action (see parent class for full docstring).\n\nevent_for_successful_execution#\n\nCopydef event_for_successful_execution(        prediction: PolicyPrediction) -> ActionExecuted\n\nEvent which should be logged for the successful execution of this action.\n\nArguments:\n\nprediction - Prediction which led to the execution of this event.\n\nReturns:\n\n  Event which should be logged onto the tracker.\n\nActionRetrieveResponse Objects#\n\nCopyclass ActionRetrieveResponse(ActionBotResponse)\n\nAn action which queries the Response Selector for the appropriate response.\n\n__init__#\n\nCopydef __init__(name: Text, silent_fail: Optional[bool] = False) -> None\n\nCreates action. See docstring of parent class.\n\nintent_name_from_action#\n\nCopy@staticmethoddef intent_name_from_action(action_name: Text) -> Text\n\nResolve the name of the intent from the action name.\n\nget_full_retrieval_name#\n\nCopydef get_full_retrieval_name(tracker: \"DialogueStateTracker\") -> Optional[Text]\n\nReturns full retrieval name for the action.\n\nExtracts retrieval intent from response selector and\nreturns complete action utterance name.\n\nArguments:\n\ntracker - Tracker containing past conversation events.\n\nReturns:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "815": {"text": "Arguments:\n\ntracker - Tracker containing past conversation events.\n\nReturns:\n\n  Full retrieval name of the action if the last user utterance\ncontains a response selector output, None otherwise.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nQuery the appropriate response and create a bot utterance with that.\n\nname#\n\nCopydef name() -> Text\n\nReturns action name.\n\nActionBack Objects#\n\nCopyclass ActionBack(ActionBotResponse)\n\nRevert the tracker state by two user utterances.\n\nname#\n\nCopydef name() -> Text\n\nReturns action back name.\n\n__init__#\n\nCopydef __init__() -> None\n\nInitializes action back.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action. Please see parent class for the full docstring.\n\nActionListen Objects#\n\nCopyclass ActionListen(Action)\n\nThe first action in any turn - bot waits for a user message.\n\nThe bot should stop taking further actions and wait for the user to say\nsomething.\n\nname#\n\nCopydef name() -> Text\n\nReturns action listen name.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action. Please see parent class for the full docstring.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "816": {"text": "Runs action. Please see parent class for the full docstring.\n\nActionRestart Objects#\n\nCopyclass ActionRestart(ActionBotResponse)\n\nResets the tracker to its initial state.\n\nUtters the restart response if available.\n\nname#\n\nCopydef name() -> Text\n\nReturns action restart name.\n\n__init__#\n\nCopydef __init__() -> None\n\nInitializes action restart.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action. Please see parent class for the full docstring.\n\nActionSessionStart Objects#\n\nCopyclass ActionSessionStart(Action)\n\nApplies a conversation session start.\n\nTakes all SlotSet events from the previous session and applies them to the new\nsession.\n\nname#\n\nCopydef name() -> Text\n\nReturns action start name.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action. Please see parent class for the full docstring.\n\nActionDefaultFallback Objects#\n\nCopyclass ActionDefaultFallback(ActionBotResponse)\n\nExecutes the fallback action and goes back to the prev state of the dialogue.\n\nname#\n\nCopydef name() -> Text\n\nReturns action default fallback name.\n\n__init__#\n\nCopydef __init__() -> None\n\nInitializes action default fallback.\n\nrun#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "817": {"text": "Initializes action default fallback.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action. Please see parent class for the full docstring.\n\nActionDeactivateLoop Objects#\n\nCopyclass ActionDeactivateLoop(Action)\n\nDeactivates an active loop.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action. Please see parent class for the full docstring.\n\nRemoteAction Objects#\n\nCopyclass RemoteAction(Action)\n\naction_response_format_spec#\n\nCopy@staticmethoddef action_response_format_spec() -> Dict[Text, Any]\n\nExpected response schema for an Action endpoint.\n\nUsed for validation of the response returned from the\nAction endpoint.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action. Please see parent class for the full docstring.\n\nActionExecutionRejection Objects#\n\nCopyclass ActionExecutionRejection(RasaException)\n\nRaising this exception will allow other policies\nto predict a different action.\n\n__init__#\n\nCopydef __init__(action_name: Text, message: Optional[Text] = None) -> None\n\nCreate a new ActionExecutionRejection exception.\n\nActionRevertFallbackEvents Objects#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "818": {"text": "ActionRevertFallbackEvents Objects#\n\nCopyclass ActionRevertFallbackEvents(Action)\n\nReverts events which were done during the TwoStageFallbackPolicy.\n\nThis reverts user messages and bot utterances done during a fallback\nof the TwoStageFallbackPolicy. By doing so it is not necessary to\nwrite custom stories for the different paths, but only of the happy\npath. This is deprecated and can be removed once the\nTwoStageFallbackPolicy is removed.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action. Please see parent class for the full docstring.\n\nActionUnlikelyIntent Objects#\n\nCopyclass ActionUnlikelyIntent(Action)\n\nAn action that indicates that the intent predicted by NLU is unexpected.\n\nThis action can be predicted by UnexpecTEDIntentPolicy.\n\nname#\n\nCopydef name() -> Text\n\nReturns the name of the action.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action. Please see parent class for the full docstring.\n\nhas_user_affirmed#\n\nCopydef has_user_affirmed(tracker: \"DialogueStateTracker\") -> bool\n\nIndicates if the last executed action is action_default_ask_affirmation.\n\nActionDefaultAskAffirmation Objects#\n\nCopyclass ActionDefaultAskAffirmation(Action)\n\nDefault implementation which asks the user to affirm his intent.", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "819": {"text": "Default implementation which asks the user to affirm his intent.\n\nIt is suggested to overwrite this default action with a custom action\nto have more meaningful prompts for the affirmations. E.g. have a\ndescription of the intent instead of its identifier name.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]\n\nRuns action. Please see parent class for the full docstring.\n\nActionDefaultAskRephrase Objects#\n\nCopyclass ActionDefaultAskRephrase(ActionBotResponse)\n\nDefault implementation which asks the user to rephrase his intent.\n\nname#\n\nCopydef name() -> Text\n\nReturns action default ask rephrase name.\n\n__init__#\n\nCopydef __init__() -> None\n\nInitializes action default ask rephrase.\n\nActionExtractSlots Objects#\n\nCopyclass ActionExtractSlots(Action)\n\nDefault action that runs after each user turn.\n\nAction is executed automatically in MessageProcessor.handle_message(...)\nbefore the next predicted action is run.\n\nSet slots to extracted values from user message\naccording to assigned slot mappings.\n\n__init__#\n\nCopydef __init__(action_endpoint: Optional[EndpointConfig]) -> None\n\nInitializes default action extract slots.\n\nname#\n\nCopydef name() -> Text\n\nReturns action_extract_slots name.\n\nrun#\n\nCopyasync def run(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",              tracker: \"DialogueStateTracker\",              domain: \"Domain\") -> List[Event]", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "820": {"text": "Runs action. Please see parent class for the full docstring.\n\nextract_slot_value_from_predefined_mapping#\n\nCopydef extract_slot_value_from_predefined_mapping(        mapping_type: SlotMappingType, mapping: Dict[Text, Any],        tracker: \"DialogueStateTracker\") -> List[Any]\n\nExtracts slot value if slot has an applicable predefined mapping.\n\nPrevious\u00ab rasa.cli.xNextrasa.core.actions.forms \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "821": {"text": "Version: 3.x\n\nrasa.core.actions.forms\n\nFormAction Objects#\n\nCopyclass FormAction(LoopAction)\n\nAction which implements and executes the form logic.\n\n__init__#\n\nCopydef __init__(form_name: Text,             action_endpoint: Optional[EndpointConfig]) -> None\n\nCreates a FormAction.\n\nArguments:\n\nform_name - Name of the form.action_endpoint - Endpoint to execute custom actions.\n\nname#\n\nCopydef name() -> Text\n\nReturn the form name.\n\nrequired_slots#\n\nCopydef required_slots(domain: Domain) -> List[Text]\n\nA list of required slots that the form has to fill.\n\nReturns:\n\n  A list of slot names.\n\nfrom_entity#\n\nCopydef from_entity(entity: Text,                intent: Optional[Union[Text, List[Text]]] = None,                not_intent: Optional[Union[Text, List[Text]]] = None,                role: Optional[Text] = None,                group: Optional[Text] = None) -> Dict[Text, Any]\n\nA dictionary for slot mapping to extract slot value.\n\nFrom:\n\nan extracted entityconditioned onintent if it is not Nonenot_intent if it is not None,\nmeaning user intent should not be this intentrole if it is not Nonegroup if it is not None\n\nget_mappings_for_slot#\n\nCopydef get_mappings_for_slot(slot_to_fill: Text,                          domain: Domain) -> List[Dict[Text, Any]]\n\nGet mappings for requested slot.\n\nIf None, map requested slot to an entity with the same name", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "822": {"text": "If None, map requested slot to an entity with the same name\n\nentity_mapping_is_unique#\n\nCopydef entity_mapping_is_unique(slot_mapping: Dict[Text, Any],                             domain: Domain) -> bool\n\nVerifies if the from_entity mapping is unique.\n\nget_entity_value_for_slot#\n\nCopy@staticmethoddef get_entity_value_for_slot(name: Text,                              tracker: \"DialogueStateTracker\",                              slot_to_be_filled: Text,                              role: Optional[Text] = None,                              group: Optional[Text] = None) -> Any\n\nExtract entities for given name and optional role and group.\n\nArguments:\n\nname - entity type (name) of interesttracker - the trackerslot_to_be_filled - Slot which is supposed to be filled by this entity.role - optional entity role of interestgroup - optional entity group of interest\n\nReturns:\n\n  Value of entity.\n\nget_slot_to_fill#\n\nCopydef get_slot_to_fill(tracker: \"DialogueStateTracker\") -> Optional[str]\n\nGets the name of the slot which should be filled next.\n\nWhen switching to another form, the requested slot setting is still from the\nprevious form and must be ignored.\n\nReturns:\n\n  The slot name or None\n\nvalidate_slots#\n\nCopyasync def validate_slots(        slot_candidates: Dict[Text, Any], tracker: \"DialogueStateTracker\",        domain: Domain, output_channel: OutputChannel,        nlg: NaturalLanguageGenerator) -> List[Union[SlotSet, Event]]\n\nValidate the extracted slots.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "823": {"text": "Validate the extracted slots.\n\nIf a custom action is available for validating the slots, we call it to validate\nthem. Otherwise there is no validation.\n\nArguments:\n\nslot_candidates - Extracted slots which are candidates to fill the slots\nrequired by the form.tracker - The current conversation tracker.domain - The current model domain.output_channel - The output channel which can be used to send messages\nto the user.nlg - NaturalLanguageGenerator to use for response generation.\n\nReturns:\n\n  The validation events including potential bot messages and SlotSet events\nfor the validated slots, if the custom form validation action is present in\ndomain actions.\nOtherwise, returns empty list since the extracted slots already have\ncorresponding SlotSet events in the tracker.\n\nvalidate#\n\nCopyasync def validate(        tracker: \"DialogueStateTracker\", domain: Domain,        output_channel: OutputChannel,        nlg: NaturalLanguageGenerator) -> List[Union[SlotSet, Event]]\n\nExtract and validate value of requested slot and other slots.\n\nReturns:\n\n  The new validation events created by the custom form validation action\n\nRaises:\n\n  ActionExecutionRejection exception to reject execution of form action\nif nothing was extracted.\n\n  Subclass this method to add custom validation and rejection logic.\n\nrequest_next_slot#\n\nCopyasync def request_next_slot(        tracker: \"DialogueStateTracker\", domain: Domain,        output_channel: OutputChannel, nlg: NaturalLanguageGenerator,        events_so_far: List[Event]) -> List[Union[SlotSet, Event]]\n\nRequest the next slot and response if needed, else return None.\n\nactivate#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "824": {"text": "Request the next slot and response if needed, else return None.\n\nactivate#\n\nCopyasync def activate(output_channel: \"OutputChannel\",                   nlg: \"NaturalLanguageGenerator\",                   tracker: \"DialogueStateTracker\",                   domain: \"Domain\") -> List[Event]\n\nActivate form if the form is called for the first time.\n\nIf activating, run action_extract_slots to fill slots with\nmapping conditions from trigger intents.\nValidate any required slots that can be filled, and return any SlotSet\nevents from the extraction and validation of these pre-filled slots.\n\nArguments:\n\noutput_channel - The output channel which can be used to send messages\nto the user.nlg - NaturalLanguageGenerator to use for response generation.tracker - Current conversation tracker of the user.domain - Current model domain.\n\nReturns:\n\n  Events from the activation.\n\ndo#\n\nCopyasync def do(output_channel: \"OutputChannel\", nlg: \"NaturalLanguageGenerator\",             tracker: \"DialogueStateTracker\", domain: \"Domain\",             events_so_far: List[Event]) -> List[Event]\n\nExecutes form loop after activation.\n\nis_done#\n\nCopyasync def is_done(output_channel: \"OutputChannel\",                  nlg: \"NaturalLanguageGenerator\",                  tracker: \"DialogueStateTracker\", domain: \"Domain\",                  events_so_far: List[Event]) -> bool\n\nChecks if loop can be terminated.\n\ndeactivate#\n\nCopyasync def deactivate(*args: Any, **kwargs: Any) -> List[Event]\n\nDeactivates form.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "825": {"text": "Deactivates form.\n\nPrevious\u00ab rasa.core.actions.actionNextrasa.core.brokers.broker \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "826": {"text": "Version: 3.x\n\nrasa.core.brokers.broker\n\nEventBroker Objects#\n\nCopyclass EventBroker()\n\nBase class for any event broker implementation.\n\ncreate#\n\nCopy@staticmethodasync def create(        obj: Union[EventBroker, EndpointConfig, None],        loop: Optional[AbstractEventLoop] = None) -> Optional[EventBroker]\n\nFactory to create an event broker.\n\nfrom_endpoint_config#\n\nCopy@classmethodasync def from_endpoint_config(        cls: Type[EB],        broker_config: EndpointConfig,        event_loop: Optional[AbstractEventLoop] = None) -> Optional[EB]\n\nCreates an EventBroker from the endpoint configuration.\n\nArguments:\n\nbroker_config - The configuration for the broker.event_loop - The current event loop or None.\n\nReturns:\n\n  An EventBroker object.\n\npublish#\n\nCopydef publish(event: Dict[Text, Any]) -> None\n\nPublishes a json-formatted Rasa Core event into an event queue.\n\nis_ready#\n\nCopydef is_ready() -> bool\n\nDetermine whether or not the event broker is ready.\n\nReturns:\n\n True by default, but this may be overridden by subclasses.\n\nclose#\n\nCopyasync def close() -> None\n\nClose the connection to an event broker.\n\nPrevious\u00ab rasa.core.actions.formsNextrasa.core.brokers.file \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "827": {"text": "Version: 3.x\n\nrasa.core.brokers.file\n\nFileEventBroker Objects#\n\nCopyclass FileEventBroker(EventBroker)\n\nLog events to a file in json format.\n\nThere will be one event per line and each event is stored as json.\n\nfrom_endpoint_config#\n\nCopy@classmethodasync def from_endpoint_config(    cls,    broker_config: Optional[\"EndpointConfig\"],    event_loop: Optional[AbstractEventLoop] = None) -> Optional[\"FileEventBroker\"]\n\nCreates broker. See the parent class for more information.\n\npublish#\n\nCopydef publish(event: Dict) -> None\n\nWrite event to file.\n\nPrevious\u00ab rasa.core.brokers.brokerNextrasa.core.brokers.kafka \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "828": {"text": "Version: 3.x\n\nrasa.core.brokers.kafka\n\nKafkaEventBroker Objects#\n\nCopyclass KafkaEventBroker(EventBroker)\n\nKafka event broker.\n\n__init__#\n\nCopydef __init__(url: Union[Text, List[Text], None],             topic: Text = \"rasa_core_events\",             client_id: Optional[Text] = None,             partition_by_sender: bool = False,             sasl_username: Optional[Text] = None,             sasl_password: Optional[Text] = None,             sasl_mechanism: Optional[Text] = \"PLAIN\",             ssl_cafile: Optional[Text] = None,             ssl_certfile: Optional[Text] = None,             ssl_keyfile: Optional[Text] = None,             ssl_check_hostname: bool = False,             security_protocol: Text = \"SASL_PLAINTEXT\", **kwargs: Any) -> None\n\nKafka event broker.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "829": {"text": "Kafka event broker.\n\nArguments:\n\nurl - 'url[:port]' string (or list of 'url[:port]'\nstrings) that the producer should contact to bootstrap initial\ncluster metadata. This does not have to be the full node list.\nIt just needs to have at least one broker that will respond to a\nMetadata API Request.topic - Topics to subscribe to.client_id - A name for this client. This string is passed in each request\nto servers and can be used to identify specific server-side log entries\nthat correspond to this client. Also submitted to GroupCoordinator for\nlogging with respect to producer group administration.partition_by_sender - Flag to configure whether messages are partitioned by\nsender_id or notsasl_username - Username for plain authentication.sasl_password - Password for plain authentication.sasl_mechanism - Authentication mechanism when security_protocol is\nconfigured for SASL_PLAINTEXT or SASL_SSL.\nValid values are: PLAIN, GSSAPI, OAUTHBEARER, SCRAM-SHA-256,\nSCRAM-SHA-512. Default: PLAINssl_cafile - Optional filename of ca file to use in certificate\nverification.topic0 - Optional filename of file in pem format containing\nthe client certificate, as well as any ca certificates needed to\nestablish the certificate's authenticity.topic1 - Optional filename containing the client private key.topic2 - Flag to configure whether ssl handshake\nshould verify that the certificate matches the broker's hostname.topic3 - Protocol used to communicate with brokers.\nValid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.\n\nfrom_endpoint_config#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "830": {"text": "from_endpoint_config#\n\nCopy@classmethodasync def from_endpoint_config(    cls,    broker_config: EndpointConfig,    event_loop: Optional[AbstractEventLoop] = None) -> Optional[\"KafkaEventBroker\"]\n\nCreates broker. See the parent class for more information.\n\npublish#\n\nCopydef publish(event: Dict[Text, Any],            retries: int = 60,            retry_delay_in_seconds: float = 5) -> None\n\nPublishes events.\n\nrasa_environment#\n\nCopy@rasa.shared.utils.common.lazy_propertydef rasa_environment() -> Optional[Text]\n\nGet value of the RASA_ENVIRONMENT environment variable.\n\nkafka_error_callback#\n\nCopydef kafka_error_callback(err: \"KafkaError\") -> None\n\nCallback for Kafka errors.\n\nAny exception raised from this callback will be re-raised from the\ntriggering flush() call.\n\ndelivery_report#\n\nCopydef delivery_report(err: Exception, msg: \"Message\") -> None\n\nReports the failure or success of a message delivery.\n\nArguments:\n\nerr KafkaError - The error that occurred on None on success.msg Message - The message that was produced or failed.\n\nPrevious\u00ab rasa.core.brokers.fileNextrasa.core.brokers.pika \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "831": {"text": "Version: 3.x\n\nrasa.core.brokers.pika\n\nPikaEventBroker Objects#\n\nCopyclass PikaEventBroker(EventBroker)\n\nPika-based event broker for publishing messages to RabbitMQ.\n\n__init__#\n\nCopydef __init__(host: Text,             username: Text,             password: Text,             port: Union[int, Text] = 5672,             queues: Union[List[Text], Tuple[Text, ...], Text, None] = None,             should_keep_unpublished_messages: bool = True,             raise_on_failure: bool = False,             event_loop: Optional[AbstractEventLoop] = None,             connection_attempts: int = 20,             retry_delay_in_seconds: float = 5,             exchange_name: Text = RABBITMQ_EXCHANGE, **kwargs: Any)\n\nInitialise RabbitMQ event broker.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "832": {"text": "Initialise RabbitMQ event broker.\n\nArguments:\n\nhost - Pika host.username - Username for authentication with Pika host.password - Password for authentication with Pika host.port - port of the Pika host.queues - Pika queues to declare and publish to.should_keep_unpublished_messages - Whether or not the event broker should\nmaintain a queue of unpublished messages to be published later in\ncase of errors.raise_on_failure - Whether to raise an exception if publishing fails. If\nFalse, keep retrying.event_loop - The event loop which will be used to run async functions. If\nusername0 username1 is used to get a loop.username2 - Number of attempts for connecting to RabbitMQ before\nan exception is thrown.username3 - Time in seconds between connection attempts.username4 - Exchange name to which the queues binds to.\nIf nothing is mentioned then the default exchange name would be used.\n\nfrom_endpoint_config#\n\nCopy@classmethodasync def from_endpoint_config(    cls,    broker_config: Optional[\"EndpointConfig\"],    event_loop: Optional[AbstractEventLoop] = None) -> Optional[\"PikaEventBroker\"]\n\nCreates broker. See the parent class for more information.\n\nconnect#\n\nCopyasync def connect() -> None\n\nConnects to RabbitMQ.\n\nclose#\n\nCopyasync def close() -> None\n\nCloses connection to RabbitMQ.\n\nis_ready#\n\nCopydef is_ready() -> bool\n\nReturn True if a connection was established.\n\npublish#\n\nCopydef publish(event: Dict[Text, Any],            headers: Optional[Dict[Text, Text]] = None) -> None\n\nPublishes event to Pika queues.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "833": {"text": "Publishes event to Pika queues.\n\nArguments:\n\nevent - Serialised event to be published.headers - Message headers to append to the published message. The headers\ncan be retrieved in the consumer from the headers attribute of the\nmessage's BasicProperties.\n\nrasa_environment#\n\nCopy@rasa.shared.utils.common.lazy_propertydef rasa_environment() -> Optional[Text]\n\nGet value of the RASA_ENVIRONMENT environment variable.\n\nPrevious\u00ab rasa.core.brokers.kafkaNextrasa.core.brokers.sql \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "834": {"text": "Version: 3.x\n\nrasa.core.brokers.sql\n\nSQLEventBroker Objects#\n\nCopyclass SQLEventBroker(EventBroker)\n\nSave events into an SQL database.\n\nAll events will be stored in a table called events.\n\nSQLBrokerEvent Objects#\n\nCopyclass SQLBrokerEvent(Base)\n\nORM which represents a row in the events table.\n\n__init__#\n\nCopydef __init__(dialect: Text = \"sqlite\",             host: Optional[Text] = None,             port: Optional[int] = None,             db: Text = \"events.db\",             username: Optional[Text] = None,             password: Optional[Text] = None) -> None\n\nInitializes SQLBrokerEvent.\n\nfrom_endpoint_config#\n\nCopy@classmethodasync def from_endpoint_config(        cls,        broker_config: EndpointConfig,        event_loop: Optional[AbstractEventLoop] = None) -> \"SQLEventBroker\"\n\nCreates broker. See the parent class for more information.\n\nsession_scope#\n\nCopy@contextlib.contextmanagerdef session_scope() -> Generator[Session, None, None]\n\nProvide a transactional scope around a series of operations.\n\npublish#\n\nCopydef publish(event: Dict[Text, Any]) -> None\n\nPublishes a json-formatted Rasa Core event into an event queue.\n\nPrevious\u00ab rasa.core.brokers.pikaNextrasa.core.channels.botframework \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "835": {"text": "Version: 3.x\n\nrasa.core.channels.botframework\n\nBotFramework Objects#\n\nCopyclass BotFramework(OutputChannel)\n\nA Microsoft Bot Framework communication channel.\n\nBotFrameworkInput Objects#\n\nCopyclass BotFrameworkInput(InputChannel)\n\nBot Framework input channel implementation.\n\n__init__#\n\nCopydef __init__(app_id: Text, app_password: Text) -> None\n\nCreate a Bot Framework input channel.\n\nArguments:\n\napp_id - Bot Framework's API idapp_password - Bot Framework application secret\n\nadd_attachments_to_metadata#\n\nCopy@staticmethoddef add_attachments_to_metadata(        postdata: Dict[Text, Any],        metadata: Optional[Dict[Text, Any]]) -> Optional[Dict[Text, Any]]\n\nMerge the values of postdata['attachments'] with metadata.\n\nblueprint#\n\nCopydef blueprint(        on_new_message: Callable[[UserMessage], Awaitable[Any]]) -> Blueprint\n\nDefines the Sanic blueprint for the bot framework integration.\n\nPrevious\u00ab rasa.core.brokers.sqlNextrasa.core.channels.callback \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "836": {"text": "Version: 3.x\n\nrasa.core.channels.callback\n\nCallbackInput Objects#\n\nCopyclass CallbackInput(RestInput)\n\nA custom REST http input channel that responds using a callback server.\n\nIncoming messages are received through a REST interface. Responses\nare sent asynchronously by calling a configured external REST endpoint.\n\nPrevious\u00ab rasa.core.channels.botframeworkNextrasa.core.channels.channel \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "837": {"text": "Version: 3.x\n\nrasa.core.channels.channel\n\nUserMessage Objects#\n\nCopyclass UserMessage()\n\nRepresents an incoming message.\n\nIncludes the channel the responses should be sent to.\n\n__init__#\n\nCopydef __init__(text: Optional[Text] = None,             output_channel: Optional[\"OutputChannel\"] = None,             sender_id: Optional[Text] = None,             parse_data: Dict[Text, Any] = None,             input_channel: Optional[Text] = None,             message_id: Optional[Text] = None,             metadata: Optional[Dict] = None) -> None\n\nCreates a UserMessage object.\n\nArguments:\n\ntext - the message text content.output_channel - the output channel which should be used to send\nbot responses back to the user.sender_id - the message owner ID.parse_data - rasa data about the message.input_channel - the name of the channel which received this message.message_id - ID of the message.metadata - additional metadata for this message.\n\nregister#\n\nCopydef register(input_channels: List[\"InputChannel\"], app: Sanic,             route: Optional[Text]) -> None\n\nRegisters input channel blueprints with Sanic.\n\nInputChannel Objects#\n\nCopyclass InputChannel()\n\nInput channel base class.\n\nname#\n\nCopy@classmethoddef name(cls) -> Text\n\nEvery input channel needs a name to identify it.\n\nblueprint#\n\nCopydef blueprint(        on_new_message: Callable[[UserMessage], Awaitable[Any]]) -> Blueprint\n\nDefines a Sanic blueprint.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "838": {"text": "Defines a Sanic blueprint.\n\nThe blueprint will be attached to a running sanic server and handle\nincoming routes it registered for.\n\nget_output_channel#\n\nCopydef get_output_channel() -> Optional[\"OutputChannel\"]\n\nCreate OutputChannel based on information provided by the input channel.\n\nImplementing this function is not required. If this function returns a valid\nOutputChannel this can be used by Rasa to send bot responses to the user\nwithout the user initiating an interaction.\n\nReturns:\n\n OutputChannel instance or None in case creating an output channel\nonly based on the information present in the InputChannel is not\npossible.\n\nget_metadata#\n\nCopydef get_metadata(request: Request) -> Optional[Dict[Text, Any]]\n\nExtracts additional information from the incoming request.\n\nImplementing this function is not required. However, it can be used to extract\nmetadata from the request. The return value is passed on to the\nUserMessage object and stored in the conversation tracker.\n\nArguments:\n\nrequest - incoming request with the message of the user\n\nReturns:\n\n  Metadata which was extracted from the request.\n\ndecode_jwt#\n\nCopydef decode_jwt(bearer_token: Text, jwt_key: Text, jwt_algorithm: Text) -> Dict\n\nDecodes a Bearer Token using the specific JWT key and algorithm.\n\nArguments:\n\nbearer_token - Encoded Bearer tokenjwt_key - Public JWT key for decoding the Bearer tokenjwt_algorithm - JWT algorithm used for decoding the Bearer token\n\nReturns:\n\n Dict containing the decoded payload if successful or an exception\nif unsuccessful\n\ndecode_bearer_token#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "839": {"text": "decode_bearer_token#\n\nCopydef decode_bearer_token(bearer_token: Text, jwt_key: Text,                        jwt_algorithm: Text) -> Optional[Dict]\n\nDecodes a Bearer Token using the specific JWT key and algorithm.\n\nArguments:\n\nbearer_token - Encoded Bearer tokenjwt_key - Public JWT key for decoding the Bearer tokenjwt_algorithm - JWT algorithm used for decoding the Bearer token\n\nReturns:\n\n Dict containing the decoded payload if successful or None if unsuccessful\n\nOutputChannel Objects#\n\nCopyclass OutputChannel()\n\nOutput channel base class.\n\nProvides sane implementation of the send methods\nfor text only output channels.\n\nname#\n\nCopy@classmethoddef name(cls) -> Text\n\nEvery output channel needs a name to identify it.\n\nsend_response#\n\nCopyasync def send_response(recipient_id: Text, message: Dict[Text, Any]) -> None\n\nSend a message to the client.\n\nsend_text_message#\n\nCopyasync def send_text_message(recipient_id: Text, text: Text, **kwargs: Any) -> None\n\nSend a message through this channel.\n\nsend_image_url#\n\nCopyasync def send_image_url(recipient_id: Text, image: Text, **kwargs: Any) -> None\n\nSends an image. Default will just post the url as a string.\n\nsend_attachment#\n\nCopyasync def send_attachment(recipient_id: Text, attachment: Text, **kwargs: Any) -> None\n\nSends an attachment. Default will just post as a string.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "840": {"text": "Sends an attachment. Default will just post as a string.\n\nsend_text_with_buttons#\n\nCopyasync def send_text_with_buttons(recipient_id: Text, text: Text,                                 buttons: List[Dict[Text, Any]], **kwargs: Any) -> None\n\nSends buttons to the output.\n\nDefault implementation will just post the buttons as a string.\n\nsend_quick_replies#\n\nCopyasync def send_quick_replies(recipient_id: Text, text: Text,                             quick_replies: List[Dict[Text, Any]], **kwargs: Any) -> None\n\nSends quick replies to the output.\n\nDefault implementation will just send as buttons.\n\nsend_elements#\n\nCopyasync def send_elements(recipient_id: Text, elements: Iterable[Dict[Text,                                                                    Any]], **kwargs: Any) -> None\n\nSends elements to the output.\n\nDefault implementation will just post the elements as a string.\n\nsend_custom_json#\n\nCopyasync def send_custom_json(recipient_id: Text, json_message: Dict[Text, Any], **kwargs: Any) -> None\n\nSends json dict to the output channel.\n\nDefault implementation will just post the json contents as a string.\n\nCollectingOutputChannel Objects#\n\nCopyclass CollectingOutputChannel(OutputChannel)\n\nOutput channel that collects send messages in a list\n\n(doesn't send them anywhere, just collects them).\n\n__init__#\n\nCopydef __init__() -> None\n\nInitialise list to collect messages.\n\nname#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "841": {"text": "Initialise list to collect messages.\n\nname#\n\nCopy@classmethoddef name(cls) -> Text\n\nName of the channel.\n\nsend_image_url#\n\nCopyasync def send_image_url(recipient_id: Text, image: Text, **kwargs: Any) -> None\n\nSends an image. Default will just post the url as a string.\n\nsend_attachment#\n\nCopyasync def send_attachment(recipient_id: Text, attachment: Text, **kwargs: Any) -> None\n\nSends an attachment. Default will just post as a string.\n\nPrevious\u00ab rasa.core.channels.callbackNextrasa.core.channels.console \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "842": {"text": "Version: 3.x\n\nrasa.core.channels.console\n\nprint_buttons#\n\nCopydef print_buttons(    message: Dict[Text, Any],    is_latest_message: bool = False,    color: Text = rasa.shared.utils.io.bcolors.OKBLUE) -> Optional[questionary.Question]\n\nCreate CLI buttons from message data.\n\nsend_message_receive_block#\n\nCopyasync def send_message_receive_block(server_url: Text, auth_token: Text,                                     sender_id: Text,                                     message: Text) -> List[Dict[Text, Any]]\n\nPosts message and returns response.\n\nrecord_messages#\n\nCopyasync def record_messages(sender_id: Text,                          server_url: Text = DEFAULT_SERVER_URL,                          auth_token: Text = \"\",                          max_message_limit: Optional[int] = None,                          use_response_stream: bool = True,                          request_timeout: Optional[int] = None) -> int\n\nRead messages from the command line and print bot responses.\n\nPrevious\u00ab rasa.core.channels.channelNextrasa.core.channels.facebook \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "843": {"text": "Version: 3.x\n\nrasa.core.channels.facebook\n\nMessenger Objects#\n\nCopyclass Messenger()\n\nImplement a fbmessenger to parse incoming webhooks and send msgs.\n\nmessage#\n\nCopyasync def message(message: Dict[Text, Any],                  metadata: Optional[Dict[Text, Any]]) -> None\n\nHandle an incoming event from the fb webhook.\n\npostback#\n\nCopyasync def postback(message: Dict[Text, Any],                   metadata: Optional[Dict[Text, Any]]) -> None\n\nHandle a postback (e.g. quick reply button).\n\nMessengerBot Objects#\n\nCopyclass MessengerBot(OutputChannel)\n\nA bot that uses fb-messenger to communicate.\n\nsend#\n\nCopydef send(recipient_id: Text, element: Any) -> None\n\nSends a message to the recipient using the messenger client.\n\nsend_text_message#\n\nCopyasync def send_text_message(recipient_id: Text, text: Text, **kwargs: Any) -> None\n\nSend a message through this channel.\n\nsend_image_url#\n\nCopyasync def send_image_url(recipient_id: Text, image: Text, **kwargs: Any) -> None\n\nSends an image. Default will just post the url as a string.\n\nsend_action#\n\nCopyasync def send_action(recipient_id: Text, sender_action: Text) -> None\n\nSends a sender action to facebook (e.g. \"typing_on\").\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "844": {"text": "Arguments:\n\nrecipient_id - recipientsender_action - action to send, e.g. \"typing_on\" or \"mark_seen\"\n\nsend_text_with_buttons#\n\nCopyasync def send_text_with_buttons(recipient_id: Text, text: Text,                                 buttons: List[Dict[Text, Any]], **kwargs: Any) -> None\n\nSends buttons to the output.\n\nsend_quick_replies#\n\nCopyasync def send_quick_replies(recipient_id: Text, text: Text,                             quick_replies: List[Dict[Text, Any]], **kwargs: Any) -> None\n\nSends quick replies to the output.\n\nsend_elements#\n\nCopyasync def send_elements(recipient_id: Text, elements: Iterable[Dict[Text,                                                                    Any]], **kwargs: Any) -> None\n\nSends elements to the output.\n\nsend_custom_json#\n\nCopyasync def send_custom_json(recipient_id: Text,                           json_message: Union[List, Dict[Text, Any]], **kwargs: Any) -> None\n\nSends custom json data to the output.\n\nFacebookInput Objects#\n\nCopyclass FacebookInput(InputChannel)\n\nFacebook input channel implementation. Based on the HTTPInputChannel.\n\n__init__#\n\nCopydef __init__(fb_verify: Text, fb_secret: Text, fb_access_token: Text) -> None\n\nCreate a facebook input channel.\n\nNeeds a couple of settings to properly authenticate and validate\nmessages. Details to setup:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "845": {"text": "https://github.com/rehabstudio/fbmessenger#facebook-app-setup\n\nArguments:\n\nfb_verify - FB Verification string\n(can be chosen by yourself on webhook creation)fb_secret - facebook application secretfb_access_token - access token to post in the name of the FB page\n\nvalidate_hub_signature#\n\nCopy@staticmethoddef validate_hub_signature(app_secret: Text, request_payload: bytes,                           hub_signature_header: Text) -> bool\n\nMake sure the incoming webhook requests are properly signed.\n\nArguments:\n\napp_secret - Secret Key for applicationrequest_payload - request bodyhub_signature_header - X-Hub-Signature header sent with request\n\nReturns:\n\nbool - indicated that hub signature is validated\n\nPrevious\u00ab rasa.core.channels.consoleNextrasa.core.channels.hangouts \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "846": {"text": "Version: 3.x\n\nrasa.core.channels.hangouts\n\nHangoutsOutput Objects#\n\nCopyclass HangoutsOutput(OutputChannel)\n\nA Hangouts communication channel.\n\nname#\n\nCopy@classmethoddef name(cls) -> Text\n\nReturn channel name.\n\n__init__#\n\nCopydef __init__() -> None\n\nStarts messages as empty dictionary.\n\nsend_custom_json#\n\nCopyasync def send_custom_json(recipient_id: Text, json_message: Dict, **kwargs: Any) -> None\n\nCustom json payload is simply forwarded to Google Hangouts without\nany modifications. Use this for more complex cards, which can be created\nin actions.py.\n\nHangoutsInput Objects#\n\nCopyclass HangoutsInput(InputChannel)\n\nChannel that uses Google Hangouts Chat API to communicate.\n\nname#\n\nCopy@classmethoddef name(cls) -> Text\n\nReturns channel name.\n\nblueprint#\n\nCopydef blueprint(        on_new_message: Callable[[UserMessage], Awaitable[None]]) -> Blueprint\n\nAPI configuration for the channel webhook.\n\nPrevious\u00ab rasa.core.channels.facebookNextrasa.core.channels.mattermost \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "847": {"text": "Version: 3.x\n\nrasa.core.channels.mattermost\n\nMattermostBot Objects#\n\nCopyclass MattermostBot(OutputChannel)\n\nA Mattermost communication channel.\n\ntoken_from_login#\n\nCopy@classmethoddef token_from_login(cls, url: Text, user: Text,                     password: Text) -> Optional[Text]\n\nRetrieve access token for mattermost user.\n\nsend_image_url#\n\nCopyasync def send_image_url(recipient_id: Text, image: Text, **kwargs: Any) -> None\n\nSends an image.\n\nsend_text_with_buttons#\n\nCopyasync def send_text_with_buttons(recipient_id: Text, text: Text,                                 buttons: List[Dict[Text, Any]], **kwargs: Any) -> None\n\nSends buttons to the output.\n\nMattermostInput Objects#\n\nCopyclass MattermostInput(InputChannel)\n\nMattermost input channel implemenation.\n\n__init__#\n\nCopydef __init__(url: Text, token: Text, webhook_url: Text) -> None\n\nCreate a Mattermost input channel.\nNeeds a couple of settings to properly authenticate and validate\nmessages.\n\nArguments:\n\nurl - Your Mattermost team url including /v4 example\nhttps://mysite.example.com/api/v4token - Your mattermost bot tokenwebhook_url - The mattermost callback url as specified\nin the outgoing webhooks in mattermost example\nhttps://mysite.example.com/webhooks/mattermost/webhook", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "848": {"text": "Previous\u00ab rasa.core.channels.hangoutsNextrasa.core.channels.rasa_chat \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "849": {"text": "Version: 3.x\n\nrasa.core.channels.rasa_chat\n\nRasaChatInput Objects#\n\nCopyclass RasaChatInput(RestInput)\n\nChat input channel for Rasa Enterprise.\n\nname#\n\nCopy@classmethoddef name(cls) -> Text\n\nName of the channel.\n\n__init__#\n\nCopydef __init__(url: Optional[Text]) -> None\n\nInitialise the channel with attributes.\n\nPrevious\u00ab rasa.core.channels.mattermostNextrasa.core.channels.rest \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "850": {"text": "Version: 3.x\n\nrasa.core.channels.rest\n\nRestInput Objects#\n\nCopyclass RestInput(InputChannel)\n\nA custom http input channel.\n\nThis implementation is the basis for a custom implementation of a chat\nfrontend. You can customize this to send messages to Rasa and\nretrieve responses from the assistant.\n\nget_metadata#\n\nCopydef get_metadata(request: Request) -> Optional[Dict[Text, Any]]\n\nExtracts additional information from the incoming request.\n\nImplementing this function is not required. However, it can be used to extract\nmetadata from the request. The return value is passed on to the\nUserMessage object and stored in the conversation tracker.\n\nArguments:\n\nrequest - incoming request with the message of the user\n\nReturns:\n\n  Metadata which was extracted from the request.\n\nstream_response#\n\nCopydef stream_response(        on_new_message: Callable[[UserMessage], Awaitable[None]], text: Text,        sender_id: Text, input_channel: Text,        metadata: Optional[Dict[Text,                                Any]]) -> Callable[[Any], Awaitable[None]]\n\nStreams response to the client.\n\nIf the stream option is enabled, this method will be called to\nstream the response to the client\n\nArguments:\n\non_new_message - sanic eventtext - message textsender_id - message sender_idinput_channel - input channel namemetadata - optional metadata sent with the message\n\nReturns:\n\n  Sanic stream\n\nblueprint#\n\nCopydef blueprint(        on_new_message: Callable[[UserMessage], Awaitable[None]]) -> Blueprint", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "851": {"text": "Groups the collection of endpoints used by rest channel.\n\nQueueOutputChannel Objects#\n\nCopyclass QueueOutputChannel(CollectingOutputChannel)\n\nOutput channel that collects send messages in a list.\n\n(doesn't send them anywhere, just collects them).\n\nname#\n\nCopy@classmethoddef name(cls) -> Text\n\nName of QueueOutputChannel.\n\nPrevious\u00ab rasa.core.channels.rasa_chatNextrasa.core.channels.rocketchat \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "852": {"text": "Version: 3.x\n\nrasa.core.channels.rocketchat\n\nRocketChatBot Objects#\n\nCopyclass RocketChatBot(OutputChannel)\n\nsend_text_message#\n\nCopyasync def send_text_message(recipient_id: Text, text: Text, **kwargs: Any) -> None\n\nSend message to output channel\n\nRocketChatInput Objects#\n\nCopyclass RocketChatInput(InputChannel)\n\nRocketChat input channel implementation.\n\nPrevious\u00ab rasa.core.channels.restNextrasa.core.channels.slack \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "853": {"text": "Version: 3.x\n\nrasa.core.channels.slack\n\nSlackBot Objects#\n\nCopyclass SlackBot(OutputChannel)\n\nA Slack communication channel.\n\nsend_text_message#\n\nCopyasync def send_text_message(recipient_id: Text, text: Text, **kwargs: Any) -> None\n\nSend text message to Slack API.\n\nsend_attachment#\n\nCopyasync def send_attachment(recipient_id: Text, attachment: Dict[Text, Any], **kwargs: Any) -> None\n\nSends message with attachment.\n\nSlackInput Objects#\n\nCopyclass SlackInput(InputChannel)\n\nSlack input channel implementation. Based on the HTTPInputChannel.\n\n__init__#\n\nCopydef __init__(slack_token: Text,             slack_channel: Optional[Text] = None,             proxy: Optional[Text] = None,             slack_retry_reason_header: Optional[Text] = None,             slack_retry_number_header: Optional[Text] = None,             errors_ignore_retry: Optional[List[Text]] = None,             use_threads: Optional[bool] = False,             slack_signing_secret: Text = \"\",             conversation_granularity: Optional[Text] = \"sender\") -> None\n\nCreate a Slack input channel.\n\nNeeds a couple of settings to properly authenticate and validate\nmessages. Details to setup:\n\nhttps://github.com/slackapi/python-slackclient\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "854": {"text": "Arguments:\n\nslack_token - Your Slack Authentication token. You can create a\nSlack app and get your Bot User OAuth Access Token\nhere <https://api.slack.com/slack-apps>_.slack_channel - the string identifier for a channel to which\nthe bot posts, or channel name (e.g. 'bot-test')\nIf not set, messages will be sent back\nto the \"App\" DM channel of your bot's name.proxy - A Proxy Server to route your traffic throughslack_retry_reason_header - Slack HTTP header name indicating reason\nthat slack send retry request.slack_retry_number_header - Slack HTTP header name indicating\nthe attempt number.errors_ignore_retry - Any error codes given by Slack\nincluded in this list will be ignored.\nError codes are listed\nhere <https://api.slack.com/events-api#errors>_.use_threads - If set to here <https://api.slack.com/slack-apps>0, your bot will send responses in Slack as\na threaded message. Responses will appear as a normal Slack message\nif set to here <https://api.slack.com/slack-apps>1.here <https://api.slack.com/slack-apps>2 - Slack creates a unique string for your app and\nshares it with you. This allows us to verify requests from Slack\nwith confidence by verifying signatures using your signing secret.here <https://api.slack.com/slack-apps>3 - conversation granularity for slack conversations.\nsender allows 1 conversation per user (across channels)\nchannel allows 1 conversation per user per channel\nthread allows 1 conversation per user per thread\n\nprocess_message#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "855": {"text": "process_message#\n\nCopyasync def process_message(request: Request,                          on_new_message: Callable[[UserMessage],                                                   Awaitable[Any]], text: Text,                          sender_id: Optional[Text],                          metadata: Optional[Dict]) -> Any\n\nSlack retries to post messages up to 3 times based on\nfailure conditions defined here:\nhttps://api.slack.com/events-api#failure_conditions.\n\nget_metadata#\n\nCopydef get_metadata(request: Request) -> Dict[Text, Any]\n\nExtracts the metadata from a slack API event.\n\nSlack Documentation: https://api.slack.com/types/event\n\nArguments:\n\nrequest - A Request object that contains a slack API event in the body.\n\nReturns:\n\n  Metadata extracted from the sent event payload. This includes the output\nchannel for the response, and users that have installed the bot.\n\nis_request_from_slack_authentic#\n\nCopydef is_request_from_slack_authentic(request: Request) -> bool\n\nValidate a request from Slack for its authenticity.\n\nChecks if the signature matches the one we expect from Slack. Ensures\nwe don't process request from a third-party disguising as slack.\n\nArguments:\n\nrequest - incoming request to be checked\n\nReturns:\n\n True if the request came from Slack.\n\nPrevious\u00ab rasa.core.channels.rocketchatNextrasa.core.channels.socketio \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "856": {"text": "Version: 3.x\n\nrasa.core.channels.socketio\n\nSocketBlueprint Objects#\n\nCopyclass SocketBlueprint(Blueprint)\n\n__init__#\n\nCopydef __init__(sio: AsyncServer, socketio_path: Text, *args: Any, **kwargs: Any) -> None\n\nCreates a :class:sanic.Blueprint for routing socketio connenctions.\n\nArguments:\n\nsio: Instance of :class:socketio.AsyncServer classsocketio_path: string indicating the route to accept requests on.\n\nregister#\n\nCopydef register(app: Sanic, options: Dict[Text, Any]) -> None\n\nAttach the Socket.IO webserver to the given Sanic instance.\n\nArguments:\n\napp: Instance of :class:sanic.app.Sanic classoptions: Options to be used while registering the\nblueprint into the app.\n\nSocketIOOutput Objects#\n\nCopyclass SocketIOOutput(OutputChannel)\n\nsend_text_message#\n\nCopyasync def send_text_message(recipient_id: Text, text: Text, **kwargs: Any) -> None\n\nSend a message through this channel.\n\nsend_image_url#\n\nCopyasync def send_image_url(recipient_id: Text, image: Text, **kwargs: Any) -> None\n\nSends an image to the output\n\nsend_text_with_buttons#\n\nCopyasync def send_text_with_buttons(recipient_id: Text, text: Text,                                 buttons: List[Dict[Text, Any]], **kwargs: Any) -> None\n\nSends buttons to the output.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "857": {"text": "Sends buttons to the output.\n\nsend_elements#\n\nCopyasync def send_elements(recipient_id: Text, elements: Iterable[Dict[Text,                                                                    Any]], **kwargs: Any) -> None\n\nSends elements to the output.\n\nsend_custom_json#\n\nCopyasync def send_custom_json(recipient_id: Text, json_message: Dict[Text, Any], **kwargs: Any) -> None\n\nSends custom json to the output\n\nsend_attachment#\n\nCopyasync def send_attachment(recipient_id: Text, attachment: Dict[Text, Any], **kwargs: Any) -> None\n\nSends an attachment to the user.\n\nSocketIOInput Objects#\n\nCopyclass SocketIOInput(InputChannel)\n\nA socket.io input channel.\n\n__init__#\n\nCopydef __init__(user_message_evt: Text = \"user_uttered\",             bot_message_evt: Text = \"bot_uttered\",             namespace: Optional[Text] = None,             session_persistence: bool = False,             socketio_path: Optional[Text] = \"/socket.io\",             jwt_key: Optional[Text] = None,             jwt_method: Optional[Text] = \"HS256\",             metadata_key: Optional[Text] = \"metadata\")\n\nCreates a SocketIOInput object.\n\nget_output_channel#\n\nCopydef get_output_channel() -> Optional[\"OutputChannel\"]\n\nCreates socket.io output channel object.\n\nblueprint#\n\nCopydef blueprint(        on_new_message: Callable[[UserMessage], Awaitable[Any]]) -> Blueprint", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "858": {"text": "Defines a Sanic blueprint.\n\nPrevious\u00ab rasa.core.channels.slackNextrasa.core.channels.telegram \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "859": {"text": "Version: 3.x\n\nrasa.core.channels.telegram\n\nTelegramOutput Objects#\n\nCopyclass TelegramOutput(Bot, OutputChannel)\n\nOutput channel for Telegram.\n\nsend_text_message#\n\nCopyasync def send_text_message(recipient_id: Text, text: Text, **kwargs: Any) -> None\n\nSends text message.\n\nsend_image_url#\n\nCopyasync def send_image_url(recipient_id: Text, image: Text, **kwargs: Any) -> None\n\nSends an image.\n\nsend_text_with_buttons#\n\nCopyasync def send_text_with_buttons(recipient_id: Text,                                 text: Text,                                 buttons: List[Dict[Text, Any]],                                 button_type: Optional[Text] = \"inline\", **kwargs: Any) -> None\n\nSends a message with keyboard.\n\nFor more information: https://core.telegram.org/bots#keyboards\n\n:button_type inline: horizontal inline keyboard\n\n:button_type vertical: vertical inline keyboard\n\n:button_type reply: reply keyboard\n\nsend_custom_json#\n\nCopyasync def send_custom_json(recipient_id: Text, json_message: Dict[Text, Any], **kwargs: Any) -> None\n\nSends a message with a custom json payload.\n\nTelegramInput Objects#\n\nCopyclass TelegramInput(InputChannel)\n\nTelegram input channel\n\nget_output_channel#\n\nCopydef get_output_channel() -> TelegramOutput\n\nLoads the telegram channel.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "860": {"text": "Loads the telegram channel.\n\nPrevious\u00ab rasa.core.channels.socketioNextrasa.core.channels.twilio \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "861": {"text": "Version: 3.x\n\nrasa.core.channels.twilio\n\nTwilioOutput Objects#\n\nCopyclass TwilioOutput(Client, OutputChannel)\n\nOutput channel for Twilio.\n\nsend_text_message#\n\nCopyasync def send_text_message(recipient_id: Text, text: Text, **kwargs: Any) -> None\n\nSends text message.\n\nsend_image_url#\n\nCopyasync def send_image_url(recipient_id: Text, image: Text, **kwargs: Any) -> None\n\nSends an image.\n\nsend_custom_json#\n\nCopyasync def send_custom_json(recipient_id: Text, json_message: Dict[Text, Any], **kwargs: Any) -> None\n\nSend custom json dict.\n\nTwilioInput Objects#\n\nCopyclass TwilioInput(InputChannel)\n\nTwilio input channel.\n\nPrevious\u00ab rasa.core.channels.telegramNextrasa.core.channels.twilio_voice \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "862": {"text": "Version: 3.x\n\nrasa.core.channels.twilio_voice\n\nTwilioVoiceInput Objects#\n\nCopyclass TwilioVoiceInput(InputChannel)\n\nInput channel for Twilio Voice.\n\nname#\n\nCopy@classmethoddef name(cls) -> Text\n\nName of channel.\n\nfrom_credentials#\n\nCopy@classmethoddef from_credentials(cls, credentials: Optional[Dict[Text,                                                     Any]]) -> InputChannel\n\nLoad custom configurations.\n\n__init__#\n\nCopydef __init__(initial_prompt: Optional[Text],             reprompt_fallback_phrase: Optional[Text],             assistant_voice: Optional[Text],             speech_timeout: Text = \"5\",             speech_model: Text = \"default\",             enhanced: Text = \"false\") -> None\n\nCreates a connection to Twilio voice.\n\nArguments:\n\ninitial_prompt - text to use to prompt a conversation when call is answered.reprompt_fallback_phrase - phrase to use if no user response.assistant_voice - name of the assistant voice to use.speech_timeout - how long to pause when user finished speaking.speech_model - type of transcription model to use from Twilio.enhanced - toggle to use Twilio's premium speech transcription model.\n\nblueprint#\n\nCopydef blueprint(        on_new_message: Callable[[UserMessage], Awaitable[None]]) -> Blueprint\n\nDefines endpoints for Twilio voice channel.\n\nTwilioVoiceCollectingOutputChannel Objects#\n\nCopyclass TwilioVoiceCollectingOutputChannel(CollectingOutputChannel)\n\nOutput channel that collects send messages in a list.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "863": {"text": "Output channel that collects send messages in a list.\n\n(doesn't send them anywhere, just collects them).\n\nname#\n\nCopy@classmethoddef name(cls) -> Text\n\nName of the output channel.\n\nsend_text_message#\n\nCopyasync def send_text_message(recipient_id: Text, text: Text, **kwargs: Any) -> None\n\nSends the text message after removing emojis.\n\nsend_text_with_buttons#\n\nCopyasync def send_text_with_buttons(recipient_id: Text, text: Text,                                 buttons: List[Dict[Text, Any]], **kwargs: Any) -> None\n\nConvert buttons into a voice representation.\n\nsend_image_url#\n\nCopyasync def send_image_url(recipient_id: Text, image: Text, **kwargs: Any) -> None\n\nFor voice channel do not send images.\n\nPrevious\u00ab rasa.core.channels.twilioNextrasa.core.channels.webexteams \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "864": {"text": "Version: 3.x\n\nrasa.core.channels.webexteams\n\nWebexTeamsBot Objects#\n\nCopyclass WebexTeamsBot(OutputChannel)\n\nA Cisco WebexTeams communication channel.\n\nWebexTeamsInput Objects#\n\nCopyclass WebexTeamsInput(InputChannel)\n\nWebexTeams input channel. Based on the HTTPInputChannel.\n\n__init__#\n\nCopydef __init__(access_token: Text, room: Optional[Text] = None) -> None\n\nCreate a Cisco Webex Teams input channel.\n\nNeeds a couple of settings to properly authenticate and validate\nmessages. Details here https://developer.webex.com/authentication.html\n\nArguments:\n\naccess_token - Cisco WebexTeams bot access token.room - the string identifier for a room to which the bot posts\n\nPrevious\u00ab rasa.core.channels.twilio_voiceNextrasa.core.evaluation.marker \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "865": {"text": "Version: 3.x\n\nrasa.core.evaluation.marker\n\nAndMarker Objects#\n\nCopy@MarkerRegistry.configurable_markerclass AndMarker(OperatorMarker)\n\nChecks that all sub-markers apply.\n\npositive_tag#\n\nCopy@staticmethoddef positive_tag() -> Text\n\nReturns the tag to be used in a config file.\n\nnegated_tag#\n\nCopy@staticmethoddef negated_tag() -> Text\n\nReturns the tag to be used in a config file for the negated version.\n\nOrMarker Objects#\n\nCopy@MarkerRegistry.configurable_markerclass OrMarker(OperatorMarker)\n\nChecks that at least one sub-marker applies.\n\npositive_tag#\n\nCopy@staticmethoddef positive_tag() -> Text\n\nReturns the tag to be used in a config file.\n\nNotMarker Objects#\n\nCopy@MarkerRegistry.configurable_markerclass NotMarker(OperatorMarker)\n\nChecks that at least one sub-marker applies.\n\npositive_tag#\n\nCopy@staticmethoddef positive_tag() -> Text\n\nReturns the tag to be used in a config file.\n\nexpected_number_of_sub_markers#\n\nCopy@staticmethoddef expected_number_of_sub_markers() -> Optional[int]\n\nReturns the expected number of sub-markers (if there is any).\n\nSequenceMarker Objects#\n\nCopy@MarkerRegistry.configurable_markerclass SequenceMarker(OperatorMarker)\n\nChecks that all sub-markers apply consecutively in the specified order.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "866": {"text": "Checks that all sub-markers apply consecutively in the specified order.\n\nThe sequence marker application follows two rules:\n(1) Given a sequence of sub-markers m_0, m_1,...,m_n, the sequence marker applies\nat the i-th event if all sub-markers successively applied to some previous\nevents and the last sub-marker applies at the current i-th events.\n(2) If the sequence marker applies at the i-th event, then for it's next\napplication the events up to the i-th event will be ignored.\n\n__init__#\n\nCopydef __init__(markers: List[Marker],             negated: bool = False,             name: Optional[Text] = None) -> None\n\nInstantiate a new sequence marker.\n\nArguments:\n\nmarkers - the sub-markers listed in the expected ordernegated - whether this marker should be negated (i.e. a negated marker\napplies if and only if the non-negated marker does not apply)name - a custom name that can be used to replace the default string\nconversion of this marker\n\npositive_tag#\n\nCopy@staticmethoddef positive_tag() -> Text\n\nReturns the tag to be used in a config file.\n\nOccurrenceMarker Objects#\n\nCopy@MarkerRegistry.configurable_markerclass OccurrenceMarker(OperatorMarker)\n\nChecks that all sub-markers applied at least once in history.\n\nIt doesn't matter if the sub markers stop applying later in history. If they\napplied at least once they will always evaluate to True.\n\npositive_tag#\n\nCopy@staticmethoddef positive_tag() -> Text", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "867": {"text": "positive_tag#\n\nCopy@staticmethoddef positive_tag() -> Text\n\nReturns the tag to be used in a config file.\n\nnegated_tag#\n\nCopy@staticmethoddef negated_tag() -> Optional[Text]\n\nReturns the tag to be used in a config file for the negated version.\n\nexpected_number_of_sub_markers#\n\nCopy@staticmethoddef expected_number_of_sub_markers() -> Optional[int]\n\nReturns the expected number of sub-markers (if there is any).\n\nrelevant_events#\n\nCopydef relevant_events() -> List[int]\n\nOnly return index of first match (see parent class for full docstring).\n\nActionExecutedMarker Objects#\n\nCopy@MarkerRegistry.configurable_markerclass ActionExecutedMarker(ConditionMarker)\n\nChecks whether an action is executed at the current step.\n\npositive_tag#\n\nCopy@staticmethoddef positive_tag() -> Text\n\nReturns the tag to be used in a config file.\n\nnegated_tag#\n\nCopy@staticmethoddef negated_tag() -> Optional[Text]\n\nReturns the tag to be used in a config file for the negated version.\n\nvalidate_against_domain#\n\nCopydef validate_against_domain(domain: Domain) -> bool\n\nChecks that this marker (and its children) refer to entries in the domain.\n\nArguments:\n\ndomain - The domain to check against\n\nIntentDetectedMarker Objects#\n\nCopy@MarkerRegistry.configurable_markerclass IntentDetectedMarker(ConditionMarker)\n\nChecks whether an intent is expressed at the current step.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "868": {"text": "Checks whether an intent is expressed at the current step.\n\nMore precisely it applies at an event if this event is a UserUttered event\nwhere either (1) the retrieval intent or (2) just the intent coincides with\nthe specified text.\n\npositive_tag#\n\nCopy@staticmethoddef positive_tag() -> Text\n\nReturns the tag to be used in a config file.\n\nnegated_tag#\n\nCopy@staticmethoddef negated_tag() -> Optional[Text]\n\nReturns the tag to be used in a config file for the negated version.\n\nvalidate_against_domain#\n\nCopydef validate_against_domain(domain: Domain) -> bool\n\nChecks that this marker (and its children) refer to entries in the domain.\n\nArguments:\n\ndomain - The domain to check against\n\nSlotSetMarker Objects#\n\nCopy@MarkerRegistry.configurable_markerclass SlotSetMarker(ConditionMarker)\n\nChecks whether a slot is set at the current step.\n\nThe actual SlotSet event might have happened at an earlier step.\n\npositive_tag#\n\nCopy@staticmethoddef positive_tag() -> Text\n\nReturns the tag to be used in a config file.\n\nnegated_tag#\n\nCopy@staticmethoddef negated_tag() -> Optional[Text]\n\nReturns the tag to be used in a config file for the negated version.\n\nvalidate_against_domain#\n\nCopydef validate_against_domain(domain: Domain) -> bool\n\nChecks that this marker (and its children) refer to entries in the domain.\n\nArguments:\n\ndomain - The domain to check against.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "869": {"text": "Arguments:\n\ndomain - The domain to check against.\n\nPrevious\u00ab rasa.core.channels.webexteamsNextrasa.core.evaluation.marker_base \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "870": {"text": "Version: 3.x\n\nrasa.core.evaluation.marker_base\n\nMarkerRegistry Objects#\n\nCopyclass MarkerRegistry()\n\nKeeps track of tags that can be used to configure markers.\n\nregister_builtin_markers#\n\nCopy@classmethoddef register_builtin_markers(cls) -> None\n\nMust import all modules containing markers.\n\nconfigurable_marker#\n\nCopy@classmethoddef configurable_marker(cls, marker_class: Type[Marker]) -> Type[Marker]\n\nDecorator used to register a marker that can be used in config files.\n\nArguments:\n\nmarker_class - the marker class to be made available via config files\n\nReturns:\n\n  the registered marker class\n\nget_non_negated_tag#\n\nCopy@classmethoddef get_non_negated_tag(cls, tag_or_negated_tag: Text) -> Tuple[Text, bool]\n\nReturns the non-negated marker tag, given a (possible) negated marker tag.\n\nArguments:\n\ntag_or_negated_tag - the tag for a possibly negated marker\n\nReturns:\n\n  the tag itself if it was already positive, otherwise the positive version;\nand a boolean that represents whether the given tag was a negative one\n\nInvalidMarkerConfig Objects#\n\nCopyclass InvalidMarkerConfig(RasaException)\n\nException that can be raised when the config for a marker is not valid.\n\nEventMetaData Objects#\n\nCopy@dataclassclass EventMetaData()\n\nDescribes meta data per event in some session.\n\nMarker Objects#\n\nCopyclass Marker(ABC)", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "871": {"text": "Marker Objects#\n\nCopyclass Marker(ABC)\n\nA marker is a way of describing points in conversations you're interested in.\n\nHere, markers are stateful objects because they track the events of a conversation.\nAt each point in the conversation, one can observe whether a marker applies or\ndoes not apply to the conversation so far.\n\n__init__#\n\nCopydef __init__(name: Optional[Text] = None,             negated: bool = False,             description: Optional[Text] = None) -> None\n\nInstantiates a marker.\n\nArguments:\n\nname - a custom name that can be used to replace the default string\nconversion of this markernegated - whether this marker should be negated (i.e. a negated marker\napplies if and only if the non-negated marker does not apply)description - an optional description of the marker. It is not used\ninternally but can be used to document the marker.\n\nRaises:\n\n InvalidMarkerConfig if the chosen name of the marker is the tag of\na predefined marker.\n\nget_tag#\n\nCopydef get_tag() -> Text\n\nReturns the tag describing this marker.\n\npositive_tag#\n\nCopy@staticmethod@abstractmethoddef positive_tag() -> Text\n\nReturns the tag to be used in a config file.\n\nnegated_tag#\n\nCopy@staticmethoddef negated_tag() -> Optional[Text]\n\nReturns the tag to be used in a config file for the negated version.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "872": {"text": "Returns the tag to be used in a config file for the negated version.\n\nIf this maps to None, then this indicates that we do not allow a short-cut\nfor negating this marker. Hence, there is not a single tag to instantiate\na negated version of this marker. One must use a \"not\" in the configuration\nfile then.\n\ntrack#\n\nCopydef track(event: Event) -> None\n\nUpdates the marker according to the given event.\n\nArguments:\n\nevent - the next event of the conversation\n\nreset#\n\nCopydef reset() -> None\n\nClears the history of the marker.\n\nflatten#\n\nCopy@abstractmethoddef flatten() -> Iterator[Marker]\n\nReturns an iterator over all conditions and operators used in this marker.\n\nReturns:\n\n  an iterator over all conditions and operators that are part of this marker\n\nvalidate_against_domain#\n\nCopy@abstractmethoddef validate_against_domain(domain: Domain) -> bool\n\nChecks that this marker (and its children) refer to entries in the domain.\n\nArguments:\n\ndomain - The domain to check against\n\nmax_depth#\n\nCopy@abstractmethoddef max_depth() -> int\n\nGets the maximum depth from this point in the marker tree.\n\nevaluate_events#\n\nCopydef evaluate_events(events: List[Event]) -> List[SessionEvaluation]\n\nResets the marker, tracks all events, and collects some information.\n\nThe collected information includes:\n\nthe timestamp of each event where the marker applied andthe number of user turns that preceded that timestamp", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "873": {"text": "If this marker is the special ANY_MARKER (identified by its name), then\nresults will be collected for all (immediate) sub-markers.\n\nArguments:\n\nevents - a list of events describing a conversation\n\nReturns:\n\n  a list that contains, for each session contained in the tracker, a\ndictionary mapping that maps marker names to meta data of relevant\nevents\n\nrelevant_events#\n\nCopydef relevant_events() -> List[int]\n\nReturns the indices of those tracked events that are relevant for evaluation.\n\nNote: Overwrite this method if you create a new marker class that should not\ncontain meta data about each event where the marker applied in the final\nevaluation (see evaluate_events).\n\nReturns:\n\n  indices of tracked events\n\nfrom_path#\n\nCopy@classmethoddef from_path(cls, path: Union[Path, Text]) -> \"OrMarker\"\n\nLoads markers from one config file or all config files in a directory tree.\n\nEach config file should contain a dictionary mapping marker names to the\nrespective marker configuration.\nTo avoid confusion, the marker names must not coincide with the tag of\nany pre-defined markers. Moreover, marker names must be unique. This means,\nif you you load the markers from multiple files, then you have to make sure\nthat the names of the markers defined in these files are unique across all\nloaded files.\n\nNote that all loaded markers will be combined into one marker via one\nartificial OR-operator. When evaluating the resulting marker, then the\nartificial OR-operator will be ignored and results will be reported for\nevery sub-marker.\n\nFor more details how a single marker configuration looks like, have a look\nat Marker.from_config.\n\nArguments:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "874": {"text": "Arguments:\n\npath - either the path to a single config file or the root of the directory\ntree that contains marker config files\n\nReturns:\n\n  all configured markers, combined into one marker object\n\nfrom_config#\n\nCopy@staticmethoddef from_config(config: Any, name: Optional[Text] = None) -> Marker\n\nCreates a marker from the given config.\n\nA marker configuration is a dictionary mapping a marker tag (either a\npositive_tag or a negated_tag) to a sub-configuration.\nHow that sub-configuration looks like, depends on whether the tag describes\nan operator (see OperatorMarker.from_tag_and_sub_config) or a\ncondition (see ConditionMarker.from_tag_and_sub_config).\n\nArguments:\n\nconfig - a marker configurationname - a custom name that will be used for the top-level marker (if and\nonly if there is only one top-level marker)\n\nReturns:\n\n  the configured marker\n\nevaluate_trackers#\n\nCopyasync def evaluate_trackers(trackers: AsyncIterator[    Optional[DialogueStateTracker]],                            output_file: Path,                            session_stats_file: Optional[Path] = None,                            overall_stats_file: Optional[Path] = None) -> None\n\nCollect markers for each dialogue in each tracker loaded.\n\nArguments:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "875": {"text": "Collect markers for each dialogue in each tracker loaded.\n\nArguments:\n\ntrackers - An iterator over the trackers from which we want to extract\nmarkers.output_file - Path to write out the extracted markers.session_stats_file - (Optional) Path to write out statistics about the\nextracted markers for each session separately.overall_stats_file - (Optional) Path to write out statistics about the\nmarkers extracted from all session data.\n\nRaises:\n\n FileExistsError if any of the specified files already exists\nNotADirectoryError if any of the specified files is supposed to be\ncontained in a directory that does not exist\n\nOperatorMarker Objects#\n\nCopyclass OperatorMarker(Marker, ABC)\n\nCombines several markers into one.\n\n__init__#\n\nCopydef __init__(markers: List[Marker],             negated: bool = False,             name: Optional[Text] = None,             description: Optional[Text] = None) -> None\n\nInstantiates a marker.\n\nArguments:\n\nmarkers - the list of markers to combinenegated - whether this marker should be negated (i.e. a negated marker\napplies if and only if the non-negated marker does not apply)name - a custom name that can be used to replace the default string\nconversion of this markerdescription - an optional description of the marker. It is not used\ninternally but can be used to document the marker.\n\nRaises:\n\n InvalidMarkerConfig if the given number of sub-markers does not match\nthe expected number of sub-markers\n\nexpected_number_of_sub_markers#\n\nCopy@staticmethoddef expected_number_of_sub_markers() -> Optional[int]", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "876": {"text": "Returns the expected number of sub-markers (if there is any).\n\ntrack#\n\nCopydef track(event: Event) -> None\n\nUpdates the marker according to the given event.\n\nAll sub-markers will be updated before the compound marker itself is updated.\n\nArguments:\n\nevent - the next event of the conversation\n\nflatten#\n\nCopydef flatten() -> Iterator[Marker]\n\nReturns an iterator over all included markers, plus this marker itself.\n\nReturns:\n\n  an iterator over all markers that are part of this marker\n\nreset#\n\nCopydef reset() -> None\n\nResets the history of this marker and all its sub-markers.\n\nvalidate_against_domain#\n\nCopydef validate_against_domain(domain: Domain) -> bool\n\nChecks that this marker (and its children) refer to entries in the domain.\n\nArguments:\n\ndomain - The domain to check against\n\nmax_depth#\n\nCopydef max_depth() -> int\n\nGets the maximum depth from this point in the marker tree.\n\nfrom_tag_and_sub_config#\n\nCopy@staticmethoddef from_tag_and_sub_config(        tag: Text,        sub_config: Any,        name: Optional[Text] = None,        description: Optional[Text] = None) -> OperatorMarker\n\nCreates an operator marker from the given config.\n\nThe configuration must consist of a list of marker configurations.\nSee Marker.from_config for more details.\n\nArguments:\n\ntag - the tag identifying an operatorsub_config - a list of marker configsname - an optional custom name to be attached to the resulting markerdescription - an optional description of the marker\n\nReturns:", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "877": {"text": "Returns:\n\n  the configured operator marker\n\nRaises:\n\n InvalidMarkerConfig if the given config or the tag are not well-defined\n\nConditionMarker Objects#\n\nCopyclass ConditionMarker(Marker, ABC)\n\nA marker that does not contain any sub-markers.\n\n__init__#\n\nCopydef __init__(text: Text,             negated: bool = False,             name: Optional[Text] = None,             description: Optional[Text] = None) -> None\n\nInstantiates an atomic marker.\n\nArguments:\n\ntext - some text used to decide whether the marker appliesnegated - whether this marker should be negated (i.e. a negated marker\napplies if and only if the non-negated marker does not apply)name - a custom name that can be used to replace the default string\nconversion of this markerdescription - an optional description of the marker. It is not used\ninternally but can be used to document the marker.\n\nflatten#\n\nCopydef flatten() -> Iterator[ConditionMarker]\n\nReturns an iterator that just returns this AtomicMarker.\n\nReturns:\n\n  an iterator over all markers that are part of this marker, i.e. this marker\n\nmax_depth#\n\nCopydef max_depth() -> int\n\nGets the maximum depth from this point in the marker tree.\n\nfrom_tag_and_sub_config#\n\nCopy@staticmethoddef from_tag_and_sub_config(        tag: Text,        sub_config: Any,        name: Optional[Text] = None,        description: Optional[Text] = None) -> ConditionMarker\n\nCreates an atomic marker from the given config.\n\nArguments:", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "878": {"text": "Creates an atomic marker from the given config.\n\nArguments:\n\ntag - the tag identifying a conditionsub_config - a single text parameter expected by all condition markers;\ne.g. if the tag is for an intent_detected marker then the config\nshould contain an intent namename - a custom name for this marker\n\nReturns:\n\n  the configured ConditionMarker\n\nRaises:\n\n InvalidMarkerConfig if the given config or the tag are not well-defined\n\nPrevious\u00ab rasa.core.evaluation.markerNextrasa.core.evaluation.marker_stats \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "879": {"text": "Version: 3.x\n\nrasa.core.evaluation.marker_stats\n\ncompute_statistics#\n\nCopydef compute_statistics(    values: List[Union[float, int]]) -> Dict[Text, Union[int, float, np.floating]]\n\nComputes some statistics over the given numbers.\n\nMarkerStatistics Objects#\n\nCopyclass MarkerStatistics()\n\nComputes some statistics on marker extraction results.\n\n(1) Number of sessions where markers apply:\n\nFor each marker, we compute the total number (as well as the percentage) of\nsessions in which a marker applies at least once.\nMoreover, we output the total number of sessions that were parsed.\n\n(2) Number of user turns preceding relevant events - per sessions:\n\nFor each marker, we consider all relevant events where that marker applies.\nEverytime a marker applies, we check how many user turns precede that event.\nWe collect all these numbers and compute basic statistics (e.g. count and mean)\non them.\n\nThis means, per session, we compute how often a marker applies and how many\nuser turns precede a relevant marker application on average, in that session.\n\n(3) Number of user turns preceding relevant events - over all sessions:\n\nHere, for each marker, we consider all relevant events where a marker applies\nin any of the sessions. Then, we again calculate basic statistics over the\nrespective number of user turns that precede each of these events.\n\nThis means, we compute how many events the marker applies in total and we\ncompute an estimate of the expected number of user turns preceding that\nprecede an (relevant) event where a marker applies.\n\n__init__#\n\nCopydef __init__() -> None", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "880": {"text": "__init__#\n\nCopydef __init__() -> None\n\nCreates a new marker statistics object.\n\nprocess#\n\nCopydef process(    sender_id: Text, session_idx: int,    meta_data_on_relevant_events_per_marker: Dict[Text, List[EventMetaData]]) -> None\n\nProcesses the meta data that was extracted from a single session.\n\nInternally, this method ..\n\ncomputes some statistics for the given meta data and saves it for laterkeeps track of the total number of sessions processed and the\ncollects all metadata to be able to compute meta data over all\n\nArguments:\n\nsender_id - an id that, together with the session_idx identifies\nthe session from which the markers where extractedsession_idx - an index that, together with the sender_id identifies\nthe session from which the markers where extractedmeta_data_on_relevant_events_per_marker - marker extraction results,\ni.e. a dictionary mapping\nmarker names to the meta data describing relevant events\nfor those markers\n\noverall_statistic_to_csv#\n\nCopydef overall_statistic_to_csv(path: Path, overwrite: bool = False) -> None\n\nExports the overall statistics (over all processes sessions) to a csv file.\n\nArguments:\n\npath - path to where the csv file should be written.overwrite - set to True to enable overwriting an existing file\n\nper_session_statistics_to_csv#\n\nCopydef per_session_statistics_to_csv(path: Path, overwrite: bool = False) -> None\n\nExports the resulting statistics to a csv file.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "881": {"text": "Exports the resulting statistics to a csv file.\n\nArguments:\n\npath - path to where the csv file should be written.overwrite - set to True to enable overwriting an existing file\n\nPrevious\u00ab rasa.core.evaluation.marker_baseNextrasa.core.evaluation.marker_tracker_loader \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "882": {"text": "Version: 3.x\n\nrasa.core.evaluation.marker_tracker_loader\n\nstrategy_all#\n\nCopydef strategy_all(keys: List[Text], count: int) -> Iterable[Text]\n\nSelects all keys from the set of keys.\n\nstrategy_first_n#\n\nCopydef strategy_first_n(keys: List[Text], count: int) -> Iterable[Text]\n\nTakes the first N keys from the set of keys.\n\nstrategy_sample_n#\n\nCopydef strategy_sample_n(keys: List[Text], count: int) -> Iterable[Text]\n\nSamples N unique keys from the set of keys.\n\nMarkerTrackerLoader Objects#\n\nCopyclass MarkerTrackerLoader()\n\nRepresents a wrapper over a TrackerStore with a configurable access pattern.\n\n__init__#\n\nCopydef __init__(tracker_store: TrackerStore,             strategy: str,             count: int = None,             seed: Any = None) -> None\n\nCreates a MarkerTrackerLoader.\n\nArguments:\n\ntracker_store - The underlying tracker store to access.strategy - The strategy to use for selecting trackers,\ncan be 'all', 'sample_n', or 'first_n'.count - Number of trackers to return, can only be None if strategy is 'all'.seed - Optional seed to set up random number generator,\nonly useful if strategy is 'sample_n'.\n\nload#\n\nCopyasync def load() -> AsyncIterator[Optional[DialogueStateTracker]]\n\nLoads trackers according to strategy.\n\nPrevious\u00ab rasa.core.evaluation.marker_statsNextrasa.core.evaluation.markers \u00bb", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "883": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "884": {"text": "Version: 3.x\n\nrasa.core.evaluation.markers\n\nInvalidMarkersConfig Objects#\n\nCopyclass InvalidMarkersConfig(RasaException)\n\nException that can be raised when markers config is not valid.\n\nMarkerConfig Objects#\n\nCopyclass MarkerConfig()\n\nA class that represents the markers config.\n\nA markers config contains the markers and the conditions for when they apply.\nThe class reads the config, validates the schema, and validates the conditions.\n\nempty_config#\n\nCopy | @classmethod | empty_config(cls) -> Dict\n\nReturns an empty config file.\n\nload_config_from_path#\n\nCopy | @classmethod | load_config_from_path(cls, path: Union[Text, Path]) -> Dict\n\nLoads the config from a file or directory.\n\nfrom_file#\n\nCopy | @classmethod | from_file(cls, path: Text) -> Dict\n\nLoads the config from a YAML file.\n\nfrom_yaml#\n\nCopy | @classmethod | from_yaml(cls, yaml: Text, filename: Text = \"\") -> Dict\n\nLoads the config from YAML text after validating it.\n\nfrom_directory#\n\nCopy | @classmethod | from_directory(cls, path: Text) -> Dict\n\nLoads and appends multiple configs from a directory tree.\n\nvalidate_config#\n\nCopy | @classmethod | validate_config(cls, config: Dict, filename: Text = \"\") -> bool\n\nValidates the markers config according to the schema.\n\nconfig_format_spec#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "885": {"text": "Validates the markers config according to the schema.\n\nconfig_format_spec#\n\nCopy | @staticmethod | config_format_spec() -> Dict\n\nReturns expected schema for a markers config.\n\nPrevious\u00ab rasa.core.evaluation.marker_tracker_loaderNextrasa.core.events \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "886": {"text": "Version: 3.x\n\nrasa.core.events\n\ndeserialise_events#\n\nCopydeserialise_events(serialized_events: List[Dict[Text, Any]]) -> List[\"Event\"]\n\nConvert a list of dictionaries to a list of corresponding events.\n\nExample format:\n[{\"event\": \"slot\", \"value\": 5, \"name\": \"my_slot\"}]\n\nmd_format_message#\n\nCopymd_format_message(text: Text, intent: Optional[Text], entities: Union[Text, List[Any]]) -> Text\n\nUses NLU parser information to generate a message with inline entity annotations.\n\nArguments:\n\ntext - text of the messageintent - intent of the messageentities - entities of the message\n\nReturns:\n\n  Message with entities annotated inline, e.g.\nI am from [Berlin]{&quot;entity&quot;: &quot;city&quot;}.\n\nEvent Objects#\n\nCopyclass Event()\n\nEvents describe everything that occurs in\na conversation and tell the :class:rasa.core.trackers.DialogueStateTracker\nhow to update its state.\n\nresolve_by_type#\n\nCopy | @staticmethod | resolve_by_type(type_name: Text, default: Optional[Type[\"Event\"]] = None) -> Optional[Type[\"Event\"]]\n\nReturns a slots class by its type name.\n\nUserUttered Objects#\n\nCopyclass UserUttered(Event)\n\nThe user has said something to the bot.\n\nAs a side effect a new Turn will be created in the Tracker.\n\nas_sub_state#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "887": {"text": "as_sub_state#\n\nCopy | as_sub_state() -> Dict[Text, Union[None, Text, List[Optional[Text]]]]\n\nTurns a UserUttered event into a substate containing information about entities,\nintent and text of the UserUttered\n\nReturns:\n\n  a dictionary with intent name, text and entities\n\nBotUttered Objects#\n\nCopyclass BotUttered(Event)\n\nThe bot has said something to the user.\n\nThis class is not used in the story training as it is contained in the\n\nActionExecuted class. An entry is made in the Tracker.\n\nmessage#\n\nCopy | message() -> Dict[Text, Any]\n\nReturn the complete message as a dictionary.\n\nSlotSet Objects#\n\nCopyclass SlotSet(Event)\n\nThe user has specified their preference for the value of a slot.\n\nEvery slot has a name and a value. This event can be used to set a\nvalue for a slot on a conversation.\n\nAs a side effect the Tracker's slots will be updated so\nthat tracker.slots[key]=value.\n\nRestarted Objects#\n\nCopyclass Restarted(Event)\n\nConversation should start over & history wiped.\n\nInstead of deleting all events, this event can be used to reset the\ntrackers state (e.g. ignoring any past user messages & resetting all\nthe slots).\n\nUserUtteranceReverted Objects#\n\nCopyclass UserUtteranceReverted(Event)\n\nBot reverts everything until before the most recent user message.\n\nThe bot will revert all events after the latest UserUttered, this\nalso means that the last event on the tracker is usually action_listen\nand the bot is waiting for a new user message.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "888": {"text": "AllSlotsReset Objects#\n\nCopyclass AllSlotsReset(Event)\n\nAll Slots are reset to their initial values.\n\nIf you want to keep the dialogue history and only want to reset the\nslots, you can use this event to set all the slots to their initial\nvalues.\n\nReminderScheduled Objects#\n\nCopyclass ReminderScheduled(Event)\n\nSchedules the asynchronous triggering of a user intent\n(with entities if needed) at a given time.\n\n__init__#\n\nCopy | __init__(intent: Text, trigger_date_time: datetime, entities: Optional[List[Dict]] = None, name: Optional[Text] = None, kill_on_user_message: bool = True, timestamp: Optional[float] = None, metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates the reminder\n\nArguments:\n\nintent - Name of the intent to be triggered.trigger_date_time - Date at which the execution of the action\nshould be triggered (either utc or with tz).name - ID of the reminder. If there are multiple reminders with\nthe same id only the last will be run.entities - Entities that should be supplied together with the\ntriggered intent.kill_on_user_message - True means a user message before the\ntrigger date will abort the reminder.timestamp - Creation date of the event.metadata - Optional event metadata.\n\nReminderCancelled Objects#\n\nCopyclass ReminderCancelled(Event)\n\nCancel certain jobs.\n\n__init__#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "889": {"text": "Cancel certain jobs.\n\n__init__#\n\nCopy | __init__(name: Optional[Text] = None, intent: Optional[Text] = None, entities: Optional[List[Dict]] = None, timestamp: Optional[float] = None, metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates a ReminderCancelled event.\n\nIf all arguments are None, this will cancel all reminders.\nare to be cancelled. If no arguments are supplied, this will cancel all reminders.\n\nArguments:\n\nname - Name of the reminder to be cancelled.intent - Intent name that is to be used to identify the reminders to be cancelled.entities - Entities that are to be used to identify the reminders to be cancelled.timestamp - Optional timestamp.metadata - Optional event metadata.\n\ncancels_job_with_name#\n\nCopy | cancels_job_with_name(job_name: Text, sender_id: Text) -> bool\n\nDetermines if this ReminderCancelled event should cancel the job with the given name.\n\nArguments:\n\njob_name - Name of the job to be tested.sender_id - The sender_id of the tracker.\n\nReturns:\n\n True, if this ReminderCancelled event should cancel the job with the given name,\nand False otherwise.\n\nActionReverted Objects#\n\nCopyclass ActionReverted(Event)\n\nBot undoes its last action.\n\nThe bot reverts everything until before the most recent action.\nThis includes the action itself, as well as any events that\naction created, like set slot events - the bot will now\npredict a new action using the state before the most recent\naction.\n\nStoryExported Objects#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "890": {"text": "StoryExported Objects#\n\nCopyclass StoryExported(Event)\n\nStory should get dumped to a file.\n\nFollowupAction Objects#\n\nCopyclass FollowupAction(Event)\n\nEnqueue a followup action.\n\nConversationPaused Objects#\n\nCopyclass ConversationPaused(Event)\n\nIgnore messages from the user to let a human take over.\n\nAs a side effect the Tracker's paused attribute will\nbe set to True.\n\nConversationResumed Objects#\n\nCopyclass ConversationResumed(Event)\n\nBot takes over conversation.\n\nInverse of PauseConversation. As a side effect the Tracker's\npaused attribute will be set to False.\n\nActionExecuted Objects#\n\nCopyclass ActionExecuted(Event)\n\nAn operation describes an action taken + its result.\n\nIt comprises an action and a list of events. operations will be appended\nto the latest Turn`` in Tracker.turns`.\n\nas_sub_state#\n\nCopy | as_sub_state() -> Dict[Text, Text]\n\nTurns ActionExecuted into a dictionary containing action name or action text.\nOne action cannot have both set at the same time\n\nReturns:\n\n  a dictionary containing action name or action text with the corresponding key\n\nAgentUttered Objects#\n\nCopyclass AgentUttered(Event)\n\nThe agent has said something to the user.\n\nThis class is not used in the story training as it is contained in the\nActionExecuted class. An entry is made in the Tracker.\n\nActiveLoop Objects#\n\nCopyclass ActiveLoop(Event)\n\nIf name is not None: activates a loop with name else deactivates active loop.\n\nLegacyForm Objects#\n\nCopyclass LegacyForm(ActiveLoop)", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "891": {"text": "LegacyForm Objects#\n\nCopyclass LegacyForm(ActiveLoop)\n\nLegacy handler of old Form events.\n\nThe ActiveLoop event used to be called Form. This class is there to handle old\nlegacy events which were stored with the old type name form.\n\nFormValidation Objects#\n\nCopyclass FormValidation(Event)\n\nEvent added by FormPolicy and RulePolicy to notify form action\nwhether or not to validate the user input.\n\nActionExecutionRejected Objects#\n\nCopyclass ActionExecutionRejected(Event)\n\nNotify Core that the execution of the action has been rejected\n\nSessionStarted Objects#\n\nCopyclass SessionStarted(Event)\n\nMark the beginning of a new conversation session.\n\nPrevious\u00ab rasa.core.evaluation.markersNextrasa.core.featurizers._single_state_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "892": {"text": "Version: 3.x\n\nrasa.core.featurizers._single_state_featurizer\n\nSingleStateFeaturizer Objects#\n\nCopyclass SingleStateFeaturizer()\n\nBase class to transform the dialogue state into an ML format.\n\nSubclasses of SingleStateFeaturizer will decide how a bot will\ntransform the dialogue state into a dictionary mapping an attribute\nto its features. Possible attributes are: INTENT, TEXT, ACTION_NAME,\nACTION_TEXT, ENTITIES, SLOTS and ACTIVE_LOOP. Each attribute will be\nfeaturized into a list of rasa.utils.features.Features.\n\n__init__#\n\nCopy | __init__() -> None\n\nInitialize the single state featurizer.\n\nprepare_for_training#\n\nCopy | prepare_for_training(domain: Domain, interpreter: NaturalLanguageInterpreter, bilou_tagging: bool = False) -> None\n\nGets necessary information for featurization from domain.\n\nArguments:\n\ndomain - An instance of :class:rasa.shared.core.domain.Domain.interpreter - The interpreter used to encode the statebilou_tagging - indicates whether BILOU tagging should be used or not\n\nencode_state#\n\nCopy | encode_state(state: State, interpreter: NaturalLanguageInterpreter) -> Dict[Text, List[Features]]\n\nEncodes the given state with the help of the given interpreter.\n\nArguments:\n\nstate - The state to encodeinterpreter - The interpreter used to encode the state\n\nReturns:\n\n  A dictionary of state_type to list of features.\n\nencode_entities#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "893": {"text": "encode_entities#\n\nCopy | encode_entities(entity_data: Dict[Text, Any], interpreter: NaturalLanguageInterpreter, bilou_tagging: bool = False) -> Dict[Text, List[Features]]\n\nEncodes the given entity data with the help of the given interpreter.\n\nProduce numeric entity tags for tokens.\n\nArguments:\n\nentity_data - The dict containing the text and entity labels and locationsinterpreter - The interpreter used to encode the statebilou_tagging - indicates whether BILOU tagging should be used or not\n\nReturns:\n\n  A dictionary of entity type to list of features.\n\nencode_all_labels#\n\nCopy | encode_all_labels(domain: Domain, interpreter: NaturalLanguageInterpreter) -> List[Dict[Text, List[Features]]]\n\nEncodes all labels from the domain using the given interpreter.\n\nArguments:\n\ndomain - The domain that contains the labels.interpreter - The interpreter used to encode the labels.\n\nReturns:\n\n  A list of encoded labels.\n\nIntentTokenizerSingleStateFeaturizer Objects#\n\nCopyclass IntentTokenizerSingleStateFeaturizer(SingleStateFeaturizer)\n\nA SingleStateFeaturizer for use with policies that predict intent labels.\n\nencode_all_labels#\n\nCopy | encode_all_labels(domain: Domain, interpreter: NaturalLanguageInterpreter) -> List[Dict[Text, List[Features]]]\n\nEncodes all relevant labels from the domain using the given interpreter.\n\nArguments:\n\ndomain - The domain that contains the labels.interpreter - The interpreter used to encode the labels.\n\nReturns:\n\n  A list of encoded labels.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "894": {"text": "Returns:\n\n  A list of encoded labels.\n\nPrevious\u00ab rasa.core.eventsNextrasa.core.featurizers._tracker_featurizers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "895": {"text": "Version: 3.x\n\nrasa.core.featurizers._tracker_featurizers\n\nInvalidStory Objects#\n\nCopyclass InvalidStory(RasaException)\n\nException that can be raised if story cannot be featurized.\n\nTrackerFeaturizer Objects#\n\nCopyclass TrackerFeaturizer()\n\nBase class for actual tracker featurizers.\n\n__init__#\n\nCopy | __init__(state_featurizer: Optional[SingleStateFeaturizer] = None) -> None\n\nInitializes the tracker featurizer.\n\nArguments:\n\nstate_featurizer - The state featurizer used to encode tracker states.\n\ntraining_states_actions_and_entities#\n\nCopy | training_states_actions_and_entities(trackers: List[DialogueStateTracker], domain: Domain, omit_unset_slots: bool = False, ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]], List[List[Dict[Text, Any]]]]\n\nTransforms trackers to states, actions, and entity data.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states, actions, and entity data.\n\ntraining_states_and_actions#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "896": {"text": "training_states_and_actions#\n\nCopy | training_states_and_actions(trackers: List[DialogueStateTracker], domain: Domain, omit_unset_slots: bool = False, ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]]]\n\nTransforms trackers to states and actions.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states and actions.\n\ntraining_states_and_labels#\n\nCopy | training_states_and_labels(trackers: List[DialogueStateTracker], domain: Domain, omit_unset_slots: bool = False, ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]]]\n\nTransforms trackers to states and labels.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states and labels.\n\ntraining_states_labels_and_entities#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "897": {"text": "training_states_labels_and_entities#\n\nCopy | @abstractmethod | training_states_labels_and_entities(trackers: List[DialogueStateTracker], domain: Domain, omit_unset_slots: bool = False, ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]], List[List[Dict[Text, Any]]]]\n\nTransforms trackers to states, labels, and entity data.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states, labels, and entity data.\n\nprepare_for_featurization#\n\nCopy | prepare_for_featurization(domain: Domain, interpreter: NaturalLanguageInterpreter, bilou_tagging: bool = False) -> None\n\nEnsures that the featurizer is ready to be called during training.\n\nState featurizer needs to build its vocabulary from the domain\nfor it to be ready to be used during training.\n\nArguments:\n\ndomain - Domain of the assistant.interpreter - NLU Interpreter for featurizing states.bilou_tagging - Whether to consider bilou tagging.\n\nfeaturize_trackers#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "898": {"text": "featurize_trackers#\n\nCopy | featurize_trackers(trackers: List[DialogueStateTracker], domain: Domain, interpreter: NaturalLanguageInterpreter, bilou_tagging: bool = False, ignore_action_unlikely_intent: bool = False) -> Tuple[ |         List[List[Dict[Text, List[Features]]]], |         np.ndarray, |         List[List[Dict[Text, List[Features]]]], | ]\n\nFeaturizes the training trackers.\n\nArguments:\n\ntrackers - list of training trackersdomain - the domaininterpreter - the interpreterbilou_tagging - indicates whether BILOU tagging should be used or notignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training state features.\n\nReturns:\n\na dictionary of state types (INTENT, TEXT, ACTION_NAME, ACTION_TEXT,\nENTITIES, SLOTS, ACTIVE_LOOP) to a list of features for all dialogue\nturns in all training trackersthe label ids (e.g. action ids) for every dialogue turn in all training\ntrackersA dictionary of entity type (ENTITY_TAGS) to a list of features\ncontaining entity tag ids for text user inputs otherwise empty dict\nfor all dialogue turns in all training trackers\n\nprediction_states#\n\nCopy | prediction_states(trackers: List[DialogueStateTracker], domain: Domain, use_text_for_last_user_input: bool = False, ignore_rule_only_turns: bool = False, rule_only_data: Optional[Dict[Text, Any]] = None, ignore_action_unlikely_intent: bool = False) -> List[List[State]]", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "899": {"text": "Transforms trackers to states for prediction.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.use_text_for_last_user_input - Indicates whether to use text or intent label\nfor featurizing last user input.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.ignore_action_unlikely_intent - Whether to remove states containing\naction_unlikely_intent from prediction states.\n\nReturns:\n\n  Trackers as states for prediction.\n\ncreate_state_features#\n\nCopy | create_state_features(trackers: List[DialogueStateTracker], domain: Domain, interpreter: NaturalLanguageInterpreter, use_text_for_last_user_input: bool = False, ignore_rule_only_turns: bool = False, rule_only_data: Optional[Dict[Text, Any]] = None, ignore_action_unlikely_intent: bool = False) -> List[List[Dict[Text, List[Features]]]]\n\nCreates state features for prediction.\n\nArguments:\n\ntrackers - A list of state trackersdomain - The domaininterpreter - The interpreteruse_text_for_last_user_input - Indicates whether to use text or intent label\nfor featurizing last user input.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.ignore_action_unlikely_intent - Whether to remove any states containing\naction_unlikely_intent from state features.\n\nReturns:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "900": {"text": "Returns:\n\n  Dictionaries of state type (INTENT, TEXT, ACTION_NAME, ACTION_TEXT,\nENTITIES, SLOTS, ACTIVE_LOOP) to a list of features for all dialogue\nturns in all trackers.\n\npersist#\n\nCopy | persist(path: Union[Text, Path]) -> None\n\nPersists the tracker featurizer to the given path.\n\nArguments:\n\npath - The path to persist the tracker featurizer to.\n\nload#\n\nCopy | @staticmethod | load(path: Union[Text, Path]) -> Optional[\"TrackerFeaturizer\"]\n\nLoads the featurizer from file.\n\nArguments:\n\npath - The path to load the tracker featurizer from.\n\nReturns:\n\n  The loaded tracker featurizer.\n\nFullDialogueTrackerFeaturizer Objects#\n\nCopyclass FullDialogueTrackerFeaturizer(TrackerFeaturizer)\n\nCreates full dialogue training data for time distributed architectures.\n\nCreates training data that uses each time output for prediction.\n\ntraining_states_labels_and_entities#\n\nCopy | training_states_labels_and_entities(trackers: List[DialogueStateTracker], domain: Domain, omit_unset_slots: bool = False, ignore_action_unlikely_intent: bool = False) -> Tuple[ |         List[List[State]], List[List[Optional[Text]]], List[List[Dict[Text, Any]]] | ]\n\nTransforms trackers to states, action labels, and entity data.\n\nArguments:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "901": {"text": "Arguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states, action labels, and entity data.\n\nprediction_states#\n\nCopy | prediction_states(trackers: List[DialogueStateTracker], domain: Domain, use_text_for_last_user_input: bool = False, ignore_rule_only_turns: bool = False, rule_only_data: Optional[Dict[Text, Any]] = None, ignore_action_unlikely_intent: bool = False) -> List[List[State]]\n\nTransforms trackers to states for prediction.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.use_text_for_last_user_input - Indicates whether to use text or intent label\nfor featurizing last user input.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.ignore_action_unlikely_intent - Whether to remove any states containing\naction_unlikely_intent from prediction states.\n\nReturns:\n\n  Trackers as states for prediction.\n\nMaxHistoryTrackerFeaturizer Objects#\n\nCopyclass MaxHistoryTrackerFeaturizer(TrackerFeaturizer)\n\nTruncates the tracker history into max_history long sequences.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "902": {"text": "Truncates the tracker history into max_history long sequences.\n\nCreates training data from trackers where actions are the output prediction\nlabels. Tracker state sequences which represent policy input are truncated\nto not excede max_history states.\n\n__init__#\n\nCopy | __init__(state_featurizer: Optional[SingleStateFeaturizer] = None, max_history: Optional[int] = None, remove_duplicates: bool = True) -> None\n\nInitializes the tracker featurizer.\n\nArguments:\n\nstate_featurizer - The state featurizer used to encode the states.max_history - The maximum length of an extracted state sequence.remove_duplicates - Keep only unique training state sequence/label pairs.\n\nslice_state_history#\n\nCopy | @staticmethod | slice_state_history(states: List[State], slice_length: Optional[int]) -> List[State]\n\nSlices states from the trackers history.\n\nArguments:\n\nstates - The statesslice_length - The slice length\n\nReturns:\n\n  The sliced states.\n\ntraining_states_labels_and_entities#\n\nCopy | training_states_labels_and_entities(trackers: List[DialogueStateTracker], domain: Domain, omit_unset_slots: bool = False, ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]], List[List[Dict[Text, Any]]]]\n\nTransforms trackers to states, action labels, and entity data.\n\nArguments:", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "903": {"text": "Arguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states, labels, and entity data.\n\nprediction_states#\n\nCopy | prediction_states(trackers: List[DialogueStateTracker], domain: Domain, use_text_for_last_user_input: bool = False, ignore_rule_only_turns: bool = False, rule_only_data: Optional[Dict[Text, Any]] = None, ignore_action_unlikely_intent: bool = False) -> List[List[State]]\n\nTransforms trackers to states for prediction.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.use_text_for_last_user_input - Indicates whether to use text or intent label\nfor featurizing last user input.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.ignore_action_unlikely_intent - Whether to remove any states containing\naction_unlikely_intent from prediction states.\n\nReturns:\n\n  Trackers as states for prediction.\n\nIntentMaxHistoryTrackerFeaturizer Objects#\n\nCopyclass IntentMaxHistoryTrackerFeaturizer(MaxHistoryTrackerFeaturizer)\n\nTruncates the tracker history into max_history long sequences.", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "904": {"text": "Truncates the tracker history into max_history long sequences.\n\nCreates training data from trackers where intents are the output prediction\nlabels. Tracker state sequences which represent policy input are truncated\nto not excede max_history states.\n\ntraining_states_labels_and_entities#\n\nCopy | training_states_labels_and_entities(trackers: List[DialogueStateTracker], domain: Domain, omit_unset_slots: bool = False, ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]], List[List[Dict[Text, Any]]]]\n\nTransforms trackers to states, intent labels, and entity data.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states, labels, and entity data.\n\nprediction_states#\n\nCopy | prediction_states(trackers: List[DialogueStateTracker], domain: Domain, use_text_for_last_user_input: bool = False, ignore_rule_only_turns: bool = False, rule_only_data: Optional[Dict[Text, Any]] = None, ignore_action_unlikely_intent: bool = False) -> List[List[State]]\n\nTransforms trackers to states for prediction.\n\nArguments:", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "905": {"text": "Transforms trackers to states for prediction.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.use_text_for_last_user_input - Indicates whether to use text or intent label\nfor featurizing last user input.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.ignore_action_unlikely_intent - Whether to remove any states containing\naction_unlikely_intent from prediction states.\n\nReturns:\n\n  Trackers as states for prediction.\n\nPrevious\u00ab rasa.core.featurizers._single_state_featurizerNextrasa.core.featurizers.precomputation \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "906": {"text": "Version: 3.x\n\nrasa.core.featurizers.precomputation\n\nMessageContainerForCoreFeaturization Objects#\n\nCopyclass MessageContainerForCoreFeaturization()\n\nA key-value store for specific Messages.\n\nThis container can be only be used to store messages that contain exactly\none of the following attributes: ACTION_NAME, ACTION_TEXT, TEXT, or INTENT.\nA combination of the key attribute and the corresponding value will be used as\nkey for the respective message.\n\nBackground/Motivation:\n\nOur policies only require these attributes to be tokenized and/or featurized\nvia NLU graph components, which is why we don't care about storing anything else.Our tokenizers and featurizers work independently for each attribute,\nwhich is why we can separate them and ask for \"exactly one\" of the key\nattributes.Our tokenizers add attributes (e.g. token sequences) and not just Features,\nwhich is why we need messages and why we allow messages to contain more than\njust the key attributes.Due to the way we use this datastructure, it won't contain all features that the\npolicies need (cf. rasa.core.featurizers.SingleStateFeaturizer) and sometimes\nthe messages will contain no features at all, which is the motivation for the\nname of this class.Values for different attributes might coincide (e.g. 'greet' can appear as user\ntext as well as name of an intent), but attributes are not all tokenized and\nfeaturized in the same way, which is why we use the combination of key attribute\nand value to identify a message.\n\nUsage:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "907": {"text": "Usage:\n\nAt the start of core's featurization pipeline, we use this container to\nde-duplicate the given story data during training (e.g. \"Hello\" might appear very\noften but it will end up in the training data only once) and to de-duplicate\nthe data given in the tracker (e.g. if a text appears repeatedly in the\ndialogue, it will only be featurized once later).\nSee: rasa.core.featurizers.precomputation.CoreFeaturizationInputConverter.At the end of core's featurization pipeline, we wrap all resulting\n(training data) messages into this container again.\nSee: rasa.core.featurizers.precomputation.CoreFeaturizationCollector.\n\n__init__#\n\nCopydef __init__() -> None\n\nCreates an empty container for precomputations.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nFingerprint the container.\n\nReturns:\n\n  hex string as a fingerprint of the container.\n\nmessages#\n\nCopydef messages(key_attribute: Text = None) -> ValuesView\n\nReturns a view of all messages.\n\nall_messages#\n\nCopydef all_messages() -> List[Message]\n\nReturns a list containing all messages.\n\nkeys#\n\nCopydef keys(key_attribute: Text) -> KeysView\n\nReturns a view of the value keys for the given key attribute.\n\nnum_collisions_ignored#\n\nCopy@propertydef num_collisions_ignored() -> int\n\nReturns the number of collisions that have been ignored.\n\nadd#\n\nCopydef add(message_with_one_key_attribute: Message) -> None", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "908": {"text": "Copydef add(message_with_one_key_attribute: Message) -> None\n\nAdds the given message if it is not already present.\n\nArguments:\n\nmessage_with_one_key_attribute - The message we want to add to the lookup\ntable. It must have exactly one key attribute.\n\nRaises:\n\n ValueError if the given message does not contain exactly one key\nattribute or if there is a collision with a message that has a different\nhash value\n\nadd_all#\n\nCopydef add_all(messages_with_one_key_attribute: List[Message]) -> None\n\nAdds the given messages.\n\nArguments:\n\nmessages_with_one_key_attribute - The messages that we want to add.\nEach one must have exactly one key attribute.\n\nRaises:\n\n ValueError if we cannot create a key for the given message or if there is\na collisions with a message that has a different hash value\n\ncollect_features#\n\nCopydef collect_features(        sub_state: SubState,        attributes: Optional[Iterable[Text]] = None) -> Dict[Text, List[Features]]\n\nCollects features for all attributes in the given substate.\n\nThere might be be multiple messages in the container that contain features\nrelevant for the given substate, e.g. this is the case if TEXT and\nINTENT are present in the given substate. All of those messages will be\ncollected and their features combined.\n\nArguments:\n\nsub_state - substate for which we want to extract the relevent featuresattributes - if not None, this specifies the list of the attributes of the\nFeatures that we're interested in (i.e. all other Features contained\nin the relevant messages will be ignored)\n\nReturns:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "909": {"text": "Returns:\n\n  a dictionary that maps all the (requested) attributes to a list of Features\n\nRaises:\n\nValueError - if there exists some key pair (i.e. key attribute and\ncorresponding value) from the given substate cannot be foundRuntimeError - if features for the same attribute are found in two\ndifferent messages that are associated with the given substate\n\nlookup_message#\n\nCopydef lookup_message(user_text: Text) -> Message\n\nReturns a message that contains the given user text.\n\nArguments:\n\nuser_text - the text of a user utterance\n\nRaises:\n\n ValueError if there is no message associated with the given user text\n\nderive_messages_from_domain_and_add#\n\nCopydef derive_messages_from_domain_and_add(domain: Domain) -> None\n\nAdds all lookup table entries that can be derived from the domain.\n\nThat is, all action names, action texts, and intents defined in the domain\nwill be turned into a (separate) messages and added to this lookup table.\n\nArguments:\n\ndomain - the domain from which we extract the substates\n\nderive_messages_from_events_and_add#\n\nCopydef derive_messages_from_events_and_add(events: Iterable[Event]) -> None\n\nAdds all relevant messages that can be derived from the given events.\n\nThat is, each action name, action text, user text and intent that can be\nfound in the given events will be turned into a (separate) message and added\nto this container.\n\nArguments:\n\nevents - list of events to extract the substate from\n\nCoreFeaturizationInputConverter Objects#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "910": {"text": "CoreFeaturizationInputConverter Objects#\n\nCopyclass CoreFeaturizationInputConverter(GraphComponent)\n\nProvides data for the featurization pipeline.\n\nDuring training as well as during inference, the converter de-duplicates the given\ndata (i.e. story graph or list of messages) such that each text and intent from a\nuser message and each action name and action text appears exactly once.\n\ncreate#\n\nCopy@classmethoddef create(        cls, config: Dict[Text, Any], model_storage: ModelStorage,        resource: Resource, execution_context: ExecutionContext) -> CoreFeaturizationInputConverter\n\nCreates a new instance (see parent class for full docstring).\n\nconvert_for_training#\n\nCopydef convert_for_training(domain: Domain,                         story_graph: StoryGraph) -> TrainingData\n\nCreates de-duplicated training data.\n\nEach possible user text and intent and each action name and action text\nthat can be found in the given domain and story graph appears exactly once\nin the resulting training data. Moreover, each item is contained in a separate\nmesssage.\n\nArguments:\n\ndomain - the domainstory_graph - a story graph\n\nReturns:\n\n  training data\n\nconvert_for_inference#\n\nCopydef convert_for_inference(tracker: DialogueStateTracker) -> List[Message]\n\nCreates a list of messages containing single user and action attributes.\n\nEach possible user text and intent and each action name and action text\nthat can be found in the events of the given tracker will appear exactly once\nin the resulting messages. Moreover, each item is contained in a separate\nmesssage.\n\nArguments:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "911": {"text": "Arguments:\n\ntracker - a dialogue state tracker containing events\n\nReturns:\n\n  a list of messages\n\nCoreFeaturizationCollector Objects#\n\nCopyclass CoreFeaturizationCollector(GraphComponent)\n\nCollects featurized messages for use by a policy.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> CoreFeaturizationCollector\n\nCreates a new instance (see parent class for full docstring).\n\ncollect#\n\nCopydef collect(    messages: Union[TrainingData, List[Message]]) -> MessageContainerForCoreFeaturization\n\nCollects messages.\n\nPrevious\u00ab rasa.core.featurizers._tracker_featurizersNextrasa.core.featurizers.single_state_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "912": {"text": "Version: 3.x\n\nrasa.core.featurizers.single_state_featurizer\n\nSingleStateFeaturizer Objects#\n\nCopyclass SingleStateFeaturizer()\n\nBase class to transform the dialogue state into an ML format.\n\nSubclasses of SingleStateFeaturizer will decide how a bot will\ntransform the dialogue state into a dictionary mapping an attribute\nto its features. Possible attributes are: INTENT, TEXT, ACTION_NAME,\nACTION_TEXT, ENTITIES, SLOTS and ACTIVE_LOOP. Each attribute will be\nfeaturized into a list of rasa.utils.features.Features.\n\n__init__#\n\nCopydef __init__() -> None\n\nInitialize the single state featurizer.\n\nprepare_for_training#\n\nCopydef prepare_for_training(domain: Domain, bilou_tagging: bool = False) -> None\n\nGets necessary information for featurization from domain.\n\nArguments:\n\ndomain - An instance of :class:rasa.shared.core.domain.Domain.bilou_tagging - indicates whether BILOU tagging should be used or not\n\nencode_state#\n\nCopydef encode_state(    state: State,    precomputations: Optional[MessageContainerForCoreFeaturization]) -> Dict[Text, List[Features]]\n\nEncode the given state.\n\nArguments:\n\nstate - The state to encodeprecomputations - Contains precomputed features and attributes.\n\nReturns:\n\n  A dictionary of state_type to list of features.\n\nencode_entities#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "913": {"text": "encode_entities#\n\nCopydef encode_entities(        entity_data: Dict[Text, Any],        precomputations: Optional[MessageContainerForCoreFeaturization],        bilou_tagging: bool = False) -> Dict[Text, List[Features]]\n\nEncode the given entity data.\n\nProduce numeric entity tags for tokens.\n\nArguments:\n\nentity_data - The dict containing the text and entity labels and locationsprecomputations - Contains precomputed features and attributes.bilou_tagging - indicates whether BILOU tagging should be used or not\n\nReturns:\n\n  A dictionary of entity type to list of features.\n\nencode_all_labels#\n\nCopydef encode_all_labels(    domain: Domain,    precomputations: Optional[MessageContainerForCoreFeaturization]) -> List[Dict[Text, List[Features]]]\n\nEncode all action from the domain.\n\nArguments:\n\ndomain - The domain that contains the actions.precomputations - Contains precomputed features and attributes.\n\nReturns:\n\n  A list of encoded actions.\n\nIntentTokenizerSingleStateFeaturizer Objects#\n\nCopyclass IntentTokenizerSingleStateFeaturizer(SingleStateFeaturizer)\n\nA SingleStateFeaturizer for use with policies that predict intent labels.\n\nencode_all_labels#\n\nCopydef encode_all_labels(    domain: Domain,    precomputations: Optional[MessageContainerForCoreFeaturization]) -> List[Dict[Text, List[Features]]]\n\nEncodes all relevant labels from the domain using the given precomputations.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "914": {"text": "Arguments:\n\ndomain - The domain that contains the labels.precomputations - Contains precomputed features and attributes.\n\nReturns:\n\n  A list of encoded labels.\n\nPrevious\u00ab rasa.core.featurizers.precomputationNextrasa.core.featurizers.tracker_featurizers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "915": {"text": "Version: 3.x\n\nrasa.core.featurizers.tracker_featurizers\n\nInvalidStory Objects#\n\nCopyclass InvalidStory(RasaException)\n\nException that can be raised if story cannot be featurized.\n\n__init__#\n\nCopydef __init__(message: Text) -> None\n\nCreates an InvalidStory exception.\n\nArguments:\n\nmessage - a custom exception message.\n\nTrackerFeaturizer Objects#\n\nCopyclass TrackerFeaturizer()\n\nBase class for actual tracker featurizers.\n\n__init__#\n\nCopydef __init__(state_featurizer: Optional[SingleStateFeaturizer] = None) -> None\n\nInitializes the tracker featurizer.\n\nArguments:\n\nstate_featurizer - The state featurizer used to encode tracker states.\n\ntraining_states_and_labels#\n\nCopydef training_states_and_labels(    trackers: List[DialogueStateTracker],    domain: Domain,    omit_unset_slots: bool = False,    ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]]]\n\nTransforms trackers to states and labels.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states and labels.\n\ntraining_states_labels_and_entities#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "916": {"text": "training_states_labels_and_entities#\n\nCopy@abstractmethoddef training_states_labels_and_entities(    trackers: List[DialogueStateTracker],    domain: Domain,    omit_unset_slots: bool = False,    ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]], List[List[Dict[Text, Any]]]]\n\nTransforms trackers to states, labels, and entity data.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states, labels, and entity data.\n\nprepare_for_featurization#\n\nCopydef prepare_for_featurization(domain: Domain,                              bilou_tagging: bool = False) -> None\n\nEnsures that the featurizer is ready to be called during training.\n\nState featurizer needs to build its vocabulary from the domain\nfor it to be ready to be used during training.\n\nArguments:\n\ndomain - Domain of the assistant.bilou_tagging - Whether to consider bilou tagging.\n\nfeaturize_trackers#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "917": {"text": "featurize_trackers#\n\nCopydef featurize_trackers(    trackers: List[DialogueStateTracker],    domain: Domain,    precomputations: Optional[MessageContainerForCoreFeaturization],    bilou_tagging: bool = False,    ignore_action_unlikely_intent: bool = False) -> Tuple[        List[List[Dict[Text, List[Features]]]],        np.ndarray,        List[List[Dict[Text, List[Features]]]],]\n\nFeaturizes the training trackers.\n\nArguments:\n\ntrackers - list of training trackersdomain - the domainprecomputations - Contains precomputed features and attributes.bilou_tagging - indicates whether BILOU tagging should be used or notignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training state features.\n\nReturns:\n\na dictionary of state types (INTENT, TEXT, ACTION_NAME, ACTION_TEXT,\nENTITIES, SLOTS, ACTIVE_LOOP) to a list of features for all dialogue\nturns in all training trackersthe label ids (e.g. action ids) for every dialogue turn in all training\ntrackersA dictionary of entity type (ENTITY_TAGS) to a list of features\ncontaining entity tag ids for text user inputs otherwise empty dict\nfor all dialogue turns in all training trackers\n\nprediction_states#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "918": {"text": "prediction_states#\n\nCopydef prediction_states(        trackers: List[DialogueStateTracker],        domain: Domain,        use_text_for_last_user_input: bool = False,        ignore_rule_only_turns: bool = False,        rule_only_data: Optional[Dict[Text, Any]] = None,        ignore_action_unlikely_intent: bool = False) -> List[List[State]]\n\nTransforms trackers to states for prediction.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.use_text_for_last_user_input - Indicates whether to use text or intent label\nfor featurizing last user input.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.ignore_action_unlikely_intent - Whether to remove states containing\naction_unlikely_intent from prediction states.\n\nReturns:\n\n  Trackers as states for prediction.\n\ncreate_state_features#\n\nCopydef create_state_features(    trackers: List[DialogueStateTracker],    domain: Domain,    precomputations: Optional[MessageContainerForCoreFeaturization],    use_text_for_last_user_input: bool = False,    ignore_rule_only_turns: bool = False,    rule_only_data: Optional[Dict[Text, Any]] = None,    ignore_action_unlikely_intent: bool = False) -> List[List[Dict[Text, List[Features]]]]\n\nCreates state features for prediction.\n\nArguments:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "919": {"text": "Creates state features for prediction.\n\nArguments:\n\ntrackers - A list of state trackersdomain - The domainprecomputations - Contains precomputed features and attributes.use_text_for_last_user_input - Indicates whether to use text or intent label\nfor featurizing last user input.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.ignore_action_unlikely_intent - Whether to remove any states containing\naction_unlikely_intent from state features.\n\nReturns:\n\n  Dictionaries of state type (INTENT, TEXT, ACTION_NAME, ACTION_TEXT,\nENTITIES, SLOTS, ACTIVE_LOOP) to a list of features for all dialogue\nturns in all trackers.\n\npersist#\n\nCopydef persist(path: Union[Text, Path]) -> None\n\nPersists the tracker featurizer to the given path.\n\nArguments:\n\npath - The path to persist the tracker featurizer to.\n\nload#\n\nCopy@staticmethoddef load(path: Union[Text, Path]) -> Optional[TrackerFeaturizer]\n\nLoads the featurizer from file.\n\nArguments:\n\npath - The path to load the tracker featurizer from.\n\nReturns:\n\n  The loaded tracker featurizer.\n\nFullDialogueTrackerFeaturizer Objects#\n\nCopyclass FullDialogueTrackerFeaturizer(TrackerFeaturizer)\n\nCreates full dialogue training data for time distributed architectures.\n\nCreates training data that uses each time output for prediction.\n\ntraining_states_labels_and_entities#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "920": {"text": "training_states_labels_and_entities#\n\nCopydef training_states_labels_and_entities(    trackers: List[DialogueStateTracker],    domain: Domain,    omit_unset_slots: bool = False,    ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]], List[List[Dict[Text, Any]]]]\n\nTransforms trackers to states, action labels, and entity data.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states, action labels, and entity data.\n\nprediction_states#\n\nCopydef prediction_states(        trackers: List[DialogueStateTracker],        domain: Domain,        use_text_for_last_user_input: bool = False,        ignore_rule_only_turns: bool = False,        rule_only_data: Optional[Dict[Text, Any]] = None,        ignore_action_unlikely_intent: bool = False) -> List[List[State]]\n\nTransforms trackers to states for prediction.\n\nArguments:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "921": {"text": "Transforms trackers to states for prediction.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.use_text_for_last_user_input - Indicates whether to use text or intent label\nfor featurizing last user input.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.ignore_action_unlikely_intent - Whether to remove any states containing\naction_unlikely_intent from prediction states.\n\nReturns:\n\n  Trackers as states for prediction.\n\nMaxHistoryTrackerFeaturizer Objects#\n\nCopyclass MaxHistoryTrackerFeaturizer(TrackerFeaturizer)\n\nTruncates the tracker history into max_history long sequences.\n\nCreates training data from trackers where actions are the output prediction\nlabels. Tracker state sequences which represent policy input are truncated\nto not excede max_history states.\n\n__init__#\n\nCopydef __init__(state_featurizer: Optional[SingleStateFeaturizer] = None,             max_history: Optional[int] = None,             remove_duplicates: bool = True) -> None\n\nInitializes the tracker featurizer.\n\nArguments:\n\nstate_featurizer - The state featurizer used to encode the states.max_history - The maximum length of an extracted state sequence.remove_duplicates - Keep only unique training state sequence/label pairs.\n\nslice_state_history#\n\nCopy@staticmethoddef slice_state_history(states: List[State],                        slice_length: Optional[int]) -> List[State]\n\nSlices states from the trackers history.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "922": {"text": "Slices states from the trackers history.\n\nArguments:\n\nstates - The statesslice_length - The slice length\n\nReturns:\n\n  The sliced states.\n\ntraining_states_labels_and_entities#\n\nCopydef training_states_labels_and_entities(    trackers: List[DialogueStateTracker],    domain: Domain,    omit_unset_slots: bool = False,    ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]], List[List[Dict[Text, Any]]]]\n\nTransforms trackers to states, action labels, and entity data.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states, labels, and entity data.\n\nprediction_states#\n\nCopydef prediction_states(        trackers: List[DialogueStateTracker],        domain: Domain,        use_text_for_last_user_input: bool = False,        ignore_rule_only_turns: bool = False,        rule_only_data: Optional[Dict[Text, Any]] = None,        ignore_action_unlikely_intent: bool = False) -> List[List[State]]\n\nTransforms trackers to states for prediction.\n\nArguments:", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "923": {"text": "Transforms trackers to states for prediction.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.use_text_for_last_user_input - Indicates whether to use text or intent label\nfor featurizing last user input.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.ignore_action_unlikely_intent - Whether to remove any states containing\naction_unlikely_intent from prediction states.\n\nReturns:\n\n  Trackers as states for prediction.\n\nIntentMaxHistoryTrackerFeaturizer Objects#\n\nCopyclass IntentMaxHistoryTrackerFeaturizer(MaxHistoryTrackerFeaturizer)\n\nTruncates the tracker history into max_history long sequences.\n\nCreates training data from trackers where intents are the output prediction\nlabels. Tracker state sequences which represent policy input are truncated\nto not excede max_history states.\n\ntraining_states_labels_and_entities#\n\nCopydef training_states_labels_and_entities(    trackers: List[DialogueStateTracker],    domain: Domain,    omit_unset_slots: bool = False,    ignore_action_unlikely_intent: bool = False) -> Tuple[List[List[State]], List[List[Text]], List[List[Dict[Text, Any]]]]\n\nTransforms trackers to states, intent labels, and entity data.\n\nArguments:", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "924": {"text": "Arguments:\n\ntrackers - The trackers to transform.domain - The domain.omit_unset_slots - If True do not include the initial values of slots.ignore_action_unlikely_intent - Whether to remove action_unlikely_intent\nfrom training states.\n\nReturns:\n\n  Trackers as states, labels, and entity data.\n\nprediction_states#\n\nCopydef prediction_states(        trackers: List[DialogueStateTracker],        domain: Domain,        use_text_for_last_user_input: bool = False,        ignore_rule_only_turns: bool = False,        rule_only_data: Optional[Dict[Text, Any]] = None,        ignore_action_unlikely_intent: bool = False) -> List[List[State]]\n\nTransforms trackers to states for prediction.\n\nArguments:\n\ntrackers - The trackers to transform.domain - The domain.use_text_for_last_user_input - Indicates whether to use text or intent label\nfor featurizing last user input.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.ignore_action_unlikely_intent - Whether to remove any states containing\naction_unlikely_intent from prediction states.\n\nReturns:\n\n  Trackers as states for prediction.\n\nPrevious\u00ab rasa.core.featurizers.single_state_featurizerNextrasa.core.nlg.callback \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "925": {"text": "Version: 3.x\n\nrasa.core.nlg.callback\n\nnlg_response_format_spec#\n\nCopydef nlg_response_format_spec() -> Dict[Text, Any]\n\nExpected response schema for an NLG endpoint.\n\nUsed for validation of the response returned from the NLG endpoint.\n\nnlg_request_format#\n\nCopydef nlg_request_format(utter_action: Text, tracker: DialogueStateTracker,                       output_channel: Text, **kwargs: Any) -> Dict[Text, Any]\n\nCreate the json body for the NLG json body for the request.\n\nCallbackNaturalLanguageGenerator Objects#\n\nCopyclass CallbackNaturalLanguageGenerator(NaturalLanguageGenerator)\n\nGenerate bot utterances by using a remote endpoint for the generation.\n\nThe generator will call the endpoint for each message it wants to\ngenerate. The endpoint needs to respond with a properly formatted\njson. The generator will use this message to create a response for\nthe bot.\n\ngenerate#\n\nCopyasync def generate(utter_action: Text, tracker: DialogueStateTracker,                   output_channel: Text, **kwargs: Any) -> Dict[Text, Any]\n\nRetrieve a named response from the domain using an endpoint.\n\nvalidate_response#\n\nCopy@staticmethoddef validate_response(content: Optional[Dict[Text, Any]]) -> bool\n\nValidate the NLG response. Raises exception on failure.\n\nPrevious\u00ab rasa.core.featurizers.tracker_featurizersNextrasa.core.nlg.generator \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "926": {"text": "Version: 3.x\n\nrasa.core.nlg.generator\n\nNaturalLanguageGenerator Objects#\n\nCopyclass NaturalLanguageGenerator()\n\nGenerate bot utterances based on a dialogue state.\n\ngenerate#\n\nCopyasync def generate(utter_action: Text, tracker: \"DialogueStateTracker\",                   output_channel: Text, **kwargs: Any) -> Optional[Dict[Text, Any]]\n\nGenerate a response for the requested utter action.\n\nThere are a lot of different methods to implement this, e.g. the\ngeneration can be based on responses or be fully ML based by feeding\nthe dialogue state into a machine learning NLG model.\n\ncreate#\n\nCopy@staticmethoddef create(obj: Union[\"NaturalLanguageGenerator\", EndpointConfig, None],           domain: Optional[Domain]) -> \"NaturalLanguageGenerator\"\n\nFactory to create a generator.\n\nPrevious\u00ab rasa.core.nlg.callbackNextrasa.core.nlg.interpolator \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "927": {"text": "Version: 3.x\n\nrasa.core.nlg.interpolator\n\ninterpolate_text#\n\nCopydef interpolate_text(response: Text, values: Dict[Text, Text]) -> Text\n\nInterpolate values into responses with placeholders.\n\nTransform response tags from \"{tag_name}\" to \"{0[tag_name]}\" as described here:\nhttps://stackoverflow.com/questions/7934620/python-dots-in-the-name-of-variable-in-a-format-string#comment9695339_7934969\nBlock characters, making sure not to allow:\n(a) newline in slot name\n(b) { or } in slot name\n\nArguments:\n\nresponse - The piece of text that should be interpolated.values - A dictionary of keys and the values that those\nkeys should be replaced with.\n\nReturns:\n\n  The piece of text with any replacements made.\n\ninterpolate#\n\nCopydef interpolate(        response: Union[List[Any], Dict[Text, Any], Text],        values: Dict[Text, Text]) -> Union[List[Any], Dict[Text, Any], Text]\n\nRecursively process response and interpolate any text keys.\n\nArguments:\n\nresponse - The response that should be interpolated.values - A dictionary of keys and the values that those\nkeys should be replaced with.\n\nReturns:\n\n  The response with any replacements made.\n\nPrevious\u00ab rasa.core.nlg.generatorNextrasa.core.nlg.response \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "928": {"text": "Version: 3.x\n\nrasa.core.nlg.response\n\nTemplatedNaturalLanguageGenerator Objects#\n\nCopyclass TemplatedNaturalLanguageGenerator(NaturalLanguageGenerator)\n\nNatural language generator that generates messages based on responses.\n\nThe responses can use variables to customize the utterances based on the\nstate of the dialogue.\n\n__init__#\n\nCopydef __init__(responses: Dict[Text, List[Dict[Text, Any]]]) -> None\n\nCreates a Template Natural Language Generator.\n\nArguments:\n\nresponses - responses that will be used to generate messages.\n\ngenerate#\n\nCopyasync def generate(utter_action: Text, tracker: DialogueStateTracker,                   output_channel: Text, **kwargs: Any) -> Optional[Dict[Text, Any]]\n\nGenerate a response for the requested utter action.\n\ngenerate_from_slots#\n\nCopydef generate_from_slots(utter_action: Text, filled_slots: Dict[Text, Any],                        output_channel: Text, **kwargs: Any) -> Optional[Dict[Text, Any]]\n\nGenerate a response for the requested utter action.\n\nPrevious\u00ab rasa.core.nlg.interpolatorNextrasa.core.nlg.template \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "929": {"text": "Version: 3.x\n\nrasa.core.nlg.template\n\nTemplatedNaturalLanguageGenerator Objects#\n\nCopyclass TemplatedNaturalLanguageGenerator(NaturalLanguageGenerator)\n\nNatural language generator that generates messages based on templates.\n\nThe templates can use variables to customize the utterances based on the\nstate of the dialogue.\n\ngenerate#\n\nCopy | async generate(template_name: Text, tracker: DialogueStateTracker, output_channel: Text, **kwargs: Any, ,) -> Optional[Dict[Text, Any]]\n\nGenerate a response for the requested template.\n\ngenerate_from_slots#\n\nCopy | generate_from_slots(template_name: Text, filled_slots: Dict[Text, Any], output_channel: Text, **kwargs: Any, ,) -> Optional[Dict[Text, Any]]\n\nGenerate a response for the requested template.\n\nPrevious\u00ab rasa.core.nlg.responseNextrasa.core.policies._ensemble \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "930": {"text": "Version: 3.x\n\nrasa.core.policies._ensemble\n\nPolicyEnsemble Objects#\n\nCopyclass PolicyEnsemble()\n\ncheck_domain_ensemble_compatibility#\n\nCopy | @staticmethod | check_domain_ensemble_compatibility(ensemble: Optional[\"PolicyEnsemble\"], domain: Optional[Domain]) -> None\n\nCheck for elements that only work with certain policy/domain combinations.\n\npersist#\n\nCopy | persist(path: Union[Text, Path]) -> None\n\nPersists the policy to storage.\n\nload#\n\nCopy | @classmethod | load(cls, path: Union[Text, Path], new_config: Optional[Dict] = None, finetuning_epoch_fraction: float = 1.0) -> \"PolicyEnsemble\"\n\nLoads policy and domain specification from disk.\n\nget_featurizer_from_dict#\n\nCopy | @classmethod | get_featurizer_from_dict(cls, policy: Dict[Text, Any]) -> Tuple[Any, Any]\n\nGets the featurizer initializer and its arguments from a policy config.\n\nSimplePolicyEnsemble Objects#\n\nCopyclass SimplePolicyEnsemble(PolicyEnsemble)\n\nDefault implementation of a Policy ensemble.\n\nis_not_in_training_data#\n\nCopy | @staticmethod | is_not_in_training_data(policy_name: Optional[Text], max_confidence: Optional[float] = None) -> bool\n\nChecks if the prediction is by a policy which memoized the training data.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "931": {"text": "Arguments:\n\npolicy_name - The name of the policy.max_confidence - The max confidence of the policy's prediction.Returns - True if it's a MemoizationPolicy, False otherwise.\n\nprobabilities_using_best_policy#\n\nCopy | probabilities_using_best_policy(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> PolicyPrediction\n\nPredicts the next action the bot should take after seeing the tracker.\n\nPicks the best policy prediction based on probabilities and policy priority.\nTriggers fallback if action_listen is predicted after a user utterance.\n\nArguments:\n\ntracker - the :class:rasa.core.trackers.DialogueStateTrackerdomain - the :class:rasa.shared.core.domain.Domaininterpreter - Interpreter which may be used by the policies to create\nadditional features.\n\nReturns:\n\n  The best policy prediction.\n\nInvalidPolicyConfig Objects#\n\nCopyclass InvalidPolicyConfig(RasaException)\n\nException that can be raised when policy config is not valid.\n\nPrevious\u00ab rasa.core.nlg.templateNextrasa.core.policies._memoization \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "932": {"text": "Version: 3.x\n\nrasa.core.policies._memoization\n\nMemoizationPolicy Objects#\n\nCopyclass MemoizationPolicy(Policy)\n\nA policy that follows exact examples of max_history turns in training stories.\n\nSince slots that are set some time in the past are\npreserved in all future feature vectors until they are set\nto None, this policy implicitly remembers and most importantly\nrecalls examples in the context of the current dialogue\nlonger than max_history.\n\nThis policy is not supposed to be the only policy in an ensemble,\nit is optimized for precision and not recall.\nIt should get a 100% precision because it emits probabilities of 1.1\nalong it's predictions, which makes every mistake fatal as\nno other policy can overrule it.\n\nIf it is needed to recall turns from training dialogues where\nsome slots might not be set during prediction time, and there are\ntraining stories for this, use AugmentedMemoizationPolicy.\n\n__init__#\n\nCopy | __init__(featurizer: Optional[TrackerFeaturizer] = None, priority: int = MEMOIZATION_POLICY_PRIORITY, max_history: Optional[int] = DEFAULT_MAX_HISTORY, lookup: Optional[Dict] = None, **kwargs: Any, ,) -> None\n\nInitialize the policy.\n\nArguments:\n\nfeaturizer - tracker featurizerpriority - the priority of the policymax_history - maximum history to take into account when featurizing trackerslookup - a dictionary that stores featurized tracker states and\npredicted actions for them\n\nrecall#\n\nCopy | recall(states: List[State], tracker: DialogueStateTracker, domain: Domain) -> Optional[Text]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "933": {"text": "Finds the action based on the given states.\n\nArguments:\n\nstates - List of states.tracker - The tracker.domain - The Domain.\n\nReturns:\n\n  The name of the action.\n\npredict_action_probabilities#\n\nCopy | predict_action_probabilities(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> PolicyPrediction\n\nPredicts the next action the bot should take after seeing the tracker.\n\nArguments:\n\ntracker - the :class:rasa.core.trackers.DialogueStateTrackerdomain - the :class:rasa.shared.core.domain.Domaininterpreter - Interpreter which may be used by the policies to create\nadditional features.\n\nReturns:\n\n  The policy's prediction (e.g. the probabilities for the actions).\n\nAugmentedMemoizationPolicy Objects#\n\nCopyclass AugmentedMemoizationPolicy(MemoizationPolicy)\n\nThe policy that remembers examples from training stories\nfor max_history turns.\n\nIf it is needed to recall turns from training dialogues\nwhere some slots might not be set during prediction time,\nadd relevant stories without such slots to training data.\nE.g. reminder stories.\n\nSince slots that are set some time in the past are\npreserved in all future feature vectors until they are set\nto None, this policy has a capability to recall the turns\nup to max_history from training stories during prediction\neven if additional slots were filled in the past\nfor current dialogue.\n\nrecall#\n\nCopy | recall(states: List[State], tracker: DialogueStateTracker, domain: Domain) -> Optional[Text]\n\nFinds the action based on the given states.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "934": {"text": "Finds the action based on the given states.\n\nUses back to the future idea to change the past and check whether the new future\ncan be used to recall the action.\n\nArguments:\n\nstates - List of states.tracker - The tracker.domain - The Domain.\n\nReturns:\n\n  The name of the action.\n\nPrevious\u00ab rasa.core.policies._ensembleNextrasa.core.policies._policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "935": {"text": "Version: 3.x\n\nrasa.core.policies._policy\n\nPolicy Objects#\n\nCopyclass Policy()\n\nCommon parent class for all dialogue policies.\n\nsupported_data#\n\nCopy | @staticmethod | supported_data() -> \"SupportedData\"\n\nThe type of data supported by this policy.\n\nBy default, this is only ML-based training data. If policies support rule data,\nor both ML-based data and rule data, they need to override this method.\n\nReturns:\n\n  The data type supported by this policy (ML-based training data).\n\n__init__#\n\nCopy | __init__(featurizer: Optional[TrackerFeaturizer] = None, priority: int = DEFAULT_POLICY_PRIORITY, should_finetune: bool = False, **kwargs: Any, ,) -> None\n\nConstructs a new Policy object.\n\nfeaturizer#\n\nCopy | @property | featurizer() -> TrackerFeaturizer\n\nReturns the policy's featurizer.\n\nset_shared_policy_states#\n\nCopy | set_shared_policy_states(**kwargs: Any) -> None\n\nSets policy's shared states for correct featurization.\n\ntrain#\n\nCopy | train(training_trackers: List[TrackerWithCachedStates], domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> None\n\nTrains the policy on given training trackers.\n\nArguments:\n\n  training_trackers:\nthe list of the :class:rasa.core.trackers.DialogueStateTracker", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "936": {"text": "domain - the :class:rasa.shared.core.domain.Domaininterpreter - Interpreter which can be used by the polices for featurization.**kwargs - Additional keyword arguments.\n\npredict_action_probabilities#\n\nCopy | predict_action_probabilities(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> \"PolicyPrediction\"\n\nPredicts the next action the bot should take after seeing the tracker.\n\nArguments:\n\ntracker - the :class:rasa.core.trackers.DialogueStateTrackerdomain - the :class:rasa.shared.core.domain.Domaininterpreter - Interpreter which may be used by the policies to create\nadditional features.\n\nReturns:\n\n  The policy's prediction (e.g. the probabilities for the actions).\n\npersist#\n\nCopy | persist(path: Union[Text, Path]) -> None\n\nPersists the policy to storage.\n\nArguments:\n\npath - Path to persist policy to.\n\nload#\n\nCopy | @classmethod | load(cls, path: Union[Text, Path], **kwargs: Any) -> \"Policy\"\n\nLoads a policy from path.\n\nArguments:\n\npath - Path to load policy from.\n\nReturns:\n\n  An instance of Policy.\n\nformat_tracker_states#\n\nCopy | @staticmethod | format_tracker_states(states: List[Dict]) -> Text\n\nFormat tracker states to human readable format on debug log.\n\nArguments:\n\nstates - list of tracker states dicts\n\nReturns:\n\n  the string of the states with user intents and actions", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "937": {"text": "Returns:\n\n  the string of the states with user intents and actions\n\nPrevious\u00ab rasa.core.policies._memoizationNextrasa.core.policies._rule_policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "938": {"text": "Version: 3.x\n\nrasa.core.policies._rule_policy\n\nInvalidRule Objects#\n\nCopyclass InvalidRule(RasaException)\n\nException that can be raised when rules are not valid.\n\nRulePolicy Objects#\n\nCopyclass RulePolicy(MemoizationPolicy)\n\nPolicy which handles all the rules\n\nsupported_data#\n\nCopy | @staticmethod | supported_data() -> SupportedData\n\nThe type of data supported by this policy.\n\nReturns:\n\n  The data type supported by this policy (ML and rule data).\n\n__init__#\n\nCopy | __init__(featurizer: Optional[TrackerFeaturizer] = None, priority: int = RULE_POLICY_PRIORITY, lookup: Optional[Dict] = None, core_fallback_threshold: float = DEFAULT_CORE_FALLBACK_THRESHOLD, core_fallback_action_name: Text = ACTION_DEFAULT_FALLBACK_NAME, enable_fallback_prediction: bool = True, restrict_rules: bool = True, check_for_contradictions: bool = True, **kwargs: Any, ,) -> None\n\nCreate a RulePolicy object.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "939": {"text": "Create a RulePolicy object.\n\nArguments:\n\nfeaturizer - Featurizer which is used to convert conversation states to\nfeatures.priority - Priority of the policy which is used if multiple policies predict\nactions with the same confidence.lookup - Lookup table which is used to pick matching rules for a conversation\nstate.core_fallback_threshold - Confidence of the prediction if no rule matched\nand de-facto threshold for a core fallback.core_fallback_action_name - Name of the action which should be predicted\nif no rule matched.enable_fallback_prediction - If True core_fallback_action_name is\npredicted in case no rule matched.restrict_rules - If True rules are restricted to contain a maximum of 1\nuser message. This is used to avoid that users build a state machine\nusing the rules.check_for_contradictions - Check for contradictions.\n\ntrain#\n\nCopy | train(training_trackers: List[TrackerWithCachedStates], domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> None\n\nTrains the policy on given training trackers.\n\nArguments:\n\ntraining_trackers - The list of the trackers.domain - The domain.interpreter - Interpreter which can be used by the polices for featurization.\n\npredict_action_probabilities#\n\nCopy | predict_action_probabilities(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> \"PolicyPrediction\"\n\nPredicts the next action (see parent class for more information).\n\nget_rule_only_data#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "940": {"text": "get_rule_only_data#\n\nCopy | get_rule_only_data() -> Dict[Text, Any]\n\nGets the slots and loops that are used only in rule data.\n\nReturns:\n\n  Slots and loops that are used only in rule data.\n\nPrevious\u00ab rasa.core.policies._policyNextrasa.core.policies._ted_policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "941": {"text": "Version: 3.x\n\nrasa.core.policies._ted_policy\n\nTEDPolicy Objects#\n\nCopyclass TEDPolicy(Policy)\n\nTransformer Embedding Dialogue (TED) Policy.\n\nThe model architecture is described in\ndetail in https://arxiv.org/abs/1910.00486.\nIn summary, the architecture comprises of the\nfollowing steps:\n\nCopy- concatenate user input (user intent and entities), previous system actions,  slots and active forms for each time step into an input vector to  pre-transformer embedding layer;- feed it to transformer;- apply a dense layer to the output of the transformer to get embeddings of a  dialogue for each time step;- apply a dense layer to create embeddings for system actions for each time  step;- calculate the similarity between the dialogue embedding and embedded system  actions. This step is based on the StarSpace  (https://arxiv.org/abs/1709.03856) idea.\n\n__init__#\n\nCopy | __init__(featurizer: Optional[TrackerFeaturizer] = None, priority: int = DEFAULT_POLICY_PRIORITY, max_history: Optional[int] = None, model: Optional[RasaModel] = None, fake_features: Optional[Dict[Text, List[\"Features\"]]] = None, entity_tag_specs: Optional[List[EntityTagSpec]] = None, should_finetune: bool = False, **kwargs: Any, ,) -> None\n\nDeclares instance variables with default values.\n\nmodel_class#\n\nCopy | @staticmethod | model_class() -> Type[\"TED\"]\n\nGets the class of the model architecture to be used by the policy.\n\nReturns:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "942": {"text": "Returns:\n\n  Required class.\n\nrun_training#\n\nCopy | run_training(model_data: RasaModelData, label_ids: Optional[np.ndarray] = None) -> None\n\nFeeds the featurized training data to the model.\n\nArguments:\n\nmodel_data - Featurized training data.label_ids - Label ids corresponding to the data points in model_data.\nThese may or may not be used by the function depending\non how the policy is trained.\n\ntrain#\n\nCopy | train(training_trackers: List[TrackerWithCachedStates], domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> None\n\nTrains the policy on given training trackers.\n\nArguments:\n\ntraining_trackers - List of training trackers to be used\nfor training the model.domain - Domain of the assistant.interpreter - NLU Interpreter to be used for featurizing the states.**kwargs - Any other argument.\n\npredict_action_probabilities#\n\nCopy | predict_action_probabilities(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> PolicyPrediction\n\nPredicts the next action the bot should take after seeing the tracker.\n\nArguments:\n\ntracker - the :class:rasa.core.trackers.DialogueStateTrackerdomain - the :class:rasa.shared.core.domain.Domaininterpreter - Interpreter which may be used by the policies to create\nadditional features.\n\nReturns:\n\n  The policy's prediction (e.g. the probabilities for the actions).\n\npersist#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "943": {"text": "persist#\n\nCopy | persist(path: Union[Text, Path]) -> None\n\nPersists the policy to a storage.\n\npersist_model_utilities#\n\nCopy | persist_model_utilities(model_path: Path) -> None\n\nPersists model's utility attributes like model weights, etc.\n\nArguments:\n\nmodel_path - Path where model is to be persisted\n\nload#\n\nCopy | @classmethod | load(cls, path: Union[Text, Path], should_finetune: bool = False, epoch_override: int = defaults[EPOCHS], **kwargs: Any, ,) -> \"TEDPolicy\"\n\nLoads a policy from the storage.\n\nArguments:\n\npath - Path on disk where policy is persisted.should_finetune - Whether to load the policy for finetuning.epoch_override - Override the number of epochs in persisted\nconfiguration for further finetuning.**kwargs - Any other arguments\n\nReturns:\n\n  Loaded policy\n\nRaises:\n\n PolicyModelNotFound if the model is not found in the supplied path.\n\nPrevious\u00ab rasa.core.policies._rule_policyNextrasa.core.policies._unexpected_intent_policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "944": {"text": "Version: 3.x\n\nrasa.core.policies._unexpected_intent_policy\n\nUnexpecTEDIntentPolicy Objects#\n\nCopyclass UnexpecTEDIntentPolicy(TEDPolicy)\n\nUnexpecTEDIntentPolicy has the same model architecture as TEDPolicy.\n\nThe difference is at a task level.\nInstead of predicting the next probable action, this policy\npredicts whether the last predicted intent is a likely intent\naccording to the training stories and conversation context.\n\n__init__#\n\nCopy | __init__(featurizer: Optional[TrackerFeaturizer] = None, priority: int = UNLIKELY_INTENT_POLICY_PRIORITY, max_history: Optional[int] = None, model: Optional[RasaModel] = None, fake_features: Optional[Dict[Text, List[\"Features\"]]] = None, entity_tag_specs: Optional[List[EntityTagSpec]] = None, should_finetune: bool = False, label_quantiles: Optional[Dict[int, List[float]]] = None, **kwargs: Any, ,) -> None\n\nDeclares instance variables with default values.\n\nmodel_class#\n\nCopy | @staticmethod | model_class() -> Type[\"IntentTED\"]\n\nGets the class of the model architecture to be used by the policy.\n\nReturns:\n\n  Required class.\n\ncompute_label_quantiles_post_training#\n\nCopy | compute_label_quantiles_post_training(model_data: RasaModelData, label_ids: np.ndarray) -> None\n\nComputes quantile scores for prediction of action_unlikely_intent.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "945": {"text": "Computes quantile scores for prediction of action_unlikely_intent.\n\nMultiple quantiles are computed for each label\nso that an appropriate threshold can be picked at\ninference time according to the tolerance value specified.\n\nArguments:\n\nmodel_data - Data used for training the model.label_ids - Numerical IDs of labels for each data point used during training.\n\nrun_training#\n\nCopy | run_training(model_data: RasaModelData, label_ids: Optional[np.ndarray] = None) -> None\n\nFeeds the featurized training data to the model.\n\nArguments:\n\nmodel_data - Featurized training data.label_ids - Label ids corresponding to the data points in model_data.\n\nRaises:\n\n RasaCoreException if label_ids is None as it's needed for\nrunning post training procedures.\n\npredict_action_probabilities#\n\nCopy | predict_action_probabilities(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> PolicyPrediction\n\nPredicts the next action the bot should take after seeing the tracker.\n\nArguments:\n\ntracker - Tracker containing past conversation events.domain - Domain of the assistant.interpreter - Interpreter which may be used by the policies to create\nadditional features.\n\nReturns:\n\n  The policy's prediction (e.g. the probabilities for the actions).\n\npersist_model_utilities#\n\nCopy | persist_model_utilities(model_path: Path) -> None\n\nPersists model's utility attributes like model weights, etc.\n\nArguments:\n\nmodel_path - Path where model is to be persisted\n\nIntentTED Objects#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "946": {"text": "model_path - Path where model is to be persisted\n\nIntentTED Objects#\n\nCopyclass IntentTED(TED)\n\nFollows TED's model architecture from https://arxiv.org/abs/1910.00486.\n\nHowever, it has been re-purposed to predict multiple\nlabels (intents) instead of a single label (action).\n\ndot_product_loss_layer#\n\nCopy | @property | dot_product_loss_layer() -> tf.keras.layers.Layer\n\nReturns the dot-product loss layer to use.\n\nMultiple intents can be valid simultaneously, so IntentTED uses the\nMultiLabelDotProductLoss.\n\nReturns:\n\n  The loss layer that is used by _prepare_dot_product_loss.\n\nrun_bulk_inference#\n\nCopy | run_bulk_inference(model_data: RasaModelData) -> Dict[Text, np.ndarray]\n\nComputes model's predictions for input data.\n\nArguments:\n\nmodel_data - Data to be passed as input\n\nReturns:\n\n  Predictions for the input data.\n\nPrevious\u00ab rasa.core.policies._ted_policyNextrasa.core.policies.ensemble \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "947": {"text": "Version: 3.x\n\nrasa.core.policies.ensemble\n\nis_not_in_training_data#\n\nCopydef is_not_in_training_data(policy_name: Optional[Text],                            max_confidence: Optional[float] = None) -> bool\n\nChecks whether the prediction is empty or by a policy which did not memoize data.\n\nArguments:\n\npolicy_name - The name of the policy.max_confidence - The max confidence of the policy's prediction.\n\nReturns:\n\n False if and only if an action was predicted (i.e. max_confidence > 0) by\na MemoizationPolicy\n\nInvalidPolicyEnsembleConfig Objects#\n\nCopyclass InvalidPolicyEnsembleConfig(RasaException)\n\nException that can be raised when the policy ensemble is not valid.\n\nPolicyPredictionEnsemble Objects#\n\nCopyclass PolicyPredictionEnsemble(ABC)\n\nInterface for any policy prediction ensemble.\n\nGiven a list of predictions from policies, which include some meta data about the\npolicies themselves, an \"ensemble\" decides what the final prediction should be, in\nthe following way:\n\nIf the previously predicted action was rejected, then the ensemble sets the\nprobability for this action to 0.0 (in all given predictions).It combines the information from the single predictions, which include some\nmeta data about the policies (e.g. priority), into a final prediction.If the sequence of events given at the time of prediction ends with a user\nutterance, then the ensemble adds a special event to the event-list included in\nthe final prediction that indicates whether the final prediction was made based\non the actual text of that user utterance.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "948": {"text": "Observe that policies predict \"mandatory\" as well as \"optional\"\nevents. The ensemble decides which of the optional events should\nbe passed on.\n\ncombine_predictions_from_kwargs#\n\nCopydef combine_predictions_from_kwargs(tracker: DialogueStateTracker,                                    domain: Domain, **kwargs: Any) -> PolicyPrediction\n\nDerives a single prediction from predictions given as kwargs.\n\nArguments:\n\ntracker - dialogue state tracker holding the state of the conversation,\nwhich may influence the combination of predictions as welldomain - the common domain**kwargs - arbitrary keyword arguments. All policy predictions passed as\nkwargs will be combined.\n\nReturns:\n\n  a single prediction\n\ncombine_predictions#\n\nCopy@abstractmethoddef combine_predictions(predictions: List[PolicyPrediction],                        tracker: DialogueStateTracker,                        domain: Domain) -> PolicyPrediction\n\nDerives a single prediction from the given list of predictions.\n\nArguments:\n\npredictions - a list of policy predictions that include \"confidence scores\"\nwhich are non-negative but do not necessarily up to 1tracker - dialogue state tracker holding the state of the conversation,\nwhich may influence the combination of predictions as welldomain - the common domain\n\nReturns:\n\n  a single prediction\n\nDefaultPolicyPredictionEnsemble Objects#\n\nCopyclass DefaultPolicyPredictionEnsemble(PolicyPredictionEnsemble,                                      GraphComponent)\n\nAn ensemble that picks the \"best\" prediction and combines events from all.\n\nThe following rules determine which prediction is the \"best\":", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "949": {"text": "The following rules determine which prediction is the \"best\":\n\n\"No user\" predictions overrule all other predictions.End-to-end predictions overrule all other predictions based on\nuser input - if and only if no \"no user\" prediction is present in the\ngiven ensemble.Given two predictions, if the maximum confidence of one prediction is\nstrictly larger than that of the other, then the prediction with the\nstrictly larger maximum confidence is considered to be \"better\".\nThe priorities of the policies that made these predictions does not matter.Given two predictions of policies that are equally confident, the\nprediction of the policy with the higher priority is considered to be\n\"better\".\n\nObserve that this comparison is not symmetric if the priorities are allowed to\ncoincide (i.e. if we cannot distinguish two predictions using 1.-4., then\nthe first prediction is considered to be \"better\").\n\nThe list of events in the final prediction will contain all mandatory\nevents contained in the given predictions, the optional events given in the\n\"best\" prediction, and DefinePrevUserUtteredFeaturization event (if the\nprediction was made for a sequence of events ending with a user utterance).\n\ncreate#\n\nCopy@classmethoddef create(        cls, config: Dict[Text, Any], model_storage: ModelStorage,        resource: Resource, execution_context: ExecutionContext) -> DefaultPolicyPredictionEnsemble\n\nCreates a new instance (see parent class for full docstring).\n\ncombine_predictions#\n\nCopydef combine_predictions(predictions: List[PolicyPrediction],                        tracker: DialogueStateTracker,                        domain: Domain) -> PolicyPrediction\n\nDerives a single prediction from the given list of predictions.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "950": {"text": "Derives a single prediction from the given list of predictions.\n\nNote that you might get unexpected results if the priorities are non-unique.\nMoreover, the order of events in the result is determined by the order of the\npredictions passed to this method.\n\nArguments:\n\npredictions - a list of policy predictions that include \"probabilities\"\nwhich are non-negative but do not necessarily up to 1tracker - dialogue state tracker holding the state of the conversationdomain - the common domain\n\nReturns:\n\n  The \"best\" prediction.\n\nPrevious\u00ab rasa.core.policies._unexpected_intent_policyNextrasa.core.policies.fallback \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "951": {"text": "Version: 3.x\n\nrasa.core.policies.fallback\n\nFallbackPolicy Objects#\n\nCopyclass FallbackPolicy(Policy)\n\nPolicy which predicts fallback actions.\n\nA fallback can be triggered by a low confidence score on a\nNLU prediction or by a low confidence score on an action\nprediction.\n\n__init__#\n\nCopy | __init__(priority: int = FALLBACK_POLICY_PRIORITY, nlu_threshold: float = DEFAULT_NLU_FALLBACK_THRESHOLD, ambiguity_threshold: float = DEFAULT_NLU_FALLBACK_AMBIGUITY_THRESHOLD, core_threshold: float = DEFAULT_CORE_FALLBACK_THRESHOLD, fallback_action_name: Text = ACTION_DEFAULT_FALLBACK_NAME, **kwargs: Any, ,) -> None\n\nCreate a new Fallback policy.\n\nArguments:\n\npriority - Fallback policy priority.core_threshold - if NLU confidence threshold is met,\npredict fallback action with confidence core_threshold.\nIf this is the highest confidence in the ensemble,\nthe fallback action will be executed.nlu_threshold - minimum threshold for NLU confidence.\nIf intent prediction confidence is lower than this,\npredict fallback action with confidence 1.0.ambiguity_threshold - threshold for minimum difference\nbetween confidences of the top two predictionsfallback_action_name - name of the action to execute as a fallback\n\ntrain#\n\nCopy | train(training_trackers: List[TrackerWithCachedStates], domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> None", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "952": {"text": "Does nothing. This policy is deterministic.\n\nnlu_confidence_below_threshold#\n\nCopy | nlu_confidence_below_threshold(nlu_data: Dict[Text, Any]) -> Tuple[bool, float]\n\nCheck if the highest confidence is lower than nlu_threshold.\n\nnlu_prediction_ambiguous#\n\nCopy | nlu_prediction_ambiguous(nlu_data: Dict[Text, Any]) -> Tuple[bool, Optional[float]]\n\nCheck if top 2 confidences are closer than ambiguity_threshold.\n\nshould_nlu_fallback#\n\nCopy | should_nlu_fallback(nlu_data: Dict[Text, Any], last_action_name: Text) -> bool\n\nCheck if fallback action should be predicted.\n\nChecks for:\n\npredicted NLU confidence is lower than nlu_thresholddifference in top 2 NLU confidences lower than ambiguity_thresholdlast action is action listen\n\nfallback_scores#\n\nCopy | fallback_scores(domain: Domain, fallback_score: float = 1.0) -> List[float]\n\nPrediction scores used if a fallback is necessary.\n\npredict_action_probabilities#\n\nCopy | predict_action_probabilities(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> PolicyPrediction\n\nPredicts a fallback action.\n\nThe fallback action is predicted if the NLU confidence is low\nor no other policy has a high-confidence prediction.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "953": {"text": "Previous\u00ab rasa.core.policies.ensembleNextrasa.core.policies.form_policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "954": {"text": "Version: 3.x\n\nrasa.core.policies.form_policy\n\nFormPolicy Objects#\n\nCopyclass FormPolicy(MemoizationPolicy)\n\nPolicy which handles prediction of Forms\n\nrecall#\n\nCopy | recall(states: List[State], tracker: DialogueStateTracker, domain: Domain) -> Optional[Text]\n\nFinds the action based on the given states.\n\nArguments:\n\nstates - List of states.tracker - The tracker.domain - The Domain.\n\nReturns:\n\n  The name of the action.\n\npredict_action_probabilities#\n\nCopy | predict_action_probabilities(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> PolicyPrediction\n\nPredicts the corresponding form action if there is an active form.\n\nPrevious\u00ab rasa.core.policies.fallbackNextrasa.core.policies.mapping_policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "955": {"text": "Version: 3.x\n\nrasa.core.policies.mapping_policy\n\nMappingPolicy Objects#\n\nCopyclass MappingPolicy(Policy)\n\nPolicy which maps intents directly to actions.\n\nIntents can be assigned actions in the domain file which are to be\nexecuted whenever the intent is detected. This policy takes precedence over\nany other policy.\n\n__init__#\n\nCopy | __init__(priority: int = MAPPING_POLICY_PRIORITY, **kwargs: Any) -> None\n\nCreate a new Mapping policy.\n\ntrain#\n\nCopy | train(training_trackers: List[TrackerWithCachedStates], domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> None\n\nDoes nothing. This policy is deterministic.\n\npredict_action_probabilities#\n\nCopy | predict_action_probabilities(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> PolicyPrediction\n\nPredicts the assigned action.\n\nIf the current intent is assigned to an action that action will be\npredicted with the highest probability of all policies. If it is not\nthe policy will predict zero for every action.\n\nPrevious\u00ab rasa.core.policies.form_policyNextrasa.core.policies.memoization \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "956": {"text": "Version: 3.x\n\nrasa.core.policies.memoization\n\nMemoizationPolicy Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.POLICY_WITHOUT_END_TO_END_SUPPORT, is_trainable=True)class MemoizationPolicy(Policy)\n\nA policy that follows exact examples of max_history turns in training stories.\n\nSince slots that are set some time in the past are\npreserved in all future feature vectors until they are set\nto None, this policy implicitly remembers and most importantly\nrecalls examples in the context of the current dialogue\nlonger than max_history.\n\nThis policy is not supposed to be the only policy in an ensemble,\nit is optimized for precision and not recall.\nIt should get a 100% precision because it emits probabilities of 1.1\nalong it's predictions, which makes every mistake fatal as\nno other policy can overrule it.\n\nIf it is needed to recall turns from training dialogues where\nsome slots might not be set during prediction time, and there are\ntraining stories for this, use AugmentedMemoizationPolicy.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             execution_context: ExecutionContext,             featurizer: Optional[TrackerFeaturizer] = None,             lookup: Optional[Dict] = None) -> None\n\nInitialize the policy.\n\nrecall#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "957": {"text": "Initialize the policy.\n\nrecall#\n\nCopydef recall(states: List[State], tracker: DialogueStateTracker, domain: Domain,           rule_only_data: Optional[Dict[Text, Any]]) -> Optional[Text]\n\nFinds the action based on the given states.\n\nArguments:\n\nstates - List of states.tracker - The tracker.domain - The Domain.rule_only_data - Slots and loops which are specific to rules and hence\nshould be ignored by this policy.\n\nReturns:\n\n  The name of the action.\n\npredict_action_probabilities#\n\nCopydef predict_action_probabilities(tracker: DialogueStateTracker,                                 domain: Domain,                                 rule_only_data: Optional[Dict[Text,                                                               Any]] = None, **kwargs: Any) -> PolicyPrediction\n\nPredicts the next action the bot should take after seeing the tracker.\n\nArguments:\n\ntracker - the :class:rasa.core.trackers.DialogueStateTrackerdomain - the :class:rasa.shared.core.domain.Domainrule_only_data - Slots and loops which are specific to rules and hence\nshould be ignored by this policy.\n\nReturns:\n\n  The policy's prediction (e.g. the probabilities for the actions).\n\npersist#\n\nCopydef persist() -> None\n\nPersists the policy to storage.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> MemoizationPolicy\n\nLoads a trained policy (see parent class for full docstring).", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "958": {"text": "Loads a trained policy (see parent class for full docstring).\n\nAugmentedMemoizationPolicy Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.POLICY_WITHOUT_END_TO_END_SUPPORT, is_trainable=True)class AugmentedMemoizationPolicy(MemoizationPolicy)\n\nThe policy that remembers examples from training stories for max_history turns.\n\nIf it is needed to recall turns from training dialogues\nwhere some slots might not be set during prediction time,\nadd relevant stories without such slots to training data.\nE.g. reminder stories.\n\nSince slots that are set some time in the past are\npreserved in all future feature vectors until they are set\nto None, this policy has a capability to recall the turns\nup to max_history from training stories during prediction\neven if additional slots were filled in the past\nfor current dialogue.\n\nrecall#\n\nCopydef recall(states: List[State], tracker: DialogueStateTracker, domain: Domain,           rule_only_data: Optional[Dict[Text, Any]]) -> Optional[Text]\n\nFinds the action based on the given states.\n\nUses back to the future idea to change the past and check whether the new future\ncan be used to recall the action.\n\nArguments:\n\nstates - List of states.tracker - The tracker.domain - The Domain.rule_only_data - Slots and loops which are specific to rules and hence\nshould be ignored by this policy.\n\nReturns:\n\n  The name of the action.\n\nPrevious\u00ab rasa.core.policies.mapping_policyNextrasa.core.policies.policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "959": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "960": {"text": "Version: 3.x\n\nrasa.core.policies.policy\n\nSupportedData Objects#\n\nCopyclass SupportedData(Enum)\n\nEnumeration of a policy's supported training data type.\n\ntrackers_for_supported_data#\n\nCopy@staticmethoddef trackers_for_supported_data(        supported_data: SupportedData,        trackers: TrackerListTypeVar) -> TrackerListTypeVar\n\nReturn trackers for a given policy.\n\nArguments:\n\nsupported_data - Supported data filter for the trackers.trackers - Trackers to split.\n\nReturns:\n\n  Trackers from ML-based training data and/or rule-based data.\n\nPolicy Objects#\n\nCopyclass Policy(GraphComponent)\n\nCommon parent class for all dialogue policies.\n\nsupported_data#\n\nCopy@staticmethoddef supported_data() -> SupportedData\n\nThe type of data supported by this policy.\n\nBy default, this is only ML-based training data. If policies support rule data,\nor both ML-based data and rule data, they need to override this method.\n\nReturns:\n\n  The data type supported by this policy (ML-based training data).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             execution_context: ExecutionContext,             featurizer: Optional[TrackerFeaturizer] = None) -> None\n\nConstructs a new Policy object.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> Policy", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "961": {"text": "Creates a new untrained policy (see parent class for full docstring).\n\nfeaturizer#\n\nCopy@propertydef featurizer() -> TrackerFeaturizer\n\nReturns the policy's featurizer.\n\ntrain#\n\nCopy@abc.abstractmethoddef train(training_trackers: List[TrackerWithCachedStates], domain: Domain, **kwargs: Any) -> Resource\n\nTrains a policy.\n\nArguments:\n\ntraining_trackers - The story and rules trackers from the training data.domain - The model's domain.**kwargs - Depending on the specified needs section and the resulting\ngraph structure the policy can use different input to train itself.\n\nReturns:\n\n  A policy must return its resource locator so that potential children nodes\ncan load the policy from the resource.\n\npredict_action_probabilities#\n\nCopy@abc.abstractmethoddef predict_action_probabilities(tracker: DialogueStateTracker,                                 domain: Domain,                                 rule_only_data: Optional[Dict[Text,                                                               Any]] = None, **kwargs: Any) -> PolicyPrediction\n\nPredicts the next action the bot should take after seeing the tracker.\n\nArguments:\n\ntracker - The tracker containing the conversation history up to now.domain - The model's domain.rule_only_data - Slots and loops which are specific to rules and hence\nshould be ignored by this policy.**kwargs - Depending on the specified needs section and the resulting\ngraph structure the policy can use different input to make predictions.\n\nReturns:\n\n  The prediction.\n\nload#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "962": {"text": "Returns:\n\n  The prediction.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> Policy\n\nLoads a trained policy (see parent class for full docstring).\n\nformat_tracker_states#\n\nCopy@staticmethoddef format_tracker_states(states: List[Dict]) -> Text\n\nFormat tracker states to human readable format on debug log.\n\nArguments:\n\nstates - list of tracker states dicts\n\nReturns:\n\n  the string of the states with user intents and actions\n\n__repr__#\n\nCopydef __repr__() -> Text\n\nReturns text representation of object.\n\nPolicyPrediction Objects#\n\nCopyclass PolicyPrediction()\n\nStores information about the prediction of a Policy.\n\n__init__#\n\nCopydef __init__(probabilities: List[float],             policy_name: Optional[Text],             policy_priority: int = 1,             events: Optional[List[Event]] = None,             optional_events: Optional[List[Event]] = None,             is_end_to_end_prediction: bool = False,             is_no_user_prediction: bool = False,             diagnostic_data: Optional[Dict[Text, Any]] = None,             hide_rule_turn: bool = False,             action_metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates a PolicyPrediction.\n\nArguments:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "963": {"text": "Creates a PolicyPrediction.\n\nArguments:\n\nprobabilities - The probabilities for each action.policy_name - Name of the policy which made the prediction.policy_priority - The priority of the policy which made the prediction.events - Events which the Policy needs to have applied to the tracker\nafter the prediction. These events are applied independent of whether\nthe policy wins against other policies or not. Be careful which events\nyou return as they can potentially influence the conversation flow.optional_events - Events which the Policy needs to have applied to the\ntracker after the prediction in case it wins. These events are only\napplied in case the policy's prediction wins. Be careful which events\nyou return as they can potentially influence the conversation flow.is_end_to_end_prediction - True if the prediction used the text of the\nuser message instead of the intent.probabilities0 - True if the prediction uses neither the text\nof the user message nor the intent. This is for the example the case\nfor happy loop paths.probabilities2 - Intermediate results or other information that is not\nnecessary for Rasa to function, but intended for debugging and\nfine-tuning purposes.probabilities3 - True if the prediction was made by the rules which\ndo not appear in the storiesprobabilities5 - Specifies additional metadata that can be passed\nby policies.\n\nfor_action_name#\n\nCopy@staticmethoddef for_action_name(        domain: Domain,        action_name: Text,        policy_name: Optional[Text] = None,        confidence: float = 1.0,        action_metadata: Optional[Dict[Text,                                       Any]] = None) -> \"PolicyPrediction\"\n\nCreate a prediction for a given action.\n\nArguments:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "964": {"text": "Create a prediction for a given action.\n\nArguments:\n\ndomain - The current model domainaction_name - The action which should be predicted.policy_name - The policy which did the prediction.confidence - The prediction confidence.action_metadata - Additional metadata to be attached with the prediction.\n\nReturns:\n\n  The prediction.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nChecks if the two objects are equal.\n\nArguments:\n\nother - Any other object.\n\nReturns:\n\n True if other has the same type and the values are the same.\n\nmax_confidence_index#\n\nCopy@propertydef max_confidence_index() -> int\n\nGets the index of the action prediction with the highest confidence.\n\nReturns:\n\n  The index of the action with the highest confidence.\n\nmax_confidence#\n\nCopy@propertydef max_confidence() -> float\n\nGets the highest predicted confidence.\n\nReturns:\n\n  The highest predicted confidence.\n\nconfidence_scores_for#\n\nCopydef confidence_scores_for(action_name: Text, value: float,                          domain: Domain) -> List[float]\n\nReturns confidence scores if a single action is predicted.\n\nArguments:\n\naction_name - the name of the action for which the score should be setvalue - the confidence for action_namedomain - the :class:rasa.shared.core.domain.Domain\n\nReturns:\n\n  the list of the length of the number of actions\n\nInvalidPolicyConfig Objects#\n\nCopyclass InvalidPolicyConfig(RasaException)\n\nException that can be raised when policy config is not valid.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "965": {"text": "Exception that can be raised when policy config is not valid.\n\nPrevious\u00ab rasa.core.policies.memoizationNextrasa.core.policies.rule_policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "966": {"text": "Version: 3.x\n\nrasa.core.policies.rule_policy\n\nInvalidRule Objects#\n\nCopyclass InvalidRule(RasaException)\n\nException that can be raised when rules are not valid.\n\nRulePolicy Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.POLICY_WITHOUT_END_TO_END_SUPPORT, is_trainable=True)class RulePolicy(MemoizationPolicy)\n\nPolicy which handles all the rules.\n\nsupported_data#\n\nCopy@staticmethoddef supported_data() -> SupportedData\n\nThe type of data supported by this policy.\n\nReturns:\n\n  The data type supported by this policy (ML and rule data).\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             execution_context: ExecutionContext,             featurizer: Optional[TrackerFeaturizer] = None,             lookup: Optional[Dict] = None) -> None\n\nInitializes the policy.\n\nraise_if_incompatible_with_domain#\n\nCopy@classmethoddef raise_if_incompatible_with_domain(cls, config: Dict[Text, Any],                                      domain: Domain) -> None\n\nChecks whether the domains action names match the configured fallback.\n\nArguments:\n\nconfig - configuration of a RulePolicydomain - a domain\n\nRaises:\n\n InvalidDomain if this policy is incompatible with the domain\n\ntrain#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "967": {"text": "Raises:\n\n InvalidDomain if this policy is incompatible with the domain\n\ntrain#\n\nCopydef train(training_trackers: List[TrackerWithCachedStates], domain: Domain, **kwargs: Any) -> Resource\n\nTrains the policy on given training trackers.\n\nArguments:\n\ntraining_trackers - The list of the trackers.domain - The domain.\n\nReturns:\n\n  The resource which can be used to load the trained policy.\n\npredict_action_probabilities#\n\nCopydef predict_action_probabilities(tracker: DialogueStateTracker,                                 domain: Domain,                                 rule_only_data: Optional[Dict[Text,                                                               Any]] = None, **kwargs: Any) -> PolicyPrediction\n\nPredicts the next action (see parent class for more information).\n\npersist#\n\nCopydef persist() -> None\n\nPersists trained RulePolicy.\n\nPrevious\u00ab rasa.core.policies.policyNextrasa.core.policies.sklearn_policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "968": {"text": "Version: 3.x\n\nrasa.core.policies.sklearn_policy\n\nSklearnPolicy Objects#\n\nCopyclass SklearnPolicy(Policy)\n\nUse an sklearn classifier to train a policy.\n\n__init__#\n\nCopy | __init__(featurizer: Optional[MaxHistoryTrackerFeaturizer] = None, priority: int = DEFAULT_POLICY_PRIORITY, max_history: int = DEFAULT_MAX_HISTORY, model: Optional[\"sklearn.base.BaseEstimator\"] = None, param_grid: Optional[Union[Dict[Text, List], List[Dict]]] = None, cv: Optional[int] = None, scoring: Optional[Union[Text, List, Dict, Callable]] = \"accuracy\", label_encoder: LabelEncoder = LabelEncoder(), shuffle: bool = True, zero_state_features: Optional[Dict[Text, List[\"Features\"]]] = None, **kwargs: Any, ,) -> None\n\nCreate a new sklearn policy.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "969": {"text": "Create a new sklearn policy.\n\nArguments:\n\nfeaturizer - Featurizer used to convert the training data into\nvector format.priority - Policy prioritymax_history - Maximum history of the dialogs.model - The sklearn model or model pipeline.param_grid - If param_grid is not None and cv is given,\na grid search on the given param_grid is performed\n(e.g. param_grid={'n_estimators': [50, 100]}).cv - If cv is not None, perform a cross validation on\nthe training data. cv should then conform to the\nsklearn standard (e.g. cv=5 for a 5-fold cross-validation).scoring - Scoring strategy, using the sklearn standard.label_encoder - Encoder for the labels. Must implement an\ninverse_transform method.shuffle - Whether to shuffle training data.zero_state_features - Contains default feature values for attributes\n\nmodel_architecture#\n\nCopy | model_architecture(**kwargs: Any) -> Any\n\nSets model parameters for training.\n\npredict_action_probabilities#\n\nCopy | predict_action_probabilities(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> PolicyPrediction\n\nPredicts the next action the bot should take after seeing the tracker.\n\nArguments:\n\ntracker - the :class:rasa.core.trackers.DialogueStateTrackerdomain - the :class:rasa.shared.core.domain.Domaininterpreter - Interpreter which may be used by the policies to create\nadditional features.\n\nReturns:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "970": {"text": "Returns:\n\n  The policy's prediction (e.g. the probabilities for the actions).\n\npersist#\n\nCopy | persist(path: Union[Text, Path]) -> None\n\nPersists the policy properties (see parent class for more information).\n\nload#\n\nCopy | @classmethod | load(cls, path: Union[Text, Path], should_finetune: bool = False, **kwargs: Any) -> Policy\n\nSee the docstring for Policy.load.\n\nPrevious\u00ab rasa.core.policies.rule_policyNextrasa.core.policies.ted_policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "971": {"text": "Version: 3.x\n\nrasa.core.policies.ted_policy\n\nTEDPolicy Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.POLICY_WITH_END_TO_END_SUPPORT, is_trainable=True)class TEDPolicy(Policy)\n\nTransformer Embedding Dialogue (TED) Policy.\n\nThe model architecture is described in\ndetail in https://arxiv.org/abs/1910.00486.\nIn summary, the architecture comprises of the\nfollowing steps:\n\nCopy- concatenate user input (user intent and entities), previous system actions,  slots and active forms for each time step into an input vector to  pre-transformer embedding layer;- feed it to transformer;- apply a dense layer to the output of the transformer to get embeddings of a  dialogue for each time step;- apply a dense layer to create embeddings for system actions for each time  step;- calculate the similarity between the dialogue embedding and embedded system  actions. This step is based on the StarSpace  (https://arxiv.org/abs/1709.03856) idea.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the default config (see parent class for full docstring).\n\n__init__#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "972": {"text": "__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             execution_context: ExecutionContext,             model: Optional[RasaModel] = None,             featurizer: Optional[TrackerFeaturizer] = None,             fake_features: Optional[Dict[Text, List[Features]]] = None,             entity_tag_specs: Optional[List[EntityTagSpec]] = None) -> None\n\nDeclares instance variables with default values.\n\nmodel_class#\n\nCopy@staticmethoddef model_class() -> Type[TED]\n\nGets the class of the model architecture to be used by the policy.\n\nReturns:\n\n  Required class.\n\nrun_training#\n\nCopydef run_training(model_data: RasaModelData,                 label_ids: Optional[np.ndarray] = None) -> None\n\nFeeds the featurized training data to the model.\n\nArguments:\n\nmodel_data - Featurized training data.label_ids - Label ids corresponding to the data points in model_data.\nThese may or may not be used by the function depending\non how the policy is trained.\n\ntrain#\n\nCopydef train(        training_trackers: List[TrackerWithCachedStates],        domain: Domain,        precomputations: Optional[MessageContainerForCoreFeaturization] = None, **kwargs: Any) -> Resource\n\nTrains the policy (see parent class for full docstring).\n\npredict_action_probabilities#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "973": {"text": "predict_action_probabilities#\n\nCopydef predict_action_probabilities(        tracker: DialogueStateTracker,        domain: Domain,        rule_only_data: Optional[Dict[Text, Any]] = None,        precomputations: Optional[MessageContainerForCoreFeaturization] = None, **kwargs: Any) -> PolicyPrediction\n\nPredicts the next action (see parent class for full docstring).\n\npersist#\n\nCopydef persist() -> None\n\nPersists the policy to a storage.\n\npersist_model_utilities#\n\nCopydef persist_model_utilities(model_path: Path) -> None\n\nPersists model's utility attributes like model weights, etc.\n\nArguments:\n\nmodel_path - Path where model is to be persisted\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> TEDPolicy\n\nLoads a policy from the storage (see parent class for full docstring).\n\nTED Objects#\n\nCopyclass TED(TransformerRasaModel)\n\nTED model architecture from https://arxiv.org/abs/1910.00486.\n\n__init__#\n\nCopydef __init__(data_signature: Dict[Text, Dict[Text, List[FeatureSignature]]],             config: Dict[Text, Any], max_history_featurizer_is_used: bool,             label_data: RasaModelData,             entity_tag_specs: Optional[List[EntityTagSpec]]) -> None\n\nInitializes the TED model.\n\nArguments:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "974": {"text": "Initializes the TED model.\n\nArguments:\n\ndata_signature - the data signature of the input dataconfig - the model configurationmax_history_featurizer_is_used - if 'True'\nonly the last dialogue turn will be usedlabel_data - the label dataentity_tag_specs - the entity tag specifications\n\nbatch_loss#\n\nCopydef batch_loss(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> tf.Tensor\n\nCalculates the loss for the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The loss of the given batch.\n\nprepare_for_predict#\n\nCopydef prepare_for_predict() -> None\n\nPrepares the model for prediction.\n\nbatch_predict#\n\nCopydef batch_predict(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> Dict[Text, Union[tf.Tensor, Dict[Text, tf.Tensor]]]\n\nPredicts the output of the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The output to predict.\n\nPrevious\u00ab rasa.core.policies.sklearn_policyNextrasa.core.policies.two_stage_fallback \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "975": {"text": "Version: 3.x\n\nrasa.core.policies.two_stage_fallback\n\nTwoStageFallbackPolicy Objects#\n\nCopyclass TwoStageFallbackPolicy(FallbackPolicy)\n\nThis policy handles low NLU confidence in multiple stages.\n\nIf a NLU prediction has a low confidence score,\nthe user is asked to affirm whether they really had this intent.\nIf they affirm, the story continues as if the intent was classified\nwith high confidence from the beginning.\nIf they deny, the user is asked to rephrase his intent.\nIf the classification for the rephrased intent was confident, the story\ncontinues as if the user had this intent from the beginning.\nIf the rephrased intent was not classified with high confidence,\nthe user is asked to affirm the classified intent.\nIf the user affirm the intent, the story continues as if the user had\nthis intent from the beginning.\nIf the user denies, an ultimate fallback action is triggered\n(e.g. a hand-off to a human).\n\n__init__#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "976": {"text": "__init__#\n\nCopy | __init__(priority: int = FALLBACK_POLICY_PRIORITY, nlu_threshold: float = DEFAULT_NLU_FALLBACK_THRESHOLD, ambiguity_threshold: float = DEFAULT_NLU_FALLBACK_AMBIGUITY_THRESHOLD, core_threshold: float = DEFAULT_CORE_FALLBACK_THRESHOLD, fallback_core_action_name: Text = ACTION_DEFAULT_FALLBACK_NAME, fallback_nlu_action_name: Text = ACTION_DEFAULT_FALLBACK_NAME, deny_suggestion_intent_name: Text = USER_INTENT_OUT_OF_SCOPE, **kwargs: Any, ,) -> None\n\nCreate a new Two-stage Fallback policy.\n\nArguments:\n\npriority - The fallback policy priority.nlu_threshold - minimum threshold for NLU confidence.\nIf intent prediction confidence is lower than this,\npredict fallback action with confidence 1.0.ambiguity_threshold - threshold for minimum difference\nbetween confidences of the top two predictionscore_threshold - if NLU confidence threshold is met,\npredict fallback action with confidence\ncore_threshold. If this is the highest confidence in\nthe ensemble, the fallback action will be executed.fallback_core_action_name - This action is executed if the Core\nthreshold is not met.fallback_nlu_action_name - This action is executed if the user\ndenies the recognised intent for the second time.deny_suggestion_intent_name - The name of the intent which is used\nto detect that the user denies the suggested intents.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "977": {"text": "predict_action_probabilities#\n\nCopy | predict_action_probabilities(tracker: DialogueStateTracker, domain: Domain, interpreter: NaturalLanguageInterpreter, **kwargs: Any, ,) -> PolicyPrediction\n\nPredicts the next action if NLU confidence is low.\n\nPrevious\u00ab rasa.core.policies.ted_policyNextrasa.core.policies.unexpected_intent_policy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "978": {"text": "Version: 3.x\n\nrasa.core.policies.unexpected_intent_policy\n\nRankingCandidateMetadata Objects#\n\nCopy@dataclasses.dataclassclass RankingCandidateMetadata()\n\nDataclass to represent metada for a candidate intent.\n\nUnexpecTEDIntentPolicyMetadata Objects#\n\nCopy@dataclasses.dataclassclass UnexpecTEDIntentPolicyMetadata()\n\nDataclass to represent policy metadata.\n\nUnexpecTEDIntentPolicy Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.POLICY_WITH_END_TO_END_SUPPORT, is_trainable=True)class UnexpecTEDIntentPolicy(TEDPolicy)\n\nUnexpecTEDIntentPolicy has the same model architecture as TEDPolicy.\n\nThe difference is at a task level.\nInstead of predicting the next probable action, this policy\npredicts whether the last predicted intent is a likely intent\naccording to the training stories and conversation context.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the default config (see parent class for full docstring).\n\n__init__#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "979": {"text": "__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             execution_context: ExecutionContext,             model: Optional[RasaModel] = None,             featurizer: Optional[TrackerFeaturizer] = None,             fake_features: Optional[Dict[Text, List[Features]]] = None,             entity_tag_specs: Optional[List[EntityTagSpec]] = None,             label_quantiles: Optional[Dict[int, List[float]]] = None)\n\nDeclares instance variables with default values.\n\nmodel_class#\n\nCopy@staticmethoddef model_class() -> Type[\"IntentTED\"]\n\nGets the class of the model architecture to be used by the policy.\n\nReturns:\n\n  Required class.\n\ncompute_label_quantiles_post_training#\n\nCopydef compute_label_quantiles_post_training(model_data: RasaModelData,                                          label_ids: np.ndarray) -> None\n\nComputes quantile scores for prediction of action_unlikely_intent.\n\nMultiple quantiles are computed for each label\nso that an appropriate threshold can be picked at\ninference time according to the tolerance value specified.\n\nArguments:\n\nmodel_data - Data used for training the model.label_ids - Numerical IDs of labels for each data point used during training.\n\nrun_training#\n\nCopydef run_training(model_data: RasaModelData,                 label_ids: Optional[np.ndarray] = None) -> None\n\nFeeds the featurized training data to the model.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "980": {"text": "Feeds the featurized training data to the model.\n\nArguments:\n\nmodel_data - Featurized training data.label_ids - Label ids corresponding to the data points in model_data.\n\nRaises:\n\n RasaCoreException if label_ids is None as it's needed for\nrunning post training procedures.\n\npredict_action_probabilities#\n\nCopydef predict_action_probabilities(        tracker: DialogueStateTracker,        domain: Domain,        rule_only_data: Optional[Dict[Text, Any]] = None,        precomputations: Optional[MessageContainerForCoreFeaturization] = None, **kwargs: Any) -> PolicyPrediction\n\nPredicts the next action the bot should take after seeing the tracker.\n\nArguments:\n\ntracker - Tracker containing past conversation events.domain - Domain of the assistant.rule_only_data - Slots and loops which are specific to rules and hence\nshould be ignored by this policy.precomputations - Contains precomputed features and attributes.\n\nReturns:\n\n  The policy's prediction (e.g. the probabilities for the actions).\n\npersist_model_utilities#\n\nCopydef persist_model_utilities(model_path: Path) -> None\n\nPersists model's utility attributes like model weights, etc.\n\nArguments:\n\nmodel_path - Path where model is to be persisted\n\nIntentTED Objects#\n\nCopyclass IntentTED(TED)\n\nFollows TED's model architecture from https://arxiv.org/abs/1910.00486.\n\nHowever, it has been re-purposed to predict multiple\nlabels (intents) instead of a single label (action).\n\ndot_product_loss_layer#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "981": {"text": "dot_product_loss_layer#\n\nCopy@propertydef dot_product_loss_layer() -> tf.keras.layers.Layer\n\nReturns the dot-product loss layer to use.\n\nMultiple intents can be valid simultaneously, so IntentTED uses the\nMultiLabelDotProductLoss.\n\nReturns:\n\n  The loss layer that is used by _prepare_dot_product_loss.\n\nrun_bulk_inference#\n\nCopydef run_bulk_inference(    model_data: RasaModelData) -> Dict[Text, Union[np.ndarray, Dict[Text, Any]]]\n\nComputes model's predictions for input data.\n\nArguments:\n\nmodel_data - Data to be passed as input\n\nReturns:\n\n  Predictions for the input data.\n\nPrevious\u00ab rasa.core.policies.two_stage_fallbackNextrasa.core.training.converters.responses_prefix_converter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "982": {"text": "Version: 3.x\n\nrasa.core.training.converters.responses_prefix_converter\n\nnormalize_utter_action#\n\nCopydef normalize_utter_action(action_name: Text) -> Text\n\nEnsure that response names start with utter_.\n\nArguments:\n\naction_name - The name of the response.\n\nReturns:\n\n  The name of the response, starting with utter_.\n\nStoryResponsePrefixConverter Objects#\n\nCopyclass StoryResponsePrefixConverter(TrainingDataConverter)\n\nConverter responsible for ensuring that retrieval intent actions in stories\nstart with utter_ instead of respond_.\n\nfilter#\n\nCopy@classmethoddef filter(cls, source_path: Path) -> bool\n\nOnly accept YAML story files.\n\nArguments:\n\nsource_path - Path to a training data file.\n\nReturns:\n\n True if the given file is a YAML stories file, False otherwise.\n\nconvert_and_write#\n\nCopy@classmethodasync def convert_and_write(cls, source_path: Path, output_path: Path) -> None\n\nMigrate retrieval intent responses to the new 2.0 format in stories.\n\nBefore 2.0, retrieval intent responses needed to start\nwith respond_. Now, they need to start with utter_.\n\nArguments:\n\nsource_path - the source YAML stories file.output_path - Path to the output directory.\n\nDomainResponsePrefixConverter Objects#\n\nCopyclass DomainResponsePrefixConverter(TrainingDataConverter)\n\nConverter responsible for ensuring that retrieval intent actions in domain\nstart with utter_ instead of respond_.\n\nfilter#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "983": {"text": "filter#\n\nCopy@classmethoddef filter(cls, source_path: Path) -> bool\n\nOnly accept domain files.\n\nArguments:\n\nsource_path - Path to a domain file.\n\nReturns:\n\n True if the given file can is a valid domain file, False otherwise.\n\nconvert_and_write#\n\nCopy@classmethodasync def convert_and_write(cls, source_path: Path, output_path: Path) -> None\n\nMigrate retrieval intent responses to the new 2.0 format in domains.\n\nBefore 2.0, retrieval intent responses needed to start\nwith respond_. Now, they need to start with utter_.\n\nArguments:\n\nsource_path - The source domain file.output_path - Path to the output directory.\n\nPrevious\u00ab rasa.core.policies.unexpected_intent_policyNextrasa.core.training.converters.story_markdown_to_yaml_converter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "984": {"text": "Version: 3.x\n\nrasa.core.training.converters.story_markdown_to_yaml_converter\n\nStoryMarkdownToYamlConverter Objects#\n\nCopyclass StoryMarkdownToYamlConverter(TrainingDataConverter)\n\nfilter#\n\nCopy | @classmethod | filter(cls, source_path: Path) -> bool\n\nChecks if the given training data file contains Core data in Markdown\nformat and can be converted to YAML.\n\nArguments:\n\nsource_path - Path to the training data file.\n\nReturns:\n\n True if the given file can be converted, False otherwise\n\nconvert_and_write#\n\nCopy | @classmethod | async convert_and_write(cls, source_path: Path, output_path: Path) -> None\n\nConverts the given training data file and saves it to the output directory.\n\nArguments:\n\nsource_path - Path to the training data file.output_path - Path to the output directory.\n\nPrevious\u00ab rasa.core.training.converters.responses_prefix_converterNextrasa.core.training.story_reader.markdown_story_reader \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "985": {"text": "Version: 3.x\n\nrasa.core.training.story_reader.markdown_story_reader\n\nMarkdownStoryReader Objects#\n\nCopyclass MarkdownStoryReader(StoryReader)\n\nClass that reads the core training data in a Markdown format\n\nread_from_file#\n\nCopy | async read_from_file(filename: Union[Text, Path]) -> List[StoryStep]\n\nGiven a md file reads the contained stories.\n\nparse_e2e_message#\n\nCopy | @staticmethod | parse_e2e_message(line: Text) -> Message\n\nParses an md list item line based on the current section type.\n\nMatches expressions of the form &lt;intent&gt;:&lt;example&gt;. For the\nsyntax of &lt;example&gt; see the Rasa docs on NLU training data.\n\nis_markdown_story_file#\n\nCopy | @staticmethod | is_markdown_story_file(file_path: Union[Text, Path]) -> bool\n\nCheck if file contains Core training data or rule data in Markdown format.\n\nArguments:\n\nfile_path - Path of the file to check.\n\nReturns:\n\n True in case the file is a Core Markdown training data or rule data file,\nFalse otherwise.\n\nis_markdown_test_stories_file#\n\nCopy | @staticmethod | is_markdown_test_stories_file(file_path: Union[Text, Path]) -> bool\n\nChecks if a file contains test stories.\n\nArguments:\n\nfile_path - Path of the file which should be checked.\n\nReturns:\n\n True if it's a file containing test stories, otherwise False.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "986": {"text": "Returns:\n\n True if it's a file containing test stories, otherwise False.\n\nPrevious\u00ab rasa.core.training.converters.story_markdown_to_yaml_converterNextrasa.core.training.story_reader.story_reader \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "987": {"text": "Version: 3.x\n\nrasa.core.training.story_reader.story_reader\n\nStoryReader Objects#\n\nCopyclass StoryReader()\n\nHelper class to read a story file.\n\n__init__#\n\nCopy | __init__(domain: Optional[Domain] = None, template_vars: Optional[Dict] = None, use_e2e: bool = False, source_name: Text = None, unfold_or_utterances: bool = True) -> None\n\nConstructor for the StoryReader.\n\nArguments:\n\ndomain - Domain object.template_vars - Template variables to be replaced.use_e2e - Specifies whether to use the e2e parser or not.source_name - Name of the training data source.unfold_or_utterances - Identifies if the user utterance is a part of\nOR statement. This parameter is used only to simplify the conversation\nfrom MD story files. Don't use it other ways, because it ends up\nin a invalid story that cannot be user for real training.\nDefault value is True, which preserves the expected behavior\nof the reader.\n\nPrevious\u00ab rasa.core.training.story_reader.markdown_story_readerNextrasa.core.training.story_reader.story_step_builder \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "988": {"text": "Version: 3.x\n\nrasa.core.training.story_reader.story_step_builder\n\nStoryStepBuilder Objects#\n\nCopyclass StoryStepBuilder()\n\nadd_user_messages#\n\nCopy | add_user_messages(messages: List[UserUttered], unfold_or_utterances: bool = True) -> None\n\nAdds next story steps with the user's utterances.\n\nArguments:\n\nmessages - User utterances.unfold_or_utterances - Identifies if the user utterance is a part of\nOR statement. This parameter is used only to simplify the conversation\nfrom MD story files. Don't use it other ways, because it ends up\nin a invalid story that cannot be user for real training.\nDefault value is True, which preserves the expected behavior\nof the reader.\n\nPrevious\u00ab rasa.core.training.story_reader.story_readerNextrasa.core.training.story_reader.yaml_story_reader \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "989": {"text": "Version: 3.x\n\nrasa.core.training.story_reader.yaml_story_reader\n\nYAMLStoryReader Objects#\n\nCopyclass YAMLStoryReader(StoryReader)\n\nClass that reads Core training data and rule data in YAML format.\n\nfrom_reader#\n\nCopy | @classmethod | from_reader(cls, reader: \"YAMLStoryReader\") -> \"YAMLStoryReader\"\n\nCreate a reader from another reader.\n\nArguments:\n\nreader - Another reader.\n\nReturns:\n\n  A new reader instance.\n\nread_from_file#\n\nCopy | async read_from_file(filename: Union[Text, Path]) -> List[StoryStep]\n\nRead stories or rules from file.\n\nArguments:\n\nfilename - Path to the story/rule file.\n\nReturns:\n\n StorySteps read from filename.\n\nread_from_parsed_yaml#\n\nCopy | read_from_parsed_yaml(parsed_content: Dict[Text, Union[Dict, List]]) -> List[StoryStep]\n\nRead stories from parsed YAML.\n\nArguments:\n\nparsed_content - The parsed YAML as a dictionary.\n\nReturns:\n\n  The parsed stories or rules.\n\nis_yaml_story_file#\n\nCopy | @classmethod | is_yaml_story_file(cls, file_path: Text) -> bool\n\nCheck if file contains Core training data or rule data in YAML format.\n\nArguments:\n\nfile_path - Path of the file to check.\n\nReturns:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "990": {"text": "file_path - Path of the file to check.\n\nReturns:\n\n True in case the file is a Core YAML training data or rule data file,\nFalse otherwise.\n\nis_key_in_yaml#\n\nCopy | @classmethod | is_key_in_yaml(cls, file_path: Text, *keys: Text) -> bool\n\nCheck if all keys are contained in the parsed dictionary from a yaml file.\n\nArguments:\n\nfile_path - path to the yaml filekeys - keys to look for\n\nReturns:\n\n True if all the keys are contained in the file, False otherwise.\n\nis_yaml_test_stories_file#\n\nCopy | @classmethod | is_yaml_test_stories_file(cls, file_path: Union[Text, Path]) -> bool\n\nChecks if a file is a test conversations file.\n\nArguments:\n\nfile_path - Path of the file which should be checked.\n\nReturns:\n\n True if it's a conversation test file, otherwise False.\n\nStoryParser Objects#\n\nCopyclass StoryParser(YAMLStoryReader)\n\nEncapsulate story-specific parser behavior.\n\nRuleParser Objects#\n\nCopyclass RuleParser(YAMLStoryReader)\n\nEncapsulate rule-specific parser behavior.\n\nPrevious\u00ab rasa.core.training.story_reader.story_step_builderNextrasa.core.training.story_writer.yaml_story_writer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "991": {"text": "Version: 3.x\n\nrasa.core.training.story_writer.yaml_story_writer\n\nYAMLStoryWriter Objects#\n\nCopyclass YAMLStoryWriter()\n\nWrites Core training data into a file in a YAML format.\n\ndumps#\n\nCopy | dumps(story_steps: List[StoryStep]) -> Text\n\nTurns Story steps into a string.\n\nArguments:\n\nstory_steps - Original story steps to be converted to the YAML.\n\nReturns:\n\n  String with story steps in the YAML format.\n\ndump#\n\nCopy | dump(target: Union[Text, Path, yaml.StringIO], story_steps: List[StoryStep]) -> None\n\nWrites Story steps into a target file/stream.\n\nArguments:\n\ntarget - name of the target file/stream to write the YAML to.story_steps - Original story steps to be converted to the YAML.\n\nstories_to_yaml#\n\nCopy | stories_to_yaml(story_steps: List[StoryStep]) -> Dict[Text, Any]\n\nConverts a sequence of story steps into yaml format.\n\nArguments:\n\nstory_steps - Original story steps to be converted to the YAML.\n\nprocess_story_step#\n\nCopy | process_story_step(story_step: StoryStep) -> OrderedDict\n\nConverts a single story step into an ordered dict.\n\nArguments:\n\nstory_step - A single story step to be converted to the dict.\n\nReturns:\n\n  Dict with a story step.\n\nstories_contain_loops#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "992": {"text": "Dict with a story step.\n\nstories_contain_loops#\n\nCopy | @staticmethod | stories_contain_loops(stories: List[StoryStep]) -> bool\n\nChecks if the stories contain at least one active loop.\n\nArguments:\n\nstories - Stories steps.\n\nReturns:\n\n True if the stories contain at least one active loop.\nFalse otherwise.\n\nprocess_user_utterance#\n\nCopy | @staticmethod | process_user_utterance(user_utterance: UserUttered) -> OrderedDict\n\nConverts a single user utterance into an ordered dict.\n\nArguments:\n\nuser_utterance - Original user utterance object.\n\nReturns:\n\n  Dict with a user utterance.\n\nprocess_action#\n\nCopy | @staticmethod | process_action(action: ActionExecuted) -> OrderedDict\n\nConverts a single action into an ordered dict.\n\nArguments:\n\naction - Original action object.\n\nReturns:\n\n  Dict with an action.\n\nprocess_slot#\n\nCopy | @staticmethod | process_slot(event: SlotSet)\n\nConverts a single SlotSet event into an ordered dict.\n\nArguments:\n\nevent - Original SlotSet event.\n\nReturns:\n\n  Dict with an SlotSet event.\n\nprocess_checkpoints#\n\nCopy | @staticmethod | process_checkpoints(checkpoints: List[Checkpoint]) -> List[OrderedDict]\n\nConverts checkpoints event into an ordered dict.\n\nArguments:\n\ncheckpoints - List of original checkpoint.\n\nReturns:\n\n  List of converted checkpoints.\n\nprocess_or_utterances#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "993": {"text": "Returns:\n\n  List of converted checkpoints.\n\nprocess_or_utterances#\n\nCopy | process_or_utterances(utterances: List[UserUttered]) -> OrderedDict\n\nConverts user utterance containing the OR statement.\n\nArguments:\n\nutterances - User utterances belonging to the same OR statement.\n\nReturns:\n\n  Dict with converted user utterances.\n\nprocess_active_loop#\n\nCopy | @staticmethod | process_active_loop(event: ActiveLoop) -> OrderedDict\n\nConverts ActiveLoop event into an ordered dict.\n\nArguments:\n\nevent - ActiveLoop event.\n\nReturns:\n\n  Converted event.\n\nPrevious\u00ab rasa.core.training.story_reader.yaml_story_readerNextrasa.core.training \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "994": {"text": "Version: 3.x\n\nrasa.core.training\n\nextract_story_graph#\n\nCopydef extract_story_graph(        resource_name: Text,        domain: \"Domain\",        exclusion_percentage: Optional[int] = None) -> \"StoryGraph\"\n\nLoads training stories / rules from file or directory.\n\nArguments:\n\nresource_name - Path to file or directory.domain - The model domain.exclusion_percentage - Percentage of stories which should be dropped. None\nif all training data should be used.\n\nReturns:\n\n  The loaded training data as graph.\n\nload_data#\n\nCopydef load_data(    resource_name: Union[Text, \"TrainingDataImporter\"],    domain: \"Domain\",    remove_duplicates: bool = True,    unique_last_num_states: Optional[int] = None,    augmentation_factor: int = 50,    tracker_limit: Optional[int] = None,    use_story_concatenation: bool = True,    debug_plots: bool = False,    exclusion_percentage: Optional[int] = None) -> List[\"TrackerWithCachedStates\"]\n\nLoad training data from a resource.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "995": {"text": "Load training data from a resource.\n\nArguments:\n\nresource_name - resource to load the data from. either a path or an importerdomain - domain used for loadingremove_duplicates - should duplicated training examples be removed?unique_last_num_states - number of states in a conversation that make the\na tracker unique (this is used to identify duplicates)\naugmentation_factor:\nby how much should the story training data be augmented\ntracker_limit:\nmaximum number of trackers to generate during augmentation\nuse_story_concatenation:\nshould stories be concatenated when doing data augmentation\ndebug_plots:\ngenerate debug plots during loading\nexclusion_percentage:\nhow much data to exclude\n\nReturns:\n\n  list of loaded trackers\n\nPrevious\u00ab rasa.core.training.story_writer.yaml_story_writerNextrasa.core.training.data \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "996": {"text": "Version: 3.x\n\nrasa.core.training.data\n\nDialogueTrainingData Objects#\n\nCopyclass DialogueTrainingData()\n\nis_empty#\n\nCopy | is_empty() -> bool\n\nCheck if the training matrix does contain training samples.\n\nPrevious\u00ab rasa.core.trainingNextrasa.core.training.generator \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "997": {"text": "Version: 3.x\n\nrasa.core.training.generator\n\nTrackerWithCachedStates Objects#\n\nCopyclass TrackerWithCachedStates(DialogueStateTracker)\n\nA tracker wrapper that caches the state creation of the tracker.\n\nclear_states#\n\nCopy | clear_states() -> None\n\nReset the states.\n\ninit_copy#\n\nCopy | init_copy() -> \"TrackerWithCachedStates\"\n\nCreate a new state tracker with the same initial values.\n\ncopy#\n\nCopy | copy(sender_id: Text = \"\", sender_source: Text = \"\") -> \"TrackerWithCachedStates\"\n\nCreates a duplicate of this tracker.\n\nA new tracker will be created and all events\nwill be replayed.\n\nupdate#\n\nCopy | update(event: Event, skip_states: bool = False) -> None\n\nModify the state of the tracker according to an Event.\n\nTrainingDataGenerator Objects#\n\nCopyclass TrainingDataGenerator()\n\n__init__#\n\nCopy | __init__(story_graph: StoryGraph, domain: Domain, remove_duplicates: bool = True, unique_last_num_states: Optional[int] = None, augmentation_factor: int = 50, tracker_limit: Optional[int] = None, use_story_concatenation: bool = True, debug_plots: bool = False)\n\nGiven a set of story parts, generates all stories that are possible.\n\nThe different story parts can end and start with checkpoints\nand this generator will match start and end checkpoints to\nconnect complete stories. Afterwards, duplicate stories will be\nremoved and the data is augmented (if augmentation is enabled).\n\ngenerate#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "998": {"text": "generate#\n\nCopy | generate() -> List[TrackerWithCachedStates]\n\nGenerate trackers from stories and rules.\n\nReturns:\n\n  The generated trackers.\n\ngenerate_story_trackers#\n\nCopy | generate_story_trackers() -> List[TrackerWithCachedStates]\n\nGenerate trackers from stories (exclude rule trackers).\n\nReturns:\n\n  The generated story trackers.\n\nPrevious\u00ab rasa.core.training.dataNextrasa.core.training.interactive \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "999": {"text": "Version: 3.x\n\nrasa.core.training.interactive\n\nRestartConversation Objects#\n\nCopyclass RestartConversation(Exception)\n\nException used to break out the flow and restart the conversation.\n\nForkTracker Objects#\n\nCopyclass ForkTracker(Exception)\n\nException used to break out the flow and fork at a previous step.\n\nThe tracker will be reset to the selected point in the past and the\nconversation will continue from there.\n\nUndoLastStep Objects#\n\nCopyclass UndoLastStep(Exception)\n\nException used to break out the flow and undo the last step.\n\nThe last step is either the most recent user message or the most\nrecent action run by the bot.\n\nAbort Objects#\n\nCopyclass Abort(Exception)\n\nException used to abort the interactive learning and exit.\n\nsend_message#\n\nCopyasync def send_message(        endpoint: EndpointConfig,        conversation_id: Text,        message: Text,        parse_data: Optional[Dict[Text, Any]] = None) -> Optional[Any]\n\nSend a user message to a conversation.\n\nrequest_prediction#\n\nCopyasync def request_prediction(endpoint: EndpointConfig,                             conversation_id: Text) -> Optional[Any]\n\nRequest the next action prediction from core.\n\nretrieve_domain#\n\nCopyasync def retrieve_domain(endpoint: EndpointConfig) -> Optional[Any]\n\nRetrieve the domain from core.\n\nretrieve_status#\n\nCopyasync def retrieve_status(endpoint: EndpointConfig) -> Optional[Any]\n\nRetrieve the status from core.\n\nretrieve_tracker#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1000": {"text": "Retrieve the status from core.\n\nretrieve_tracker#\n\nCopyasync def retrieve_tracker(        endpoint: EndpointConfig,        conversation_id: Text,        verbosity: EventVerbosity = EventVerbosity.ALL) -> Dict[Text, Any]\n\nRetrieve a tracker from core.\n\nsend_action#\n\nCopyasync def send_action(endpoint: EndpointConfig,                      conversation_id: Text,                      action_name: Text,                      policy: Optional[Text] = None,                      confidence: Optional[float] = None,                      is_new_action: bool = False) -> Optional[Any]\n\nLog an action to a conversation.\n\nsend_event#\n\nCopyasync def send_event(        endpoint: EndpointConfig, conversation_id: Text,        evt: Union[List[Dict[Text, Any]], Dict[Text, Any]]) -> Optional[Any]\n\nLog an event to a conversation.\n\nformat_bot_output#\n\nCopydef format_bot_output(message: BotUttered) -> Text\n\nFormat a bot response to be displayed in the history table.\n\nlatest_user_message#\n\nCopydef latest_user_message(        events: List[Dict[Text, Any]]) -> Optional[Dict[Text, Any]]\n\nReturn most recent user message.\n\nis_listening_for_message#\n\nCopyasync def is_listening_for_message(conversation_id: Text,                                   endpoint: EndpointConfig) -> bool\n\nCheck if the conversation is in need for a user message.\n\nrecord_messages#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1001": {"text": "record_messages#\n\nCopyasync def record_messages(endpoint: EndpointConfig,                          file_importer: TrainingDataImporter,                          conversation_id: Text = DEFAULT_SENDER_ID,                          max_message_limit: Optional[int] = None,                          skip_visualization: bool = False) -> None\n\nRead messages from the command line and print bot responses.\n\nstart_visualization#\n\nCopydef start_visualization(image_path: Text, port: int) -> None\n\nAdd routes to serve the conversation visualization files.\n\nrun_interactive_learning#\n\nCopydef run_interactive_learning(file_importer: TrainingDataImporter,                             skip_visualization: bool = False,                             conversation_id: Text = uuid.uuid4().hex,                             server_args: Dict[Text, Any] = None) -> None\n\nStart the interactive learning with the model of the agent.\n\ncalc_true_wrapping_width#\n\nCopydef calc_true_wrapping_width(text: Text, monospace_wrapping_width: int) -> int\n\nCalculates a wrapping width that also works for CJK characters.\n\nChinese, Japanese and Korean characters are often broader than ascii\ncharacters:\nabcdefgh (8 chars)\n\u00e6\u02c6\u2018\u00e8\u00a6\u0081\u00e5\u017d\u00bb\u00e5\u0152\u2014\u00e4\u00ba\u00ac (5 chars, roughly same visible width)\n\nWe need to account for that otherwise the wrapping doesn't work\nappropriately for long strings and the table overflows and creates\nerrors.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1002": {"text": "params:\ntext: text sequence that should be wrapped into multiple lines\nmonospace_wrapping_width: the maximum width per line in number of\nstandard ascii characters\nreturns:\nThe maximum line width for the given string that takes into account\nthe strings visible width, so that it won't lead to table overflow.\n\nPrevious\u00ab rasa.core.training.generatorNextrasa.core.training.loading \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1003": {"text": "Version: 3.x\n\nrasa.core.training.loading\n\nload_data_from_resource#\n\nCopyasync load_data_from_resource(resource: Union[Text, Path], domain: Domain, template_variables: Optional[Dict] = None, use_e2e: bool = False, exclusion_percentage: Optional[int] = None) -> List[\"StoryStep\"]\n\nLoads core training data from the specified folder.\n\nArguments:\n\nresource - Folder/File with core training data files.domain - Domain object.template_variables - Variables that have to be replaced in the training data.use_e2e - Identifies if the e2e reader should be used.exclusion_percentage - Identifies the percentage of training data that\nshould be excluded from the training.\n\nReturns:\n\n  Story steps from the training data.\n\nload_data_from_files#\n\nCopyasync load_data_from_files(story_files: List[Text], domain: Domain, template_variables: Optional[Dict] = None, use_e2e: bool = False, exclusion_percentage: Optional[int] = None) -> List[\"StoryStep\"]\n\nLoads core training data from the specified files.\n\nArguments:\n\nstory_files - List of files with training data in it.domain - Domain object.template_variables - Variables that have to be replaced in the training data.use_e2e - Identifies whether the e2e reader should be used.exclusion_percentage - Identifies the percentage of training data that\nshould be excluded from the training.\n\nReturns:\n\n  Story steps from the training data.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1004": {"text": "Returns:\n\n  Story steps from the training data.\n\nPrevious\u00ab rasa.core.training.interactiveNextrasa.core.training.story_conflict \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1005": {"text": "Version: 3.x\n\nrasa.core.training.story_conflict\n\nStoryConflict Objects#\n\nCopyclass StoryConflict()\n\nRepresents a conflict between two or more stories.\n\nHere, a conflict means that different actions are supposed to follow from\nthe same dialogue state, which most policies cannot learn.\n\n__init__#\n\nCopydef __init__(sliced_states: List[State]) -> None\n\nCreates a StoryConflict from a given state.\n\nArguments:\n\nsliced_states - The (sliced) dialogue state at which the conflict occurs.\n\nadd_conflicting_action#\n\nCopydef add_conflicting_action(action: Text, story_name: Text) -> None\n\nAdds another action that follows from the same state.\n\nArguments:\n\naction - Name of the action.story_name - Name of the story where this action is chosen.\n\nconflicting_actions#\n\nCopy@propertydef conflicting_actions() -> List[Text]\n\nList of conflicting actions.\n\nReturns:\n\n  List of conflicting actions.\n\nconflict_has_prior_events#\n\nCopy@propertydef conflict_has_prior_events() -> bool\n\nChecks if prior events exist.\n\nReturns:\n\n True if anything has happened before this conflict, otherwise False.\n\nTrackerEventStateTuple Objects#\n\nCopyclass TrackerEventStateTuple(NamedTuple)\n\nHolds a tracker, an event, and sliced states associated with those.\n\nsliced_states_hash#\n\nCopy@propertydef sliced_states_hash() -> int\n\nReturns the hash of the sliced states.\n\nfind_story_conflicts#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1006": {"text": "Returns the hash of the sliced states.\n\nfind_story_conflicts#\n\nCopydef find_story_conflicts(        trackers: List[TrackerWithCachedStates],        domain: Domain,        max_history: Optional[int] = None) -> List[StoryConflict]\n\nGenerates StoryConflict objects, describing conflicts in the given trackers.\n\nArguments:\n\ntrackers - Trackers in which to search for conflicts.domain - The domain.max_history - The maximum history length to be taken into account.\n\nReturns:\n\n  StoryConflict objects.\n\nPrevious\u00ab rasa.core.training.loadingNextrasa.core.training.structures \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1007": {"text": "Version: 3.x\n\nrasa.core.training.structures\n\nCheckpoint Objects#\n\nCopyclass Checkpoint()\n\nfilter_trackers#\n\nCopy | filter_trackers(trackers: List[DialogueStateTracker]) -> List[DialogueStateTracker]\n\nFilters out all trackers that do not satisfy the conditions.\n\nStoryStep Objects#\n\nCopyclass StoryStep()\n\nA StoryStep is a section of a story block between two checkpoints.\n\nNOTE: Checkpoints are not only limited to those manually written\nin the story file, but are also implicitly created at points where\nmultiple intents are separated in one line by chaining them with \"OR\"s.\n\nexplicit_events#\n\nCopy | explicit_events(domain: Domain, should_append_final_listen: bool = True) -> List[Union[Event, List[Event]]]\n\nReturns events contained in the story step including implicit events.\n\nNot all events are always listed in the story dsl. This\nincludes listen actions as well as implicitly\nset slots. This functions makes these events explicit and\nreturns them with the rest of the steps events.\n\nStory Objects#\n\nCopyclass Story()\n\nfrom_events#\n\nCopy | @staticmethod | from_events(events: List[Event], story_name: Optional[Text] = None) -> \"Story\"\n\nCreate a story from a list of events.\n\nStoryGraph Objects#\n\nCopyclass StoryGraph()\n\nGraph of the story-steps pooled from all stories in the training data.\n\nordered_steps#\n\nCopy | ordered_steps() -> List[StoryStep]\n\nReturns the story steps ordered by topological order of the DAG.\n\ncyclic_edges#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1008": {"text": "cyclic_edges#\n\nCopy | cyclic_edges() -> List[Tuple[Optional[StoryStep], Optional[StoryStep]]]\n\nReturns the story steps ordered by topological order of the DAG.\n\noverlapping_checkpoint_names#\n\nCopy | @staticmethod | overlapping_checkpoint_names(cps: List[Checkpoint], other_cps: List[Checkpoint]) -> Set[Text]\n\nFind overlapping checkpoints names\n\nwith_cycles_removed#\n\nCopy | with_cycles_removed() -> \"StoryGraph\"\n\nCreate a graph with the cyclic edges removed from this graph.\n\nget#\n\nCopy | get(step_id: Text) -> Optional[StoryStep]\n\nLooks a story step up by its id.\n\nas_story_string#\n\nCopy | as_story_string() -> Text\n\nConvert the graph into the story file format.\n\norder_steps#\n\nCopy | @staticmethod | order_steps(story_steps: List[StoryStep]) -> Tuple[deque, List[Tuple[Text, Text]]]\n\nTopological sort of the steps returning the ids of the steps.\n\ntopological_sort#\n\nCopy | @staticmethod | topological_sort(graph: Dict[Text, Set[Text]]) -> Tuple[deque, List[Tuple[Text, Text]]]\n\nCreates a top sort of a directed graph. This is an unstable sorting!\n\nThe function returns the sorted nodes as well as the edges that need\nto be removed from the graph to make it acyclic (and hence, sortable).\n\nThe graph should be represented as a dictionary, e.g.:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1009": {"text": "The graph should be represented as a dictionary, e.g.:\n\n>>> example_graph = {\n...         \"a\": set(\"b\", \"c\", \"d\"),\n...         \"b\": set(),\n...         \"c\": set(\"d\"),\n...         \"d\": set(),\n...         \"e\": set(\"f\"),\n...         \"f\": set()}\n>>> StoryGraph.topological_sort(example_graph)\n(deque([u'e', u'f', u'a', u'c', u'd', u'b']), [])\n\nis_empty#\n\nCopy | is_empty() -> bool\n\nChecks if StoryGraph is empty.\n\nPrevious\u00ab rasa.core.training.story_conflictNextrasa.core.training.training \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1010": {"text": "Version: 3.x\n\nrasa.core.training.training\n\nActionFingerprint Objects#\n\nCopy@dataclasses.dataclassclass ActionFingerprint()\n\nDataclass to represent an action fingerprint.\n\ncreate_action_fingerprints#\n\nCopydef create_action_fingerprints(        trackers: List[\"DialogueStateTracker\"],        domain: \"Domain\") -> Dict[Text, ActionFingerprint]\n\nFingerprint each action using the events it created during train.\n\nThis allows us to emit warnings when the model is used\nif an action does things it hasn't done during training,\nor if rules are incomplete.\n\nArguments:\n\ntrackers - the list of trackersdomain - the domain\n\nReturns:\n\n  a nested dictionary of action names and slots and active loops\nthat this action sets\n\nPrevious\u00ab rasa.core.training.structuresNextrasa.core.training.visualization \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1011": {"text": "Version: 3.x\n\nrasa.core.training.visualization\n\nUserMessageGenerator Objects#\n\nCopyclass UserMessageGenerator()\n\nmessage_for_data#\n\nCopy | message_for_data(structured_info: Dict[Text, Any]) -> Any\n\nFind a data sample with the same intent and entities.\n\nGiven the parsed data from a message (intent and entities) finds a\nmessage in the data that has the same intent and entities.\n\npersist_graph#\n\nCopypersist_graph(graph: \"networkx.Graph\", output_file: Text) -> None\n\nPlots the graph and persists it into a html file.\n\nvisualize_neighborhood#\n\nCopyasync visualize_neighborhood(current: Optional[List[Event]], event_sequences: List[List[Event]], output_file: Optional[Text] = None, max_history: int = 2, interpreter: NaturalLanguageInterpreter = RegexInterpreter(), nlu_training_data: Optional[\"TrainingData\"] = None, should_merge_nodes: bool = True, max_distance: int = 1, fontsize: int = 12)\n\nGiven a set of event lists, visualizing the flows.\n\nvisualize_stories#\n\nCopyasync visualize_stories(story_steps: List[StoryStep], domain: Domain, output_file: Optional[Text], max_history: int, interpreter: NaturalLanguageInterpreter = RegexInterpreter(), nlu_training_data: Optional[\"TrainingData\"] = None, should_merge_nodes: bool = True, fontsize: int = 12)\n\nGiven a set of stories, generates a graph visualizing the flows in the\nstories.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1012": {"text": "Given a set of stories, generates a graph visualizing the flows in the\nstories.\n\nVisualization is always a trade off between making the graph as small as\npossible while\nat the same time making sure the meaning doesn't change to \"much\". The\nalgorithm will\ncompress the graph generated from the stories to merge nodes that are\nsimilar. Hence,\nthe algorithm might create paths through the graph that aren't actually\nspecified in the\nstories, but we try to minimize that.\n\nOutput file defines if and where a file containing the plotted graph\nshould be stored.\n\nThe history defines how much 'memory' the graph has. This influences in\nwhich situations the\nalgorithm will merge nodes. Nodes will only be merged if they are equal\nwithin the history, this\nmeans the larger the history is we take into account the less likely it\nis we merge any nodes.\n\nThe training data parameter can be used to pass in a Rasa NLU training\ndata instance. It will\nbe used to replace the user messages from the story file with actual\nmessages from the training data.\n\nPrevious\u00ab rasa.core.training.trainingNextrasa.core.agent \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1013": {"text": "Version: 3.x\n\nrasa.core.agent\n\nload_from_server#\n\nCopyasync def load_from_server(agent: Agent,                           model_server: EndpointConfig) -> Agent\n\nLoad a persisted model from a server.\n\nload_agent#\n\nCopyasync def load_agent(model_path: Optional[Text] = None,                     model_server: Optional[EndpointConfig] = None,                     remote_storage: Optional[Text] = None,                     endpoints: Optional[AvailableEndpoints] = None,                     loop: Optional[AbstractEventLoop] = None) -> Agent\n\nLoads agent from server, remote storage or disk.\n\nArguments:\n\nmodel_path - Path to the model if it's on disk.model_server - Configuration for a potential server which serves the model.remote_storage - URL of remote storage for model.endpoints - Endpoint configuration.loop - Optional async loop to pass to broker creation.\n\nReturns:\n\n  The instantiated Agent or None.\n\nagent_must_be_ready#\n\nCopydef agent_must_be_ready(f: Callable[..., Any]) -> Callable[..., Any]\n\nAny Agent method decorated with this will raise if the agent is not ready.\n\nAgent Objects#\n\nCopyclass Agent()\n\nThe Agent class provides an interface for the most important Rasa functionality.\n\nThis includes training, handling messages, loading a dialogue model,\ngetting the next action, and handling a channel.\n\n__init__#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1014": {"text": "__init__#\n\nCopydef __init__(domain: Optional[Domain] = None,             generator: Union[EndpointConfig, NaturalLanguageGenerator, None] = None,             tracker_store: Optional[TrackerStore] = None,             lock_store: Optional[LockStore] = None,             action_endpoint: Optional[EndpointConfig] = None,             fingerprint: Optional[Text] = None,             model_server: Optional[EndpointConfig] = None,             remote_storage: Optional[Text] = None,             http_interpreter: Optional[RasaNLUHttpInterpreter] = None)\n\nInitializes an Agent.\n\nload#\n\nCopy@classmethoddef load(cls,         model_path: Union[Text, Path],         domain: Optional[Domain] = None,         generator: Union[EndpointConfig, NaturalLanguageGenerator, None] = None,         tracker_store: Optional[TrackerStore] = None,         lock_store: Optional[LockStore] = None,         action_endpoint: Optional[EndpointConfig] = None,         fingerprint: Optional[Text] = None,         model_server: Optional[EndpointConfig] = None,         remote_storage: Optional[Text] = None,         http_interpreter: Optional[RasaNLUHttpInterpreter] = None) -> Agent\n\nConstructs a new agent and loads the processer and model.\n\nload_model#\n\nCopydef load_model(model_path: Union[Text, Path],               fingerprint: Optional[Text] = None) -> None\n\nLoads the agent's model and processor given a new model path.\n\nmodel_id#\n\nCopy@propertydef model_id() -> Optional[Text]", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1015": {"text": "Copy@propertydef model_id() -> Optional[Text]\n\nReturns the model_id from processor's model_metadata.\n\nmodel_name#\n\nCopy@propertydef model_name() -> Optional[Text]\n\nReturns the model name from processor's model_path.\n\nis_ready#\n\nCopydef is_ready() -> bool\n\nCheck if all necessary components are instantiated to use agent.\n\nparse_message#\n\nCopy@agent_must_be_readyasync def parse_message(message_data: Text) -> Dict[Text, Any]\n\nHandles message text and intent payload input messages.\n\nThe return value of this function is parsed_data.\n\nArguments:\n\nmessage_data Text - Contain the received message in text or\\\nintent payload format.\n\nReturns:\n\n  The parsed message.\n\nExample:\n\n  {\\\n\n\"text\" - '/greet{\"name\":\"Rasa\"}',\\\"intent\" - {\"name\": \"greet\", \"confidence\": 1.0},\\\"intent_ranking\" - [{\"name\": \"greet\", \"confidence\": 1.0}],\\\"entities\" - [{\"entity\": \"name\", \"start\": 6,\\\"end\" - 21, \"value\": \"Rasa\"}],\\\n}\n\nhandle_message#\n\nCopyasync def handle_message(        message: UserMessage) -> Optional[List[Dict[Text, Any]]]\n\nHandle a single message.\n\npredict_next_for_sender_id#\n\nCopy@agent_must_be_readyasync def predict_next_for_sender_id(        sender_id: Text) -> Optional[Dict[Text, Any]]\n\nPredict the next action for a sender id.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1016": {"text": "Predict the next action for a sender id.\n\npredict_next_with_tracker#\n\nCopy@agent_must_be_readydef predict_next_with_tracker(    tracker: DialogueStateTracker,    verbosity: EventVerbosity = EventVerbosity.AFTER_RESTART) -> Optional[Dict[Text, Any]]\n\nPredicts the next action.\n\nlog_message#\n\nCopy@agent_must_be_readyasync def log_message(message: UserMessage) -> DialogueStateTracker\n\nAppend a message to a dialogue - does not predict actions.\n\nexecute_action#\n\nCopy@agent_must_be_readyasync def execute_action(        sender_id: Text, action: Text, output_channel: OutputChannel,        policy: Optional[Text],        confidence: Optional[float]) -> Optional[DialogueStateTracker]\n\nExecutes an action.\n\ntrigger_intent#\n\nCopy@agent_must_be_readyasync def trigger_intent(intent_name: Text, entities: List[Dict[Text, Any]],                         output_channel: OutputChannel,                         tracker: DialogueStateTracker) -> None\n\nTrigger a user intent, e.g. triggered by an external event.\n\nhandle_text#\n\nCopy@agent_must_be_readyasync def handle_text(    text_message: Union[Text, Dict[Text, Any]],    output_channel: Optional[OutputChannel] = None,    sender_id: Optional[Text] = DEFAULT_SENDER_ID) -> Optional[List[Dict[Text, Any]]]\n\nHandle a single message.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1017": {"text": "Handle a single message.\n\nIf a message preprocessor is passed, the message will be passed to that\nfunction first and the return value is then used as the\ninput for the dialogue engine.\n\nThe return value of this function depends on the output_channel. If\nthe output channel is not set, set to None, or set\nto CollectingOutputChannel this function will return the messages\nthe bot wants to respond.\n\n:Example:\n\n>>> from rasa.core.agent import Agent\n>>> agent = Agent.load(\"examples/moodbot/models\")\n>>> await agent.handle_text(\"hello\")\n[u'how can I help you?']\n\nload_model_from_remote_storage#\n\nCopydef load_model_from_remote_storage(model_name: Text) -> None\n\nLoads an Agent from remote storage.\n\nPrevious\u00ab rasa.core.training.visualizationNextrasa.core.config \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1018": {"text": "Version: 3.x\n\nrasa.core.config\n\nload#\n\nCopyload(config_file: Union[Text, Dict]) -> List[\"Policy\"]\n\nLoad policy data stored in the specified file.\n\nPrevious\u00ab rasa.core.agentNextrasa.core.conversation \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1019": {"text": "Version: 3.x\n\nrasa.core.conversation\n\nDialogue Objects#\n\nCopyclass Dialogue()\n\nA dialogue comprises a list of Turn objects\n\n__init__#\n\nCopy | __init__(name: Text, events: List[\"Event\"]) -> None\n\nThis function initialises the dialogue with the dialogue name and the event\nlist.\n\n__str__#\n\nCopy | __str__() -> Text\n\nThis function returns the dialogue and turns.\n\nas_dict#\n\nCopy | as_dict() -> Dict\n\nThis function returns the dialogue as a dictionary to assist in\nserialization.\n\nfrom_parameters#\n\nCopy | @classmethod | from_parameters(cls, parameters: Dict[Text, Any]) -> \"Dialogue\"\n\nCreate Dialogue from parameters.\n\nArguments:\n\nparameters - Serialised dialogue, should contain keys 'name' and 'events'.\n\nReturns:\n\n  Deserialised Dialogue.\n\nPrevious\u00ab rasa.core.configNextrasa.core.domain \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1020": {"text": "Version: 3.x\n\nrasa.core.domain\n\nInvalidDomain Objects#\n\nCopyclass InvalidDomain(Exception)\n\nException that can be raised when domain is not valid.\n\nDomain Objects#\n\nCopyclass Domain()\n\nThe domain specifies the universe in which the bot's policy acts.\n\nA Domain subclass provides the actions the bot can take, the intents\nand entities it can recognise.\n\nfrom_directory#\n\nCopy | @classmethod | from_directory(cls, path: Text) -> \"Domain\"\n\nLoads and merges multiple domain files recursively from a directory tree.\n\nmerge#\n\nCopy | merge(domain: Optional[\"Domain\"], override: bool = False) -> \"Domain\"\n\nMerge this domain with another one, combining their attributes.\n\nList attributes like intents and actions will be deduped\nand merged. Single attributes will be taken from self unless\noverride is True, in which case they are taken from domain.\n\ncollect_intent_properties#\n\nCopy | @classmethod | collect_intent_properties(cls, intents: List[Union[Text, Dict[Text, Any]]], entities: List[Text]) -> Dict[Text, Dict[Text, Union[bool, List]]]\n\nGet intent properties for a domain from what is provided by a domain file.\n\nArguments:\n\nintents - The intents as provided by a domain file.entities - All entities as provided by a domain file.\n\nReturns:\n\n  The intent properties to be stored in the domain.\n\nuser_actions_and_forms#\n\nCopy | @lazy_property | user_actions_and_forms()\n\nReturns combination of user actions and forms.\n\nnum_actions#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1021": {"text": "Returns combination of user actions and forms.\n\nnum_actions#\n\nCopy | @lazy_property | num_actions()\n\nReturns the number of available actions.\n\nnum_states#\n\nCopy | @lazy_property | num_states()\n\nNumber of used input states for the action prediction.\n\nadd_categorical_slot_default_value#\n\nCopy | add_categorical_slot_default_value() -> None\n\nAdd a default value to all categorical slots.\n\nAll unseen values found for the slot will be mapped to this default value\nfor featurization.\n\nadd_requested_slot#\n\nCopy | add_requested_slot() -> None\n\nAdd a slot called requested_slot to the list of slots.\n\nThe value of this slot will hold the name of the slot which the user\nneeds to fill in next (either explicitly or implicitly) as part of a form.\n\nadd_knowledge_base_slots#\n\nCopy | add_knowledge_base_slots() -> None\n\nAdd slots for the knowledge base action to the list of slots, if the\ndefault knowledge base action name is present.\n\nAs soon as the knowledge base action is not experimental anymore, we should\nconsider creating a new section in the domain file dedicated to knowledge\nbase slots.\n\naction_for_name#\n\nCopy | action_for_name(action_name: Text, action_endpoint: Optional[EndpointConfig]) -> Optional[Action]\n\nLook up which action corresponds to this action name.\n\naction_for_index#\n\nCopy | action_for_index(index: int, action_endpoint: Optional[EndpointConfig]) -> Optional[Action]\n\nInteger index corresponding to an actions index in the action list.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1022": {"text": "Integer index corresponding to an actions index in the action list.\n\nThis method resolves the index to the actions name.\n\nindex_for_action#\n\nCopy | index_for_action(action_name: Text) -> Optional[int]\n\nLook up which action index corresponds to this action name.\n\nslot_states#\n\nCopy | @lazy_property | slot_states() -> List[Text]\n\nReturns all available slot state strings.\n\ninput_state_map#\n\nCopy | @lazy_property | input_state_map() -> Dict[Text, int]\n\nProvide a mapping from state names to indices.\n\ninput_states#\n\nCopy | @lazy_property | input_states() -> List[Text]\n\nReturns all available states.\n\nget_active_states#\n\nCopy | get_active_states(tracker: \"DialogueStateTracker\") -> State\n\nReturn a bag of active states from the tracker state.\n\nstates_for_tracker_history#\n\nCopy | states_for_tracker_history(tracker: \"DialogueStateTracker\") -> List[State]\n\nArray of states for each state of the trackers history.\n\npersist_specification#\n\nCopy | persist_specification(model_path: Text) -> None\n\nPersist the domain specification to storage.\n\nload_specification#\n\nCopy | @classmethod | load_specification(cls, path: Text) -> Dict[Text, Any]\n\nLoad a domains specification from a dumped model directory.\n\ncompare_with_specification#\n\nCopy | compare_with_specification(path: Text) -> bool\n\nCompare the domain spec of the current and the loaded domain.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1023": {"text": "Compare the domain spec of the current and the loaded domain.\n\nThrows exception if the loaded domain specification is different\nto the current domain are different.\n\npersist#\n\nCopy | persist(filename: Union[Text, Path]) -> None\n\nWrite domain to a file.\n\ncleaned_domain#\n\nCopy | cleaned_domain() -> Dict[Text, Any]\n\nFetch cleaned domain to display or write into a file.\n\nThe internal used_entities property is replaced by use_entities or\nignore_entities and redundant keys are replaced with default values\nto make the domain easier readable.\n\nReturns:\n\n  A cleaned dictionary version of the domain.\n\npersist_clean#\n\nCopy | persist_clean(filename: Text) -> None\n\nWrite cleaned domain to a file.\n\nintent_config#\n\nCopy | intent_config(intent_name: Text) -> Dict[Text, Any]\n\nReturn the configuration for an intent.\n\ndomain_warnings#\n\nCopy | domain_warnings(intents: Optional[Union[List[Text], Set[Text]]] = None, entities: Optional[Union[List[Text], Set[Text]]] = None, actions: Optional[Union[List[Text], Set[Text]]] = None, slots: Optional[Union[List[Text], Set[Text]]] = None) -> Dict[Text, Dict[Text, Set[Text]]]\n\nGenerate domain warnings from intents, entities, actions and slots.\n\nReturns a dictionary with entries for intent_warnings,\nentity_warnings, action_warnings and slot_warnings. Excludes domain slots\nof type UnfeaturizedSlot from domain warnings.\n\ncheck_missing_templates#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1024": {"text": "check_missing_templates#\n\nCopy | check_missing_templates() -> None\n\nWarn user of utterance names which have no specified template.\n\nis_empty#\n\nCopy | is_empty() -> bool\n\nCheck whether the domain is empty.\n\nis_domain_file#\n\nCopy | @staticmethod | is_domain_file(filename: Text) -> bool\n\nChecks whether the given file path is a Rasa domain file.\n\nArguments:\n\nfilename - Path of the file which should be checked.\n\nReturns:\n\n True if it's a domain file, otherwise False.\n\nslot_mapping_for_form#\n\nCopy | slot_mapping_for_form(form_name: Text) -> Dict[Text, Any]\n\nRetrieve the slot mappings for a form which are defined in the domain.\n\nOptions:\n\nan extracted entityintent: value pairstrigger_intent: value pairsa whole message\nor a list of them, where the first match will be picked\n\nArguments:\n\nform_name - The name of the form.\n\nReturns:\n\n  The slot mapping or an empty dictionary in case no mapping was found.\n\nPrevious\u00ab rasa.core.conversationNextrasa.core.exceptions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1025": {"text": "Version: 3.x\n\nrasa.core.exceptions\n\nAgentNotReady Objects#\n\nCopyclass AgentNotReady(RasaCoreException)\n\nRaised if someone tries to use an agent that is not ready.\n\nAn agent might be created, e.g. without an processor attached. But\nif someone tries to parse a message with that agent, this exception\nwill be thrown.\n\n__init__#\n\nCopydef __init__(message: Text) -> None\n\nInitialize message attribute.\n\nChannelConfigError Objects#\n\nCopyclass ChannelConfigError(RasaCoreException)\n\nRaised if a channel is not configured correctly.\n\nInvalidTrackerFeaturizerUsageError Objects#\n\nCopyclass InvalidTrackerFeaturizerUsageError(RasaCoreException)\n\nRaised if a tracker featurizer is incorrectly used.\n\nKafkaProducerInitializationError Objects#\n\nCopyclass KafkaProducerInitializationError(RasaException)\n\nRaised if the Kafka Producer cannot be properly initialized.\n\nPrevious\u00ab rasa.core.domainNextrasa.core.exporter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1026": {"text": "Version: 3.x\n\nrasa.core.exporter\n\nExporter Objects#\n\nCopyclass Exporter()\n\nManages the publishing of events in a tracker store to an event broker.\n\nAttributes:\n\nendpoints_path - Path to the endpoints file used to configure the event\nbroker and tracker store. If None, the default path ('endpoints.yml')\nis used.tracker_store - TrackerStore to export conversations from.event_broker - EventBroker to export conversations to.requested_conversation_ids - List of conversation IDs requested to be\nprocessed.minimum_timestamp - Minimum timestamp of events that are published.\nIf None, apply no such constraint.maximum_timestamp - Maximum timestamp of events that are published.\nIf None, apply no such constraint.\n\npublish_events#\n\nCopyasync def publish_events() -> int\n\nPublish events in a tracker store using an event broker.\n\nExits if the publishing of events is interrupted due to an error. In that case,\nthe CLI command to continue the export where it was interrupted is printed.\n\nReturns:\n\n  The number of successfully published events.\n\nPrevious\u00ab rasa.core.exceptionsNextrasa.core.featurizers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1027": {"text": "Version: 3.x\n\nrasa.core.featurizers\n\nSingleStateFeaturizer Objects#\n\nCopyclass SingleStateFeaturizer()\n\nBase class for mechanisms to transform the conversations state into ML formats.\n\nSubclasses of SingleStateFeaturizer decide how the bot will transform\nthe conversation state to a format which a classifier can read:\nfeature vector.\n\nprepare_from_domain#\n\nCopy | prepare_from_domain(domain: Domain) -> None\n\nHelper method to init based on domain.\n\nencode#\n\nCopy | encode(state: Dict[Text, float]) -> np.ndarray\n\nEncode user input.\n\naction_as_one_hot#\n\nCopy | @staticmethod | action_as_one_hot(action: Text, domain: Domain) -> np.ndarray\n\nEncode system action as one-hot vector.\n\ncreate_encoded_all_actions#\n\nCopy | create_encoded_all_actions(domain: Domain) -> np.ndarray\n\nCreate matrix with all actions from domain encoded in rows.\n\nBinarySingleStateFeaturizer Objects#\n\nCopyclass BinarySingleStateFeaturizer(SingleStateFeaturizer)\n\nAssumes all features are binary.\n\nAll features should be either on or off, denoting them with 1 or 0.\n\n__init__#\n\nCopy | __init__() -> None\n\nDeclares instant variables.\n\nprepare_from_domain#\n\nCopy | prepare_from_domain(domain: Domain) -> None\n\nUse Domain to prepare featurizer.\n\nencode#\n\nCopy | encode(state: Dict[Text, float]) -> np.ndarray\n\nReturns a binary vector indicating which features are active.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1028": {"text": "Returns a binary vector indicating which features are active.\n\nGiven a dictionary of states (e.g. 'intent_greet',\n'prev_action_listen',...) return a binary vector indicating which\nfeatures of self.input_features are in the bag. NB it's a\nregular double precision float array type.\n\nFor example with two active features out of five possible features\nthis would return a vector like [0 0 1 0 1]\n\nIf intent features are given with a probability, for example\nwith two active features and two uncertain intents out\nof five possible features this would return a vector\nlike [0.3, 0.7, 1.0, 0, 1.0].\n\nIf this is just a padding vector we set all values to -1.\npadding vectors are specified by a None or [None]\nvalue for states.\n\ncreate_encoded_all_actions#\n\nCopy | create_encoded_all_actions(domain: Domain) -> np.ndarray\n\nCreate matrix with all actions from domain encoded in rows as bag of words\n\nLabelTokenizerSingleStateFeaturizer Objects#\n\nCopyclass LabelTokenizerSingleStateFeaturizer(SingleStateFeaturizer)\n\nCreates bag-of-words feature vectors.\n\nUser intents and bot action names are split into tokens\nand used to create bag-of-words feature vectors.\n\nArguments:\n\nsplit_symbol - The symbol that separates words in\nintets and action names.use_shared_vocab - The flag that specifies if to create\nthe same vocabulary for user intents and bot actions.\n\n__init__#\n\nCopy | __init__(use_shared_vocab: bool = False, split_symbol: Text = \"_\") -> None", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1029": {"text": "inits vocabulary for label bag of words representation\n\nprepare_from_domain#\n\nCopy | prepare_from_domain(domain: Domain) -> None\n\nCreates internal vocabularies for user intents and bot actions.\n\nencode#\n\nCopy | encode(state: Dict[Text, float]) -> np.ndarray\n\nReturns a binary vector indicating which tokens are present.\n\ncreate_encoded_all_actions#\n\nCopy | create_encoded_all_actions(domain: Domain) -> np.ndarray\n\nCreate matrix with all actions from domain encoded in rows as bag of words\n\nTrackerFeaturizer Objects#\n\nCopyclass TrackerFeaturizer()\n\nBase class for actual tracker featurizers.\n\ntraining_states_and_actions#\n\nCopy | training_states_and_actions(trackers: List[DialogueStateTracker], domain: Domain) -> Tuple[List[List[Dict]], List[List[Text]]]\n\nTransforms list of trackers to lists of states and actions.\n\nfeaturize_trackers#\n\nCopy | featurize_trackers(trackers: List[DialogueStateTracker], domain: Domain) -> DialogueTrainingData\n\nCreate training data.\n\nprediction_states#\n\nCopy | prediction_states(trackers: List[DialogueStateTracker], domain: Domain) -> List[List[Dict[Text, float]]]\n\nTransforms list of trackers to lists of states for prediction.\n\ncreate_X#\n\nCopy | create_X(trackers: List[DialogueStateTracker], domain: Domain) -> np.ndarray\n\nCreate X for prediction.\n\nload#\n\nCopy | @staticmethod | load(path) -> Optional[\"TrackerFeaturizer\"]", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1030": {"text": "Copy | @staticmethod | load(path) -> Optional[\"TrackerFeaturizer\"]\n\nLoads the featurizer from file.\n\nFullDialogueTrackerFeaturizer Objects#\n\nCopyclass FullDialogueTrackerFeaturizer(TrackerFeaturizer)\n\nCreates full dialogue training data for time distributed architectures.\n\nCreates training data that uses each time output for prediction.\nTraining data is padded up to the length of the longest dialogue with -1.\n\ntraining_states_and_actions#\n\nCopy | training_states_and_actions(trackers: List[DialogueStateTracker], domain: Domain) -> Tuple[List[List[Dict]], List[List[Text]]]\n\nTransforms list of trackers to lists of states and actions.\n\nTraining data is padded up to the length of the longest dialogue with -1.\n\nprediction_states#\n\nCopy | prediction_states(trackers: List[DialogueStateTracker], domain: Domain) -> List[List[Dict[Text, float]]]\n\nTransforms list of trackers to lists of states for prediction.\n\nMaxHistoryTrackerFeaturizer Objects#\n\nCopyclass MaxHistoryTrackerFeaturizer(TrackerFeaturizer)\n\nSlices the tracker history into max_history batches.\n\nCreates training data that uses last output for prediction.\nTraining data is padded up to the max_history with -1.\n\nslice_state_history#\n\nCopy | @staticmethod | slice_state_history(states: List[Dict[Text, float]], slice_length: Optional[int]) -> List[Optional[Dict[Text, float]]]\n\nSlices states from the trackers history.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1031": {"text": "Slices states from the trackers history.\n\nIf the slice is at the array borders, padding will be added to ensure\nthe slice length.\n\ntraining_states_and_actions#\n\nCopy | training_states_and_actions(trackers: List[DialogueStateTracker], domain: Domain) -> Tuple[List[List[Optional[Dict[Text, float]]]], List[List[Text]]]\n\nTransforms list of trackers to lists of states and actions.\n\nTraining data is padded up to the max_history with -1.\n\nprediction_states#\n\nCopy | prediction_states(trackers: List[DialogueStateTracker], domain: Domain) -> List[List[Dict[Text, float]]]\n\nTransforms list of trackers to lists of states for prediction.\n\nPrevious\u00ab rasa.core.exporterNextrasa.core.http_interpreter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1032": {"text": "Version: 3.x\n\nrasa.core.http_interpreter\n\nRasaNLUHttpInterpreter Objects#\n\nCopyclass RasaNLUHttpInterpreter()\n\nAllows for an HTTP endpoint to be used to parse messages.\n\n__init__#\n\nCopydef __init__(endpoint_config: Optional[EndpointConfig] = None) -> None\n\nInitializes a RasaNLUHttpInterpreter.\n\nparse#\n\nCopyasync def parse(message: UserMessage) -> Dict[Text, Any]\n\nParse a text message.\n\nReturn a default value if the parsing of the text failed.\n\nPrevious\u00ab rasa.core.featurizersNextrasa.core.interpreter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1033": {"text": "Version: 3.x\n\nrasa.core.interpreter\n\ncreate_interpreter#\n\nCopycreate_interpreter(obj: Union[        rasa.shared.nlu.interpreter.NaturalLanguageInterpreter,        EndpointConfig,        Text, None, ]) -> \"rasa.shared.nlu.interpreter.NaturalLanguageInterpreter\"\n\nFactory to create a natural language interpreter.\n\nRasaNLUHttpInterpreter Objects#\n\nCopyclass RasaNLUHttpInterpreter(rasa.shared.nlu.interpreter.NaturalLanguageInterpreter)\n\nparse#\n\nCopy | async parse(text: Text, message_id: Optional[Text] = None, tracker: Optional[DialogueStateTracker] = None, metadata: Optional[Dict] = None) -> Dict[Text, Any]\n\nParse a text message.\n\nReturn a default value if the parsing of the text failed.\n\nRasaNLUInterpreter Objects#\n\nCopyclass RasaNLUInterpreter(rasa.shared.nlu.interpreter.NaturalLanguageInterpreter)\n\nparse#\n\nCopy | async parse(text: Text, message_id: Optional[Text] = None, tracker: Optional[DialogueStateTracker] = None, metadata: Optional[Dict] = None) -> Dict[Text, Any]\n\nParse a text message.\n\nReturn a default value if the parsing of the text failed.\n\nfeaturize_message#\n\nCopy | featurize_message(message: Message) -> Optional[Message]\n\nFeaturize message using a trained NLU pipeline.\n\nArguments:\n\nmessage - storing text to process\n\nReturns:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1034": {"text": "Arguments:\n\nmessage - storing text to process\n\nReturns:\n\n  message containing tokens and features which are the output of the NLU\npipeline\n\nPrevious\u00ab rasa.core.http_interpreterNextrasa.core.jobs \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1035": {"text": "Version: 3.x\n\nrasa.core.jobs\n\nscheduler#\n\nCopyasync def scheduler() -> AsyncIOScheduler\n\nThread global scheduler to handle all recurring tasks.\n\nIf no scheduler exists yet, this will instantiate one.\n\nkill_scheduler#\n\nCopydef kill_scheduler() -> None\n\nTerminate the scheduler if started.\n\nAnother call to scheduler will create a new scheduler.\n\nPrevious\u00ab rasa.core.interpreterNextrasa.core.lock \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1036": {"text": "Version: 3.x\n\nrasa.core.lock\n\nTicket Objects#\n\nCopyclass Ticket()\n\ndumps#\n\nCopydef dumps() -> Text\n\nReturn json dump of Ticket as dictionary.\n\nfrom_dict#\n\nCopy@classmethoddef from_dict(cls, data: Dict[Text, Union[int, float]]) -> \"Ticket\"\n\nCreates Ticket from dictionary.\n\nTicketLock Objects#\n\nCopyclass TicketLock()\n\nLocking mechanism that issues tickets managing access to conversation IDs.\n\nTickets are issued in the order in which they are requested. A detailed\nexplanation of the ticket lock algorithm can be found at\nhttp://pages.cs.wisc.edu/~remzi/OSTEP/threads-locks.pdf#page=13\n\nfrom_dict#\n\nCopy@classmethoddef from_dict(cls, data: Dict[Text, Any]) -> \"TicketLock\"\n\nCreate TicketLock from dictionary.\n\ndumps#\n\nCopydef dumps() -> Text\n\nReturn json dump of TicketLock.\n\nis_locked#\n\nCopydef is_locked(ticket_number: int) -> bool\n\nReturn whether ticket_number is locked.\n\nReturns:\n\n  True if now_serving is not equal to ticket.\n\nissue_ticket#\n\nCopydef issue_ticket(lifetime: float) -> int\n\nIssue a new ticket and return its number.\n\nremove_expired_tickets#\n\nCopydef remove_expired_tickets() -> None\n\nRemove expired tickets.\n\nlast_issued#\n\nCopy@propertydef last_issued() -> int\n\nReturn number of the ticket that was last added.\n\nReturns:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1037": {"text": "Return number of the ticket that was last added.\n\nReturns:\n\n  Number of Ticket that was last added. NO_TICKET_ISSUED if no\ntickets exist.\n\nnow_serving#\n\nCopy@propertydef now_serving() -> Optional[int]\n\nGet number of the ticket to be served next.\n\nReturns:\n\n  Number of Ticket that is served next. 0 if no Ticket exists.\n\nis_someone_waiting#\n\nCopydef is_someone_waiting() -> bool\n\nReturn whether someone is waiting for the lock to become available.\n\nReturns:\n\n  True if the self.tickets queue has length greater than 0.\n\nremove_ticket_for#\n\nCopydef remove_ticket_for(ticket_number: int) -> None\n\nRemove Ticket for `ticket_number.\n\nPrevious\u00ab rasa.core.jobsNextrasa.core.lock_store \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1038": {"text": "Version: 3.x\n\nrasa.core.lock_store\n\nLockError Objects#\n\nCopyclass LockError(RasaException)\n\nException that is raised when a lock cannot be acquired.\n\nAttributes:\n\nmessage str - explanation of which conversation_id raised the error\n\nLockStore Objects#\n\nCopyclass LockStore()\n\nBase class for ticket locks.\n\ncreate#\n\nCopy@staticmethoddef create(obj: Union[LockStore, EndpointConfig, None]) -> LockStore\n\nFactory to create a lock store.\n\ncreate_lock#\n\nCopy@staticmethoddef create_lock(conversation_id: Text) -> TicketLock\n\nCreate a new TicketLock for conversation_id.\n\nget_lock#\n\nCopydef get_lock(conversation_id: Text) -> Optional[TicketLock]\n\nFetch lock for conversation_id from storage.\n\ndelete_lock#\n\nCopydef delete_lock(conversation_id: Text) -> None\n\nDelete lock for conversation_id from storage.\n\nsave_lock#\n\nCopydef save_lock(lock: TicketLock) -> None\n\nCommit lock to storage.\n\nissue_ticket#\n\nCopydef issue_ticket(conversation_id: Text,                 lock_lifetime: float = LOCK_LIFETIME) -> int\n\nIssue new ticket with lock_lifetime for lock associated with\nconversation_id.\n\nCreates a new lock if none is found.\n\nlock#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1039": {"text": "Creates a new lock if none is found.\n\nlock#\n\nCopy@asynccontextmanagerasync def lock(        conversation_id: Text,        lock_lifetime: float = LOCK_LIFETIME,        wait_time_in_seconds: float = 1) -> AsyncGenerator[TicketLock, None]\n\nAcquire lock with lifetime lock_lifetimefor conversation_id.\n\nTry acquiring lock with a wait time of wait_time_in_seconds seconds\nbetween attempts. Raise a LockError if lock has expired.\n\nupdate_lock#\n\nCopydef update_lock(conversation_id: Text) -> None\n\nFetch lock for conversation_id, remove expired tickets and save lock.\n\nget_or_create_lock#\n\nCopydef get_or_create_lock(conversation_id: Text) -> TicketLock\n\nFetch existing lock for conversation_id.\n\nAlternatively, create a new one if it doesn't exist.\n\nis_someone_waiting#\n\nCopydef is_someone_waiting(conversation_id: Text) -> bool\n\nReturn whether someone is waiting for lock for this conversation_id.\n\nfinish_serving#\n\nCopydef finish_serving(conversation_id: Text, ticket_number: int) -> None\n\nFinish serving ticket with ticket_number for conversation_id.\n\nRemoves ticket from lock and saves lock.\n\ncleanup#\n\nCopydef cleanup(conversation_id: Text, ticket_number: int) -> None\n\nRemove lock for conversation_id if no one is waiting.\n\nRedisLockStore Objects#\n\nCopyclass RedisLockStore(LockStore)\n\nRedis store for ticket locks.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1040": {"text": "Redis store for ticket locks.\n\n__init__#\n\nCopydef __init__(        host: Text = \"localhost\",        port: int = 6379,        db: int = 1,        password: Optional[Text] = None,        use_ssl: bool = False,        key_prefix: Optional[Text] = None,        socket_timeout: float = DEFAULT_SOCKET_TIMEOUT_IN_SECONDS) -> None\n\nCreate a lock store which uses Redis for persistence.\n\nArguments:\n\nhost - The host of the redis server.port - The port of the redis server.db - The name of the database within Redis which should be used by Rasa\nOpen Source.password - The password which should be used for authentication with the\nRedis database.use_ssl - True if SSL should be used for the connection to Redis.key_prefix - prefix to prepend to all keys used by the lock store. Must be\nalphanumeric.socket_timeout - Timeout in seconds after which an exception will be raised\nin case Redis doesn't respond within socket_timeout seconds.\n\nget_lock#\n\nCopydef get_lock(conversation_id: Text) -> Optional[TicketLock]\n\nRetrieves lock (see parent docstring for more information).\n\ndelete_lock#\n\nCopydef delete_lock(conversation_id: Text) -> None\n\nDeletes lock for conversation ID.\n\nInMemoryLockStore Objects#\n\nCopyclass InMemoryLockStore(LockStore)\n\nIn-memory store for ticket locks.\n\n__init__#\n\nCopydef __init__() -> None\n\nInitialise dictionary of locks.\n\nget_lock#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1041": {"text": "Initialise dictionary of locks.\n\nget_lock#\n\nCopydef get_lock(conversation_id: Text) -> Optional[TicketLock]\n\nGet lock for conversation if it exists.\n\ndelete_lock#\n\nCopydef delete_lock(conversation_id: Text) -> None\n\nDelete lock for conversation.\n\nsave_lock#\n\nCopydef save_lock(lock: TicketLock) -> None\n\nSave lock in store.\n\nPrevious\u00ab rasa.core.lockNextrasa.core.migrate \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1042": {"text": "Version: 3.x\n\nrasa.core.migrate\n\nmigrate_domain_format#\n\nCopydef migrate_domain_format(domain_path: Union[Text, Path],                          out_path: Optional[Union[Text, Path]]) -> None\n\nConverts 2.0 domain to 3.0 format.\n\nPrevious\u00ab rasa.core.lock_storeNextrasa.core.processor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1043": {"text": "Version: 3.x\n\nrasa.core.processor\n\nMessageProcessor Objects#\n\nCopyclass MessageProcessor()\n\nThe message processor is interface for communicating with a bot model.\n\n__init__#\n\nCopydef __init__(        model_path: Union[Text, Path],        tracker_store: rasa.core.tracker_store.TrackerStore,        lock_store: LockStore,        generator: NaturalLanguageGenerator,        action_endpoint: Optional[EndpointConfig] = None,        max_number_of_predictions: int = MAX_NUMBER_OF_PREDICTIONS,        on_circuit_break: Optional[LambdaType] = None,        http_interpreter: Optional[RasaNLUHttpInterpreter] = None) -> None\n\nInitializes a MessageProcessor.\n\nhandle_message#\n\nCopyasync def handle_message(        message: UserMessage) -> Optional[List[Dict[Text, Any]]]\n\nHandle a single message with this processor.\n\nrun_action_extract_slots#\n\nCopyasync def run_action_extract_slots(        output_channel: OutputChannel,        tracker: DialogueStateTracker) -> DialogueStateTracker\n\nRun action to extract slots and update the tracker accordingly.\n\nArguments:\n\noutput_channel - Output channel associated with the incoming user message.tracker - A tracker representing a conversation state.\n\nReturns:\n\n  the given (updated) tracker\n\nrun_anonymization_pipeline#\n\nCopyasync def run_anonymization_pipeline(tracker: DialogueStateTracker) -> None\n\nRun the anonymization pipeline on the new tracker events.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1044": {"text": "Run the anonymization pipeline on the new tracker events.\n\nArguments:\n\ntracker - A tracker representing a conversation state.\n\npredict_next_for_sender_id#\n\nCopyasync def predict_next_for_sender_id(        sender_id: Text) -> Optional[Dict[Text, Any]]\n\nPredict the next action for the given sender_id.\n\nArguments:\n\nsender_id - Conversation ID.\n\nReturns:\n\n  The prediction for the next action. None if no domain or policies loaded.\n\npredict_next_with_tracker#\n\nCopydef predict_next_with_tracker(    tracker: DialogueStateTracker,    verbosity: EventVerbosity = EventVerbosity.AFTER_RESTART) -> Optional[Dict[Text, Any]]\n\nPredict the next action for a given conversation state.\n\nArguments:\n\ntracker - A tracker representing a conversation state.verbosity - Verbosity for the returned conversation state.\n\nReturns:\n\n  The prediction for the next action. None if no domain or policies loaded.\n\nfetch_tracker_and_update_session#\n\nCopyasync def fetch_tracker_and_update_session(        sender_id: Text,        output_channel: Optional[OutputChannel] = None,        metadata: Optional[Dict] = None) -> DialogueStateTracker\n\nFetches tracker for sender_id and updates its conversation session.\n\nIf a new tracker is created, action_session_start is run.\n\nArguments:\n\nmetadata - Data sent from client associated with the incoming user message.output_channel - Output channel associated with the incoming user message.sender_id - Conversation ID for which to fetch the tracker.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1045": {"text": "Returns:\n\n  Tracker for sender_id.\n\nfetch_tracker_with_initial_session#\n\nCopyasync def fetch_tracker_with_initial_session(        sender_id: Text,        output_channel: Optional[OutputChannel] = None,        metadata: Optional[Dict] = None) -> DialogueStateTracker\n\nFetches tracker for sender_id and runs a session start if it's a new\ntracker.\n\nArguments:\n\nmetadata - Data sent from client associated with the incoming user message.output_channel - Output channel associated with the incoming user message.sender_id - Conversation ID for which to fetch the tracker.\n\nReturns:\n\n  Tracker for sender_id.\n\nget_tracker#\n\nCopyasync def get_tracker(conversation_id: Text) -> DialogueStateTracker\n\nGet the tracker for a conversation.\n\nIn contrast to fetch_tracker_and_update_session this does not add any\naction_session_start or session_start events at the beginning of a\nconversation.\n\nArguments:\n\nconversation_id - The ID of the conversation for which the history should be\nretrieved.\n\nReturns:\n\n  Tracker for the conversation. Creates an empty tracker in case it's a new\nconversation.\n\nfetch_full_tracker_with_initial_session#\n\nCopyasync def fetch_full_tracker_with_initial_session(        conversation_id: Text,        output_channel: Optional[OutputChannel] = None,        metadata: Optional[Dict] = None) -> DialogueStateTracker\n\nGet the full tracker for a conversation, including events after a restart.\n\nArguments:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1046": {"text": "Arguments:\n\nconversation_id - The ID of the conversation for which the history should be\nretrieved.output_channel - Output channel associated with the incoming user message.metadata - Data sent from client associated with the incoming user message.\n\nReturns:\n\n  Tracker for the conversation. Creates an empty tracker with a new session\ninitialized in case it's a new conversation.\n\nget_trackers_for_all_conversation_sessions#\n\nCopyasync def get_trackers_for_all_conversation_sessions(        conversation_id: Text) -> List[DialogueStateTracker]\n\nFetches all trackers for a conversation.\n\nIndividual trackers are returned for each conversation session found\nfor conversation_id.\n\nArguments:\n\nconversation_id - The ID of the conversation for which the trackers should\nbe retrieved.\n\nReturns:\n\n  Trackers for the conversation.\n\nlog_message#\n\nCopyasync def log_message(        message: UserMessage,        should_save_tracker: bool = True) -> DialogueStateTracker\n\nLog message on tracker belonging to the message's conversation_id.\n\nOptionally save the tracker if should_save_tracker is True. Tracker saving\ncan be skipped if the tracker returned by this method is used for further\nprocessing and saved at a later stage.\n\nexecute_action#\n\nCopyasync def execute_action(        sender_id: Text, action_name: Text, output_channel: OutputChannel,        nlg: NaturalLanguageGenerator,        prediction: PolicyPrediction) -> Optional[DialogueStateTracker]\n\nExecute an action for a conversation.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1047": {"text": "Execute an action for a conversation.\n\nNote that this might lead to unexpected bot behavior. Rather use an intent\nto execute certain behavior within a conversation (e.g. by using\ntrigger_external_user_uttered).\n\nArguments:\n\nsender_id - The ID of the conversation.action_name - The name of the action which should be executed.output_channel - The output channel which should be used for bot responses.nlg - The response generator.prediction - The prediction for the action.\n\nReturns:\n\n  The new conversation state. Note that the new state is also persisted.\n\npredict_next_with_tracker_if_should#\n\nCopydef predict_next_with_tracker_if_should(    tracker: DialogueStateTracker) -> Tuple[rasa.core.actions.action.Action, PolicyPrediction]\n\nPredicts the next action the bot should take after seeing x.\n\nThis should be overwritten by more advanced policies to use\nML to predict the action.\n\nReturns:\n\n  The index of the next action and prediction of the policy.\n\nRaises:\n\n  ActionLimitReached if the limit of actions to predict has been reached.\n\nhandle_reminder#\n\nCopyasync def handle_reminder(reminder_event: ReminderScheduled, sender_id: Text,                          output_channel: OutputChannel) -> None\n\nHandle a reminder that is triggered asynchronously.\n\ntrigger_external_user_uttered#\n\nCopyasync def trigger_external_user_uttered(intent_name: Text, entities: Optional[    Union[List[Dict[Text, Any]], Dict[Text,                                      Text]]], tracker: DialogueStateTracker,                                        output_channel: OutputChannel) -> None", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1048": {"text": "Triggers an external message.\n\nTriggers an external message (like a user message, but invisible;\nused, e.g., by a reminder or the trigger_intent endpoint).\n\nArguments:\n\nintent_name - Name of the intent to be triggered.entities - Entities to be passed on.tracker - The tracker to which the event should be added.output_channel - The output channel.\n\nparse_message#\n\nCopyasync def parse_message(        message: UserMessage,        tracker: Optional[DialogueStateTracker] = None,        only_output_properties: bool = True) -> Dict[Text, Any]\n\nInterprets the passed message.\n\nArguments:\n\nmessage - Message to handle.tracker - Tracker to use.only_output_properties - If True, restrict the output to\nMessage.only_output_properties.\n\nReturns:\n\n  Parsed data extracted from the message.\n\nis_action_limit_reached#\n\nCopydef is_action_limit_reached(tracker: DialogueStateTracker,                            should_predict_another_action: bool) -> bool\n\nCheck whether the maximum number of predictions has been met.\n\nArguments:\n\ntracker - instance of DialogueStateTracker.should_predict_another_action - Whether the last executed action allows\nfor more actions to be predicted or not.\n\nReturns:\n\n True if the limit of actions to predict has been reached.\n\nshould_predict_another_action#\n\nCopy@staticmethoddef should_predict_another_action(action_name: Text) -> bool\n\nDetermine whether the processor should predict another action.\n\nArguments:\n\naction_name - Name of the latest executed action.\n\nReturns:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1049": {"text": "action_name - Name of the latest executed action.\n\nReturns:\n\n False if action_name is ACTION_LISTEN_NAME or\nACTION_SESSION_START_NAME, otherwise True.\n\nexecute_side_effects#\n\nCopyasync def execute_side_effects(events: List[Event],                               tracker: DialogueStateTracker,                               output_channel: OutputChannel) -> None\n\nSend bot messages, schedule and cancel reminders that are logged\nin the events array.\n\nsave_tracker#\n\nCopyasync def save_tracker(tracker: DialogueStateTracker) -> None\n\nSave the given tracker to the tracker store.\n\nArguments:\n\ntracker - Tracker to be saved.\n\nPrevious\u00ab rasa.core.migrateNextrasa.core.registry \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1050": {"text": "Version: 3.x\n\nrasa.core.registry\n\nThis module imports all of the components. To avoid cycles, no component\nshould import this in module scope.\n\npolicy_from_module_path#\n\nCopypolicy_from_module_path(module_path: Text) -> Type[\"Policy\"]\n\nGiven the name of a policy module tries to retrieve the policy.\n\nArguments:\n\nmodule_path - a path to a policy\n\nReturns:\n\n  a :class:rasa.core.policies.policy.Policy\n\nfeaturizer_from_module_path#\n\nCopyfeaturizer_from_module_path(module_path: Text) -> Type[\"TrackerFeaturizer\"]\n\nGiven the name of a featurizer module tries to retrieve it.\n\nArguments:\n\nmodule_path - a path to a featurizer\n\nReturns:\n\n  a :class:rasa.core.featurizers.tracker_featurizers.TrackerFeaturizer\n\nstate_featurizer_from_module_path#\n\nCopystate_featurizer_from_module_path(module_path: Text) -> Type[\"SingleStateFeaturizer\"]\n\nGiven the name of a single state featurizer module tries to retrieve it.\n\nArguments:\n\nmodule_path - a path to a single state featurizer\n\nReturns:\n\n  a :class:rasa.core.featurizers.single_state_featurizer.SingleStateFeaturizer\n\nPrevious\u00ab rasa.core.processorNextrasa.core.restore \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1051": {"text": "Version: 3.x\n\nrasa.core.restore\n\nalign_lists#\n\nCopyalign_lists(predictions: List[Text], golds: List[Text]) -> Tuple[List[Text], List[Text]]\n\nAlign two lists trying to keep same elements at the same index.\n\nIf lists contain different items at some indices, the algorithm will\ntry to find the best alignment and pad with None\nvalues where necessary.\n\nactions_since_last_utterance#\n\nCopyactions_since_last_utterance(tracker: DialogueStateTracker) -> List[Text]\n\nExtract all events after the most recent utterance from the user.\n\nreplay_events#\n\nCopyasync replay_events(tracker: DialogueStateTracker, agent: \"Agent\") -> None\n\nTake a tracker and replay the logged user utterances against an agent.\n\nDuring replaying of the user utterances, the executed actions and events\ncreated by the agent are compared to the logged ones of the tracker that\nis getting replayed. If they differ, a warning is logged.\n\nAt the end, the tracker stored in the agent's tracker store for the\nsame sender id will have quite the same state as the one\nthat got replayed.\n\nload_tracker_from_json#\n\nCopyload_tracker_from_json(tracker_dump: Text, domain: Domain) -> DialogueStateTracker\n\nRead the json dump from the file and instantiate a tracker it.\n\nPrevious\u00ab rasa.core.registryNextrasa.core.run \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1052": {"text": "Version: 3.x\n\nrasa.core.run\n\ncreate_http_input_channels#\n\nCopydef create_http_input_channels(        channel: Optional[Text],        credentials_file: Optional[Text]) -> List[\"InputChannel\"]\n\nInstantiate the chosen input channel.\n\nconfigure_app#\n\nCopydef configure_app(input_channels: Optional[List[\"InputChannel\"]] = None,                  cors: Optional[Union[Text, List[Text], None]] = None,                  auth_token: Optional[Text] = None,                  enable_api: bool = True,                  response_timeout: int = constants.DEFAULT_RESPONSE_TIMEOUT,                  jwt_secret: Optional[Text] = None,                  jwt_private_key: Optional[Text] = None,                  jwt_method: Optional[Text] = None,                  route: Optional[Text] = \"/webhooks/\",                  port: int = constants.DEFAULT_SERVER_PORT,                  endpoints: Optional[AvailableEndpoints] = None,                  log_file: Optional[Text] = None,                  conversation_id: Optional[Text] = uuid.uuid4().hex,                  use_syslog: bool = False,                  syslog_address: Optional[Text] = None,                  syslog_port: Optional[int] = None,                  syslog_protocol: Optional[Text] = None,                  request_timeout: Optional[int] = None) -> Sanic\n\nRun the agent.\n\nserve_application#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1053": {"text": "Run the agent.\n\nserve_application#\n\nCopydef serve_application(        model_path: Optional[Text] = None,        channel: Optional[Text] = None,        interface: Optional[Text] = constants.DEFAULT_SERVER_INTERFACE,        port: int = constants.DEFAULT_SERVER_PORT,        credentials: Optional[Text] = None,        cors: Optional[Union[Text, List[Text]]] = None,        auth_token: Optional[Text] = None,        enable_api: bool = True,        response_timeout: int = constants.DEFAULT_RESPONSE_TIMEOUT,        jwt_secret: Optional[Text] = None,        jwt_private_key: Optional[Text] = None,        jwt_method: Optional[Text] = None,        endpoints: Optional[AvailableEndpoints] = None,        remote_storage: Optional[Text] = None,        log_file: Optional[Text] = None,        ssl_certificate: Optional[Text] = None,        ssl_keyfile: Optional[Text] = None,        ssl_ca_file: Optional[Text] = None,        ssl_password: Optional[Text] = None,        conversation_id: Optional[Text] = uuid.uuid4().hex,        use_syslog: Optional[bool] = False,        syslog_address: Optional[Text] = None,        syslog_port: Optional[int] = None,        syslog_protocol: Optional[Text] = None,        request_timeout: Optional[int] = None) -> None\n\nRun the API entrypoint.\n\nload_agent_on_start#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1054": {"text": "Run the API entrypoint.\n\nload_agent_on_start#\n\nCopyasync def load_agent_on_start(model_path: Text, endpoints: AvailableEndpoints,                              remote_storage: Optional[Text], app: Sanic,                              loop: AbstractEventLoop) -> Agent\n\nLoad an agent.\n\nUsed to be scheduled on server start\n(hence the app and loop arguments).\n\nclose_resources#\n\nCopyasync def close_resources(app: Sanic, _: AbstractEventLoop) -> None\n\nGracefully closes resources when shutting down server.\n\nArguments:\n\napp - The Sanic application._ - The current Sanic worker event loop.\n\nPrevious\u00ab rasa.core.restoreNextrasa.core.slots \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1055": {"text": "Version: 3.x\n\nrasa.core.slots\n\nSlot Objects#\n\nCopyclass Slot()\n\nfeature_dimensionality#\n\nCopy | feature_dimensionality() -> int\n\nHow many features this single slot creates.\n\nThe dimensionality of the array returned by as_feature needs\nto correspond to this value.\n\nadd_default_value#\n\nCopy | add_default_value() -> None\n\nAdd a default value to a slots user-defined values\n\nhas_features#\n\nCopy | has_features() -> bool\n\nIndicate if the slot creates any features.\n\nvalue_reset_delay#\n\nCopy | value_reset_delay() -> Optional[int]\n\nAfter how many turns the slot should be reset to the initial_value.\n\nIf the delay is set to None, the slot will keep its value forever.\n\nresolve_by_type#\n\nCopy | @staticmethod | resolve_by_type(type_name) -> Type[\"Slot\"]\n\nReturns a slots class by its type name.\n\nPrevious\u00ab rasa.core.runNextrasa.core.test \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1056": {"text": "Version: 3.x\n\nrasa.core.test\n\nWrongPredictionException Objects#\n\nCopyclass WrongPredictionException(RasaException, ValueError)\n\nRaised if a wrong prediction is encountered.\n\nWarningPredictedAction Objects#\n\nCopyclass WarningPredictedAction(ActionExecuted)\n\nThe model predicted the correct action with warning.\n\n__init__#\n\nCopydef __init__(action_name_prediction: Text,             action_name: Optional[Text] = None,             policy: Optional[Text] = None,             confidence: Optional[float] = None,             timestamp: Optional[float] = None,             metadata: Optional[Dict] = None)\n\nCreates event action_unlikely_intent predicted as warning.\n\nSee the docstring of the parent class for more information.\n\ninline_comment#\n\nCopydef inline_comment(**kwargs: Any) -> Text\n\nA comment attached to this event. Used during dumping.\n\nWronglyPredictedAction Objects#\n\nCopyclass WronglyPredictedAction(ActionExecuted)\n\nThe model predicted the wrong action.\n\nMostly used to mark wrong predictions and be able to\ndump them as stories.\n\n__init__#\n\nCopydef __init__(action_name_target: Text,             action_text_target: Text,             action_name_prediction: Text,             policy: Optional[Text] = None,             confidence: Optional[float] = None,             timestamp: Optional[float] = None,             metadata: Optional[Dict] = None,             predicted_action_unlikely_intent: bool = False) -> None\n\nCreates event for a successful event execution.\n\nSee the docstring of the parent class ActionExecuted for more information.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1057": {"text": "See the docstring of the parent class ActionExecuted for more information.\n\ninline_comment#\n\nCopydef inline_comment(**kwargs: Any) -> Text\n\nA comment attached to this event. Used during dumping.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns the story equivalent representation.\n\n__repr__#\n\nCopydef __repr__() -> Text\n\nReturns event as string for debugging.\n\nEvaluationStore Objects#\n\nCopyclass EvaluationStore()\n\nClass storing action, intent and entity predictions and targets.\n\n__init__#\n\nCopydef __init__(        action_predictions: Optional[PredictionList] = None,        action_targets: Optional[PredictionList] = None,        intent_predictions: Optional[PredictionList] = None,        intent_targets: Optional[PredictionList] = None,        entity_predictions: Optional[List[\"EntityPrediction\"]] = None,        entity_targets: Optional[List[\"EntityPrediction\"]] = None) -> None\n\nInitialize store attributes.\n\nadd_to_store#\n\nCopydef add_to_store(        action_predictions: Optional[PredictionList] = None,        action_targets: Optional[PredictionList] = None,        intent_predictions: Optional[PredictionList] = None,        intent_targets: Optional[PredictionList] = None,        entity_predictions: Optional[List[\"EntityPrediction\"]] = None,        entity_targets: Optional[List[\"EntityPrediction\"]] = None) -> None\n\nAdd items or lists of items to the store.\n\nmerge_store#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1058": {"text": "Add items or lists of items to the store.\n\nmerge_store#\n\nCopydef merge_store(other: \"EvaluationStore\") -> None\n\nAdd the contents of other to self.\n\ncheck_prediction_target_mismatch#\n\nCopydef check_prediction_target_mismatch() -> bool\n\nChecks if intent, entity or action predictions don't match expected ones.\n\nserialise#\n\nCopydef serialise() -> Tuple[PredictionList, PredictionList]\n\nTurn targets and predictions to lists of equal size for sklearn.\n\nEndToEndUserUtterance Objects#\n\nCopyclass EndToEndUserUtterance(UserUttered)\n\nEnd-to-end user utterance.\n\nMostly used to print the full end-to-end user message in the\nfailed_test_stories.yml output file.\n\nas_story_string#\n\nCopydef as_story_string(e2e: bool = True) -> Text\n\nReturns the story equivalent representation.\n\nWronglyClassifiedUserUtterance Objects#\n\nCopyclass WronglyClassifiedUserUtterance(UserUttered)\n\nThe NLU model predicted the wrong user utterance.\n\nMostly used to mark wrong predictions and be able to\ndump them as stories.\n\n__init__#\n\nCopydef __init__(event: UserUttered, eval_store: EvaluationStore) -> None\n\nSet predicted_intent and predicted_entities attributes.\n\ninline_comment#\n\nCopydef inline_comment(force_comment_generation: bool = False) -> Optional[Text]\n\nA comment attached to this event. Used during dumping.\n\ninline_comment_for_entity#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1059": {"text": "inline_comment_for_entity#\n\nCopy@staticmethoddef inline_comment_for_entity(predicted: Dict[Text, Any],                              entity: Dict[Text, Any]) -> Optional[Text]\n\nReturns the predicted entity which is then printed as a comment.\n\nas_story_string#\n\nCopydef as_story_string(e2e: bool = True) -> Text\n\nReturns text representation of event.\n\nemulate_loop_rejection#\n\nCopydef emulate_loop_rejection(partial_tracker: DialogueStateTracker) -> None\n\nAdd ActionExecutionRejected event to the tracker.\n\nDuring evaluation, we don't run action server, therefore in order to correctly\ntest unhappy paths of the loops, we need to emulate loop rejection.\n\nArguments:\n\npartial_tracker - a :class:rasa.core.trackers.DialogueStateTracker\n\ntest#\n\nCopyasync def test(stories: Text,               agent: \"Agent\",               max_stories: Optional[int] = None,               out_directory: Optional[Text] = None,               fail_on_prediction_errors: bool = False,               e2e: bool = False,               disable_plotting: bool = False,               successes: bool = False,               errors: bool = True,               warnings: bool = True) -> Dict[Text, Any]\n\nRun the evaluation of the stories, optionally plot the results.\n\nArguments:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1060": {"text": "Run the evaluation of the stories, optionally plot the results.\n\nArguments:\n\nstories - the stories to evaluate onagent - the agentmax_stories - maximum number of stories to considerout_directory - path to directory to results tofail_on_prediction_errors - boolean indicating whether to fail on prediction\nerrors or note2e - boolean indicating whether to use end to end evaluation or notdisable_plotting - boolean indicating whether to disable plotting or notsuccesses - boolean indicating whether to write down successful predictions or\nnoterrors - boolean indicating whether to write down incorrect predictions or notwarnings - boolean indicating whether to write down prediction warnings or not\n\nReturns:\n\n  Evaluation summary.\n\ncompare_models_in_dir#\n\nCopyasync def compare_models_in_dir(        model_dir: Text,        stories_file: Text,        output: Text,        use_conversation_test_files: bool = False) -> None\n\nEvaluates multiple trained models in a directory on a test set.\n\nArguments:\n\nmodel_dir - path to directory that contains the models to evaluatestories_file - path to the story fileoutput - output directory to store results touse_conversation_test_files - True if conversation test files should be used\nfor testing instead of regular Core story files.\n\ncompare_models#\n\nCopyasync def compare_models(models: List[Text],                         stories_file: Text,                         output: Text,                         use_conversation_test_files: bool = False) -> None\n\nEvaluates multiple trained models on a test set.\n\nArguments:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1061": {"text": "Evaluates multiple trained models on a test set.\n\nArguments:\n\nmodels - Paths to model files.stories_file - path to the story fileoutput - output directory to store results touse_conversation_test_files - True if conversation test files should be used\nfor testing instead of regular Core story files.\n\nPrevious\u00ab rasa.core.slotsNextrasa.core.tracker_store \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1062": {"text": "Version: 3.x\n\nrasa.core.tracker_store\n\ncheck_if_tracker_store_async#\n\nCopydef check_if_tracker_store_async(tracker_store: TrackerStore) -> bool\n\nEvaluates if a tracker store object is async based on implementation of methods.\n\nArguments:\n\ntracker_store: tracker store object we're evaluating\n\nReturns:\n\nif the tracker store correctly implements all async methods\n\nTrackerDeserialisationException Objects#\n\nCopyclass TrackerDeserialisationException(RasaException)\n\nRaised when an error is encountered while deserialising a tracker.\n\nSerializedTrackerRepresentation Objects#\n\nCopyclass SerializedTrackerRepresentation(Generic[SerializationType])\n\nMixin class for specifying different serialization methods per tracker store.\n\nserialise_tracker#\n\nCopy@staticmethoddef serialise_tracker(tracker: DialogueStateTracker) -> SerializationType\n\nRequires implementation to return representation of tracker.\n\nSerializedTrackerAsText Objects#\n\nCopyclass SerializedTrackerAsText(SerializedTrackerRepresentation[Text])\n\nMixin class that returns the serialized tracker as string.\n\nserialise_tracker#\n\nCopy@staticmethoddef serialise_tracker(tracker: DialogueStateTracker) -> Text\n\nSerializes the tracker, returns representation of the tracker.\n\nSerializedTrackerAsDict Objects#\n\nCopyclass SerializedTrackerAsDict(SerializedTrackerRepresentation[Dict])\n\nMixin class that returns the serialized tracker as dictionary.\n\nserialise_tracker#\n\nCopy@staticmethoddef serialise_tracker(tracker: DialogueStateTracker) -> Dict\n\nSerializes the tracker, returns representation of the tracker.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1063": {"text": "Serializes the tracker, returns representation of the tracker.\n\nTrackerStore Objects#\n\nCopyclass TrackerStore()\n\nRepresents common behavior and interface for all TrackerStores.\n\n__init__#\n\nCopydef __init__(domain: Optional[Domain],             event_broker: Optional[EventBroker] = None, **kwargs: Dict[Text, Any]) -> None\n\nCreate a TrackerStore.\n\nArguments:\n\ndomain - The Domain to initialize the DialogueStateTracker.event_broker - An event broker to publish any new events to another\ndestination.kwargs - Additional kwargs.\n\ncreate#\n\nCopy@staticmethoddef create(obj: Union[TrackerStore, EndpointConfig, None],           domain: Optional[Domain] = None,           event_broker: Optional[EventBroker] = None) -> TrackerStore\n\nFactory to create a tracker store.\n\nget_or_create_tracker#\n\nCopyasync def get_or_create_tracker(        sender_id: Text,        max_event_history: Optional[int] = None,        append_action_listen: bool = True) -> \"DialogueStateTracker\"\n\nReturns tracker or creates one if the retrieval returns None.\n\nArguments:\n\nsender_id - Conversation ID associated with the requested tracker.max_event_history - Value to update the tracker store's max event history to.append_action_listen - Whether or not to append an initial action_listen.\n\ninit_tracker#\n\nCopydef init_tracker(sender_id: Text) -> \"DialogueStateTracker\"\n\nReturns a Dialogue State Tracker.\n\ncreate_tracker#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1064": {"text": "Returns a Dialogue State Tracker.\n\ncreate_tracker#\n\nCopyasync def create_tracker(        sender_id: Text,        append_action_listen: bool = True) -> DialogueStateTracker\n\nCreates a new tracker for sender_id.\n\nThe tracker begins with a SessionStarted event and is initially listening.\n\nArguments:\n\nsender_id - Conversation ID associated with the tracker.append_action_listen - Whether or not to append an initial action_listen.\n\nReturns:\n\n  The newly created tracker for sender_id.\n\nsave#\n\nCopyasync def save(tracker: DialogueStateTracker) -> None\n\nSave method that will be overridden by specific tracker.\n\nexists#\n\nCopyasync def exists(conversation_id: Text) -> bool\n\nChecks if tracker exists for the specified ID.\n\nThis method may be overridden by the specific tracker store for\nfaster implementations.\n\nArguments:\n\nconversation_id - Conversation ID to check if the tracker exists.\n\nReturns:\n\n True if the tracker exists, False otherwise.\n\nretrieve#\n\nCopyasync def retrieve(sender_id: Text) -> Optional[DialogueStateTracker]\n\nRetrieves tracker for the latest conversation session.\n\nThis method will be overridden by the specific tracker store.\n\nArguments:\n\nsender_id - Conversation ID to fetch the tracker for.\n\nReturns:\n\n  Tracker containing events from the latest conversation sessions.\n\nretrieve_full_tracker#\n\nCopyasync def retrieve_full_tracker(        conversation_id: Text) -> Optional[DialogueStateTracker]", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1065": {"text": "Retrieve method for fetching all tracker events across conversation sessions\\\nthat may be overridden by specific tracker.\n\nThe default implementation uses self.retrieve().\n\nArguments:\n\nconversation_id - The conversation ID to retrieve the tracker for.\n\nReturns:\n\n  The fetch tracker containing all events across session starts.\n\nget_or_create_full_tracker#\n\nCopyasync def get_or_create_full_tracker(        sender_id: Text,        append_action_listen: bool = True) -> \"DialogueStateTracker\"\n\nReturns tracker or creates one if the retrieval returns None.\n\nArguments:\n\nsender_id - Conversation ID associated with the requested tracker.append_action_listen - Whether to append an initial action_listen.\n\nReturns:\n\n  The tracker for the conversation ID.\n\nstream_events#\n\nCopyasync def stream_events(tracker: DialogueStateTracker) -> None\n\nStreams events to a message broker.\n\nkeys#\n\nCopyasync def keys() -> Iterable[Text]\n\nReturns the set of values for the tracker store's primary key.\n\ndeserialise_tracker#\n\nCopydef deserialise_tracker(        sender_id: Text,        serialised_tracker: Union[Text, bytes]) -> Optional[DialogueStateTracker]\n\nDeserializes the tracker and returns it.\n\ndomain#\n\nCopy@propertydef domain() -> Domain\n\nReturns the domain of the tracker store.\n\nInMemoryTrackerStore Objects#\n\nCopyclass InMemoryTrackerStore(TrackerStore, SerializedTrackerAsText)\n\nStores conversation history in memory.\n\n__init__#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1066": {"text": "Stores conversation history in memory.\n\n__init__#\n\nCopydef __init__(domain: Domain,             event_broker: Optional[EventBroker] = None, **kwargs: Dict[Text, Any]) -> None\n\nInitializes the tracker store.\n\nsave#\n\nCopyasync def save(tracker: DialogueStateTracker) -> None\n\nUpdates and saves the current conversation state.\n\nretrieve#\n\nCopyasync def retrieve(sender_id: Text) -> Optional[DialogueStateTracker]\n\nReturns tracker matching sender_id.\n\nkeys#\n\nCopyasync def keys() -> Iterable[Text]\n\nReturns sender_ids of the Tracker Store in memory.\n\nretrieve_full_tracker#\n\nCopyasync def retrieve_full_tracker(        sender_id: Text) -> Optional[DialogueStateTracker]\n\nReturns tracker matching sender_id.\n\nArguments:\n\nsender_id - Conversation ID to fetch the tracker for.\n\nRedisTrackerStore Objects#\n\nCopyclass RedisTrackerStore(TrackerStore, SerializedTrackerAsText)\n\nStores conversation history in Redis.\n\n__init__#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1067": {"text": "Stores conversation history in Redis.\n\n__init__#\n\nCopydef __init__(domain: Domain,             host: Text = \"localhost\",             port: int = 6379,             db: int = 0,             password: Optional[Text] = None,             event_broker: Optional[EventBroker] = None,             record_exp: Optional[float] = None,             key_prefix: Optional[Text] = None,             use_ssl: bool = False,             ssl_keyfile: Optional[Text] = None,             ssl_certfile: Optional[Text] = None,             ssl_ca_certs: Optional[Text] = None, **kwargs: Dict[Text, Any]) -> None\n\nInitializes the tracker store.\n\nsave#\n\nCopyasync def save(tracker: DialogueStateTracker,               timeout: Optional[float] = None) -> None\n\nSaves the current conversation state.\n\nretrieve#\n\nCopyasync def retrieve(sender_id: Text) -> Optional[DialogueStateTracker]\n\nRetrieves tracker for the latest conversation session.\n\nThe Redis key is formed by appending a prefix to sender_id.\n\nArguments:\n\nsender_id - Conversation ID to fetch the tracker for.\n\nReturns:\n\n  Tracker containing events from the latest conversation sessions.\n\nretrieve_full_tracker#\n\nCopyasync def retrieve_full_tracker(        sender_id: Text) -> Optional[DialogueStateTracker]\n\nRetrieves tracker for all conversation sessions.\n\nThe Redis key is formed by appending a prefix to sender_id.\n\nArguments:\n\nsender_id - Conversation ID to fetch the tracker for.\n\nReturns:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1068": {"text": "sender_id - Conversation ID to fetch the tracker for.\n\nReturns:\n\n  Tracker containing events from all conversation sessions.\n\nkeys#\n\nCopyasync def keys() -> Iterable[Text]\n\nReturns keys of the Redis Tracker Store.\n\nDynamoTrackerStore Objects#\n\nCopyclass DynamoTrackerStore(TrackerStore, SerializedTrackerAsDict)\n\nStores conversation history in DynamoDB.\n\n__init__#\n\nCopydef __init__(domain: Domain,             table_name: Text = \"states\",             region: Text = \"us-east-1\",             event_broker: Optional[EndpointConfig] = None, **kwargs: Dict[Text, Any]) -> None\n\nInitialize DynamoTrackerStore.\n\nArguments:\n\ndomain - Domain associated with this tracker store.table_name - The name of the DynamoDB table, does not need to be present a\npriori.region - The name of the region associated with the client.\nA client is associated with a single region.event_broker - An event broker used to publish events.kwargs - Additional kwargs.\n\nget_or_create_table#\n\nCopydef get_or_create_table(        table_name: Text) -> \"boto3.resources.factory.dynamodb.Table\"\n\nReturns table or creates one if the table name is not in the table list.\n\nsave#\n\nCopyasync def save(tracker: DialogueStateTracker) -> None\n\nSaves the current conversation state.\n\nserialise_tracker#\n\nCopy@staticmethoddef serialise_tracker(tracker: \"DialogueStateTracker\") -> Dict\n\nSerializes the tracker, returns object with decimal types.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1069": {"text": "Serializes the tracker, returns object with decimal types.\n\nDynamoDB cannot store floats, so we'll convert them to Decimals.\n\nretrieve#\n\nCopyasync def retrieve(sender_id: Text) -> Optional[DialogueStateTracker]\n\nRetrieve dialogues for a sender_id in reverse-chronological order.\n\nBased on the session_date sort key.\n\nretrieve_full_tracker#\n\nCopyasync def retrieve_full_tracker(        sender_id: Text) -> Optional[DialogueStateTracker]\n\nRetrieves tracker for all conversation sessions.\n\nArguments:\n\nsender_id - Conversation ID to fetch the tracker for.\n\nkeys#\n\nCopyasync def keys() -> Iterable[Text]\n\nReturns sender_ids of the DynamoTrackerStore.\n\nMongoTrackerStore Objects#\n\nCopyclass MongoTrackerStore(TrackerStore, SerializedTrackerAsText)\n\nStores conversation history in Mongo.\n\nProperty methods:\nconversations: returns the current conversation\n\nconversations#\n\nCopy@propertydef conversations() -> Collection\n\nReturns the current conversation.\n\nsave#\n\nCopyasync def save(tracker: DialogueStateTracker) -> None\n\nSaves the current conversation state.\n\nretrieve#\n\nCopyasync def retrieve(sender_id: Text) -> Optional[DialogueStateTracker]\n\nRetrieves tracker for the latest conversation session.\n\nretrieve_full_tracker#\n\nCopyasync def retrieve_full_tracker(        conversation_id: Text) -> Optional[DialogueStateTracker]\n\nFetching all tracker events across conversation sessions.\n\nkeys#\n\nCopyasync def keys() -> Iterable[Text]", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1070": {"text": "keys#\n\nCopyasync def keys() -> Iterable[Text]\n\nReturns sender_ids of the Mongo Tracker Store.\n\nis_postgresql_url#\n\nCopydef is_postgresql_url(url: Union[Text, \"URL\"]) -> bool\n\nDetermine whether url configures a PostgreSQL connection.\n\nArguments:\n\nurl - SQL connection URL.\n\nReturns:\n\n True if url is a PostgreSQL connection URL.\n\ncreate_engine_kwargs#\n\nCopydef create_engine_kwargs(url: Union[Text, \"URL\"]) -> Dict[Text, Any]\n\nGet sqlalchemy.create_engine() kwargs.\n\nArguments:\n\nurl - SQL connection URL.\n\nReturns:\n\n  kwargs to be passed into sqlalchemy.create_engine().\n\nensure_schema_exists#\n\nCopydef ensure_schema_exists(session: \"Session\") -> None\n\nEnsure that the requested PostgreSQL schema exists in the database.\n\nArguments:\n\nsession - Session used to inspect the database.\n\nRaises:\n\n ValueError if the requested schema does not exist.\n\nvalidate_port#\n\nCopydef validate_port(port: Any) -> Optional[int]\n\nEnsure that port can be converted to integer.\n\nRaises:\n\n  RasaException if port cannot be cast to integer.\n\nSQLTrackerStore Objects#\n\nCopyclass SQLTrackerStore(TrackerStore, SerializedTrackerAsText)\n\nStore which can save and retrieve trackers from an SQL database.\n\nSQLEvent Objects#\n\nCopyclass SQLEvent(Base)\n\nRepresents an event in the SQL Tracker Store.", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1071": {"text": "Represents an event in the SQL Tracker Store.\n\nget_db_url#\n\nCopy@staticmethoddef get_db_url(dialect: Text = \"sqlite\",               host: Optional[Text] = None,               port: Optional[int] = None,               db: Text = \"rasa.db\",               username: Text = None,               password: Text = None,               login_db: Optional[Text] = None,               query: Optional[Dict] = None) -> Union[Text, \"URL\"]\n\nBuild an SQLAlchemy URL object representing the parameters needed\nto connect to an SQL database.\n\nArguments:\n\ndialect - SQL database type.host - Database network host.port - Database network port.db - Database name.username - User name to use when connecting to the database.password - Password for database user.login_db - Alternative database name to which initially connect, and create\nthe database specified by db (PostgreSQL only).query - Dictionary of options to be passed to the dialect and/or the\nDBAPI upon connect.\n\nReturns:\n\n  URL ready to be used with an SQLAlchemy dialect0 object.\n\nsession_scope#\n\nCopy@contextlib.contextmanagerdef session_scope() -> Generator[\"Session\", None, None]\n\nProvide a transactional scope around a series of operations.\n\nkeys#\n\nCopyasync def keys() -> Iterable[Text]\n\nReturns sender_ids of the SQLTrackerStore.\n\nretrieve#\n\nCopyasync def retrieve(sender_id: Text) -> Optional[DialogueStateTracker]\n\nRetrieves tracker for the latest conversation session.\n\nretrieve_full_tracker#", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1072": {"text": "retrieve_full_tracker#\n\nCopyasync def retrieve_full_tracker(        conversation_id: Text) -> Optional[DialogueStateTracker]\n\nFetching all tracker events across conversation sessions.\n\nsave#\n\nCopyasync def save(tracker: DialogueStateTracker) -> None\n\nUpdate database with events from the current conversation.\n\nFailSafeTrackerStore Objects#\n\nCopyclass FailSafeTrackerStore(TrackerStore)\n\nTracker store wrapper.\n\nAllows a fallback to a different tracker store in case of errors.\n\n__init__#\n\nCopydef __init__(tracker_store: TrackerStore,             on_tracker_store_error: Optional[Callable[[Exception], None]] = None,             fallback_tracker_store: Optional[TrackerStore] = None) -> None\n\nCreate a FailSafeTrackerStore.\n\nArguments:\n\ntracker_store - Primary tracker store.on_tracker_store_error - Callback which is called when there is an error\nin the primary tracker store.fallback_tracker_store - Fallback tracker store.\n\ndomain#\n\nCopy@propertydef domain() -> Domain\n\nReturns the domain of the primary tracker store.\n\nfallback_tracker_store#\n\nCopy@propertydef fallback_tracker_store() -> TrackerStore\n\nReturns the fallback tracker store.\n\non_tracker_store_error#\n\nCopydef on_tracker_store_error(error: Exception) -> None\n\nCalls the callback when there is an error in the primary tracker store.\n\nretrieve#\n\nCopyasync def retrieve(sender_id: Text) -> Optional[DialogueStateTracker]\n\nCalls retrieve method of primary tracker store.\n\nkeys#", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1073": {"text": "Calls retrieve method of primary tracker store.\n\nkeys#\n\nCopyasync def keys() -> Iterable[Text]\n\nCalls keys method of primary tracker store.\n\nsave#\n\nCopyasync def save(tracker: DialogueStateTracker) -> None\n\nCalls save method of primary tracker store.\n\nretrieve_full_tracker#\n\nCopyasync def retrieve_full_tracker(        sender_id: Text) -> Optional[DialogueStateTracker]\n\nCalls retrieve_full_tracker method of primary tracker store.\n\nArguments:\n\nsender_id - The sender id of the tracker to retrieve.\n\non_tracker_store_retrieve_error#\n\nCopydef on_tracker_store_retrieve_error(error: Exception) -> None\n\nCalls _on_tracker_store_error callable attribute if set.\n\nOtherwise, logs the error.\n\nArguments:\n\nerror - The error that occurred.\n\ncreate_tracker_store#\n\nCopydef create_tracker_store(        endpoint_config: Optional[EndpointConfig],        domain: Optional[Domain] = None,        event_broker: Optional[EventBroker] = None) -> TrackerStore\n\nCreates a tracker store based on the current configuration.\n\nAwaitableTrackerStore Objects#\n\nCopyclass AwaitableTrackerStore(TrackerStore)\n\nWraps a tracker store so it can be implemented with async overrides.\n\n__init__#\n\nCopydef __init__(tracker_store: TrackerStore) -> None\n\nCreate a AwaitableTrackerStore.\n\nArguments:\n\ntracker_store - the wrapped tracker store.\n\ndomain#\n\nCopy@propertydef domain() -> Domain", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1074": {"text": "domain#\n\nCopy@propertydef domain() -> Domain\n\nReturns the domain of the primary tracker store.\n\ndomain#\n\nCopy@domain.setterdef domain(domain: Optional[Domain]) -> None\n\nSetter method to modify the wrapped tracker store's domain field.\n\ncreate#\n\nCopy@staticmethoddef create(obj: Union[TrackerStore, EndpointConfig, None],           domain: Optional[Domain] = None,           event_broker: Optional[EventBroker] = None) -> TrackerStore\n\nWrapper to call create method of primary tracker store.\n\nretrieve#\n\nCopyasync def retrieve(sender_id: Text) -> Optional[DialogueStateTracker]\n\nWrapper to call retrieve method of primary tracker store.\n\nkeys#\n\nCopyasync def keys() -> Iterable[Text]\n\nWrapper to call keys method of primary tracker store.\n\nsave#\n\nCopyasync def save(tracker: DialogueStateTracker) -> None\n\nWrapper to call save method of primary tracker store.\n\nretrieve_full_tracker#\n\nCopyasync def retrieve_full_tracker(        conversation_id: Text) -> Optional[DialogueStateTracker]\n\nWrapper to call retrieve_full_tracker method of primary tracker store.\n\nPrevious\u00ab rasa.core.testNextrasa.core.trackers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1075": {"text": "Version: 3.x\n\nrasa.core.trackers\n\nEventVerbosity Objects#\n\nCopyclass EventVerbosity(Enum)\n\nFilter on which events to include in tracker dumps.\n\nAnySlotDict Objects#\n\nCopyclass AnySlotDict(dict)\n\nA slot dictionary that pretends every slot exists, by creating slots on demand.\n\nThis only uses the generic slot type! This means certain functionality wont work,\ne.g. properly featurizing the slot.\n\nDialogueStateTracker Objects#\n\nCopyclass DialogueStateTracker()\n\nMaintains the state of a conversation.\n\nThe field max_event_history will only give you these last events,\nit can be set in the tracker_store\n\nfrom_dict#\n\nCopy | @classmethod | from_dict(cls, sender_id: Text, events_as_dict: List[Dict[Text, Any]], slots: Optional[List[Slot]] = None, max_event_history: Optional[int] = None) -> \"DialogueStateTracker\"\n\nCreate a tracker from dump.\n\nThe dump should be an array of dumped events. When restoring\nthe tracker, these events will be replayed to recreate the state.\n\n__init__#\n\nCopy | __init__(sender_id: Text, slots: Optional[Iterable[Slot]], max_event_history: Optional[int] = None, sender_source: Optional[Text] = None, is_rule_tracker: bool = False) -> None\n\nInitialize the tracker.\n\nA set of events can be stored externally, and we will run through all\nof them to get the current state. The tracker will represent all the\ninformation we captured while processing messages of the dialogue.\n\ncurrent_state#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1076": {"text": "current_state#\n\nCopy | current_state(event_verbosity: EventVerbosity = EventVerbosity.NONE) -> Dict[Text, Any]\n\nReturn the current tracker state as an object.\n\npast_states#\n\nCopy | past_states(domain: Domain) -> List[State]\n\nGenerate the past states of this tracker based on the history.\n\nArguments:\n\ndomain - a :class:rasa.core.domain.Domain\n\nReturns:\n\n  a list of states\n\nchange_loop_to#\n\nCopy | change_loop_to(loop_name: Text) -> None\n\nSet the currently active loop.\n\nArguments:\n\nloop_name - The name of loop which should be marked as active.\n\nset_form_validation#\n\nCopy | set_form_validation(validate: bool) -> None\n\nToggle form validation\n\nreject_action#\n\nCopy | reject_action(action_name: Text) -> None\n\nNotify active loop that it was rejected\n\nset_latest_action#\n\nCopy | set_latest_action(action: Dict[Text, Text]) -> None\n\nSet latest action name\nand reset form validation and rejection parameters\n\ncurrent_slot_values#\n\nCopy | current_slot_values() -> Dict[Text, Any]\n\nReturn the currently set values of the slots\n\nget_slot#\n\nCopy | get_slot(key: Text) -> Optional[Any]\n\nRetrieves the value of a slot.\n\nget_latest_entity_values#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1077": {"text": "get_latest_entity_values#\n\nCopy | get_latest_entity_values(entity_type: Text, entity_role: Optional[Text] = None, entity_group: Optional[Text] = None) -> Iterator[Text]\n\nGet entity values found for the passed entity type and optional role and\ngroup in latest message.\n\nIf you are only interested in the first entity of a given type use\nnext(tracker.get_latest_entity_values(&quot;my_entity_name&quot;), None).\nIf no entity is found None is the default result.\n\nArguments:\n\nentity_type - the entity type of interestentity_role - optional entity role of interestentity_group - optional entity group of interest\n\nReturns:\n\n  Entity values.\n\nget_latest_input_channel#\n\nCopy | get_latest_input_channel() -> Optional[Text]\n\nGet the name of the input_channel of the latest UserUttered event\n\nis_paused#\n\nCopy | is_paused() -> bool\n\nState whether the tracker is currently paused.\n\nidx_after_latest_restart#\n\nCopy | idx_after_latest_restart() -> int\n\nReturn the idx of the most recent restart in the list of events.\n\nIf the conversation has not been restarted, 0 is returned.\n\nevents_after_latest_restart#\n\nCopy | events_after_latest_restart() -> List[Event]\n\nReturn a list of events after the most recent restart.\n\ninit_copy#\n\nCopy | init_copy() -> \"DialogueStateTracker\"\n\nCreates a new state tracker with the same initial values.\n\ngenerate_all_prior_trackers#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1078": {"text": "generate_all_prior_trackers#\n\nCopy | generate_all_prior_trackers() -> Generator[\"DialogueStateTracker\", None, None]\n\nReturns a generator of the previous trackers of this tracker.\n\nThe resulting array is representing the trackers before each action.\n\napplied_events#\n\nCopy | applied_events() -> List[Event]\n\nReturns all actions that should be applied - w/o reverted events.\n\nreplay_events#\n\nCopy | replay_events() -> None\n\nUpdate the tracker based on a list of events.\n\nrecreate_from_dialogue#\n\nCopy | recreate_from_dialogue(dialogue: Dialogue) -> None\n\nUse a serialised Dialogue to update the trackers state.\n\nThis uses the state as is persisted in a TrackerStore. If the\ntracker is blank before calling this method, the final state will be\nidentical to the tracker from which the dialogue was created.\n\ncopy#\n\nCopy | copy() -> \"DialogueStateTracker\"\n\nCreates a duplicate of this tracker\n\ntravel_back_in_time#\n\nCopy | travel_back_in_time(target_time: float) -> \"DialogueStateTracker\"\n\nCreates a new tracker with a state at a specific timestamp.\n\nA new tracker will be created and all events previous to the\npassed time stamp will be replayed. Events that occur exactly\nat the target time will be included.\n\nas_dialogue#\n\nCopy | as_dialogue() -> Dialogue\n\nReturn a Dialogue object containing all of the turns.\n\nThis can be serialised and later used to recover the state\nof this tracker exactly.\n\nupdate#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1079": {"text": "update#\n\nCopy | update(event: Event, domain: Optional[Domain] = None) -> None\n\nModify the state of the tracker according to an Event.\n\nas_story#\n\nCopy | as_story(include_source: bool = False) -> \"Story\"\n\nDump the tracker as a story in the Rasa Core story format.\n\nReturns the dumped tracker as a string.\n\nexport_stories#\n\nCopy | export_stories(e2e: bool = False, include_source: bool = False) -> Text\n\nDump the tracker as a story in the Rasa Core story format.\n\nReturns:\n\n  The dumped tracker as a string.\n\nexport_stories_to_file#\n\nCopy | export_stories_to_file(export_path: Text = \"debug.md\") -> None\n\nDump the tracker as a story to a file.\n\nget_last_event_for#\n\nCopy | get_last_event_for(event_type: Type[Event], action_names_to_exclude: List[Text] = None, skip: int = 0, event_verbosity: EventVerbosity = EventVerbosity.APPLIED) -> Optional[Event]\n\nGets the last event of a given type which was actually applied.\n\nArguments:\n\nevent_type - The type of event you want to find.action_names_to_exclude - Events of type ActionExecuted which\nshould be excluded from the results. Can be used to skip\naction_listen events.skip - Skips n possible results before return an event.event_verbosity - Which EventVerbosity should be used to search for events.\n\nReturns:\n\n  event which matched the query or None if no event matched.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1080": {"text": "Returns:\n\n  event which matched the query or None if no event matched.\n\nlast_executed_action_has#\n\nCopy | last_executed_action_has(name: Text, skip: int = 0) -> bool\n\nReturns whether last ActionExecuted event had a specific name.\n\nArguments:\n\nname - Name of the event which should be matched.skip - Skips n possible results in between.\n\nReturns:\n\n True if last executed action had name name, otherwise False.\n\ntrigger_followup_action#\n\nCopy | trigger_followup_action(action: Text) -> None\n\nTriggers another action following the execution of the current.\n\nclear_followup_action#\n\nCopy | clear_followup_action() -> None\n\nClears follow up action when it was executed.\n\nactive_loop_name#\n\nCopy | @property | active_loop_name() -> Optional[Text]\n\nGet the name of the currently active loop.\n\nReturns: None if no active loop or the name of the currently active loop.\n\nlatest_action_name#\n\nCopy | @property | latest_action_name() -> Optional[Text]\n\nGet the name of the previously executed action or text of e2e action.\n\nReturns: name of the previously executed action or text of e2e action\n\nget_active_loop_name#\n\nCopyget_active_loop_name(state: State) -> Optional[Text]\n\nGet the name of current active loop.\n\nArguments:\n\nstate - The state from which the name of active loop should be extracted\n\nReturns:\n\n  the name of active loop or None\n\nis_prev_action_listen_in_state#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1081": {"text": "is_prev_action_listen_in_state#\n\nCopyis_prev_action_listen_in_state(state: State) -> bool\n\nCheck if action_listen is the previous executed action.\n\nArguments:\n\nstate - The state for which the check should be performed\n\nReturns:\n\n  boolean value indicating whether action_listen is previous action\n\nPrevious\u00ab rasa.core.tracker_storeNextrasa.core.train \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1082": {"text": "Version: 3.x\n\nrasa.core.train\n\ntrain_comparison_models#\n\nCopydef train_comparison_models(        story_file: Text,        domain: Text,        output_path: Text = \"\",        exclusion_percentages: Optional[List] = None,        policy_configs: Optional[List] = None,        runs: int = 1,        additional_arguments: Optional[Dict] = None) -> None\n\nTrains multiple models for comparison of policies.\n\nget_no_of_stories#\n\nCopydef get_no_of_stories(story_file: Text, domain: Text) -> int\n\nGets number of stories in a file.\n\ndo_compare_training#\n\nCopydef do_compare_training(args: argparse.Namespace,                        story_file: Text,                        additional_arguments: Optional[Dict] = None) -> None\n\nTrain multiple models for comparison of policies and dumps the result.\n\nPrevious\u00ab rasa.core.trackersNextrasa.core.utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1083": {"text": "Version: 3.x\n\nrasa.core.utils\n\nconfigure_file_logging#\n\nCopydef configure_file_logging(logger_obj: logging.Logger,                           log_file: Optional[Text],                           use_syslog: Optional[bool],                           syslog_address: Optional[Text] = None,                           syslog_port: Optional[int] = None,                           syslog_protocol: Optional[Text] = None) -> None\n\nConfigure logging to a file.\n\nArguments:\n\nlogger_obj - Logger object to configure.log_file - Path of log file to write to.use_syslog - Add syslog as a logger.syslog_address - Adress of the syslog server.syslog_port - Port of the syslog server.syslog_protocol - Protocol with the syslog server\n\none_hot#\n\nCopydef one_hot(hot_idx: int,            length: int,            dtype: Optional[Text] = None) -> np.ndarray\n\nCreate a one-hot array.\n\nArguments:\n\nhot_idx - Index of the hot element.length - Length of the array.dtype - numpy.dtype of the array.\n\nReturns:\n\n  One-hot array.\n\ndump_obj_as_yaml_to_file#\n\nCopydef dump_obj_as_yaml_to_file(filename: Union[Text, Path],                             obj: Any,                             should_preserve_key_order: bool = False) -> None\n\nWrites obj to the filename in YAML repr.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1084": {"text": "Writes obj to the filename in YAML repr.\n\nArguments:\n\nfilename - Target filename.obj - Object to dump.should_preserve_key_order - Whether to preserve key order in obj.\n\nlist_routes#\n\nCopydef list_routes(app: Sanic) -> Dict[Text, Text]\n\nList all the routes of a sanic application. Mainly used for debugging.\n\nextract_args#\n\nCopydef extract_args(        kwargs: Dict[Text, Any],        keys_to_extract: Set[Text]) -> Tuple[Dict[Text, Any], Dict[Text, Any]]\n\nGo through the kwargs and filter out the specified keys.\n\nReturn both, the filtered kwargs as well as the remaining kwargs.\n\nis_limit_reached#\n\nCopydef is_limit_reached(num_messages: int, limit: Optional[int]) -> bool\n\nDetermine whether the number of messages has reached a limit.\n\nArguments:\n\nnum_messages - The number of messages to check.limit - Limit on the number of messages.\n\nReturns:\n\n True if the limit has been reached, otherwise False.\n\nfile_as_bytes#\n\nCopydef file_as_bytes(path: Text) -> bytes\n\nRead in a file as a byte array.\n\nAvailableEndpoints Objects#\n\nCopyclass AvailableEndpoints()\n\nCollection of configured endpoints.\n\nread_endpoints#\n\nCopy@classmethoddef read_endpoints(cls, endpoint_file: Text) -> \"AvailableEndpoints\"\n\nRead the different endpoints from a yaml file.\n\n__init__#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1085": {"text": "Read the different endpoints from a yaml file.\n\n__init__#\n\nCopydef __init__(nlg: Optional[EndpointConfig] = None,             nlu: Optional[EndpointConfig] = None,             action: Optional[EndpointConfig] = None,             model: Optional[EndpointConfig] = None,             tracker_store: Optional[EndpointConfig] = None,             lock_store: Optional[EndpointConfig] = None,             event_broker: Optional[EndpointConfig] = None) -> None\n\nCreate an AvailableEndpoints object.\n\nread_endpoints_from_path#\n\nCopydef read_endpoints_from_path(        endpoints_path: Optional[Union[Path,                                       Text]] = None) -> AvailableEndpoints\n\nGet AvailableEndpoints object from specified path.\n\nArguments:\n\nendpoints_path - Path of the endpoints file to be read. If None the\ndefault path for that file is used (endpoints.yml).\n\nReturns:\n\n AvailableEndpoints object read from endpoints file.\n\nreplace_floats_with_decimals#\n\nCopydef replace_floats_with_decimals(obj: Any, round_digits: int = 9) -> Any\n\nConvert all instances in obj of float to Decimal.\n\nArguments:\n\nobj - Input object.round_digits - Rounding precision of Decimal values.\n\nReturns:\n\n  Input obj with all float types replaced by Decimals rounded to\nround_digits decimal places.\n\nDecimalEncoder Objects#\n\nCopyclass DecimalEncoder(json.JSONEncoder)\n\njson.JSONEncoder that dumps Decimals as floats.\n\ndefault#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1086": {"text": "json.JSONEncoder that dumps Decimals as floats.\n\ndefault#\n\nCopydef default(obj: Any) -> Any\n\nGet serializable object for o.\n\nArguments:\n\nobj - Object to serialize.\n\nReturns:\n\n obj converted to float if o is a Decimals, else the base class\ndefault() method.\n\nreplace_decimals_with_floats#\n\nCopydef replace_decimals_with_floats(obj: Any) -> Any\n\nConvert all instances in obj of Decimal to float.\n\nArguments:\n\nobj - A List or Dict object.\n\nReturns:\n\n  Input obj with all Decimal types replaced by floats.\n\nnumber_of_sanic_workers#\n\nCopydef number_of_sanic_workers(        lock_store: Union[EndpointConfig, LockStore, None]) -> int\n\nGet the number of Sanic workers to use in app.run().\n\nIf the environment variable constants.ENV_SANIC_WORKERS is set and is not equal to\n1, that value will only be permitted if the used lock store is not the\nInMemoryLockStore.\n\nPrevious\u00ab rasa.core.trainNextrasa.core.visualize \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1087": {"text": "Version: 3.x\n\nrasa.core.visualize\n\nvisualize#\n\nCopydef visualize(domain_path: Text, stories_path: Text, nlu_data_path: Text,              output_path: Text, max_history: int) -> None\n\nVisualizes stories as graph.\n\nArguments:\n\ndomain_path - Path to the domain file.stories_path - Path to the stories files.nlu_data_path - Path to the NLU training data which can be used to interpolate\nintents with actual examples in the graph.output_path - Path where the created graph should be persisted.max_history - Max history to use for the story visualization.\n\nPrevious\u00ab rasa.core.utilsNextrasa.engine.recipes.default_recipe \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1088": {"text": "Version: 3.x\n\nrasa.engine.recipes.default_recipe\n\nDefaultV1RecipeRegisterException Objects#\n\nCopyclass DefaultV1RecipeRegisterException(RasaException)\n\nIf you register a class which is not of type GraphComponent.\n\nDefaultV1Recipe Objects#\n\nCopyclass DefaultV1Recipe(Recipe)\n\nRecipe which converts the normal model config to train and predict graph.\n\nComponentType Objects#\n\nCopy@enum.uniqueclass ComponentType(Enum)\n\nEnum to categorize and place custom components correctly in the graph.\n\n__init__#\n\nCopydef __init__() -> None\n\nCreates recipe.\n\nRegisteredComponent Objects#\n\nCopy@dataclasses.dataclass()class RegisteredComponent()\n\nDescribes a graph component which was registered with the decorator.\n\nregister#\n\nCopy@classmethoddef register(    cls,    component_types: Union[ComponentType, List[ComponentType]],    is_trainable: bool,    model_from: Optional[Text] = None) -> Callable[[Type[GraphComponent]], Type[GraphComponent]]\n\nThis decorator can be used to register classes with the recipe.\n\nArguments:\n\ncomponent_types - Describes the types of a component which are then used\nto place the component in the graph.is_trainable - True if the component requires training.model_from - Can be used if this component requires a pre-loaded model\nsuch as SpacyNLP or MitieNLP.\n\nReturns:\n\n  The registered class.\n\ngraph_config_for_recipe#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1089": {"text": "The registered class.\n\ngraph_config_for_recipe#\n\nCopydef graph_config_for_recipe(        config: Dict,        cli_parameters: Dict[Text, Any],        training_type: TrainingType = TrainingType.BOTH,        is_finetuning: bool = False) -> GraphModelConfiguration\n\nConverts the default config to graphs (see interface for full docstring).\n\nauto_configure#\n\nCopy@staticmethoddef auto_configure(    config_file_path: Optional[Text],    config: Dict,    training_type: Optional[TrainingType] = TrainingType.BOTH) -> Tuple[Dict[Text, Any], Set[str], Set[str]]\n\nDetermine configuration from auto-filled configuration file.\n\nKeys that are provided and have a value in the file are kept. Keys that are not\nprovided are configured automatically.\n\nNote that this needs to be called explicitly; ie. we cannot\nauto-configure automatically from importers because importers are not\nallowed to access code outside of rasa.shared.\n\nArguments:\n\nconfig_file_path - The path to the configuration file.config - Configuration in dictionary format.training_type - Optional training type to auto-configure. By default\nboth core and NLU will be auto-configured.\n\ncomplete_config#\n\nCopy@staticmethoddef complete_config(config: Dict[Text, Any],                    keys_to_configure: Set[Text]) -> Dict[Text, Any]\n\nComplete a config by adding automatic configuration for the specified keys.\n\nArguments:\n\nconfig - The provided configuration.keys_to_configure - Keys to be configured automatically (e.g. policies).\n\nReturns:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1090": {"text": "Returns:\n\n  The resulting configuration including both the provided and\nthe automatically configured keys.\n\nPrevious\u00ab rasa.core.visualizeNextrasa.engine.recipes.graph_recipe \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1091": {"text": "Version: 3.x\n\nrasa.engine.recipes.graph_recipe\n\nGraphV1Recipe Objects#\n\nCopyclass GraphV1Recipe(Recipe)\n\nRecipe which converts the graph model config to train and predict graph.\n\nget_targets#\n\nCopydef get_targets(config: Dict, training_type: TrainingType) -> Tuple[Text, Any]\n\nReturn NLU and core targets from config dictionary.\n\nNote that default recipe has nlu_target and core_target as\nfixed values of run_RegexMessageHandler and select_prediction\nrespectively. For graph recipe, target values are customizable. These\ncan be used in validation (default recipe does this validation check)\nand during execution (all recipes use targets during execution).\n\ngraph_config_for_recipe#\n\nCopydef graph_config_for_recipe(        config: Dict,        cli_parameters: Dict[Text, Any],        training_type: TrainingType = TrainingType.BOTH,        is_finetuning: bool = False) -> GraphModelConfiguration\n\nConverts the default config to graphs (see interface for full docstring).\n\nPrevious\u00ab rasa.engine.recipes.default_recipeNextrasa.engine.recipes.recipe \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1092": {"text": "Version: 3.x\n\nrasa.engine.recipes.recipe\n\nInvalidRecipeException Objects#\n\nCopyclass InvalidRecipeException(RasaException)\n\nException in case the specified recipe is invalid.\n\nRecipe Objects#\n\nCopyclass Recipe(abc.ABC)\n\nBase class for Recipes which convert configs to graph schemas.\n\nrecipe_for_name#\n\nCopy@staticmethoddef recipe_for_name(name: Optional[Text]) -> Recipe\n\nReturns Recipe based on an optional recipe identifier.\n\nArguments:\n\nname - The identifier which is used to select a certain Recipe. If None\nthe default recipe will be used.\n\nReturns:\n\n  A recipe which can be used to convert a given config to train and predict\ngraph schemas.\n\nauto_configure#\n\nCopy@staticmethoddef auto_configure(    config_file_path: Optional[Text],    config: Dict,    training_type: Optional[TrainingType] = TrainingType.BOTH) -> Tuple[Dict[Text, Any], Set[str], Set[str]]\n\nAdds missing options with defaults and dumps the configuration.\n\nOverride in child classes if this functionality is needed, each recipe\nwill have different auto configuration values.\n\ngraph_config_for_recipe#\n\nCopy@abc.abstractmethoddef graph_config_for_recipe(        config: Dict,        cli_parameters: Dict[Text, Any],        training_type: TrainingType = TrainingType.BOTH,        is_finetuning: bool = False) -> GraphModelConfiguration\n\nConverts a config to a graph compatible model configuration.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1093": {"text": "Converts a config to a graph compatible model configuration.\n\nArguments:\n\nconfig - The config which the Recipe is supposed to convert.cli_parameters - Potential CLI params which should be interpolated into the\ncomponents configs.training_type - The current training type. Can be used to omit / add certain\nparts of the graphs.is_finetuning - If True then the components should load themselves from\ntrained version of themselves instead of using create to start from\nscratch.\n\nReturns:\n\n  The model configuration which enables to run the model as a graph for\ntraining and prediction.\n\nPrevious\u00ab rasa.engine.recipes.graph_recipeNextrasa.engine.runner.dask \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1094": {"text": "Version: 3.x\n\nrasa.engine.runner.dask\n\nDaskGraphRunner Objects#\n\nCopyclass DaskGraphRunner(GraphRunner)\n\nDask implementation of a GraphRunner.\n\n__init__#\n\nCopydef __init__(graph_schema: GraphSchema,             model_storage: ModelStorage,             execution_context: ExecutionContext,             hooks: Optional[List[GraphNodeHook]] = None) -> None\n\nInitializes a DaskGraphRunner.\n\nArguments:\n\ngraph_schema - The graph schema that will be run.model_storage - Storage which graph components can use to persist and load\nthemselves.execution_context - Information about the current graph run to be passed to\neach node.hooks - These are called before and after the execution of each node.\n\ncreate#\n\nCopy@classmethoddef create(cls,           graph_schema: GraphSchema,           model_storage: ModelStorage,           execution_context: ExecutionContext,           hooks: Optional[List[GraphNodeHook]] = None) -> DaskGraphRunner\n\nCreates the runner (see parent class for full docstring).\n\nrun#\n\nCopydef run(inputs: Optional[Dict[Text, Any]] = None,        targets: Optional[List[Text]] = None) -> Dict[Text, Any]\n\nRuns the graph (see parent class for full docstring).\n\nPrevious\u00ab rasa.engine.recipes.recipeNextrasa.engine.runner.interface \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1095": {"text": "Version: 3.x\n\nrasa.engine.runner.interface\n\nGraphRunner Objects#\n\nCopyclass GraphRunner(ABC)\n\nA GraphRunner is responsible for running a GraphSchema.\n\ncreate#\n\nCopy@classmethod@abstractmethoddef create(cls,           graph_schema: GraphSchema,           model_storage: ModelStorage,           execution_context: ExecutionContext,           hooks: Optional[List[GraphNodeHook]] = None) -> GraphRunner\n\nCreates a new instance of a GraphRunner.\n\nArguments:\n\ngraph_schema - The graph schema that will be instantiated and run.model_storage - Storage which graph components can use to persist and load\nthemselves.execution_context - Context that will be passed to every GraphComponent.hooks - These are called before and after the execution of each node.Returns - Instantiated GraphRunner\n\nrun#\n\nCopy@abstractmethoddef run(inputs: Optional[Dict[Text, Any]] = None,        targets: Optional[List[Text]] = None) -> Dict[Text, Any]\n\nRuns the instantiated graph with the given inputs and targets.\n\nArguments:\n\ninputs - Input nodes to be added to the graph. These can be referenced by\nname in the \"needs\" key of a node in the schema.targets - Nodes whose output is needed and must always run.Returns - A mapping of target node name to output value.\n\nPrevious\u00ab rasa.engine.runner.daskNextrasa.engine.storage.local_model_storage \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1096": {"text": "Version: 3.x\n\nrasa.engine.storage.local_model_storage\n\nwindows_safe_temporary_directory#\n\nCopy@contextmanagerdef windows_safe_temporary_directory(        suffix: Optional[Text] = None,        prefix: Optional[Text] = None, dir: Optional[Text] = None) -> Generator[Text, None, None]\n\nLike tempfile.TemporaryDirectory, but works with Windows and long file names.\n\nOn Windows by default there is a restriction on long path names.\nUsing the prefix below allows to bypass this restriction in environments\nwhere it's not possible to override this behavior, mostly for internal\npolicy reasons.\n\nReference: https://stackoverflow.com/a/49102229\n\nLocalModelStorage Objects#\n\nCopyclass LocalModelStorage(ModelStorage)\n\nStores and provides output of GraphComponents on local disk.\n\n__init__#\n\nCopydef __init__(storage_path: Path) -> None\n\nCreates storage (see parent class for full docstring).\n\ncreate#\n\nCopy@classmethoddef create(cls, storage_path: Path) -> ModelStorage\n\nCreates a new instance (see parent class for full docstring).\n\nfrom_model_archive#\n\nCopy@classmethoddef from_model_archive(    cls, storage_path: Path, model_archive_path: Union[Text, Path]) -> Tuple[LocalModelStorage, ModelMetadata]\n\nInitializes storage from archive (see parent class for full docstring).\n\nmetadata_from_archive#\n\nCopy@classmethoddef metadata_from_archive(        cls, model_archive_path: Union[Text, Path]) -> ModelMetadata", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1097": {"text": "Retrieves metadata from archive (see parent class for full docstring).\n\nwrite_to#\n\nCopy@contextmanagerdef write_to(resource: Resource) -> Generator[Path, None, None]\n\nPersists data for a resource (see parent class for full docstring).\n\nread_from#\n\nCopy@contextmanagerdef read_from(resource: Resource) -> Generator[Path, None, None]\n\nProvides the data of a Resource (see parent class for full docstring).\n\ncreate_model_package#\n\nCopydef create_model_package(model_archive_path: Union[Text, Path],                         model_configuration: GraphModelConfiguration,                         domain: Domain) -> ModelMetadata\n\nCreates model package (see parent class for full docstring).\n\nPrevious\u00ab rasa.engine.runner.interfaceNextrasa.engine.storage.resource \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1098": {"text": "Version: 3.x\n\nrasa.engine.storage.resource\n\nResource Objects#\n\nCopy@dataclassclass Resource()\n\nRepresents a persisted graph component in the graph.\n\nAttributes:\n\nname - The unique identifier for the Resource. Used to locate the associated\ndata from a ModelStorage. Normally matches the name of the node which\ncreated it.output_fingerprint - An unique identifier for a specific instantiation of a\nResource. Used to distinguish a specific persistence for the same\nResource when saving to the cache.\n\nfrom_cache#\n\nCopy@classmethoddef from_cache(cls, node_name: Text, directory: Path,               model_storage: ModelStorage,               output_fingerprint: Text) -> Resource\n\nLoads a Resource from the cache.\n\nThis automatically loads the persisted resource into the given ModelStorage.\n\nArguments:\n\nnode_name - The node name of the Resource.directory - The directory with the cached Resource.model_storage - The ModelStorage which the cached Resource will be added\nto so that the Resource is accessible for other graph nodes.ModelStorage0 - The fingerprint of the cached Resource.\n\nReturns:\n\n  The ready-to-use and accessible Resource.\n\nto_cache#\n\nCopydef to_cache(directory: Path, model_storage: ModelStorage) -> None\n\nPersists the Resource to the cache.\n\nArguments:\n\ndirectory - The directory which receives the persisted Resource.model_storage - The model storage which currently contains the persisted\nResource.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nProvides fingerprint for Resource.\n\nA unique fingerprint is created on initialization of a Resource however we\nalso allow a value to be provided for when we retrieve a Resource from the\ncache (see Resource.from_cache).", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1099": {"text": "Returns:\n\n  Fingerprint for Resource.\n\nPrevious\u00ab rasa.engine.storage.local_model_storageNextrasa.engine.storage.storage \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1100": {"text": "Version: 3.x\n\nrasa.engine.storage.storage\n\nModelStorage Objects#\n\nCopyclass ModelStorage(abc.ABC)\n\nServes as storage backend for GraphComponents which need persistence.\n\ncreate#\n\nCopy@classmethod@abc.abstractmethoddef create(cls, storage_path: Path) -> ModelStorage\n\nCreates the storage.\n\nArguments:\n\nstorage_path - Directory which will contain the persisted graph components.\n\nfrom_model_archive#\n\nCopy@classmethod@abc.abstractmethoddef from_model_archive(    cls, storage_path: Path,    model_archive_path: Union[Text,                              Path]) -> Tuple[ModelStorage, ModelMetadata]\n\nUnpacks a model archive and initializes a ModelStorage.\n\nArguments:\n\nstorage_path - Directory which will contain the persisted graph components.model_archive_path - The path to the model archive.\n\nReturns:\n\n  Initialized model storage, and metadata about the model.\n\nRaises:\n\n UnsupportedModelError if the loaded meta data indicates that the model\nhas been created with an outdated Rasa version.\n\nmetadata_from_archive#\n\nCopy@classmethod@abc.abstractmethoddef metadata_from_archive(        cls, model_archive_path: Union[Text, Path]) -> ModelMetadata\n\nRetrieves metadata from archive.\n\nArguments:\n\nmodel_archive_path - The path to the model archive.\n\nReturns:\n\n  Metadata about the model.\n\nRaises:\n\n UnsupportedModelError if the loaded meta data indicates that the model\nhas been created with an outdated Rasa version.\n\nwrite_to#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1101": {"text": "write_to#\n\nCopy@contextmanager@abc.abstractmethoddef write_to(resource: Resource) -> Generator[Path, None, None]\n\nPersists data for a given resource.\n\nThis Resource can then be accessed in dependent graph nodes via\nmodel_storage.read_from.\n\nArguments:\n\nresource - The resource which should be persisted.\n\nReturns:\n\n  A directory which can be used to persist data for the given Resource.\n\nread_from#\n\nCopy@contextmanager@abc.abstractmethoddef read_from(resource: Resource) -> Generator[Path, None, None]\n\nProvides the data of a persisted Resource.\n\nArguments:\n\nresource - The Resource whose persisted should be accessed.\n\nReturns:\n\n  A directory containing the data of the persisted Resource.\n\nRaises:\n\nValueError - In case no persisted data for the given Resource exists.\n\ncreate_model_package#\n\nCopy@abc.abstractmethoddef create_model_package(model_archive_path: Union[Text, Path],                         model_configuration: GraphModelConfiguration,                         domain: Domain) -> ModelMetadata\n\nCreates a model archive containing all data to load and run the model.\n\nArguments:\n\nmodel_archive_path - The path to the archive which should be created.model_configuration - The model configuration (schemas, language, etc.)domain - The Domain which was used to train the model.\n\nReturns:\n\n  The model metadata.\n\nModelMetadata Objects#\n\nCopy@dataclass()class ModelMetadata()\n\nDescribes a trained model.\n\n__post_init__#\n\nCopydef __post_init__() -> None", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1102": {"text": "__post_init__#\n\nCopydef __post_init__() -> None\n\nRaises an exception when the metadata indicates an unsupported version.\n\nRaises:\n\n UnsupportedModelException if the rasa_open_source_version is lower\nthan the minimum compatible version\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serializable version of the ModelMetadata.\n\nfrom_dict#\n\nCopy@classmethoddef from_dict(cls, serialized: Dict[Text, Any]) -> ModelMetadata\n\nLoads ModelMetadata which has been serialized using metadata.as_dict().\n\nArguments:\n\nserialized - Serialized ModelMetadata (e.g. read from disk).\n\nReturns:\n\n  Instantiated ModelMetadata.\n\nPrevious\u00ab rasa.engine.storage.resourceNextrasa.engine.training.components \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1103": {"text": "Version: 3.x\n\nrasa.engine.training.components\n\nPrecomputedValueProvider Objects#\n\nCopyclass PrecomputedValueProvider(GraphComponent)\n\nHolds the precomputed values of a GraphNode from a previous training.\n\nPre-computed values can either be\n\nvalues loaded from cachevalues which were provided during the fingerprint run by input nodes\n\n__init__#\n\nCopydef __init__(output: Cacheable)\n\nInitializes a PrecomputedValueProvider.\n\nArguments:\n\noutput - The precomputed output to return.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> PrecomputedValueProvider\n\nCreates instance (see parent class for full docstring).\n\nget_value#\n\nCopydef get_value() -> Cacheable\n\nReturns the precomputed output.\n\nreplace_schema_node#\n\nCopy@classmethoddef replace_schema_node(cls, node: SchemaNode, output: Any) -> None\n\nUpdates a SchemaNode to use a PrecomputedValueProvider.\n\nThis is for when we want to use the precomputed output value of a node from a\nprevious training in a subsequent training. We replace the class in the uses\nof the node to a be a PrecomputedValueProvider configured to return the\nprecomputed value.\n\nArguments:\n\nnode - The node to update.output - precomputed cached output that the PrecomputedValueProvider will\nreturn.\n\nFingerprintStatus Objects#\n\nCopy@dataclasses.dataclassclass FingerprintStatus()", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1104": {"text": "Copy@dataclasses.dataclassclass FingerprintStatus()\n\nHolds the output of a FingerprintComponent and is used to prune the graph.\n\nAttributes:\n\noutput_fingerprint - A fingerprint of the node's output value.is_hit - True if node's fingerprint key exists in the cache, False otherwise.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns the internal fingerprint.\n\nIf there is no fingerprint returns a random string that will never match.\n\nFingerprintComponent Objects#\n\nCopyclass FingerprintComponent(GraphComponent)\n\nReplaces non-input nodes during a fingerprint run.\n\n__init__#\n\nCopydef __init__(cache: TrainingCache, config_of_replaced_component: Dict[Text,                                                                      Any],             class_of_replaced_component: Type) -> None\n\nInitializes a FingerprintComponent.\n\nArguments:\n\ncache - Training cache used to determine if the run is a hit or not.config_of_replaced_component - Needed to generate the fingerprint key.class_of_replaced_component - Needed to generate the fingerprint key.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> FingerprintComponent\n\nCreates a FingerprintComponent (see parent class for full docstring).\n\nrun#\n\nCopydef run(**kwargs: Any) -> FingerprintStatus\n\nCalculates the fingerprint key to determine if cached output can be used.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1105": {"text": "Calculates the fingerprint key to determine if cached output can be used.\n\nIf the fingerprint key matches an entry in the cache it means that there has\nbeen a previous node execution which matches the same component class, component\nconfig and input values. This means that we can potentially prune this node\nfrom the schema, or replace it with a cached value before the next graph run.\n\nArguments:\n\n**kwargs - Inputs from all parent nodes.\n\nReturns:\n\n  A FingerprintStatus determining if the run was a hit, and if it was a hit\nalso the output fingerprint from the cache.\n\nreplace_schema_node#\n\nCopy@classmethoddef replace_schema_node(cls, node: SchemaNode, cache: TrainingCache) -> None\n\nUpdates a SchemaNode to use a FingerprintComponent.\n\nThis is for when we want to do a fingerprint run. During the fingerprint run we\nreplace all non-input nodes with FingerprintComponents so we can determine\nwhether they are able to be pruned or cached before the next graph run without\nrunning the actual components.\n\nArguments:\n\nnode - The node to update.cache - The cache is needed to determine of there is cache hit for the\nfingerprint key.\n\nPrevious\u00ab rasa.engine.storage.storageNextrasa.engine.training.fingerprinting \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1106": {"text": "Version: 3.x\n\nrasa.engine.training.fingerprinting\n\nFingerprintable Objects#\n\nCopy@runtime_checkableclass Fingerprintable(Protocol)\n\nInterface that enforces training data can be fingerprinted.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns a unique stable fingerprint of the data.\n\ncalculate_fingerprint_key#\n\nCopydef calculate_fingerprint_key(graph_component_class: Type[GraphComponent],                              config: Dict[Text, Any],                              inputs: Dict[Text, Fingerprintable]) -> Text\n\nCalculates a fingerprint key that uniquely represents a single node's execution.\n\nArguments:\n\ngraph_component_class - The graph component class.config - The component config.inputs - The inputs as a mapping of parent node name to input value.\n\nReturns:\n\n  The fingerprint key.\n\nPrevious\u00ab rasa.engine.training.componentsNextrasa.engine.training.graph_trainer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1107": {"text": "Version: 3.x\n\nrasa.engine.training.graph_trainer\n\nGraphTrainer Objects#\n\nCopyclass GraphTrainer()\n\nTrains a model using a graph schema.\n\n__init__#\n\nCopydef __init__(model_storage: ModelStorage, cache: TrainingCache,             graph_runner_class: Type[GraphRunner]) -> None\n\nInitializes a GraphTrainer.\n\nArguments:\n\nmodel_storage - Storage which graph components can use to persist and load.\nAlso used for packaging the trained model.cache - Cache used to store fingerprints and outputs.graph_runner_class - The class to instantiate the runner from.\n\ntrain#\n\nCopydef train(model_configuration: GraphModelConfiguration,          importer: TrainingDataImporter,          output_filename: Path,          force_retraining: bool = False,          is_finetuning: bool = False) -> ModelMetadata\n\nTrains and packages a model and returns the prediction graph runner.\n\nArguments:\n\nmodel_configuration - The model configuration (schemas, language, etc.)importer - The importer which provides the training data for the training.output_filename - The location to save the packaged model.force_retraining - If True then the cache is skipped and all components\nare retrained.\n\nReturns:\n\n  The metadata describing the trained model.\n\nfingerprint#\n\nCopydef fingerprint(        train_schema: GraphSchema,        importer: TrainingDataImporter,        is_finetuning: bool = False) -> Dict[Text, Union[FingerprintStatus, Any]]\n\nRuns the graph using fingerprints to determine which nodes need to re-run.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1108": {"text": "Runs the graph using fingerprints to determine which nodes need to re-run.\n\nNodes which have a matching fingerprint key in the cache can either be removed\nentirely from the graph, or replaced with a cached value if their output is\nneeded by descendent nodes.\n\nArguments:\n\ntrain_schema - The train graph schema that will be run in fingerprint mode.importer - The importer which provides the training data for the training.is_finetuning - True if we want to finetune the model.\n\nReturns:\n\n  Mapping of node names to fingerprint results.\n\nPrevious\u00ab rasa.engine.training.fingerprintingNextrasa.engine.training.hooks \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1109": {"text": "Version: 3.x\n\nrasa.engine.training.hooks\n\nTrainingHook Objects#\n\nCopyclass TrainingHook(GraphNodeHook)\n\nCaches fingerprints and outputs of nodes during model training.\n\n__init__#\n\nCopydef __init__(cache: TrainingCache, model_storage: ModelStorage,             pruned_schema: GraphSchema) -> None\n\nInitializes a TrainingHook.\n\nArguments:\n\ncache - Cache used to store fingerprints and outputs.model_storage - Used to cache Resources.pruned_schema - The pruned training schema.\n\non_before_node#\n\nCopydef on_before_node(node_name: Text, execution_context: ExecutionContext,                   config: Dict[Text, Any],                   received_inputs: Dict[Text, Any]) -> Dict\n\nCalculates the run fingerprint for use in on_after_node.\n\non_after_node#\n\nCopydef on_after_node(node_name: Text, execution_context: ExecutionContext,                  config: Dict[Text, Any], output: Any,                  input_hook_data: Dict) -> None\n\nStores the fingerprints and caches the output of the node.\n\nLoggingHook Objects#\n\nCopyclass LoggingHook(GraphNodeHook)\n\nLogs the training of components.\n\n__init__#\n\nCopydef __init__(pruned_schema: GraphSchema) -> None\n\nCreates hook.\n\nArguments:\n\npruned_schema - The pruned schema provides us with the information whether\na component is cached or not.\n\non_before_node#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1110": {"text": "on_before_node#\n\nCopydef on_before_node(node_name: Text, execution_context: ExecutionContext,                   config: Dict[Text, Any],                   received_inputs: Dict[Text, Any]) -> Dict\n\nLogs the training start of a graph node.\n\non_after_node#\n\nCopydef on_after_node(node_name: Text, execution_context: ExecutionContext,                  config: Dict[Text, Any], output: Any,                  input_hook_data: Dict) -> None\n\nLogs when a component finished its training.\n\nPrevious\u00ab rasa.engine.training.graph_trainerNextrasa.engine.caching \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1111": {"text": "Version: 3.x\n\nrasa.engine.caching\n\nTrainingCache Objects#\n\nCopyclass TrainingCache(abc.ABC)\n\nStores training results in a persistent cache.\n\nUsed to minimize re-retraining when the data / config didn't change in between\ntraining runs.\n\ncache_output#\n\nCopy@abc.abstractmethoddef cache_output(fingerprint_key: Text, output: Any, output_fingerprint: Text,                 model_storage: ModelStorage) -> None\n\nAdds the output to the cache.\n\nIf the output is of type Cacheable the output is persisted to disk in addition\nto its fingerprint.\n\nArguments:\n\nfingerprint_key - The fingerprint key serves as key for the cache. Graph\ncomponents can use their fingerprint key to lookup fingerprints of\nprevious training runs.output - The output. The output is only cached to disk if it's of type\nCacheable.output_fingerprint - The fingerprint of their output. This can be used\nto lookup potentially persisted outputs on disk.model_storage - Required for caching Resource instances. E.g. Resources\nuse that to copy data from the model storage to the cache.\n\nget_cached_output_fingerprint#\n\nCopy@abc.abstractmethoddef get_cached_output_fingerprint(fingerprint_key: Text) -> Optional[Text]\n\nRetrieves fingerprint of output based on fingerprint key.\n\nArguments:\n\nfingerprint_key - The fingerprint serves as key for the lookup of output\nfingerprints.\n\nReturns:\n\n  The fingerprint of a matching output or None in case no cache entry was\nfound for the given fingerprint key.\n\nget_cached_result#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1112": {"text": "get_cached_result#\n\nCopy@abc.abstractmethoddef get_cached_result(output_fingerprint_key: Text, node_name: Text,                      model_storage: ModelStorage) -> Optional[Cacheable]\n\nReturns a potentially cached output result.\n\nArguments:\n\noutput_fingerprint_key - The fingerprint key of the output serves as lookup\nkey for a potentially cached version of this output.node_name - The name of the graph node which wants to use this cached result.model_storage - The current model storage (e.g. used when restoring\nResource objects so that they can fill the model storage with data).\n\nReturns:\n\n None if no matching result was found or restored Cacheable.\n\nCacheable Objects#\n\nCopy@runtime_checkableclass Cacheable(Protocol)\n\nProtocol for cacheable graph component outputs.\n\nWe only cache graph component outputs which are Cacheable. We only store the\noutput fingerprint for everything else.\n\nto_cache#\n\nCopydef to_cache(directory: Path, model_storage: ModelStorage) -> None\n\nPersists Cacheable to disk.\n\nArguments:\n\ndirectory - The directory where the Cacheable can persist itself to.model_storage - The current model storage (e.g. used when caching Resource\nobjects.\n\nfrom_cache#\n\nCopy@classmethoddef from_cache(cls, node_name: Text, directory: Path,               model_storage: ModelStorage,               output_fingerprint: Text) -> Cacheable\n\nLoads Cacheable from cache.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1113": {"text": "Loads Cacheable from cache.\n\nArguments:\n\nnode_name - The name of the graph node which wants to use this cached result.directory - Directory containing the persisted Cacheable.model_storage - The current model storage (e.g. used when restoring\nResource objects so that they can fill the model storage with data).output_fingerprint - The fingerprint of the cached result (e.g. used when\nrestoring Resource objects as the fingerprint can not be easily\ncalculated from the object itself).\n\nReturns:\n\n  Instantiated Cacheable.\n\nLocalTrainingCache Objects#\n\nCopyclass LocalTrainingCache(TrainingCache)\n\nCaches training results on local disk (see parent class for full docstring).\n\nCacheEntry Objects#\n\nCopyclass CacheEntry(Base)\n\nStores metadata about a single cache entry.\n\n__init__#\n\nCopydef __init__() -> None\n\nCreates cache.\n\nThe Cache setting can be configured via environment variables.\n\ncache_output#\n\nCopydef cache_output(fingerprint_key: Text, output: Any, output_fingerprint: Text,                 model_storage: ModelStorage) -> None\n\nAdds the output to the cache (see parent class for full docstring).\n\nget_cached_output_fingerprint#\n\nCopydef get_cached_output_fingerprint(fingerprint_key: Text) -> Optional[Text]\n\nReturns cached output fingerprint (see parent class for full docstring).\n\nget_cached_result#\n\nCopydef get_cached_result(output_fingerprint_key: Text, node_name: Text,                      model_storage: ModelStorage) -> Optional[Cacheable]\n\nReturns a potentially cached output (see parent class for full docstring).", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1114": {"text": "Returns a potentially cached output (see parent class for full docstring).\n\nPrevious\u00ab rasa.engine.training.hooksNextrasa.engine.exceptions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1115": {"text": "Version: 3.x\n\nrasa.engine.exceptions\n\nGraphRunError Objects#\n\nCopyclass GraphRunError(Exception)\n\nException class for errors originating when running a graph.\n\nGraphComponentException Objects#\n\nCopyclass GraphComponentException(Exception)\n\nException class for errors originating within a GraphComponent.\n\nGraphSchemaException Objects#\n\nCopyclass GraphSchemaException(Exception)\n\nRepresents errors when dealing with GraphSchemas.\n\nGraphSchemaValidationException Objects#\n\nCopyclass GraphSchemaValidationException(Exception)\n\nIndicates that the given graph schema is invalid.\n\nPrevious\u00ab rasa.engine.cachingNextrasa.engine.graph \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1116": {"text": "Version: 3.x\n\nrasa.engine.graph\n\nSchemaNode Objects#\n\nCopy@dataclassclass SchemaNode()\n\nRepresents one node in the schema.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1117": {"text": "Represents one node in the schema.\n\nArguments:\n\nneeds - describes which parameters in fn (or constructor_name\nif eager==False) are filled by which parent nodes.uses - The class which models the behavior of this specific graph node.constructor_name - The name of the constructor which should be used to\ninstantiate the component. If eager==False then the constructor can\nalso specify parameters which are filled by parent nodes. This is e.g.\nuseful if a parent node returns a Resource and this node wants to\ndirectly load itself from this resource.fn - The name of the function which should be called on the instantiated\ncomponent when the graph is executed. The parameters from needs are\nfilled from the parent nodes.fn1 - The user's configuration for this graph node. This configuration\ndoes not need to be specify all possible parameters; the default values\nfor missing parameters will be filled in later.fn2 - If fn2 then the component is instantiated before the graph is run.\nOtherwise it's instantiated as the graph runs (lazily). Usually we always\ninstantiated lazily during training and eagerly during inference (to\navoid that the first prediction takes longer).fn4 - If fn5 then this node can't be pruned during fingerprinting\n(it might be replaced with a cached value though). This is e.g. used for\nall components which train as their result always needs to be added to\nthe model archive so that the data is available during inference.fn6 - Nodes with fn6 are always run (also during the fingerprint\nrun). This makes sure that we e.g. detect changes in file contents.fn8 - If given, then the graph node is loaded from an existing resource\ninstead of instantiated from scratch. This is e.g. used to load a trained\ncomponent for predictions.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1118": {"text": "GraphSchema Objects#\n\nCopy@dataclassclass GraphSchema()\n\nRepresents a graph for training a model or making predictions.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns graph schema in a serializable format.\n\nReturns:\n\n  The graph schema in a format which can be dumped as JSON or other formats.\n\nfrom_dict#\n\nCopy@classmethoddef from_dict(cls, serialized_graph_schema: Dict[Text, Any]) -> GraphSchema\n\nLoads a graph schema which has been serialized using schema.as_dict().\n\nArguments:\n\nserialized_graph_schema - A serialized graph schema.\n\nReturns:\n\n  A properly loaded schema.\n\nRaises:\n\nGraphSchemaException - In case the component class for a node couldn't be\nfound.\n\ntarget_names#\n\nCopy@propertydef target_names() -> List[Text]\n\nReturns the names of all target nodes.\n\nminimal_graph_schema#\n\nCopydef minimal_graph_schema(targets: Optional[List[Text]] = None) -> GraphSchema\n\nReturns a new schema where all nodes are a descendant of a target.\n\nGraphComponent Objects#\n\nCopyclass GraphComponent(ABC)\n\nInterface for any component which will run in a graph.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\ncreate#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1119": {"text": "Components that should be included in the pipeline before this component.\n\ncreate#\n\nCopy@classmethod@abstractmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> GraphComponent\n\nCreates a new GraphComponent.\n\nArguments:\n\nconfig - This config overrides the default_config.model_storage - Storage which graph components can use to persist and load\nthemselves.resource - Resource locator for this component which can be used to persist\nand load itself from the model_storage.execution_context - Information about the current graph run.Returns - An instantiated GraphComponent.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> GraphComponent\n\nCreates a component using a persisted version of itself.\n\nIf not overridden this method merely calls create.\n\nArguments:\n\nconfig - The config for this graph component. This is the default config of\nthe component merged with config specified by the user.model_storage - Storage which graph components can use to persist and load\nthemselves.resource - Resource locator for this component which can be used to persist\nand load itself from the model_storage.execution_context - Information about the current graph run.kwargs - Output values from previous nodes might be passed in as kwargs.\n\nReturns:\n\n  An instantiated, loaded GraphComponent.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the component's default config.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1120": {"text": "Returns the component's default config.\n\nDefault config and user config are merged by the GraphNode before the\nconfig is passed to the create and load method of the component.\n\nReturns:\n\n  The default config of the component.\n\nsupported_languages#\n\nCopy@staticmethoddef supported_languages() -> Optional[List[Text]]\n\nDetermines which languages this component can work with.\n\nReturns: A list of supported languages, or None to signify all are supported.\n\nnot_supported_languages#\n\nCopy@staticmethoddef not_supported_languages() -> Optional[List[Text]]\n\nDetermines which languages this component cannot work with.\n\nReturns: A list of not supported languages, or\nNone to signify all are supported.\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\nGraphNodeHook Objects#\n\nCopyclass GraphNodeHook(ABC)\n\nHolds functionality to be run before and after a GraphNode.\n\non_before_node#\n\nCopy@abstractmethoddef on_before_node(node_name: Text, execution_context: ExecutionContext,                   config: Dict[Text, Any],                   received_inputs: Dict[Text, Any]) -> Dict\n\nRuns before the GraphNode executes.\n\nArguments:\n\nnode_name - The name of the node being run.execution_context - The execution context of the current graph run.config - The node's config.received_inputs - Mapping from parameter name to input value.\n\nReturns:\n\n  Data that is then passed to on_after_node\n\non_after_node#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1121": {"text": "on_after_node#\n\nCopy@abstractmethoddef on_after_node(node_name: Text, execution_context: ExecutionContext,                  config: Dict[Text, Any], output: Any,                  input_hook_data: Dict) -> None\n\nRuns after the GraphNode as executed.\n\nArguments:\n\nnode_name - The name of the node that has run.execution_context - The execution context of the current graph run.config - The node's config.output - The output of the node.input_hook_data - Data returned from on_before_node.\n\nExecutionContext Objects#\n\nCopy@dataclassclass ExecutionContext()\n\nHolds information about a single graph run.\n\nGraphNode Objects#\n\nCopyclass GraphNode()\n\nInstantiates and runs a GraphComponent within a graph.\n\nA GraphNode is a wrapper for a GraphComponent that allows it to be executed\nin the context of a graph. It is responsible for instantiating the component at the\ncorrect time, collecting the inputs from the parent nodes, running the run function\nof the component and passing the output onwards.\n\n__init__#\n\nCopydef __init__(node_name: Text,             component_class: Type[GraphComponent],             constructor_name: Text,             component_config: Dict[Text, Any],             fn_name: Text,             inputs: Dict[Text, Text],             eager: bool,             model_storage: ModelStorage,             resource: Optional[Resource],             execution_context: ExecutionContext,             hooks: Optional[List[GraphNodeHook]] = None) -> None\n\nInitializes GraphNode.\n\nArguments:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1122": {"text": "Initializes GraphNode.\n\nArguments:\n\nnode_name - The name of the node in the schema.component_class - The class to be instantiated and run.constructor_name - The method used to instantiate the component.component_config - Config to be passed to the component.fn_name - The function on the instantiated GraphComponent to be run when\nthe node executes.inputs - A map from input name to parent node name that provides it.eager - Determines if the node is instantiated right away, or just before\nbeing run.model_storage - Storage which graph components can use to persist and load\nthemselves.node_name0 - If given the GraphComponent will be loaded from the\nmodel_storage using the given resource.node_name3 - Information about the current graph run.node_name4 - These are called before and after execution.\n\n__call__#\n\nCopydef __call__( *inputs_from_previous_nodes: Union[Tuple[Text, Any], Text]) -> Tuple[Text, Any]\n\nCalls the GraphComponent run method when the node executes in the graph.\n\nArguments:\n\n*inputs_from_previous_nodes - The output of all parent nodes. Each is a\ndictionary with a single item mapping the node's name to its output.\nIf the node couldn't be resolved and has no output, the node name is\nprovided instead of a tuple.\n\nReturns:\n\n  The node name and its output.\n\nfrom_schema_node#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1123": {"text": "The node name and its output.\n\nfrom_schema_node#\n\nCopy@classmethoddef from_schema_node(cls,                     node_name: Text,                     schema_node: SchemaNode,                     model_storage: ModelStorage,                     execution_context: ExecutionContext,                     hooks: Optional[List[GraphNodeHook]] = None) -> GraphNode\n\nCreates a GraphNode from a SchemaNode.\n\nGraphModelConfiguration Objects#\n\nCopy@dataclass()class GraphModelConfiguration()\n\nThe model configuration to run as a graph during training and prediction.\n\nPrevious\u00ab rasa.engine.exceptionsNextrasa.engine.loader \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1124": {"text": "Version: 3.x\n\nrasa.engine.loader\n\nload_predict_graph_runner#\n\nCopydef load_predict_graph_runner(    storage_path: Path, model_archive_path: Path,    model_storage_class: Type[ModelStorage],    graph_runner_class: Type[GraphRunner]) -> Tuple[ModelMetadata, GraphRunner]\n\nLoads a model from an archive and creates the prediction graph runner.\n\nArguments:\n\nstorage_path - Directory which contains the persisted graph components.model_archive_path - The path to the model archive.model_storage_class - The class to instantiate the model storage from.graph_runner_class - The class to instantiate the runner from.\n\nReturns:\n\n  A tuple containing the model metadata and the prediction graph runner.\n\nPrevious\u00ab rasa.engine.graphNextrasa.engine.validation \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1125": {"text": "Version: 3.x\n\nrasa.engine.validation\n\nParameterInfo Objects#\n\nCopy@dataclasses.dataclassclass ParameterInfo()\n\nStores metadata about a function parameter.\n\nvalidate#\n\nCopydef validate(model_configuration: GraphModelConfiguration) -> None\n\nValidates a graph schema.\n\nThis tries to validate that the graph structure is correct (e.g. all nodes pass the\ncorrect things into each other) as well as validates the individual graph\ncomponents.\n\nArguments:\n\nmodel_configuration - The model configuration (schemas, language, etc.)\n\nRaises:\n\nGraphSchemaValidationException - If the validation failed.\n\nPrevious\u00ab rasa.engine.loaderNextrasa.graph_components.adders.nlu_prediction_to_history_adder \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1126": {"text": "Version: 3.x\n\nrasa.graph_components.adders.nlu_prediction_to_history_adder\n\nNLUPredictionToHistoryAdder Objects#\n\nCopyclass NLUPredictionToHistoryAdder(GraphComponent)\n\nAdds NLU predictions to DialogueStateTracker.\n\ncreate#\n\nCopy | @classmethod | create(cls, config: Dict[Text, Any], model_storage: ModelStorage, resource: Resource, execution_context: ExecutionContext) -> NLUPredictionToHistoryAdder\n\nCreates component (see parent class for full docstring).\n\nadd#\n\nCopy | add(predictions: List[Message], tracker: DialogueStateTracker, domain: Domain, original_message: UserMessage) -> DialogueStateTracker\n\nAdds NLU predictions to the tracker.\n\nArguments:\n\npredictions - A list of NLU predictions wrapped as Messagestracker - The tracker the predictions should be attached todomain - The domain of the model.original_message - An original message from the user with\nextra metadata to annotate the predictions (e.g. channel)\n\nReturns:\n\n  The original tracker updated with events created from the predictions\n\nPrevious\u00ab rasa.engine.validationNextrasa.graph_components.converters.nlu_message_converter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1127": {"text": "Version: 3.x\n\nrasa.graph_components.converters.nlu_message_converter\n\nNLUMessageConverter Objects#\n\nCopyclass NLUMessageConverter(GraphComponent)\n\nConverts the user message into a NLU Message object.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> NLUMessageConverter\n\nCreates component (see parent class for full docstring).\n\nconvert_user_message#\n\nCopydef convert_user_message(messages: List[UserMessage]) -> List[Message]\n\nConverts user message into Message object.\n\nArguments:\n\nmessages - The user messages which should be converted to be processed by\nthe NLU components.\n\nReturns:\n\n  List containing only one instance of Message.\nElse empty list if user message is None.\n\nPrevious\u00ab rasa.graph_components.adders.nlu_prediction_to_history_adderNextrasa.graph_components.providers.domain_for_core_training_provider \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1128": {"text": "Version: 3.x\n\nrasa.graph_components.providers.domain_for_core_training_provider\n\nDomainForCoreTrainingProvider Objects#\n\nCopyclass DomainForCoreTrainingProvider(GraphComponent)\n\nProvides domain without information that is irrelevant for core training.\n\nThe information that we retain includes:\n\nintents and their \"used\" and \"ignored\" entities because intents influence the\nnext action prediction directly and the latter flags determine whether the\nlisted entities influence the next action predictionentities, their roles and groups, and their influence_conversation flag because\nall of those items are used by policiesslots names along with their types, since this type information determines the\npre-featurization of slot valuesresponse keys (i.e. `utter_*) because those keys may appear in storiesform names because those appear in storieshow slots are filled (i.e. 'mappings' key under 'slots') because a domain instance\nneeds to be created by core during training time to parse the training data\nproperly\n\nThis information that we drop (or replace with default values) includes:\n\nthe 'session_config' which determines details of a session e.g. whether data is\ntransferred from one session to the next (this is replaced with defaults as it\ncannot just be removed)the actual text of a 'response' because those are only used by response selectorsthe actual configuration of 'forms' because those are not actually executed\nby core components\n\nReferences:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1129": {"text": "References:\n\nrasa.core.featurizer.tracker_featurizer.py (used by all policies)rasa.core.featurizer.single_state_featurizer.py (used by ML policies)rasa.shared.core.domain.get_active_state (used by above references)rasa.shared.core.slots.as_features (used by above references)rasa.shared.core.training_data.structures.StoryStep.explicit_events\n(i.e. slots needed for core training)\n\ncreate#\n\nCopy@classmethoddef create(        cls, config: Dict[Text, Any], model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext) -> DomainForCoreTrainingProvider\n\nCreates component (see parent class for full docstring).\n\nprovide#\n\nCopydef provide(domain: Domain) -> Domain\n\nRecreates the given domain but drops information that is irrelevant for core.\n\nArguments:\n\ndomain - A domain.\n\nReturns:\n\n  A similar domain without information that is irrelevant for core training.\n\ncreate_pruned_version#\n\nCopy@staticmethoddef create_pruned_version(domain: Domain) -> Domain\n\nRecreates the given domain but drops information that is irrelevant for core.\n\nArguments:\n\ndomain - A domain.\n\nReturns:\n\n  A similar domain without information that is irrelevant for core training.\n\nPrevious\u00ab rasa.graph_components.converters.nlu_message_converterNextrasa.graph_components.providers.domain_provider \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1130": {"text": "Version: 3.x\n\nrasa.graph_components.providers.domain_provider\n\nDomainProvider Objects#\n\nCopyclass DomainProvider(GraphComponent)\n\nProvides domain during training and inference time.\n\n__init__#\n\nCopydef __init__(model_storage: ModelStorage,             resource: Resource,             domain: Optional[Domain] = None) -> None\n\nCreates domain provider.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> DomainProvider\n\nCreates component (see parent class for full docstring).\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> DomainProvider\n\nCreates provider using a persisted version of itself.\n\nprovide_train#\n\nCopydef provide_train(importer: TrainingDataImporter) -> Domain\n\nProvides domain from training data during training.\n\nprovide_inference#\n\nCopydef provide_inference() -> Domain\n\nProvides the domain during inference.\n\nPrevious\u00ab rasa.graph_components.providers.domain_for_core_training_providerNextrasa.graph_components.providers.domain_without_response_provider \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1131": {"text": "Version: 3.x\n\nrasa.graph_components.providers.domain_without_response_provider\n\nDomainWithoutResponsesProvider Objects#\n\nCopyclass DomainWithoutResponsesProvider(GraphComponent)\n\nProvides domain without information about responses.\n\ncreate#\n\nCopy | @classmethod | create(cls, config: Dict[Text, Any], model_storage: ModelStorage, resource: Resource, execution_context: ExecutionContext) -> DomainWithoutResponsesProvider\n\nCreates component (see parent class for full docstring).\n\nprovide#\n\nCopy | provide(domain: Domain) -> Domain\n\nRecreates the given domain but acts as if responses have not been specified.\n\nArguments:\n\ndomain - A domain.\n\nReturns:\n\n  Domain that has been created from the same parameters as the given domain\nbut with an empty set of responses.\n\nPrevious\u00ab rasa.graph_components.providers.domain_providerNextrasa.graph_components.providers.nlu_training_data_provider \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1132": {"text": "Version: 3.x\n\nrasa.graph_components.providers.nlu_training_data_provider\n\nNLUTrainingDataProvider Objects#\n\nCopyclass NLUTrainingDataProvider(GraphComponent)\n\nProvides NLU training data during training.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any], model_storage: ModelStorage,             resource: Resource) -> None\n\nCreates a new NLU training data provider.\n\nget_default_config#\n\nCopy@classmethoddef get_default_config(cls) -> Dict[Text, Any]\n\nReturns the default config for NLU training data provider.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> NLUTrainingDataProvider\n\nCreates a new NLU training data provider.\n\nprovide#\n\nCopydef provide(importer: TrainingDataImporter) -> TrainingData\n\nProvides nlu training data during training.\n\nPrevious\u00ab rasa.graph_components.providers.domain_without_response_providerNextrasa.graph_components.providers.project_provider \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1133": {"text": "Version: 3.x\n\nrasa.graph_components.providers.project_provider\n\nProjectProvider Objects#\n\nCopyclass ProjectProvider(GraphComponent)\n\nProvides domain and training data during training and inference time.\n\nget_default_config#\n\nCopy | @staticmethod | get_default_config() -> Dict[Text, Any]\n\nDefault config for ProjectProvider.\n\n__init__#\n\nCopy | __init__(config: Dict[Text, Any]) -> None\n\nInitializes the ProjectProvider.\n\ncreate#\n\nCopy | @classmethod | create(cls, config: Dict[Text, Any], model_storage: ModelStorage, resource: Resource, execution_context: ExecutionContext) -> ProjectProvider\n\nCreates component (see parent class for full docstring).\n\nprovide#\n\nCopy | provide() -> TrainingDataImporter\n\nProvides the TrainingDataImporter.\n\nPrevious\u00ab rasa.graph_components.providers.nlu_training_data_providerNextrasa.graph_components.providers.rule_only_provider \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1134": {"text": "Version: 3.x\n\nrasa.graph_components.providers.rule_only_provider\n\nRuleOnlyDataProvider Objects#\n\nCopy@dataclasses.dataclassclass RuleOnlyDataProvider(GraphComponent)\n\nProvides slots and loops that are only used in rules to other policies.\n\nPolicies can use this to exclude features which are only used by rules from the\nfeaturization.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> RuleOnlyDataProvider\n\nCreates component (see parent class for docstring).\n\nprovide#\n\nCopydef provide() -> Dict[Text, Any]\n\nProvides data to other graph component.\n\nPrevious\u00ab rasa.graph_components.providers.project_providerNextrasa.graph_components.providers.story_graph_provider \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1135": {"text": "Version: 3.x\n\nrasa.graph_components.providers.story_graph_provider\n\nStoryGraphProvider Objects#\n\nCopyclass StoryGraphProvider(GraphComponent)\n\nProvides the training data from stories.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any]) -> None\n\nCreates provider from config.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns default configuration (see parent class for full docstring).\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> StoryGraphProvider\n\nCreates component (see parent class for full docstring).\n\nprovide#\n\nCopydef provide(importer: TrainingDataImporter) -> StoryGraph\n\nProvides the story graph from the training data.\n\nArguments:\n\nimporter - instance of TrainingDataImporter.\n\nReturns:\n\n  The story graph containing stories and rules used for training.\n\nPrevious\u00ab rasa.graph_components.providers.rule_only_providerNextrasa.graph_components.providers.training_tracker_provider \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1136": {"text": "Version: 3.x\n\nrasa.graph_components.providers.training_tracker_provider\n\nTrainingTrackerProvider Objects#\n\nCopyclass TrainingTrackerProvider(GraphComponent)\n\nProvides training trackers to policies based on training stories.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any]) -> None\n\nCreates provider from config.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns default configuration (see parent class for full docstring).\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> TrainingTrackerProvider\n\nCreates component (see parent class for full docstring).\n\nprovide#\n\nCopydef provide(story_graph: StoryGraph,            domain: Domain) -> List[TrackerWithCachedStates]\n\nGenerates the training trackers from the training data.\n\nArguments:\n\nstory_graph - The story graph containing the test stories and rules.domain - The domain of the model.\n\nReturns:\n\n  The trackers which can be used to train dialogue policies.\n\nPrevious\u00ab rasa.graph_components.providers.story_graph_providerNextrasa.graph_components.validators.default_recipe_validator \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1137": {"text": "Version: 3.x\n\nrasa.graph_components.validators.default_recipe_validator\n\nDefaultV1RecipeValidator Objects#\n\nCopyclass DefaultV1RecipeValidator(GraphComponent)\n\nValidates a \"DefaultV1\" configuration against the training data and domain.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> DefaultV1RecipeValidator\n\nCreates a new ConfigValidator (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(graph_schema: GraphSchema) -> None\n\nInstantiates a new ConfigValidator.\n\nArguments:\n\ngraph_schema - a graph schema\n\nvalidate#\n\nCopydef validate(importer: TrainingDataImporter) -> TrainingDataImporter\n\nValidates the current graph schema against the training data and domain.\n\nArguments:\n\nimporter - the training data importer which can also load the domain\n\nRaises:\n\n InvalidConfigException or InvalidDomain in case there is some mismatch\n\nPrevious\u00ab rasa.graph_components.providers.training_tracker_providerNextrasa.graph_components.validators.finetuning_validator \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1138": {"text": "Version: 3.x\n\nrasa.graph_components.validators.finetuning_validator\n\nFinetuningValidator Objects#\n\nCopyclass FinetuningValidator(GraphComponent)\n\nComponent that checks whether fine-tuning is possible.\n\nThis is a component at the beginning of the graph which receives all training data\nand raises an exception in case is_finetuning is True and finetuning is not\npossible (e.g. because new labels were added).\nIn case we are doing a regular training (and not finetuning) this persists the\nnecessary information extracted from the training data to be able to validate when\ninitialized via load whether we can finetune.\n\nFinetuning is possible if, compared to the initial training phase, it holds that\n\nthe configuration (except for \"epoch\" keys) does not changethe domain (except for e.g. \"responses\") does not change - or we're not\nfinetuning the core partthe intents, entities, entity groups, entity roles, and action names that\nappeared in the original NLU training data, appear in the NLU training data\nused for finetuning, and no new such items (i.e. intents, entities, entity\ngroups, entity roles, or action names) have been added, compared to the original\ntraining data - or we're not finetuning the nlu part.\nNote that even though conditions 2. and 3. differ based on which part we finetune,\ncondition 1. always covers both parts, i.e. NLU and Core.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nDefault config for ProjectProvider.\n\n__init__#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1139": {"text": "Default config for ProjectProvider.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             execution_context: ExecutionContext,             fingerprints: Optional[Dict[Text, Text]] = None) -> None\n\nInstantiates a FineTuningValidator.\n\nArguments:\n\nmodel_storage - Storage which graph components can use to persist and load\nthemselves.resource - Resource locator for this component which can be used to persist\nand load itself from the model_storage.execution_context - Information about the current graph run.fingerprints - a dictionary of fingerprints generated by a\nFineTuningValidator\n\nvalidate#\n\nCopydef validate(importer: TrainingDataImporter) -> TrainingDataImporter\n\nValidates whether we can finetune Core and NLU when finetuning is enabled.\n\nArguments:\n\nimporter - a training data importer\n\nRaises:\n\n InvalidConfigException if there is a conflict\n\nReturns:\n\n  Training Data Importer.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> FinetuningValidator\n\nCreates a new FineTuningValidator (see parent class for full docstring).\n\npersist#\n\nCopydef persist() -> None\n\nPersists this FineTuningValidator.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> GraphComponent", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1140": {"text": "Loads a FineTuningValidator (see parent class for full docstring).\n\nPrevious\u00ab rasa.graph_components.validators.default_recipe_validatorNextrasa.importers.autoconfig \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1141": {"text": "Version: 3.x\n\nrasa.importers.autoconfig\n\nget_configuration#\n\nCopyget_configuration(config_file_path: Text, training_type: Optional[TrainingType] = TrainingType.BOTH) -> Dict[Text, Any]\n\nDetermine configuration from a configuration file.\n\nKeys that are provided and have a value in the file are kept. Keys that are not\nprovided are configured automatically.\n\nArguments:\n\nconfig_file_path - The path to the configuration file.training_type - NLU, CORE or BOTH depending on what is trained.\n\nPrevious\u00ab rasa.graph_components.validators.finetuning_validatorNextrasa.importers.importer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1142": {"text": "Version: 3.x\n\nrasa.importers.importer\n\nTrainingDataImporter Objects#\n\nCopyclass TrainingDataImporter()\n\nCommon interface for different mechanisms to load training data.\n\nget_domain#\n\nCopy | async get_domain() -> Domain\n\nRetrieves the domain of the bot.\n\nReturns:\n\n  Loaded Domain.\n\nget_stories#\n\nCopy | async get_stories(template_variables: Optional[Dict] = None, use_e2e: bool = False, exclusion_percentage: Optional[int] = None) -> StoryGraph\n\nRetrieves the stories that should be used for training.\n\nArguments:\n\ntemplate_variables - Values of templates that should be replaced while\nreading the story files.use_e2e - Specifies whether to parse end to end learning annotations.exclusion_percentage - Amount of training data that should be excluded.\n\nReturns:\n\n StoryGraph containing all loaded stories.\n\nget_config#\n\nCopy | async get_config() -> Dict\n\nRetrieves the configuration that should be used for the training.\n\nReturns:\n\n  The configuration as dictionary.\n\nget_nlu_data#\n\nCopy | async get_nlu_data(language: Optional[Text] = \"en\") -> TrainingData\n\nRetrieves the NLU training data that should be used for training.\n\nArguments:\n\nlanguage - Can be used to only load training data for a certain language.\n\nReturns:\n\n  Loaded NLU TrainingData.\n\nload_from_config#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1143": {"text": "Returns:\n\n  Loaded NLU TrainingData.\n\nload_from_config#\n\nCopy | @staticmethod | load_from_config(config_path: Text, domain_path: Optional[Text] = None, training_data_paths: Optional[List[Text]] = None, training_type: Optional[TrainingType] = TrainingType.BOTH) -> \"TrainingDataImporter\"\n\nLoads a TrainingDataImporter instance from a configuration file.\n\nload_core_importer_from_config#\n\nCopy | @staticmethod | load_core_importer_from_config(config_path: Text, domain_path: Optional[Text] = None, training_data_paths: Optional[List[Text]] = None) -> \"TrainingDataImporter\"\n\nLoads core TrainingDataImporter instance.\n\nInstance loaded from configuration file will only read Core training data.\n\nload_nlu_importer_from_config#\n\nCopy | @staticmethod | load_nlu_importer_from_config(config_path: Text, domain_path: Optional[Text] = None, training_data_paths: Optional[List[Text]] = None) -> \"TrainingDataImporter\"\n\nLoads nlu TrainingDataImporter instance.\n\nInstance loaded from configuration file will only read NLU training data.\n\nload_from_dict#\n\nCopy | @staticmethod | load_from_dict(config: Optional[Dict], config_path: Text, domain_path: Optional[Text] = None, training_data_paths: Optional[List[Text]] = None, training_type: Optional[TrainingType] = TrainingType.BOTH) -> \"TrainingDataImporter\"", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1144": {"text": "Loads a TrainingDataImporter instance from a dictionary.\n\nNluDataImporter Objects#\n\nCopyclass NluDataImporter(TrainingDataImporter)\n\nImporter that skips any Core-related file reading.\n\nCoreDataImporter Objects#\n\nCopyclass CoreDataImporter(TrainingDataImporter)\n\nImporter that skips any NLU related file reading.\n\nCombinedDataImporter Objects#\n\nCopyclass CombinedDataImporter(TrainingDataImporter)\n\nA TrainingDataImporter that combines multiple importers.\nUses multiple TrainingDataImporter instances\nto load the data as if they were a single instance.\n\nRetrievalModelsDataImporter Objects#\n\nCopyclass RetrievalModelsDataImporter(TrainingDataImporter)\n\nA TrainingDataImporter that sets up the data for training retrieval models.\n\nSynchronizes response templates between Domain and NLU\nand adds retrieval intent properties from the NLU training data\nback to the Domain.\n\nget_domain#\n\nCopy | async get_domain() -> Domain\n\nMerge existing domain with properties of retrieval intents in NLU data.\n\nget_nlu_data#\n\nCopy | async get_nlu_data(language: Optional[Text] = \"en\") -> TrainingData\n\nUpdate NLU data with response templates defined in the domain\n\nE2EImporter Objects#\n\nCopyclass E2EImporter(TrainingDataImporter)\n\nImporter which\n\nenhances the NLU training data with actions / user messages from the stories.adds potential end-to-end bot messages from stories as actions to the domain\n\nPrevious\u00ab rasa.importers.autoconfigNextrasa.importers.multi_project \u00bb", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1145": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1146": {"text": "Version: 3.x\n\nrasa.importers.multi_project\n\nMultiProjectImporter Objects#\n\nCopyclass MultiProjectImporter(TrainingDataImporter)\n\ntraining_paths#\n\nCopy | training_paths() -> Set[Text]\n\nReturns the paths which should be searched for training data.\n\nis_imported#\n\nCopy | is_imported(path: Text) -> bool\n\nChecks whether a path is imported by a skill.\n\nArguments:\n\npath - File or directory path which should be checked.\n\nReturns:\n\n True if path is imported by a skill, False if not.\n\nPrevious\u00ab rasa.importers.importerNextrasa.importers.rasa \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1147": {"text": "Version: 3.x\n\nrasa.importers.rasa\n\nRasaFileImporter Objects#\n\nCopyclass RasaFileImporter(TrainingDataImporter)\n\nDefault TrainingFileImporter implementation.\n\nPrevious\u00ab rasa.importers.multi_projectNextrasa.nlu.classifiers._classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1148": {"text": "Version: 3.x\n\nrasa.nlu.classifiers._classifier\n\nIntentClassifier Objects#\n\nCopyclass IntentClassifier(Component)\n\nAn intent classifier.\n\nPrevious\u00ab rasa.importers.rasaNextrasa.nlu.classifiers._diet_classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1149": {"text": "Version: 3.x\n\nrasa.nlu.classifiers._diet_classifier\n\nDIETClassifier Objects#\n\nCopyclass DIETClassifier(IntentClassifier,  EntityExtractor)\n\nA multi-task model for intent classification and entity extraction.\n\nDIET is Dual Intent and Entity Transformer.\nThe architecture is based on a transformer which is shared for both tasks.\nA sequence of entity labels is predicted through a Conditional Random Field (CRF)\ntagging layer on top of the transformer output sequence corresponding to the\ninput sequence of tokens. The transformer output for the __CLS__ token and\nintent labels are embedded into a single semantic vector space. We use the\ndot-product loss to maximize the similarity with the target label and minimize\nsimilarities with negative samples.\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, index_label_id_mapping: Optional[Dict[int, Text]] = None, entity_tag_specs: Optional[List[EntityTagSpec]] = None, model: Optional[RasaModel] = None, finetune_mode: bool = False, sparse_feature_sizes: Optional[Dict[Text, Dict[Text, List[int]]]] = None) -> None\n\nDeclare instance variables with default values.\n\nlabel_key#\n\nCopy | @property | label_key() -> Optional[Text]\n\nReturn key if intent classification is activated.\n\nlabel_sub_key#\n\nCopy | @property | label_sub_key() -> Optional[Text]\n\nReturn sub key if intent classification is activated.\n\npreprocess_train_data#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1150": {"text": "Return sub key if intent classification is activated.\n\npreprocess_train_data#\n\nCopy | preprocess_train_data(training_data: TrainingData) -> RasaModelData\n\nPrepares data for training.\n\nPerforms sanity checks on training data, extracts encodings for labels.\n\ntrain#\n\nCopy | train(training_data: TrainingData, config: Optional[RasaNLUModelConfig] = None, **kwargs: Any, ,) -> None\n\nTrain the embedding intent classifier on a data set.\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nAugments the message with intents, entities, and diagnostic data.\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Dict[Text, Any]\n\nPersist this model into the passed directory.\n\nReturn the metadata necessary to load the model again.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Metadata = None, cached_component: Optional[\"DIETClassifier\"] = None, should_finetune: bool = False, **kwargs: Any, ,) -> \"DIETClassifier\"\n\nLoads the trained model from the provided directory.\n\nDIET Objects#\n\nCopyclass DIET(TransformerRasaModel)\n\nbatch_loss#\n\nCopy | batch_loss(batch_in: Union[Tuple[tf.Tensor], Tuple[np.ndarray]]) -> tf.Tensor\n\nCalculates the loss for the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1151": {"text": "Arguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The loss of the given batch.\n\nprepare_for_predict#\n\nCopy | prepare_for_predict() -> None\n\nPrepares the model for prediction.\n\nbatch_predict#\n\nCopy | batch_predict(batch_in: Union[Tuple[tf.Tensor], Tuple[np.ndarray]]) -> Dict[Text, tf.Tensor]\n\nPredicts the output of the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The output to predict.\n\nPrevious\u00ab rasa.nlu.classifiers._classifierNextrasa.nlu.classifiers._fallback_classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1152": {"text": "Version: 3.x\n\nrasa.nlu.classifiers._fallback_classifier\n\nFallbackClassifier Objects#\n\nCopyclass FallbackClassifier(IntentClassifier)\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nProcess an incoming message.\n\nThis is the components chance to process an incoming\nmessage. The component can rely on\nany context attribute to be present, that gets created\nby a call to :meth:rasa.nlu.components.Component.create\nof ANY component and\non any context attributes created by a call to\n:meth:rasa.nlu.components.Component.process\nof components previous to this one.\n\nArguments:\n\nmessage - The :class:rasa.shared.nlu.training_data.message.Message to\nprocess.\n\nis_fallback_classifier_prediction#\n\nCopyis_fallback_classifier_prediction(prediction: Dict[Text, Any]) -> bool\n\nChecks if the intent was predicted by the FallbackClassifier.\n\nArguments:\n\nprediction - The prediction of the NLU model.\n\nReturns:\n\n True if the top classified intent was the fallback intent.\n\nundo_fallback_prediction#\n\nCopyundo_fallback_prediction(prediction: Dict[Text, Any]) -> Dict[Text, Any]\n\nUndo the prediction of the fallback intent.\n\nArguments:\n\nprediction - The prediction of the NLU model.\n\nReturns:\n\n  The prediction as if the FallbackClassifier wasn't present in the pipeline.\nIf the fallback intent is the only intent, return the prediction as it was\nprovided.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1153": {"text": "Previous\u00ab rasa.nlu.classifiers._diet_classifierNextrasa.nlu.classifiers._keyword_intent_classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1154": {"text": "Version: 3.x\n\nrasa.nlu.classifiers._keyword_intent_classifier\n\nKeywordIntentClassifier Objects#\n\nCopyclass KeywordIntentClassifier(IntentClassifier)\n\nIntent classifier using simple keyword matching.\n\nThe classifier takes a list of keywords and associated intents as an input.\nAn input sentence is checked for the keywords and the intent is returned.\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nSet the message intent and add it to the output is it exists.\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Dict[Text, Any]\n\nPersist this model into the passed directory.\n\nReturn the metadata necessary to load the model again.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Metadata = None, cached_component: Optional[\"KeywordIntentClassifier\"] = None, **kwargs: Any, ,) -> \"KeywordIntentClassifier\"\n\nLoads trained component (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.classifiers._fallback_classifierNextrasa.nlu.classifiers._mitie_intent_classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1155": {"text": "Version: 3.x\n\nrasa.nlu.classifiers._mitie_intent_classifier\n\nMitieIntentClassifier Objects#\n\nCopyclass MitieIntentClassifier(IntentClassifier)\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, clf: Optional[\"mitie.text_categorizer\"] = None) -> None\n\nConstruct a new intent classifier using the MITIE framework.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[Metadata] = None, cached_component: Optional[\"MitieIntentClassifier\"] = None, **kwargs: Any, ,) -> \"MitieIntentClassifier\"\n\nLoads trained component (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.classifiers._keyword_intent_classifierNextrasa.nlu.classifiers._sklearn_intent_classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1156": {"text": "Version: 3.x\n\nrasa.nlu.classifiers._sklearn_intent_classifier\n\nSklearnIntentClassifier Objects#\n\nCopyclass SklearnIntentClassifier(IntentClassifier)\n\nIntent classifier using the sklearn framework\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, clf: \"sklearn.model_selection.GridSearchCV\" = None, le: Optional[\"sklearn.preprocessing.LabelEncoder\"] = None) -> None\n\nConstruct a new intent classifier using the sklearn framework.\n\ntransform_labels_str2num#\n\nCopy | transform_labels_str2num(labels: List[Text]) -> np.ndarray\n\nTransforms a list of strings into numeric label representation.\n\nArguments:\n\nlabels: List of labels to convert to numeric representation\n\ntransform_labels_num2str#\n\nCopy | transform_labels_num2str(y: np.ndarray) -> np.ndarray\n\nTransforms a list of strings into numeric label representation.\n\nArguments:\n\ny: List of labels to convert to numeric representation\n\ntrain#\n\nCopy | train(training_data: TrainingData, config: Optional[RasaNLUModelConfig] = None, **kwargs: Any, ,) -> None\n\nTrain the intent classifier on a data set.\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nReturn the most likely intent and its probability for a message.\n\npredict_prob#\n\nCopy | predict_prob(X: np.ndarray) -> np.ndarray", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1157": {"text": "Given a bow vector of an input text, predict the intent label.\n\nReturn probabilities for all labels.\n\nArguments:\n\nX: bow of input text\n\nReturns:\n\nvector of probabilities containing one entry for each label\n\npredict#\n\nCopy | predict(X: np.ndarray) -> Tuple[np.ndarray, np.ndarray]\n\nGiven a bow vector of an input text, predict most probable label.\n\nReturn only the most likely label.\n\nArguments:\n\nX: bow of input text\n\nReturns:\n\ntuple of first, the most probable label and second,\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Optional[Dict[Text, Any]]\n\nPersist this model into the passed directory.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[Metadata] = None, cached_component: Optional[\"SklearnIntentClassifier\"] = None, **kwargs: Any, ,) -> \"SklearnIntentClassifier\"\n\nLoads trained component (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.classifiers._mitie_intent_classifierNextrasa.nlu.classifiers.classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1158": {"text": "Version: 3.x\n\nrasa.nlu.classifiers.classifier\n\nIntentClassifier Objects#\n\nCopyclass IntentClassifier()\n\nAn intent classifier.\n\nPrevious\u00ab rasa.nlu.classifiers._sklearn_intent_classifierNextrasa.nlu.classifiers.diet_classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1159": {"text": "Version: 3.x\n\nrasa.nlu.classifiers.diet_classifier\n\nDIETClassifier Objects#\n\nCopy@DefaultV1Recipe.register( [        DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER,        DefaultV1Recipe.ComponentType.ENTITY_EXTRACTOR, ],    is_trainable=True,)class DIETClassifier(GraphComponent, IntentClassifier, EntityExtractorMixin)\n\nA multi-task model for intent classification and entity extraction.\n\nDIET is Dual Intent and Entity Transformer.\nThe architecture is based on a transformer which is shared for both tasks.\nA sequence of entity labels is predicted through a Conditional Random Field (CRF)\ntagging layer on top of the transformer output sequence corresponding to the\ninput sequence of tokens. The transformer output for the __CLS__ token and\nintent labels are embedded into a single semantic vector space. We use the\ndot-product loss to maximize the similarity with the target label and minimize\nsimilarities with negative samples.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1160": {"text": "__init__#\n\nCopydef __init__(    config: Dict[Text, Any],    model_storage: ModelStorage,    resource: Resource,    execution_context: ExecutionContext,    index_label_id_mapping: Optional[Dict[int, Text]] = None,    entity_tag_specs: Optional[List[EntityTagSpec]] = None,    model: Optional[RasaModel] = None,    sparse_feature_sizes: Optional[Dict[Text, Dict[Text, List[int]]]] = None) -> None\n\nDeclare instance variables with default values.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> DIETClassifier\n\nCreates a new untrained component (see parent class for full docstring).\n\nlabel_key#\n\nCopy@propertydef label_key() -> Optional[Text]\n\nReturn key if intent classification is activated.\n\nlabel_sub_key#\n\nCopy@propertydef label_sub_key() -> Optional[Text]\n\nReturn sub key if intent classification is activated.\n\npreprocess_train_data#\n\nCopydef preprocess_train_data(training_data: TrainingData) -> RasaModelData\n\nPrepares data for training.\n\nPerforms sanity checks on training data, extracts encodings for labels.\n\ntrain#\n\nCopydef train(training_data: TrainingData) -> Resource\n\nTrain the embedding intent classifier on a data set.\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1161": {"text": "Copydef process(messages: List[Message]) -> List[Message]\n\nAugments the message with intents, entities, and diagnostic data.\n\npersist#\n\nCopydef persist() -> None\n\nPersist this model into the passed directory.\n\nload#\n\nCopy@classmethoddef load(cls: Type[DIETClassifierT], config: Dict[Text, Any],         model_storage: ModelStorage, resource: Resource,         execution_context: ExecutionContext, **kwargs: Any) -> DIETClassifierT\n\nLoads a policy from the storage (see parent class for full docstring).\n\nDIET Objects#\n\nCopyclass DIET(TransformerRasaModel)\n\nbatch_loss#\n\nCopydef batch_loss(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> tf.Tensor\n\nCalculates the loss for the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The loss of the given batch.\n\nprepare_for_predict#\n\nCopydef prepare_for_predict() -> None\n\nPrepares the model for prediction.\n\nbatch_predict#\n\nCopydef batch_predict(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> Dict[Text, tf.Tensor]\n\nPredicts the output of the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The output to predict.\n\nPrevious\u00ab rasa.nlu.classifiers.classifierNextrasa.nlu.classifiers.fallback_classifier \u00bb", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1162": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1163": {"text": "Version: 3.x\n\nrasa.nlu.classifiers.fallback_classifier\n\nFallbackClassifier Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER, is_trainable=False)class FallbackClassifier(GraphComponent, IntentClassifier)\n\nHandles incoming messages with low NLU confidence.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any]) -> None\n\nConstructs a new fallback classifier.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> FallbackClassifier\n\nCreates a new component (see parent class for full docstring).\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nProcess a list of incoming messages.\n\nThis is the component's chance to process incoming\nmessages. The component can rely on\nany context attribute to be present, that gets created\nby a call to :meth:rasa.nlu.components.Component.create\nof ANY component and\non any context attributes created by a call to\n:meth:rasa.nlu.components.Component.process\nof components previous to this one.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1164": {"text": "Arguments:\n\nmessages - List containing :class:\nrasa.shared.nlu.training_data.message.Message to process.\n\nis_fallback_classifier_prediction#\n\nCopydef is_fallback_classifier_prediction(prediction: Dict[Text, Any]) -> bool\n\nChecks if the intent was predicted by the FallbackClassifier.\n\nArguments:\n\nprediction - The prediction of the NLU model.\n\nReturns:\n\n True if the top classified intent was the fallback intent.\n\nundo_fallback_prediction#\n\nCopydef undo_fallback_prediction(prediction: Dict[Text, Any]) -> Dict[Text, Any]\n\nUndo the prediction of the fallback intent.\n\nArguments:\n\nprediction - The prediction of the NLU model.\n\nReturns:\n\n  The prediction as if the FallbackClassifier wasn't present in the pipeline.\nIf the fallback intent is the only intent, return the prediction as it was\nprovided.\n\nPrevious\u00ab rasa.nlu.classifiers.diet_classifierNextrasa.nlu.classifiers.keyword_intent_classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1165": {"text": "Version: 3.x\n\nrasa.nlu.classifiers.keyword_intent_classifier\n\nKeywordIntentClassifier Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER, is_trainable=True)class KeywordIntentClassifier(GraphComponent, IntentClassifier)\n\nIntent classifier using simple keyword matching.\n\nThe classifier takes a list of keywords and associated intents as an input.\nAn input sentence is checked for the keywords and the intent is returned.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             execution_context: ExecutionContext,             intent_keyword_map: Optional[Dict] = None) -> None\n\nCreates classifier.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> KeywordIntentClassifier\n\nCreates a new untrained component (see parent class for full docstring).\n\ntrain#\n\nCopydef train(training_data: TrainingData) -> Resource\n\nTrains the intent classifier on a data set.\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nSets the message intent and add it to the output if it exists.\n\npersist#\n\nCopydef persist() -> None", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1166": {"text": "persist#\n\nCopydef persist() -> None\n\nPersist this model into the passed directory.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> KeywordIntentClassifier\n\nLoads trained component (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.classifiers.fallback_classifierNextrasa.nlu.classifiers.logistic_regression_classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1167": {"text": "Version: 3.x\n\nrasa.nlu.classifiers.logistic_regression_classifier\n\nLogisticRegressionClassifier Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER, is_trainable=True)class LogisticRegressionClassifier(IntentClassifier, GraphComponent)\n\nIntent classifier using the Logistic Regression.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any], name: Text, model_storage: ModelStorage,             resource: Resource) -> None\n\nConstruct a new classifier.\n\ntrain#\n\nCopydef train(training_data: TrainingData) -> Resource\n\nTrain the intent classifier on a data set.\n\ncreate#\n\nCopy@classmethoddef create(        cls, config: Dict[Text, Any], model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext) -> \"LogisticRegressionClassifier\"\n\nCreates a new untrained component (see parent class for full docstring).\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1168": {"text": "Copydef process(messages: List[Message]) -> List[Message]\n\nReturn the most likely intent and its probability for a message.\n\npersist#\n\nCopydef persist() -> None\n\nPersist this model into the passed directory.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> \"LogisticRegressionClassifier\"\n\nLoads trained component (see parent class for full docstring).\n\nprocess_training_data#\n\nCopydef process_training_data(training_data: TrainingData) -> TrainingData\n\nProcess the training data.\n\nvalidate_config#\n\nCopy@classmethoddef validate_config(cls, config: Dict[Text, Any]) -> None\n\nValidates that the component is configured properly.\n\nPrevious\u00ab rasa.nlu.classifiers.keyword_intent_classifierNextrasa.nlu.classifiers.mitie_intent_classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1169": {"text": "Version: 3.x\n\nrasa.nlu.classifiers.mitie_intent_classifier\n\nMitieIntentClassifier Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER,    is_trainable=True,    model_from=\"MitieNLP\",)class MitieIntentClassifier(GraphComponent, IntentClassifier)\n\nIntent classifier which uses the mitie library.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             clf: Optional[\"mitie.text_categorizer\"] = None) -> None\n\nConstructs a new intent classifier using the MITIE framework.\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nLists required dependencies (see parent class for full docstring).\n\ntrain#\n\nCopydef train(training_data: TrainingData, model: MitieModel) -> Resource\n\nTrains classifier.\n\nArguments:\n\ntraining_data - The NLU training data.model - The loaded mitie model provided by MitieNLP.\n\nReturns:\n\n  The resource locator for the trained classifier.\n\nprocess#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1170": {"text": "Returns:\n\n  The resource locator for the trained classifier.\n\nprocess#\n\nCopydef process(messages: List[Message], model: MitieModel) -> List[Message]\n\nMake intent predictions using mitie.\n\nArguments:\n\nmessages - The message which the intents should be predicted for.model - The loaded mitie model provided by MitieNLP.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> MitieIntentClassifier\n\nCreates component for training see parent class for full docstring).\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> MitieIntentClassifier\n\nLoads component for inference see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.classifiers.logistic_regression_classifierNextrasa.nlu.classifiers.regex_message_handler \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1171": {"text": "Version: 3.x\n\nrasa.nlu.classifiers.regex_message_handler\n\nRegexMessageHandler Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER, is_trainable=False)class RegexMessageHandler(GraphComponent, EntityExtractorMixin)\n\nHandles hardcoded NLU predictions from messages starting with a /.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> RegexMessageHandler\n\nCreates a new untrained component (see parent class for full docstring).\n\nprocess#\n\nCopydef process(messages: List[Message],            domain: Optional[Domain] = None) -> List[Message]\n\nAdds hardcoded intents and entities for messages starting with '/'.\n\nArguments:\n\nmessages - The messages which should be handled.domain - If given the domain is used to check whether the intent, entities\nvalid.\n\nReturns:\n\n  The messages with potentially intent and entity prediction replaced\nin case the message started with a /.\n\nPrevious\u00ab rasa.nlu.classifiers.mitie_intent_classifierNextrasa.nlu.classifiers.sklearn_intent_classifier \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1172": {"text": "Version: 3.x\n\nrasa.nlu.classifiers.sklearn_intent_classifier\n\nSklearnIntentClassifier Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER, is_trainable=True)class SklearnIntentClassifier(GraphComponent, IntentClassifier)\n\nIntent classifier using the sklearn framework.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        clf: Optional[\"sklearn.model_selection.GridSearchCV\"] = None,        le: Optional[\"sklearn.preprocessing.LabelEncoder\"] = None) -> None\n\nConstruct a new intent classifier using the sklearn framework.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> SklearnIntentClassifier\n\nCreates a new untrained component (see parent class for full docstring).\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\ntransform_labels_str2num#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1173": {"text": "transform_labels_str2num#\n\nCopydef transform_labels_str2num(labels: List[Text]) -> np.ndarray\n\nTransforms a list of strings into numeric label representation.\n\nArguments:\n\nlabels: List of labels to convert to numeric representation\n\ntransform_labels_num2str#\n\nCopydef transform_labels_num2str(y: np.ndarray) -> np.ndarray\n\nTransforms a list of strings into numeric label representation.\n\nArguments:\n\ny: List of labels to convert to numeric representation\n\ntrain#\n\nCopydef train(training_data: TrainingData) -> Resource\n\nTrain the intent classifier on a data set.\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nReturn the most likely intent and its probability for a message.\n\npredict_prob#\n\nCopydef predict_prob(X: np.ndarray) -> np.ndarray\n\nGiven a bow vector of an input text, predict the intent label.\n\nReturn probabilities for all labels.\n\nArguments:\n\nX: bow of input text\n\nReturns:\n\nvector of probabilities containing one entry for each label.\n\npredict#\n\nCopydef predict(X: np.ndarray) -> Tuple[np.ndarray, np.ndarray]\n\nGiven a bow vector of an input text, predict most probable label.\n\nReturn only the most likely label.\n\nArguments:\n\nX: bow of input text\n\nReturns:\n\ntuple of first, the most probable label and second,\nits probability.\n\npersist#\n\nCopydef persist() -> None\n\nPersist this model into the passed directory.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1174": {"text": "Copydef persist() -> None\n\nPersist this model into the passed directory.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> SklearnIntentClassifier\n\nLoads trained component (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.classifiers.regex_message_handlerNextrasa.nlu.emulators.dialogflow \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1175": {"text": "Version: 3.x\n\nrasa.nlu.emulators.dialogflow\n\nDialogflowEmulator Objects#\n\nCopyclass DialogflowEmulator(Emulator)\n\nEmulates the response format of the DialogFlow.\n\nnoqa: W505\n\nhttps://cloud.google.com/dialogflow/es/docs/reference/rest/v2/projects.agent.environments.users.sessions/detectIntent\nhttps://cloud.google.com/dialogflow/es/docs/reference/rest/v2/DetectIntentResponse\n\nnormalise_response_json#\n\nCopydef normalise_response_json(data: Dict[Text, Any]) -> Dict[Text, Any]\n\nTransform response JSON to DialogFlow format.\n\nArguments:\n\ndata - input JSON data as a dictionary.\n\nReturns:\n\n  The transformed input data.\n\nPrevious\u00ab rasa.nlu.classifiers.sklearn_intent_classifierNextrasa.nlu.emulators.emulator \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1176": {"text": "Version: 3.x\n\nrasa.nlu.emulators.emulator\n\nEmulator Objects#\n\nCopyclass Emulator()\n\nEmulator specifies how requests and responses are getting transformed.\n\nname#\n\nCopy@classmethoddef name(cls) -> Text\n\nName that identifies the emulator.\n\nnormalise_request_json#\n\nCopydef normalise_request_json(data: Dict[Text, Any]) -> Dict[Text, Any]\n\nTransform request JSON to target format.\n\nArguments:\n\ndata - input JSON data as a dictionary.\n\nReturns:\n\n  The transformed input data.\n\nnormalise_response_json#\n\nCopydef normalise_response_json(data: Dict[Text, Any]) -> Dict[Text, Any]\n\nTransform response JSON to target format.\n\nArguments:\n\ndata - input JSON data as a dictionary.\n\nReturns:\n\n  The transformed input data.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturn the string representation of the emulator.\n\nPrevious\u00ab rasa.nlu.emulators.dialogflowNextrasa.nlu.emulators.luis \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1177": {"text": "Version: 3.x\n\nrasa.nlu.emulators.luis\n\nLUISEmulator Objects#\n\nCopyclass LUISEmulator(Emulator)\n\nEmulates the response format of the LUIS Endpoint API v3.0 /predict endpoint.\n\nhttps://westcentralus.dev.cognitive.microsoft.com/docs/services/luis-endpoint-api-v3-0/\nhttps://docs.microsoft.com/en-us/azure/cognitive-services/LUIS/luis-concept-data-extraction?tabs=V3\n\nnormalise_response_json#\n\nCopydef normalise_response_json(data: Dict[Text, Any]) -> Dict[Text, Any]\n\nTransform response JSON to LUIS format.\n\nArguments:\n\ndata - input JSON data as a dictionary.\n\nReturns:\n\n  The transformed input data.\n\nPrevious\u00ab rasa.nlu.emulators.emulatorNextrasa.nlu.emulators.no_emulator \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1178": {"text": "Version: 3.x\n\nrasa.nlu.emulators.no_emulator\n\nNoEmulator Objects#\n\nCopyclass NoEmulator(Emulator)\n\nDefault emulator that is used when no emulator is specified.\n\nnormalise_response_json#\n\nCopydef normalise_response_json(data: Dict[Text, Any]) -> Dict[Text, Any]\n\nTransform data to target format.\n\nPrevious\u00ab rasa.nlu.emulators.luisNextrasa.nlu.emulators.wit \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1179": {"text": "Version: 3.x\n\nrasa.nlu.emulators.wit\n\nWitEmulator Objects#\n\nCopyclass WitEmulator(Emulator)\n\nEmulates the response format of this wit.ai endpoint.\n\nMore information about the endpoint:\nhttps://wit.ai/docs/http/20200513/`get__message_link`\n\nnormalise_response_json#\n\nCopydef normalise_response_json(data: Dict[Text, Any]) -> Dict[Text, Any]\n\nTransform response JSON to wit.ai format.\n\nArguments:\n\ndata - input JSON data as a dictionary.\n\nReturns:\n\n  The transformed input data.\n\nPrevious\u00ab rasa.nlu.emulators.no_emulatorNextrasa.nlu.extractors._crf_entity_extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1180": {"text": "Version: 3.x\n\nrasa.nlu.extractors._crf_entity_extractor\n\nCRFEntityExtractor Objects#\n\nCopyclass CRFEntityExtractor(EntityExtractor)\n\nextract_entities#\n\nCopy | extract_entities(message: Message) -> List[Dict[Text, Any]]\n\nExtract entities from the given message using the trained model(s).\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Metadata = None, cached_component: Optional[\"CRFEntityExtractor\"] = None, **kwargs: Any, ,) -> \"CRFEntityExtractor\"\n\nLoads trained component (see parent class for full docstring).\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Optional[Dict[Text, Any]]\n\nPersist this model into the passed directory.\n\nReturns the metadata necessary to load the model again.\n\nPrevious\u00ab rasa.nlu.emulators.witNextrasa.nlu.extractors._duckling_entity_extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1181": {"text": "Version: 3.x\n\nrasa.nlu.extractors._duckling_entity_extractor\n\nDucklingEntityExtractor Objects#\n\nCopyclass DucklingEntityExtractor(EntityExtractor)\n\nSearches for structured entites, e.g. dates, using a duckling server.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[Metadata] = None, cached_component: Optional[\"DucklingEntityExtractor\"] = None, **kwargs: Any, ,) -> \"DucklingEntityExtractor\"\n\nLoads trained component (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.extractors._crf_entity_extractorNextrasa.nlu.extractors._entity_synonyms \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1182": {"text": "Version: 3.x\n\nrasa.nlu.extractors._entity_synonyms\n\nEntitySynonymMapper Objects#\n\nCopyclass EntitySynonymMapper(EntityExtractor)\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[Metadata] = None, cached_component: Optional[\"EntitySynonymMapper\"] = None, **kwargs: Any, ,) -> \"EntitySynonymMapper\"\n\nLoads trained component (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.extractors._duckling_entity_extractorNextrasa.nlu.extractors._extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1183": {"text": "Version: 3.x\n\nrasa.nlu.extractors._extractor\n\nEntityTagSpec Objects#\n\nCopyclass EntityTagSpec(NamedTuple)\n\nSpecification of an entity tag present in the training data.\n\nEntityExtractor Objects#\n\nCopyclass EntityExtractor(Component)\n\nEntity extractors are components which extract entities.\n\nThey can be placed in the pipeline like other components, and can extract\nentities like a person's name, or a location.\n\nadd_extractor_name#\n\nCopy | add_extractor_name(entities: List[Dict[Text, Any]]) -> List[Dict[Text, Any]]\n\nAdds this extractor's name to a list of entities.\n\nArguments:\n\nentities - the extracted entities.\n\nReturns:\n\n  the modified entities.\n\nadd_processor_name#\n\nCopy | add_processor_name(entity: Dict[Text, Any]) -> Dict[Text, Any]\n\nAdds this extractor's name to the list of processors for this entity.\n\nArguments:\n\nentity - the extracted entity and its metadata.\n\nReturns:\n\n  the modified entity.\n\ninit_split_entities#\n\nCopy | init_split_entities() -> Dict[Text, bool]\n\nInitialises the behaviour for splitting entities by comma (or not).\n\nReturns:\n\n  Defines desired behaviour for splitting specific entity types and\ndefault behaviour for splitting any entity types for which no\nbehaviour is defined.\n\nfilter_irrelevant_entities#\n\nCopy | @staticmethod | filter_irrelevant_entities(extracted: list, requested_dimensions: set) -> list\n\nOnly return dimensions the user configured.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1184": {"text": "Only return dimensions the user configured.\n\nfilter_trainable_entities#\n\nCopy | filter_trainable_entities(entity_examples: List[Message]) -> List[Message]\n\nFilters out untrainable entity annotations.\n\nCreates a copy of entity_examples in which entities that have\nextractor set to something other than\nself.name (e.g. 'CRFEntityExtractor') are removed.\n\nconvert_predictions_into_entities#\n\nCopy | @staticmethod | convert_predictions_into_entities(text: Text, tokens: List[Token], tags: Dict[Text, List[Text]], split_entities_config: Dict[Text, bool] = None, confidences: Optional[Dict[Text, List[float]]] = None) -> List[Dict[Text, Any]]\n\nConvert predictions into entities.\n\nArguments:\n\ntext - The text message.tokens - Message tokens without CLS token.tags - Predicted tags.split_entities_config - config for handling splitting a list of entitiesconfidences - Confidences of predicted tags.\n\nReturns:\n\n  Entities.\n\nget_tag_for#\n\nCopy | @staticmethod | get_tag_for(tags: Dict[Text, List[Text]], tag_name: Text, idx: int) -> Text\n\nGet the value of the given tag name from the list of tags.\n\nArguments:\n\ntags - Mapping of tag name to list of tags;tag_name - The tag name of interest.idx - The index position of the tag.\n\nReturns:\n\n  The tag value.\n\ncheck_correct_entity_annotations#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1185": {"text": "The tag value.\n\ncheck_correct_entity_annotations#\n\nCopy | @staticmethod | check_correct_entity_annotations(training_data: TrainingData) -> None\n\nCheck if entities are correctly annotated in the training data.\n\nIf the start and end values of an entity do not match any start and end values\nof the respected token, we define an entity as misaligned and log a warning.\n\nArguments:\n\ntraining_data - The training data.\n\nPrevious\u00ab rasa.nlu.extractors._entity_synonymsNextrasa.nlu.extractors._mitie_entity_extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1186": {"text": "Version: 3.x\n\nrasa.nlu.extractors._mitie_entity_extractor\n\nMitieEntityExtractor Objects#\n\nCopyclass MitieEntityExtractor(EntityExtractor)\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, ner: Optional[\"mitie.named_entity_extractor\"] = None) -> None\n\nConstruct a new intent classifier using the sklearn framework.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Metadata = None, cached_component: Optional[\"MitieEntityExtractor\"] = None, **kwargs: Any, ,) -> \"MitieEntityExtractor\"\n\nLoads trained component (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.extractors._extractorNextrasa.nlu.extractors._regex_entity_extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1187": {"text": "Version: 3.x\n\nrasa.nlu.extractors._regex_entity_extractor\n\nRegexEntityExtractor Objects#\n\nCopyclass RegexEntityExtractor(EntityExtractor)\n\nSearches for entities in the user's message using the lookup tables and regexes\ndefined in the training data.\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, patterns: Optional[List[Dict[Text, Text]]] = None)\n\nExtracts entities using the lookup tables and/or regexes defined.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[Metadata] = None, cached_component: Optional[\"RegexEntityExtractor\"] = None, **kwargs: Any, ,) -> \"RegexEntityExtractor\"\n\nLoads trained component (see parent class for full docstring).\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Optional[Dict[Text, Any]]\n\nPersist this model into the passed directory.\n\nReturn the metadata necessary to load the model again.\n\nPrevious\u00ab rasa.nlu.extractors._mitie_entity_extractorNextrasa.nlu.extractors.crf_entity_extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1188": {"text": "Version: 3.x\n\nrasa.nlu.extractors.crf_entity_extractor\n\nCRFEntityExtractorOptions Objects#\n\nCopyclass CRFEntityExtractorOptions(str, Enum)\n\nFeatures that can be used for the 'CRFEntityExtractor'.\n\nCRFEntityExtractor Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.ENTITY_EXTRACTOR, is_trainable=True)class CRFEntityExtractor(GraphComponent, EntityExtractorMixin)\n\nImplements conditional random fields (CRF) to do named entity recognition.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             entity_taggers: Optional[Dict[Text, \"CRF\"]] = None) -> None\n\nCreates an instance of entity extractor.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> CRFEntityExtractor\n\nCreates a new untrained component (see parent class for full docstring).\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1189": {"text": "Copy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\ntrain#\n\nCopydef train(training_data: TrainingData) -> Resource\n\nTrains the extractor on a data set.\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nAugments messages with entities.\n\nextract_entities#\n\nCopydef extract_entities(message: Message) -> List[Dict[Text, Any]]\n\nExtract entities from the given message using the trained model(s).\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> CRFEntityExtractor\n\nLoads trained component (see parent class for full docstring).\n\npersist#\n\nCopydef persist() -> None\n\nPersist this model into the passed directory.\n\nPrevious\u00ab rasa.nlu.extractors._regex_entity_extractorNextrasa.nlu.extractors.duckling_entity_extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1190": {"text": "Version: 3.x\n\nrasa.nlu.extractors.duckling_entity_extractor\n\nDucklingEntityExtractor Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.ENTITY_EXTRACTOR, is_trainable=False)class DucklingEntityExtractor(GraphComponent, EntityExtractorMixin)\n\nSearches for structured entities, e.g. dates, using a duckling server.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any]) -> None\n\nCreates the extractor.\n\nArguments:\n\nconfig - The extractor's config.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> DucklingEntityExtractor\n\nCreates component (see parent class for full docstring).\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nAugments the message with potentially extracted entities.\n\nPrevious\u00ab rasa.nlu.extractors.crf_entity_extractorNextrasa.nlu.extractors.duckling_http_extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1191": {"text": "Version: 3.x\n\nrasa.nlu.extractors.duckling_http_extractor\n\nDucklingHTTPExtractor Objects#\n\nCopyclass DucklingHTTPExtractor(EntityExtractor)\n\nSearches for structured entites, e.g. dates, using a duckling server.\n\nPrevious\u00ab rasa.nlu.extractors.duckling_entity_extractorNextrasa.nlu.extractors.entity_synonyms \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1192": {"text": "Version: 3.x\n\nrasa.nlu.extractors.entity_synonyms\n\nEntitySynonymMapper Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.ENTITY_EXTRACTOR, is_trainable=True)class EntitySynonymMapper(GraphComponent, EntityExtractorMixin)\n\nMaps entities to their synonyms if they appear in the training data.\n\n__init__#\n\nCopydef __init__(config: Optional[Dict[Text, Any]],             model_storage: ModelStorage,             resource: Resource,             synonyms: Optional[Dict[Text, Any]] = None) -> None\n\nCreates the mapper.\n\nArguments:\n\nconfig - The mapper's config.model_storage - Storage which the component can use to persist and load\nitself.resource - Resource locator for this component which can be used to persist\nand load itself from the model_storage.synonyms - A dictionary of previously known synonyms.\n\ncreate#\n\nCopy@classmethoddef create(cls,           config: Dict[Text, Any],           model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext,           synonyms: Optional[Dict[Text, Any]] = None) -> EntitySynonymMapper\n\nCreates component (see parent class for full docstring).\n\ntrain#\n\nCopydef train(training_data: TrainingData) -> Resource\n\nTrains the synonym lookup table.\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nModifies entities attached to message to resolve synonyms.\n\nArguments:\n\nmessages - List containing the latest user message\n\nReturns:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1193": {"text": "Arguments:\n\nmessages - List containing the latest user message\n\nReturns:\n\n  List containing the latest user message with entities resolved to\nsynonyms if there is a match.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> EntitySynonymMapper\n\nLoads trained component (see parent class for full docstring).\n\nreplace_synonyms#\n\nCopydef replace_synonyms(entities: List[Dict[Text, Any]]) -> None\n\nReplace any entities which match a synonym with the synonymous entity.\n\nPrevious\u00ab rasa.nlu.extractors.duckling_http_extractorNextrasa.nlu.extractors.extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1194": {"text": "Version: 3.x\n\nrasa.nlu.extractors.extractor\n\nEntityTagSpec Objects#\n\nCopyclass EntityTagSpec(NamedTuple)\n\nSpecification of an entity tag present in the training data.\n\nEntityExtractorMixin Objects#\n\nCopyclass EntityExtractorMixin(abc.ABC)\n\nProvides functionality for components that do entity extraction.\n\nInheriting from this class will add utility functions for entity extraction.\nEntity extraction is the process of identifying and extracting entities like a\nperson's name, or a location from a message.\n\nname#\n\nCopy@propertydef name() -> Text\n\nReturns the name of the class.\n\nadd_extractor_name#\n\nCopydef add_extractor_name(        entities: List[Dict[Text, Any]]) -> List[Dict[Text, Any]]\n\nAdds this extractor's name to a list of entities.\n\nArguments:\n\nentities - the extracted entities.\n\nReturns:\n\n  the modified entities.\n\nadd_processor_name#\n\nCopydef add_processor_name(entity: Dict[Text, Any]) -> Dict[Text, Any]\n\nAdds this extractor's name to the list of processors for this entity.\n\nArguments:\n\nentity - the extracted entity and its metadata.\n\nReturns:\n\n  the modified entity.\n\nfilter_irrelevant_entities#\n\nCopy@staticmethoddef filter_irrelevant_entities(extracted: list,                               requested_dimensions: set) -> list\n\nOnly return dimensions the user configured.\n\nfilter_trainable_entities#\n\nCopydef filter_trainable_entities(entity_examples: List[Message]) -> List[Message]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1195": {"text": "Filters out untrainable entity annotations.\n\nCreates a copy of entity_examples in which entities that have\nextractor set to something other than\nself.name (e.g. 'CRFEntityExtractor') are removed.\n\nconvert_predictions_into_entities#\n\nCopy@staticmethoddef convert_predictions_into_entities(    text: Text,    tokens: List[Token],    tags: Dict[Text, List[Text]],    split_entities_config: Dict[Text, bool] = None,    confidences: Optional[Dict[Text, List[float]]] = None) -> List[Dict[Text, Any]]\n\nConvert predictions into entities.\n\nArguments:\n\ntext - The text message.tokens - Message tokens without CLS token.tags - Predicted tags.split_entities_config - config for handling splitting a list of entitiesconfidences - Confidences of predicted tags.\n\nReturns:\n\n  Entities.\n\nget_tag_for#\n\nCopy@staticmethoddef get_tag_for(tags: Dict[Text, List[Text]], tag_name: Text,                idx: int) -> Text\n\nGet the value of the given tag name from the list of tags.\n\nArguments:\n\ntags - Mapping of tag name to list of tags;tag_name - The tag name of interest.idx - The index position of the tag.\n\nReturns:\n\n  The tag value.\n\ncheck_correct_entity_annotations#\n\nCopy@staticmethoddef check_correct_entity_annotations(training_data: TrainingData) -> None\n\nCheck if entities are correctly annotated in the training data.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1196": {"text": "Check if entities are correctly annotated in the training data.\n\nIf the start and end values of an entity do not match any start and end values\nof the respected token, we define an entity as misaligned and log a warning.\n\nArguments:\n\ntraining_data - The training data.\n\nPrevious\u00ab rasa.nlu.extractors.entity_synonymsNextrasa.nlu.extractors.mitie_entity_extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1197": {"text": "Version: 3.x\n\nrasa.nlu.extractors.mitie_entity_extractor\n\nMitieEntityExtractor Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.ENTITY_EXTRACTOR,    is_trainable=True,    model_from=\"MitieNLP\",)class MitieEntityExtractor(GraphComponent, EntityExtractorMixin)\n\nA Mitie Entity Extractor (which is a thin wrapper around Dlib-ml).\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             ner: Optional[\"mitie.named_entity_extractor\"] = None) -> None\n\nCreates a new instance.\n\nArguments:\n\nconfig - The configuration.model_storage - Storage which graph components can use to persist and load\nthemselves.resource - Resource locator for this component which can be used to persist\nand load itself from the model_storage.ner - Mitie named entity extractor\n\nvalidate_config#\n\nCopydef validate_config(cls, config: Dict[Text, Any]) -> None", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1198": {"text": "Checks whether the given configuration is valid.\n\nArguments:\n\nconfig - a configuration for a Mitie entity extractor component\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> GraphComponent\n\nCreates a new MitieEntityExtractor.\n\nArguments:\n\nconfig - This config overrides the default_config.model_storage - Storage which graph components can use to persist and load\nthemselves.resource - Resource locator for this component which can be used to persist\nand load itself from the model_storage.execution_context - Information about the current graph run. Unused.Returns - An instantiated MitieEntityExtractor.\n\ntrain#\n\nCopydef train(training_data: TrainingData, model: MitieModel) -> Resource\n\nTrains a MITIE named entity recognizer.\n\nArguments:\n\ntraining_data - the training datamodel - a MitieModel\n\nReturns:\n\n  resource for loading the trained model\n\nprocess#\n\nCopydef process(messages: List[Message], model: MitieModel) -> List[Message]\n\nExtracts entities from messages and appends them to the attribute.\n\nIf no patterns where found during training, then the given messages will not\nbe modified. In particular, if no ENTITIES attribute exists yet, then\nit will not be created.\n\nIf no pattern can be found in the given message, then no entities will be\nadded to any existing list of entities. However, if no ENTITIES attribute\nexists yet, then an ENTITIES attribute will be created.\n\nReturns:\n\n  the given list of messages that have been modified\n\nload#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1199": {"text": "Returns:\n\n  the given list of messages that have been modified\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> MitieEntityExtractor\n\nLoads trained component (see parent class for full docstring).\n\npersist#\n\nCopydef persist() -> None\n\nPersist this model.\n\nPrevious\u00ab rasa.nlu.extractors.extractorNextrasa.nlu.extractors.regex_entity_extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1200": {"text": "Version: 3.x\n\nrasa.nlu.extractors.regex_entity_extractor\n\nRegexEntityExtractor Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.ENTITY_EXTRACTOR, is_trainable=True)class RegexEntityExtractor(GraphComponent, EntityExtractorMixin)\n\nExtracts entities via lookup tables and regexes defined in the training data.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> RegexEntityExtractor\n\nCreates a new GraphComponent.\n\nArguments:\n\nconfig - This config overrides the default_config.model_storage - Storage which graph components can use to persist and load\nthemselves.resource - Resource locator for this component which can be used to persist\nand load itself from the model_storage.execution_context - Information about the current graph run. Unused.Returns - An instantiated GraphComponent.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             patterns: Optional[List[Dict[Text, Text]]] = None) -> None\n\nCreates a new instance.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1201": {"text": "Creates a new instance.\n\nArguments:\n\nconfig - The configuration.model_storage - Storage which graph components can use to persist and load\nthemselves.resource - Resource locator for this component which can be used to persist\nand load itself from the model_storage.patterns - a list of patterns\n\ntrain#\n\nCopydef train(training_data: TrainingData) -> Resource\n\nExtract patterns from the training data.\n\nArguments:\n\ntraining_data - the training data\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nExtracts entities from messages and appends them to the attribute.\n\nIf no patterns where found during training, then the given messages will not\nbe modified. In particular, if no ENTITIES attribute exists yet, then\nit will not be created.\n\nIf no pattern can be found in the given message, then no entities will be\nadded to any existing list of entities. However, if no ENTITIES attribute\nexists yet, then an ENTITIES attribute will be created.\n\nReturns:\n\n  the given list of messages that have been modified\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> RegexEntityExtractor\n\nLoads trained component (see parent class for full docstring).\n\npersist#\n\nCopydef persist() -> None\n\nPersist this model.\n\nPrevious\u00ab rasa.nlu.extractors.mitie_entity_extractorNextrasa.nlu.extractors.spacy_entity_extractor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1202": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1203": {"text": "Version: 3.x\n\nrasa.nlu.extractors.spacy_entity_extractor\n\nSpacyEntityExtractor Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.ENTITY_EXTRACTOR,    is_trainable=False,    model_from=\"SpacyNLP\",)class SpacyEntityExtractor(GraphComponent, EntityExtractorMixin)\n\nEntity extractor which uses SpaCy.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any]) -> None\n\nInitialize SpacyEntityExtractor.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> GraphComponent\n\nCreates a new component (see parent class for full docstring).\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nLists required dependencies (see parent class for full docstring).\n\nprocess#\n\nCopydef process(messages: List[Message], model: SpacyModel) -> List[Message]\n\nExtract entities using SpaCy.\n\nArguments:\n\nmessages - List of messages to process.model - Container holding a loaded spacy nlp model.Returns - The processed messages.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1204": {"text": "Previous\u00ab rasa.nlu.extractors.regex_entity_extractorNextrasa.nlu.featurizers.dense_featurizer._convert_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1205": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.dense_featurizer._convert_featurizer\n\nConveRTFeaturizer Objects#\n\nCopyclass ConveRTFeaturizer(DenseFeaturizer)\n\nFeaturizer using ConveRT model.\n\nLoads the ConveRT(https://github.com/PolyAI-LDN/polyai-models#convert)\nmodel from TFHub and computes sentence and sequence level feature representations\nfor dense featurizable attributes of each message object.\n\nrequired_components#\n\nCopy | @classmethod | required_components(cls) -> List[Type[Component]]\n\nComponents that should be included in the pipeline before this component.\n\nrequired_packages#\n\nCopy | @classmethod | required_packages(cls) -> List[Text]\n\nPackages needed to be installed.\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None) -> None\n\nInitializes ConveRTFeaturizer with the model and different\nencoding signatures.\n\nArguments:\n\ncomponent_config - Configuration for the component.\n\ntrain#\n\nCopy | train(training_data: TrainingData, config: Optional[RasaNLUModelConfig] = None, **kwargs: Any, ,) -> None\n\nFeaturize all message attributes in the training data with the ConveRT model.\n\nArguments:\n\ntraining_data - Training data to be featurizedconfig - Pipeline configuration**kwargs - Any other arguments.\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nFeaturize an incoming message with the ConveRT model.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1206": {"text": "Featurize an incoming message with the ConveRT model.\n\nArguments:\n\nmessage - Message to be featurized**kwargs - Any other arguments.\n\ncache_key#\n\nCopy | @classmethod | cache_key(cls, component_meta: Dict[Text, Any], model_metadata: Metadata) -> Optional[Text]\n\nCache the component for future use.\n\nArguments:\n\ncomponent_meta - configuration for the component.model_metadata - configuration for the whole pipeline.Returns - key of the cache for future retrievals.\n\nprovide_context#\n\nCopy | provide_context() -> Dict[Text, Any]\n\nStore the model in pipeline context for future use.\n\ntokenize#\n\nCopy | tokenize(message: Message, attribute: Text) -> List[Token]\n\nTokenize the text using the ConveRT model.\n\nConveRT adds a special char in front of (some) words and splits words into\nsub-words. To ensure the entity start and end values matches the token values,\nreuse the tokens that are already assigned to the message. If individual tokens\nare split up into multiple tokens, add this information to the\nrespected tokens.\n\nPrevious\u00ab rasa.nlu.extractors.spacy_entity_extractorNextrasa.nlu.featurizers.dense_featurizer._lm_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1207": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.dense_featurizer._lm_featurizer\n\nLanguageModelFeaturizer Objects#\n\nCopyclass LanguageModelFeaturizer(DenseFeaturizer)\n\nFeaturizer using transformer-based language models.\n\nThe transformers(https://github.com/huggingface/transformers) library\nis used to load pre-trained language models like BERT, GPT-2, etc.\nThe component also tokenizes and featurizes dense featurizable attributes of\neach message.\n\nrequired_components#\n\nCopy | @classmethod | required_components(cls) -> List[Type[Component]]\n\nPackages needed to be installed.\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, skip_model_load: bool = False) -> None\n\nInitializes LanguageModelFeaturizer with the specified model.\n\nArguments:\n\ncomponent_config - Configuration for the component.skip_model_load - Skip loading the model for pytests.\n\ncache_key#\n\nCopy | @classmethod | cache_key(cls, component_meta: Dict[Text, Any], model_metadata: Metadata) -> Optional[Text]\n\nCache the component for future use.\n\nArguments:\n\ncomponent_meta - configuration for the component.model_metadata - configuration for the whole pipeline.Returns - key of the cache for future retrievals.\n\nrequired_packages#\n\nCopy | @classmethod | required_packages(cls) -> List[Text]\n\nPackages needed to be installed.\n\ntrain#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1208": {"text": "Packages needed to be installed.\n\ntrain#\n\nCopy | train(training_data: TrainingData, config: Optional[RasaNLUModelConfig] = None, **kwargs: Any, ,) -> None\n\nCompute tokens and dense features for each message in training data.\n\nArguments:\n\ntraining_data - NLU training data to be tokenized and featurizedconfig - NLU pipeline config consisting of all components.\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nProcess an incoming message by computing its tokens and dense features.\n\nArguments:\n\nmessage - Incoming message object\n\nPrevious\u00ab rasa.nlu.featurizers.dense_featurizer._convert_featurizerNextrasa.nlu.featurizers.dense_featurizer.convert_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1209": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.dense_featurizer.convert_featurizer\n\nConveRTFeaturizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER, is_trainable=False)class ConveRTFeaturizer(DenseFeaturizer, GraphComponent)\n\nFeaturizer using ConveRT model.\n\nLoads the ConveRT(https://github.com/PolyAI-LDN/polyai-models#convert)\nmodel from TFHub and computes sentence and sequence level feature representations\nfor dense featurizable attributes of each message object.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nPackages needed to be installed.\n\nsupported_languages#\n\nCopy@staticmethoddef supported_languages() -> Optional[List[Text]]\n\nDetermines which languages this component can work with.\n\nReturns: A list of supported languages, or None to signify all are supported.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> ConveRTFeaturizer", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1210": {"text": "Creates a new component (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(name: Text, config: Dict[Text, Any]) -> None\n\nInitializes a ConveRTFeaturizer.\n\nArguments:\n\nname - An identifier for this featurizer.config - The configuration.\n\nvalidate_config#\n\nCopy@classmethoddef validate_config(cls, config: Dict[Text, Any]) -> None\n\nValidates that the component is configured properly.\n\nprocess_training_data#\n\nCopydef process_training_data(training_data: TrainingData) -> TrainingData\n\nFeaturize all message attributes in the training data with the ConveRT model.\n\nArguments:\n\ntraining_data - Training data to be featurized\n\nReturns:\n\n  featurized training data\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nFeaturize an incoming message with the ConveRT model.\n\nArguments:\n\nmessages - Message to be featurized\n\ntokenize#\n\nCopydef tokenize(message: Message, attribute: Text) -> List[Token]\n\nTokenize the text using the ConveRT model.\n\nConveRT adds a special char in front of (some) words and splits words into\nsub-words. To ensure the entity start and end values matches the token values,\nreuse the tokens that are already assigned to the message. If individual tokens\nare split up into multiple tokens, add this information to the\nrespected tokens.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1211": {"text": "Previous\u00ab rasa.nlu.featurizers.dense_featurizer._lm_featurizerNextrasa.nlu.featurizers.dense_featurizer.dense_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1212": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.dense_featurizer.dense_featurizer\n\nDenseFeaturizer Objects#\n\nCopyclass DenseFeaturizer(Featurizer[np.ndarray], ABC)\n\nBase class for all dense featurizers.\n\naggregate_sequence_features#\n\nCopy@staticmethoddef aggregate_sequence_features(        dense_sequence_features: np.ndarray,        pooling_operation: Text,        only_non_zero_vectors: bool = True) -> np.ndarray\n\nAggregates the non-zero vectors of a dense sequence feature matrix.\n\nArguments:\n\ndense_sequence_features - a 2-dimensional matrix where the first dimension\nis the sequence dimension over which we want to aggregate of shape\n[seq_len, feat_dim]pooling_operation - either max pooling or average poolingonly_non_zero_vectors - determines whether the aggregation is done over\nnon-zero vectors only\n\nReturns:\n\n  a matrix of shape [1, feat_dim]\n\nPrevious\u00ab rasa.nlu.featurizers.dense_featurizer.convert_featurizerNextrasa.nlu.featurizers.dense_featurizer.lm_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1213": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.dense_featurizer.lm_featurizer\n\nLanguageModelFeaturizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER, is_trainable=False)class LanguageModelFeaturizer(DenseFeaturizer, GraphComponent)\n\nA featurizer that uses transformer-based language models.\n\nThis component loads a pre-trained language model\nfrom the Transformers library (https://github.com/huggingface/transformers)\nincluding BERT, GPT, GPT-2, xlnet, distilbert, and roberta.\nIt also tokenizes and featurizes the featurizable dense attributes of\neach message.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             execution_context: ExecutionContext) -> None\n\nInitializes the featurizer with the model in the config.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns LanguageModelFeaturizer's default config.\n\nvalidate_config#\n\nCopy@classmethoddef validate_config(cls, config: Dict[Text, Any]) -> None\n\nValidates the configuration.\n\ncreate#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1214": {"text": "Validates the configuration.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> LanguageModelFeaturizer\n\nCreates a LanguageModelFeaturizer.\n\nLoads the model specified in the config.\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nReturns the extra python dependencies required.\n\nprocess_training_data#\n\nCopydef process_training_data(training_data: TrainingData) -> TrainingData\n\nComputes tokens and dense features for each message in training data.\n\nArguments:\n\ntraining_data - NLU training data to be tokenized and featurizedconfig - NLU pipeline config consisting of all components.\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nProcesses messages by computing tokens and dense features.\n\nPrevious\u00ab rasa.nlu.featurizers.dense_featurizer.dense_featurizerNextrasa.nlu.featurizers.dense_featurizer.mitie_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1215": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.dense_featurizer.mitie_featurizer\n\nMitieFeaturizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER,    is_trainable=False,    model_from=\"MitieNLP\",)class MitieFeaturizer(DenseFeaturizer, GraphComponent)\n\nA class that featurizes using Mitie.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the component's default config.\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             execution_context: ExecutionContext) -> None\n\nInstantiates a new MitieFeaturizer instance.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> MitieFeaturizer\n\nCreates a new untrained component (see parent class for full docstring).\n\nvalidate_config#\n\nCopy@classmethoddef validate_config(cls, config: Dict[Text, Any]) -> None\n\nValidates that the component is configured properly.\n\nndim#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1216": {"text": "Validates that the component is configured properly.\n\nndim#\n\nCopydef ndim(feature_extractor: \"mitie.total_word_feature_extractor\") -> int\n\nReturns the number of dimensions.\n\nprocess#\n\nCopydef process(messages: List[Message], model: MitieModel) -> List[Message]\n\nFeaturizes all given messages in-place.\n\nReturns:\n\n  The given list of messages which have been modified in-place.\n\nprocess_training_data#\n\nCopydef process_training_data(training_data: TrainingData,                          model: MitieModel) -> TrainingData\n\nProcesses the training examples in the given training data in-place.\n\nArguments:\n\ntraining_data - Training data.model - A Mitie model.\n\nReturns:\n\n  Same training data after processing.\n\nfeatures_for_tokens#\n\nCopydef features_for_tokens(    tokens: List[Token],    feature_extractor: \"mitie.total_word_feature_extractor\") -> Tuple[np.ndarray, np.ndarray]\n\nCalculates features.\n\nPrevious\u00ab rasa.nlu.featurizers.dense_featurizer.lm_featurizerNextrasa.nlu.featurizers.dense_featurizer.spacy_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1217": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.dense_featurizer.spacy_featurizer\n\nSpacyFeaturizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER, is_trainable=False)class SpacyFeaturizer(DenseFeaturizer, GraphComponent)\n\nFeaturize messages using SpaCy.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any], name: Text) -> None\n\nInitializes SpacyFeaturizer.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> GraphComponent\n\nCreates a new component (see parent class for full docstring).\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nProcesses incoming messages and computes and sets features.\n\nprocess_training_data#\n\nCopydef process_training_data(training_data: TrainingData) -> TrainingData", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1218": {"text": "Copydef process_training_data(training_data: TrainingData) -> TrainingData\n\nProcesses the training examples in the given training data in-place.\n\nArguments:\n\ntraining_data - Training data.\n\nReturns:\n\n  Same training data after processing.\n\nvalidate_config#\n\nCopy@classmethoddef validate_config(cls, config: Dict[Text, Any]) -> None\n\nValidates that the component is configured properly.\n\nPrevious\u00ab rasa.nlu.featurizers.dense_featurizer.mitie_featurizerNextrasa.nlu.featurizers.sparse_featurizer._count_vectors_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1219": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.sparse_featurizer._count_vectors_featurizer\n\nCountVectorsFeaturizer Objects#\n\nCopyclass CountVectorsFeaturizer(SparseFeaturizer)\n\nCreates a sequence of token counts features based on sklearn's CountVectorizer.\n\nAll tokens which consist only of digits (e.g. 123 and 99\nbut not ab12d) will be represented by a single feature.\n\nSet analyzer to 'char_wb'\nto use the idea of Subword Semantic Hashing\nfrom https://arxiv.org/abs/1810.07150.\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, vectorizers: Optional[Dict[Text, \"CountVectorizer\"]] = None, finetune_mode: bool = False) -> None\n\nConstruct a new count vectorizer using the sklearn framework.\n\ntrain#\n\nCopy | train(training_data: TrainingData, cfg: Optional[RasaNLUModelConfig] = None, **kwargs: Any, ,) -> None\n\nTrain the featurizer.\n\nTake parameters from config and\nconstruct a new count vectorizer using the sklearn framework.\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nProcess incoming message and compute and set features\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Optional[Dict[Text, Any]]\n\nPersist this model into the passed directory.\n\nReturns the metadata necessary to load the model again.\n\nload#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1220": {"text": "Returns the metadata necessary to load the model again.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[Metadata] = None, cached_component: Optional[\"CountVectorsFeaturizer\"] = None, should_finetune: bool = False, **kwargs: Any, ,) -> \"CountVectorsFeaturizer\"\n\nLoads trained component (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.featurizers.dense_featurizer.spacy_featurizerNextrasa.nlu.featurizers.sparse_featurizer._lexical_syntactic_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1221": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.sparse_featurizer._lexical_syntactic_featurizer\n\nLexicalSyntacticFeaturizer Objects#\n\nCopyclass LexicalSyntacticFeaturizer(SparseFeaturizer)\n\nCreates features for entity extraction.\n\nMoves with a sliding window over every token in the user message and creates\nfeatures according to the configuration.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[Metadata] = None, cached_component: Optional[\"LexicalSyntacticFeaturizer\"] = None, **kwargs: Any, ,) -> \"LexicalSyntacticFeaturizer\"\n\nLoads trained component (see parent class for full docstring).\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Optional[Dict[Text, Any]]\n\nPersist this model into the passed directory.\nReturn the metadata necessary to load the model again.\n\nPrevious\u00ab rasa.nlu.featurizers.sparse_featurizer._count_vectors_featurizerNextrasa.nlu.featurizers.sparse_featurizer._regex_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1222": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.sparse_featurizer._regex_featurizer\n\nRegexFeaturizer Objects#\n\nCopyclass RegexFeaturizer(SparseFeaturizer)\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, known_patterns: Optional[List[Dict[Text, Text]]] = None, finetune_mode: bool = False) -> None\n\nConstructs new features for regexes and lookup table using regex expressions.\n\nArguments:\n\ncomponent_config - Configuration for the componentknown_patterns - Regex Patterns the component should pre-load itself with.finetune_mode - Load component in finetune mode.\n\ntrain#\n\nCopy | train(training_data: TrainingData, config: Optional[RasaNLUModelConfig] = None, **kwargs: Any, ,) -> None\n\nTrains the component with all patterns extracted from training data.\n\nArguments:\n\ntraining_data - Training data consisting of training examples and patterns\navailable.config - NLU Pipeline config**kwargs - Any other arguments\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[Metadata] = None, cached_component: Optional[\"RegexFeaturizer\"] = None, should_finetune: bool = False, **kwargs: Any, ,) -> \"RegexFeaturizer\"\n\nLoads a previously trained component.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1223": {"text": "Loads a previously trained component.\n\nArguments:\n\nmeta - Configuration of trained component.model_dir - Path where trained pipeline is stored.model_metadata - Metadata for the trained pipeline.cached_component - Previously cached component(if any).should_finetune - Indicates whether to load the component for further\nfinetuning.**kwargs - Any other arguments.\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Optional[Dict[Text, Any]]\n\nPersist this model into the passed directory.\n\nArguments:\n\nfile_name - Prefix to add to all files stored as part of this component.model_dir - Path where files should be stored.\n\nReturns:\n\n  Metadata necessary to load the model again.\n\nPrevious\u00ab rasa.nlu.featurizers.sparse_featurizer._lexical_syntactic_featurizerNextrasa.nlu.featurizers.sparse_featurizer.count_vectors_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1224": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.sparse_featurizer.count_vectors_featurizer\n\nCountVectorsFeaturizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER, is_trainable=True)class CountVectorsFeaturizer(SparseFeaturizer, GraphComponent)\n\nCreates a sequence of token counts features based on sklearn's CountVectorizer.\n\nAll tokens which consist only of digits (e.g. 123 and 99\nbut not ab12d) will be represented by a single feature.\n\nSet analyzer to 'char_wb'\nto use the idea of Subword Semantic Hashing\nfrom https://arxiv.org/abs/1810.07150.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the component's default config.\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             execution_context: ExecutionContext,             vectorizers: Optional[Dict[Text, \"CountVectorizer\"]] = None,             oov_token: Optional[Text] = None,             oov_words: Optional[List[Text]] = None) -> None", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1225": {"text": "Constructs a new count vectorizer using the sklearn framework.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> CountVectorsFeaturizer\n\nCreates a new untrained component (see parent class for full docstring).\n\ntrain#\n\nCopydef train(training_data: TrainingData,          model: Optional[SpacyModel] = None) -> Resource\n\nTrains the featurizer.\n\nTake parameters from config and\nconstruct a new count vectorizer using the sklearn framework.\n\nprocess_training_data#\n\nCopydef process_training_data(training_data: TrainingData) -> TrainingData\n\nProcesses the training examples in the given training data in-place.\n\nArguments:\n\ntraining_data - the training data\n\nReturns:\n\n  same training data after processing\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nProcesses incoming message and compute and set features.\n\npersist#\n\nCopydef persist() -> None\n\nPersist this model into the passed directory.\n\nReturns the metadata necessary to load the model again.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> CountVectorsFeaturizer\n\nLoads trained component (see parent class for full docstring).\n\nvalidate_config#\n\nCopy@classmethoddef validate_config(cls, config: Dict[Text, Any]) -> None", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1226": {"text": "Validates that the component is configured properly.\n\nPrevious\u00ab rasa.nlu.featurizers.sparse_featurizer._regex_featurizerNextrasa.nlu.featurizers.sparse_featurizer.lexical_syntactic_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1227": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.sparse_featurizer.lexical_syntactic_featurizer\n\nLexicalSyntacticFeaturizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER, is_trainable=True)class LexicalSyntacticFeaturizer(SparseFeaturizer, GraphComponent)\n\nExtracts and encodes lexical syntactic features.\n\nGiven a sequence of tokens, this featurizer produces a sequence of features\nwhere the t-th feature encodes lexical and syntactic information about the t-th\ntoken and it's surrounding tokens.\n\nIn detail: The lexical syntactic features can be specified via a list of\nconfigurations [c_0, c_1, ..., c_n] where each c_i is a list of names of\nlexical and syntactic features (e.g. low, suffix2, digit).\nFor a given tokenized text, the featurizer will consider a window of size n\naround each token and evaluate the given list of configurations as follows:\n\nIt will extract the features listed in c_m where m = (n-1)/2 if n is even and\nt0 from token tIt will extract the features listed in t2,t3 ... ,  from the last,\nsecond to last, ... token before token t, respectively.It will extract the features listed t5, t5, ... for the first,\nsecond, ... token t, respectively.\nIt will then combine all these features into one feature for position t.\n\nExample:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1228": {"text": "Example:\n\n  If we specify t9, then for each position t\nthe t-th feature will encode whether the token at position t is upper case,\nwhere the token at position [c_0, c_1, ..., c_n]3 is lower case and the first two characters\nof the token at position [c_0, c_1, ..., c_n]4.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the component's default config.\n\n__init__#\n\nCopydef __init__(    config: Dict[Text, Any],    model_storage: ModelStorage,    resource: Resource,    execution_context: ExecutionContext,    feature_to_idx_dict: Optional[Dict[Tuple[int, Text], Dict[Text, int]]] = None) -> None\n\nInstantiates a new LexicalSyntacticFeaturizer instance.\n\nvalidate_config#\n\nCopy@classmethoddef validate_config(cls, config: Dict[Text, Any]) -> None\n\nValidates that the component is configured properly.\n\ntrain#\n\nCopydef train(training_data: TrainingData) -> Resource\n\nTrains the featurizer.\n\nArguments:\n\ntraining_data - the training data\n\nReturns:\n\n  the resource from which this trained component can be loaded\n\nwarn_if_pos_features_cannot_be_computed#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1229": {"text": "warn_if_pos_features_cannot_be_computed#\n\nCopydef warn_if_pos_features_cannot_be_computed(        training_data: TrainingData) -> None\n\nWarn if part-of-speech features are needed but not given.\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nFeaturizes all given messages in-place.\n\nArguments:\n\nmessages - messages to be featurized.\n\nReturns:\n\n  The same list with the same messages after featurization.\n\nprocess_training_data#\n\nCopydef process_training_data(training_data: TrainingData) -> TrainingData\n\nProcesses the training examples in the given training data in-place.\n\nArguments:\n\ntraining_data - the training data\n\nReturns:\n\n  same training data after processing\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> LexicalSyntacticFeaturizer\n\nCreates a new untrained component (see parent class for full docstring).\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> LexicalSyntacticFeaturizer\n\nLoads trained component (see parent class for full docstring).\n\npersist#\n\nCopydef persist() -> None\n\nPersist this model (see parent class for full docstring).", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1230": {"text": "Persist this model (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.featurizers.sparse_featurizer.count_vectors_featurizerNextrasa.nlu.featurizers.sparse_featurizer.regex_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1231": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.sparse_featurizer.regex_featurizer\n\nRegexFeaturizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER, is_trainable=True)class RegexFeaturizer(SparseFeaturizer, GraphComponent)\n\nAdds message features based on regex expressions.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the component's default config.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any],             model_storage: ModelStorage,             resource: Resource,             execution_context: ExecutionContext,             known_patterns: Optional[List[Dict[Text, Text]]] = None) -> None\n\nConstructs new features for regexes and lookup table using regex expressions.\n\nArguments:\n\nconfig - Configuration for the component.model_storage - Storage which graph components can use to persist and load\nthemselves.resource - Resource locator for this component which can be used to persist\nand load itself from the model_storage.execution_context - Information about the current graph run.known_patterns - Regex Patterns the component should pre-load itself with.\n\ncreate#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1232": {"text": "create#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> RegexFeaturizer\n\nCreates a new untrained component (see parent class for full docstring).\n\ntrain#\n\nCopydef train(training_data: TrainingData) -> Resource\n\nTrains the component with all patterns extracted from training data.\n\nprocess_training_data#\n\nCopydef process_training_data(training_data: TrainingData) -> TrainingData\n\nProcesses the training examples (see parent class for full docstring).\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nFeaturizes all given messages in-place.\n\nReturns:\n\n  the given list of messages which have been modified in-place\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> RegexFeaturizer\n\nLoads trained component (see parent class for full docstring).\n\nvalidate_config#\n\nCopy@classmethoddef validate_config(cls, config: Dict[Text, Any]) -> None\n\nValidates that the component is configured properly.\n\nPrevious\u00ab rasa.nlu.featurizers.sparse_featurizer.lexical_syntactic_featurizerNextrasa.nlu.featurizers.sparse_featurizer.sparse_featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1233": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.sparse_featurizer.sparse_featurizer\n\nSparseFeaturizer Objects#\n\nCopyclass SparseFeaturizer(Featurizer[scipy.sparse.spmatrix], ABC)\n\nBase class for all sparse featurizers.\n\nPrevious\u00ab rasa.nlu.featurizers.sparse_featurizer.regex_featurizerNextrasa.nlu.featurizers.featurizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1234": {"text": "Version: 3.x\n\nrasa.nlu.featurizers.featurizer\n\nFeaturizer Objects#\n\nCopyclass Featurizer(Generic[FeatureType], ABC)\n\nBase class for all featurizers.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the component's default config.\n\n__init__#\n\nCopydef __init__(name: Text, config: Dict[Text, Any]) -> None\n\nInstantiates a new featurizer.\n\nArguments:\n\nconfig - configurationname - a name that can be used as identifier, in case the configuration does\nnot specify an alias (or this alias is None)\n\nvalidate_config#\n\nCopy@classmethod@abstractmethoddef validate_config(cls, config: Dict[Text, Any]) -> None\n\nValidates that the component is configured properly.\n\nadd_features_to_message#\n\nCopydef add_features_to_message(sequence: FeatureType,                            sentence: Optional[FeatureType], attribute: Text,                            message: Message) -> None\n\nAdds sequence and sentence features for the attribute to the given message.\n\nArguments:\n\nsequence - sequence feature matrixsentence - sentence feature matrixattribute - the attribute which both features describemessage - the message to which we want to add those features\n\nraise_if_featurizer_configs_are_not_compatible#\n\nCopy@staticmethoddef raise_if_featurizer_configs_are_not_compatible(        featurizer_configs: Iterable[Dict[Text, Any]]) -> None\n\nValidates that the given configurations of featurizers can be used together.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1235": {"text": "Validates that the given configurations of featurizers can be used together.\n\nRaises:\n\n InvalidConfigException if the given featurizers should not be used in\nthe same graph.\n\nPrevious\u00ab rasa.nlu.featurizers.sparse_featurizer.sparse_featurizerNextrasa.nlu.schemas.data_schema \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1236": {"text": "Version: 3.x\n\nrasa.nlu.schemas.data_schema\n\nentity_dict_schema#\n\nCopyentity_dict_schema() -> Dict[Text, Any]\n\nReturns: schema for defining entities in Markdown format.\n\nrasa_nlu_data_schema#\n\nCopyrasa_nlu_data_schema() -> Dict[Text, Any]\n\nReturns: schema of the Rasa NLU data format (json format).\n\nPrevious\u00ab rasa.nlu.featurizers.featurizerNextrasa.nlu.selectors._response_selector \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1237": {"text": "Version: 3.x\n\nrasa.nlu.selectors._response_selector\n\nResponseSelector Objects#\n\nCopyclass ResponseSelector(DIETClassifier)\n\nResponse selector using supervised embeddings.\n\nThe response selector embeds user inputs\nand candidate response into the same space.\nSupervised embeddings are trained by maximizing similarity between them.\nIt also provides rankings of the response that did not \"win\".\n\nThe supervised response selector needs to be preceded by\na featurizer in the pipeline.\nThis featurizer creates the features used for the embeddings.\nIt is recommended to use CountVectorsFeaturizer that\ncan be optionally preceded by SpacyNLP and SpacyTokenizer.\n\nBased on the starspace idea from: https://arxiv.org/abs/1709.03856.\nHowever, in this implementation the mu parameter is treated differently\nand additional hidden layers are added together with dropout.\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, index_label_id_mapping: Optional[Dict[int, Text]] = None, entity_tag_specs: Optional[List[EntityTagSpec]] = None, model: Optional[RasaModel] = None, all_retrieval_intents: Optional[List[Text]] = None, responses: Optional[Dict[Text, List[Dict[Text, Any]]]] = None, finetune_mode: bool = False, sparse_feature_sizes: Optional[Dict[Text, Dict[Text, List[int]]]] = None) -> None\n\nDeclare instance variables with default values.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1238": {"text": "Declare instance variables with default values.\n\nArguments:\n\ncomponent_config - Configuration for the component.index_label_id_mapping - Mapping between label and index used for encoding.entity_tag_specs - Format specification all entity tags.model - Model architecture.all_retrieval_intents - All retrieval intents defined in the data.responses - All responses defined in the data.finetune_mode - If True loads the model with pre-trained weights,\notherwise initializes it with random weights.sparse_feature_sizes - Sizes of the sparse features the model was trained on.\n\npreprocess_train_data#\n\nCopy | preprocess_train_data(training_data: TrainingData) -> RasaModelData\n\nPrepares data for training.\n\nPerforms sanity checks on training data, extracts encodings for labels.\n\nArguments:\n\ntraining_data - training data to preprocessed.\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nSelects most like response for message.\n\nArguments:\n\nmessage - Latest user message.kwargs - Additional key word arguments.\n\nReturns:\n\n  the most likely response, the associated intent_response_key and its\nsimilarity to the input.\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Dict[Text, Any]\n\nPersist this model into the passed directory.\n\nReturn the metadata necessary to load the model again.\n\nload#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1239": {"text": "Return the metadata necessary to load the model again.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Metadata = None, cached_component: Optional[\"ResponseSelector\"] = None, **kwargs: Any, ,) -> \"ResponseSelector\"\n\nLoads the trained model from the provided directory.\n\nDIET2DIET Objects#\n\nCopyclass DIET2DIET(DIET)\n\nDiet 2 Diet transformer implementation.\n\nbatch_loss#\n\nCopy | batch_loss(batch_in: Union[Tuple[tf.Tensor], Tuple[np.ndarray]]) -> tf.Tensor\n\nCalculates the loss for the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The loss of the given batch.\n\nbatch_predict#\n\nCopy | batch_predict(batch_in: Union[Tuple[tf.Tensor], Tuple[np.ndarray]]) -> Dict[Text, Union[tf.Tensor, Dict[Text, tf.Tensor]]]\n\nPredicts the output of the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The output to predict.\n\nPrevious\u00ab rasa.nlu.schemas.data_schemaNextrasa.nlu.selectors.response_selector \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1240": {"text": "Version: 3.x\n\nrasa.nlu.selectors.response_selector\n\nResponseSelector Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER, is_trainable=True)class ResponseSelector(DIETClassifier)\n\nResponse selector using supervised embeddings.\n\nThe response selector embeds user inputs\nand candidate response into the same space.\nSupervised embeddings are trained by maximizing similarity between them.\nIt also provides rankings of the response that did not \"win\".\n\nThe supervised response selector needs to be preceded by\na featurizer in the pipeline.\nThis featurizer creates the features used for the embeddings.\nIt is recommended to use CountVectorsFeaturizer that\ncan be optionally preceded by SpacyNLP and SpacyTokenizer.\n\nBased on the starspace idea from: https://arxiv.org/abs/1709.03856.\nHowever, in this implementation the mu parameter is treated differently\nand additional hidden layers are added together with dropout.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\n__init__#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1241": {"text": "__init__#\n\nCopydef __init__(    config: Dict[Text, Any],    model_storage: ModelStorage,    resource: Resource,    execution_context: ExecutionContext,    index_label_id_mapping: Optional[Dict[int, Text]] = None,    entity_tag_specs: Optional[List[EntityTagSpec]] = None,    model: Optional[RasaModel] = None,    all_retrieval_intents: Optional[List[Text]] = None,    responses: Optional[Dict[Text, List[Dict[Text, Any]]]] = None,    sparse_feature_sizes: Optional[Dict[Text, Dict[Text, List[int]]]] = None) -> None\n\nDeclare instance variables with default values.\n\nArguments:\n\nconfig - Configuration for the component.model_storage - Storage which graph components can use to persist and load\nthemselves.resource - Resource locator for this component which can be used to persist\nand load itself from the model_storage.execution_context - Information about the current graph run.index_label_id_mapping - Mapping between label and index used for encoding.entity_tag_specs - Format specification all entity tags.model - Model architecture.all_retrieval_intents - All retrieval intents defined in the data.responses - All responses defined in the data.model_storage0 - If model_storage1 loads the model with pre-trained weights,\notherwise initializes it with random weights.model_storage2 - Sizes of the sparse features the model was trained on.\n\nlabel_key#\n\nCopy@propertydef label_key() -> Text\n\nReturns label key.\n\nlabel_sub_key#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1242": {"text": "Returns label key.\n\nlabel_sub_key#\n\nCopy@propertydef label_sub_key() -> Text\n\nReturns label sub_key.\n\nmodel_class#\n\nCopy@staticmethoddef model_class(use_text_as_label: bool) -> Type[RasaModel]\n\nReturns model class.\n\npreprocess_train_data#\n\nCopydef preprocess_train_data(training_data: TrainingData) -> RasaModelData\n\nPrepares data for training.\n\nPerforms sanity checks on training data, extracts encodings for labels.\n\nArguments:\n\ntraining_data - training data to preprocessed.\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nSelects most like response for message.\n\nArguments:\n\nmessages - List containing latest user message.\n\nReturns:\n\n  List containing the message augmented with the most likely response,\nthe associated intent_response_key and its similarity to the input.\n\npersist#\n\nCopydef persist() -> None\n\nPersist this model into the passed directory.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> ResponseSelector\n\nLoads the trained model from the provided directory.\n\nDIET2BOW Objects#\n\nCopyclass DIET2BOW(DIET)\n\nDIET2BOW transformer implementation.\n\nDIET2DIET Objects#\n\nCopyclass DIET2DIET(DIET)\n\nDiet 2 Diet transformer implementation.\n\nbatch_loss#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1243": {"text": "Diet 2 Diet transformer implementation.\n\nbatch_loss#\n\nCopydef batch_loss(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> tf.Tensor\n\nCalculates the loss for the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The loss of the given batch.\n\nbatch_predict#\n\nCopydef batch_predict(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> Dict[Text, Union[tf.Tensor, Dict[Text, tf.Tensor]]]\n\nPredicts the output of the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The output to predict.\n\nPrevious\u00ab rasa.nlu.selectors._response_selectorNextrasa.nlu.tokenizers._jieba_tokenizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1244": {"text": "Version: 3.x\n\nrasa.nlu.tokenizers._jieba_tokenizer\n\nJiebaTokenizer Objects#\n\nCopyclass JiebaTokenizer(Tokenizer)\n\nThis tokenizer is a wrapper for Jieba (https://github.com/fxsjy/jieba).\n\n__init__#\n\nCopy | __init__(component_config: Dict[Text, Any] = None) -> None\n\nConstruct a new intent classifier using the MITIE framework.\n\nload_custom_dictionary#\n\nCopy | @staticmethod | load_custom_dictionary(path: Text) -> None\n\nLoad all the custom dictionaries stored in the path.\n\nMore information about the dictionaries file format can\nbe found in the documentation of jieba.\nhttps://github.com/fxsjy/jieba#load-dictionary\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[\"Metadata\"] = None, cached_component: Optional[Component] = None, **kwargs: Any, ,) -> \"JiebaTokenizer\"\n\nLoads trained component (see parent class for full docstring).\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Optional[Dict[Text, Any]]\n\nPersist this model into the passed directory.\n\nPrevious\u00ab rasa.nlu.selectors.response_selectorNextrasa.nlu.tokenizers._tokenizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1245": {"text": "Version: 3.x\n\nrasa.nlu.tokenizers._tokenizer\n\nToken Objects#\n\nCopyclass Token()\n\nset#\n\nCopy | set(prop: Text, info: Any) -> None\n\nSet property value.\n\nget#\n\nCopy | get(prop: Text, default: Optional[Any] = None) -> Any\n\nReturns token value.\n\nfingerprint#\n\nCopy | fingerprint() -> Text\n\nReturns a stable hash for this Token.\n\nTokenizer Objects#\n\nCopyclass Tokenizer(Component)\n\nBase class for tokenizers.\n\n__init__#\n\nCopy | __init__(component_config: Dict[Text, Any] = None) -> None\n\nConstruct a new tokenizer using the WhitespaceTokenizer framework.\n\ntokenize#\n\nCopy | tokenize(message: Message, attribute: Text) -> List[Token]\n\nTokenizes the text of the provided attribute of the incoming message.\n\ntrain#\n\nCopy | train(training_data: TrainingData, config: Optional[RasaNLUModelConfig] = None, **kwargs: Any, ,) -> None\n\nTokenize all training data.\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nTokenize the incoming message.\n\nPrevious\u00ab rasa.nlu.tokenizers._jieba_tokenizerNextrasa.nlu.tokenizers._whitespace_tokenizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1246": {"text": "Version: 3.x\n\nrasa.nlu.tokenizers._whitespace_tokenizer\n\nWhitespaceTokenizer Objects#\n\nCopyclass WhitespaceTokenizer(Tokenizer)\n\n__init__#\n\nCopy | __init__(component_config: Dict[Text, Any] = None) -> None\n\nConstruct a new tokenizer using the WhitespaceTokenizer framework.\n\nremove_emoji#\n\nCopy | remove_emoji(text: Text) -> Text\n\nRemove emoji if the full text, aka token, matches the emoji regex.\n\nPrevious\u00ab rasa.nlu.tokenizers._tokenizerNextrasa.nlu.tokenizers.convert_tokenizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1247": {"text": "Version: 3.x\n\nrasa.nlu.tokenizers.convert_tokenizer\n\nConveRTTokenizer Objects#\n\nCopyclass ConveRTTokenizer(WhitespaceTokenizer)\n\nThis tokenizer is deprecated and will be removed in the future.\n\nThe ConveRTFeaturizer component now sets the sub-token information\nfor dense featurizable attributes of each message object.\n\n__init__#\n\nCopy | __init__(component_config: Dict[Text, Any] = None) -> None\n\nInitializes ConveRTTokenizer with the ConveRT model.\n\nArguments:\n\ncomponent_config - Configuration for the component.\n\nPrevious\u00ab rasa.nlu.tokenizers._whitespace_tokenizerNextrasa.nlu.tokenizers.jieba_tokenizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1248": {"text": "Version: 3.x\n\nrasa.nlu.tokenizers.jieba_tokenizer\n\nJiebaTokenizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_TOKENIZER, is_trainable=True)class JiebaTokenizer(Tokenizer)\n\nThis tokenizer is a wrapper for Jieba (https://github.com/fxsjy/jieba).\n\nsupported_languages#\n\nCopy@staticmethoddef supported_languages() -> Optional[List[Text]]\n\nSupported languages (see parent class for full docstring).\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any], model_storage: ModelStorage,             resource: Resource) -> None\n\nInitialize the tokenizer.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> JiebaTokenizer\n\nCreates a new component (see parent class for full docstring).\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\ntrain#\n\nCopydef train(training_data: TrainingData) -> Resource\n\nCopies the dictionary to the model storage.\n\ntokenize#\n\nCopydef tokenize(message: Message, attribute: Text) -> List[Token]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1249": {"text": "Copydef tokenize(message: Message, attribute: Text) -> List[Token]\n\nTokenizes the text of the provided attribute of the incoming message.\n\nload#\n\nCopy@classmethoddef load(cls, config: Dict[Text, Any], model_storage: ModelStorage,         resource: Resource, execution_context: ExecutionContext, **kwargs: Any) -> JiebaTokenizer\n\nLoads a custom dictionary from model storage.\n\npersist#\n\nCopydef persist() -> None\n\nPersist the custom dictionaries.\n\nPrevious\u00ab rasa.nlu.tokenizers.convert_tokenizerNextrasa.nlu.tokenizers.lm_tokenizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1250": {"text": "Version: 3.x\n\nrasa.nlu.tokenizers.lm_tokenizer\n\nLanguageModelTokenizer Objects#\n\nCopyclass LanguageModelTokenizer(WhitespaceTokenizer)\n\nThis tokenizer is deprecated and will be removed in the future.\n\nUse the LanguageModelFeaturizer with any other Tokenizer instead.\n\n__init__#\n\nCopy | __init__(component_config: Dict[Text, Any] = None) -> None\n\nInitializes LanguageModelTokenizer for tokenization.\n\nArguments:\n\ncomponent_config - Configuration for the component.\n\nPrevious\u00ab rasa.nlu.tokenizers.jieba_tokenizerNextrasa.nlu.tokenizers.mitie_tokenizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1251": {"text": "Version: 3.x\n\nrasa.nlu.tokenizers.mitie_tokenizer\n\nMitieTokenizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_TOKENIZER, is_trainable=False)class MitieTokenizer(Tokenizer)\n\nTokenizes messages using the mitie library..\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns default config (see parent class for full docstring).\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> MitieTokenizer\n\nCreates a new component (see parent class for full docstring).\n\ntokenize#\n\nCopydef tokenize(message: Message, attribute: Text) -> List[Token]\n\nTokenizes the text of the provided attribute of the incoming message.\n\nPrevious\u00ab rasa.nlu.tokenizers.lm_tokenizerNextrasa.nlu.tokenizers.spacy_tokenizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1252": {"text": "Version: 3.x\n\nrasa.nlu.tokenizers.spacy_tokenizer\n\nSpacyTokenizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_TOKENIZER, is_trainable=False)class SpacyTokenizer(Tokenizer)\n\nTokenizer that uses SpaCy.\n\nrequired_components#\n\nCopy@classmethoddef required_components(cls) -> List[Type]\n\nComponents that should be included in the pipeline before this component.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nThe component's default config (see parent class for full docstring).\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]\n\nAny extra python dependencies required for this component to run.\n\ntokenize#\n\nCopydef tokenize(message: Message, attribute: Text) -> List[Token]\n\nTokenizes the text of the provided attribute of the incoming message.\n\nPrevious\u00ab rasa.nlu.tokenizers.mitie_tokenizerNextrasa.nlu.tokenizers.tokenizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1253": {"text": "Version: 3.x\n\nrasa.nlu.tokenizers.tokenizer\n\nToken Objects#\n\nCopyclass Token()\n\nUsed by Tokenizers which split a single message into multiple Tokens.\n\n__init__#\n\nCopydef __init__(text: Text,             start: int,             end: Optional[int] = None,             data: Optional[Dict[Text, Any]] = None,             lemma: Optional[Text] = None) -> None\n\nCreate a Token.\n\nArguments:\n\ntext - The token text.start - The start index of the token within the entire message.end - The end index of the token within the entire message.data - Additional token data.lemma - An optional lemmatized version of the token text.\n\nset#\n\nCopydef set(prop: Text, info: Any) -> None\n\nSet property value.\n\nget#\n\nCopydef get(prop: Text, default: Optional[Any] = None) -> Any\n\nReturns token value.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns a stable hash for this Token.\n\nTokenizer Objects#\n\nCopyclass Tokenizer(GraphComponent, abc.ABC)\n\nBase class for tokenizers.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any]) -> None\n\nConstruct a new tokenizer.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> GraphComponent\n\nCreates a new component (see parent class for full docstring).\n\ntokenize#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1254": {"text": "tokenize#\n\nCopy@abc.abstractmethoddef tokenize(message: Message, attribute: Text) -> List[Token]\n\nTokenizes the text of the provided attribute of the incoming message.\n\nprocess_training_data#\n\nCopydef process_training_data(training_data: TrainingData) -> TrainingData\n\nTokenize all training data.\n\nprocess#\n\nCopydef process(messages: List[Message]) -> List[Message]\n\nTokenize the incoming messages.\n\nPrevious\u00ab rasa.nlu.tokenizers.spacy_tokenizerNextrasa.nlu.tokenizers.whitespace_tokenizer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1255": {"text": "Version: 3.x\n\nrasa.nlu.tokenizers.whitespace_tokenizer\n\nWhitespaceTokenizer Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MESSAGE_TOKENIZER, is_trainable=False)class WhitespaceTokenizer(Tokenizer)\n\nCreates features for entity extraction.\n\nnot_supported_languages#\n\nCopy@staticmethoddef not_supported_languages() -> Optional[List[Text]]\n\nThe languages that are not supported.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns the component's default config.\n\n__init__#\n\nCopydef __init__(config: Dict[Text, Any]) -> None\n\nInitialize the tokenizer.\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> WhitespaceTokenizer\n\nCreates a new component (see parent class for full docstring).\n\nremove_emoji#\n\nCopydef remove_emoji(text: Text) -> Text\n\nRemove emoji if the full text, aka token, matches the emoji regex.\n\nPrevious\u00ab rasa.nlu.tokenizers.tokenizerNextrasa.nlu.training_data.converters.nlg_markdown_to_yaml_converter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1256": {"text": "Version: 3.x\n\nrasa.nlu.training_data.converters.nlg_markdown_to_yaml_converter\n\nNLGMarkdownToYamlConverter Objects#\n\nCopyclass NLGMarkdownToYamlConverter(TrainingDataConverter)\n\nfilter#\n\nCopy | @classmethod | filter(cls, source_path: Path) -> bool\n\nChecks if the given training data file contains NLG data in Markdown format\nand can be converted to YAML.\n\nArguments:\n\nsource_path - Path to the training data file.\n\nReturns:\n\n True if the given file can be converted, False otherwise\n\nconvert_and_write#\n\nCopy | @classmethod | async convert_and_write(cls, source_path: Path, output_path: Path) -> None\n\nConverts the given training data file and saves it to the output directory.\n\nArguments:\n\nsource_path - Path to the training data file.output_path - Path to the output directory.\n\nPrevious\u00ab rasa.nlu.tokenizers.whitespace_tokenizerNextrasa.nlu.training_data.converters.nlu_markdown_to_yaml_converter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1257": {"text": "Version: 3.x\n\nrasa.nlu.training_data.converters.nlu_markdown_to_yaml_converter\n\nNLUMarkdownToYamlConverter Objects#\n\nCopyclass NLUMarkdownToYamlConverter(TrainingDataConverter)\n\nfilter#\n\nCopy | @classmethod | filter(cls, source_path: Path) -> bool\n\nChecks if the given training data file contains NLU data in Markdown format\nand can be converted to YAML.\n\nArguments:\n\nsource_path - Path to the training data file.\n\nReturns:\n\n True if the given file can be converted, False otherwise\n\nconvert_and_write#\n\nCopy | @classmethod | async convert_and_write(cls, source_path: Path, output_path: Path) -> None\n\nConverts the given training data file and saves it to the output directory.\n\nArguments:\n\nsource_path - Path to the training data file.output_path - Path to the output directory.\n\nPrevious\u00ab rasa.nlu.training_data.converters.nlg_markdown_to_yaml_converterNextrasa.nlu.training_data.formats.dialogflow \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1258": {"text": "Version: 3.x\n\nrasa.nlu.training_data.formats.dialogflow\n\nDialogflowReader Objects#\n\nCopyclass DialogflowReader(TrainingDataReader)\n\nread#\n\nCopy | read(fn: Text, **kwargs: Any) -> \"TrainingData\"\n\nLoads training data stored in the Dialogflow data format.\n\nPrevious\u00ab rasa.nlu.training_data.converters.nlu_markdown_to_yaml_converterNextrasa.nlu.training_data.formats.luis \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1259": {"text": "Version: 3.x\n\nrasa.nlu.training_data.formats.luis\n\nLuisReader Objects#\n\nCopyclass LuisReader(JsonTrainingDataReader)\n\nread_from_json#\n\nCopy | read_from_json(js: Dict[Text, Any], **kwargs: Any) -> \"TrainingData\"\n\nLoads training data stored in the LUIS.ai data format.\n\nPrevious\u00ab rasa.nlu.training_data.formats.dialogflowNextrasa.nlu.training_data.formats.markdown \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1260": {"text": "Version: 3.x\n\nrasa.nlu.training_data.formats.markdown\n\nMarkdownReader Objects#\n\nCopyclass MarkdownReader(TrainingDataReader)\n\nReads markdown training data and creates a TrainingData object.\n\nreads#\n\nCopy | reads(s: Text, **kwargs: Any) -> \"TrainingData\"\n\nRead markdown string and create TrainingData object\n\nMarkdownWriter Objects#\n\nCopyclass MarkdownWriter(TrainingDataWriter)\n\ndumps#\n\nCopy | dumps(training_data: \"TrainingData\") -> Text\n\nTransforms a TrainingData object into a markdown string.\n\nPrevious\u00ab rasa.nlu.training_data.formats.luisNextrasa.nlu.training_data.formats.markdown_nlg \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1261": {"text": "Version: 3.x\n\nrasa.nlu.training_data.formats.markdown_nlg\n\nNLGMarkdownReader Objects#\n\nCopyclass NLGMarkdownReader(TrainingDataReader)\n\nReads markdown training data containing NLG stories and creates a TrainingData object.\n\nreads#\n\nCopy | reads(s: Text, **kwargs: Any) -> \"TrainingData\"\n\nRead markdown string and create TrainingData object\n\nNLGMarkdownWriter Objects#\n\nCopyclass NLGMarkdownWriter(TrainingDataWriter)\n\ndumps#\n\nCopy | dumps(training_data: \"TrainingData\") -> Text\n\nTransforms the NlG part of TrainingData object into a markdown string.\n\nPrevious\u00ab rasa.nlu.training_data.formats.markdownNextrasa.nlu.training_data.formats.rasa \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1262": {"text": "Version: 3.x\n\nrasa.nlu.training_data.formats.rasa\n\nRasaReader Objects#\n\nCopyclass RasaReader(JsonTrainingDataReader)\n\nread_from_json#\n\nCopy | read_from_json(js: Dict[Text, Any], **_) -> \"TrainingData\"\n\nLoads training data stored in the rasa NLU data format.\n\nRasaWriter Objects#\n\nCopyclass RasaWriter(TrainingDataWriter)\n\ndumps#\n\nCopy | dumps(training_data: \"TrainingData\", **kwargs) -> Text\n\nWrites Training Data to a string in json format.\n\nPrevious\u00ab rasa.nlu.training_data.formats.markdown_nlgNextrasa.nlu.training_data.formats.rasa_yaml \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1263": {"text": "Version: 3.x\n\nrasa.nlu.training_data.formats.rasa_yaml\n\nRasaYAMLReader Objects#\n\nCopyclass RasaYAMLReader(TrainingDataReader)\n\nReads YAML training data and creates a TrainingData object.\n\nvalidate#\n\nCopy | @staticmethod | validate(string: Text) -> None\n\nCheck if the string adheres to the NLU yaml data schema.\n\nIf the string is not in the right format, an exception will be raised.\n\nreads#\n\nCopy | reads(string: Text, **kwargs: Any) -> \"TrainingData\"\n\nReads TrainingData in YAML format from a string.\n\nArguments:\n\nstring - String with YAML training data.**kwargs - Keyword arguments.\n\nReturns:\n\n  New TrainingData object with parsed training data.\n\nis_yaml_nlu_file#\n\nCopy | @staticmethod | is_yaml_nlu_file(filename: Text) -> bool\n\nChecks if the specified file possibly contains NLU training data in YAML.\n\nArguments:\n\nfilename - name of the file to check.\n\nReturns:\n\n True if the filename is possibly a valid YAML NLU file,\nFalse otherwise.\n\nRasaYAMLWriter Objects#\n\nCopyclass RasaYAMLWriter(TrainingDataWriter)\n\nWrites training data into a file in a YAML format.\n\ndumps#\n\nCopy | dumps(training_data: \"TrainingData\") -> Text\n\nTurns TrainingData into a string.\n\ndump#\n\nCopy | dump(target: Union[Text, Path, StringIO], training_data: \"TrainingData\") -> None", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1264": {"text": "Writes training data into a file in a YAML format.\n\nArguments:\n\ntarget - Name of the target object to write the YAML to.training_data - TrainingData object.\n\nPrevious\u00ab rasa.nlu.training_data.formats.rasaNextrasa.nlu.training_data.formats.readerwriter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1265": {"text": "Version: 3.x\n\nrasa.nlu.training_data.formats.readerwriter\n\nTrainingDataReader Objects#\n\nCopyclass TrainingDataReader()\n\nread#\n\nCopy | read(filename: Union[Text, Path], **kwargs: Any) -> \"TrainingData\"\n\nReads TrainingData from a file.\n\nreads#\n\nCopy | reads(s: Text, **kwargs: Any) -> \"TrainingData\"\n\nReads TrainingData from a string.\n\nTrainingDataWriter Objects#\n\nCopyclass TrainingDataWriter()\n\ndump#\n\nCopy | dump(filename: Text, training_data) -> None\n\nWrites a TrainingData object in markdown format to a file.\n\ndumps#\n\nCopy | dumps(training_data: \"TrainingData\") -> Text\n\nTurns TrainingData into a string.\n\nprepare_training_examples#\n\nCopy | @staticmethod | prepare_training_examples(training_data: \"TrainingData\") -> OrderedDict\n\nPre-processes training data examples by removing not trainable entities.\n\ngenerate_list_item#\n\nCopy | @staticmethod | generate_list_item(text: Text) -> Text\n\nGenerates text for a list item.\n\ngenerate_message#\n\nCopy | @staticmethod | generate_message(message: Dict[Text, Any]) -> Text\n\nGenerates text for a message object.\n\ngenerate_entity#\n\nCopy | @staticmethod | generate_entity(text: Text, entity: Dict[Text, Any]) -> Text\n\nGenerates text for an entity object.\n\nJsonTrainingDataReader Objects#\n\nCopyclass JsonTrainingDataReader(TrainingDataReader)\n\nreads#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1266": {"text": "Copyclass JsonTrainingDataReader(TrainingDataReader)\n\nreads#\n\nCopy | reads(s: Text, **kwargs: Any) -> \"TrainingData\"\n\nTransforms string into json object and passes it on.\n\nread_from_json#\n\nCopy | read_from_json(js: Dict[Text, Any], **kwargs: Any) -> \"TrainingData\"\n\nReads TrainingData from a json object.\n\nPrevious\u00ab rasa.nlu.training_data.formats.rasa_yamlNextrasa.nlu.training_data.formats.wit \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1267": {"text": "Version: 3.x\n\nrasa.nlu.training_data.formats.wit\n\nWitReader Objects#\n\nCopyclass WitReader(JsonTrainingDataReader)\n\nread_from_json#\n\nCopy | read_from_json(js: Dict[Text, Any], **kwargs: Any)\n\nLoads training data stored in the WIT.ai data format.\n\nPrevious\u00ab rasa.nlu.training_data.formats.readerwriterNextrasa.nlu.training_data.entities_parser \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1268": {"text": "Version: 3.x\n\nrasa.nlu.training_data.entities_parser\n\nEntityAttributes Objects#\n\nCopyclass EntityAttributes(NamedTuple)\n\nAttributes of an entity defined in markdown data.\n\nfind_entities_in_training_example#\n\nCopyfind_entities_in_training_example(example: Text) -> List[Dict[Text, Any]]\n\nExtracts entities from an intent example.\n\nArguments:\n\nexample - Intent example.\n\nReturns:\n\n  Extracted entities.\n\nextract_entity_attributes#\n\nCopyextract_entity_attributes(match: Match) -> EntityAttributes\n\nExtract the entity attributes, i.e. type, value, etc., from the\nregex match.\n\nArguments:\n\nmatch - Regex match to extract the entity attributes from.\n\nReturns:\n\n  EntityAttributes object.\n\nextract_entity_attributes_from_dict#\n\nCopyextract_entity_attributes_from_dict(entity_text: Text, match: Match) -> EntityAttributes\n\nExtract entity attributes from dict format.\n\nArguments:\n\nentity_text - Original entity text.match - Regex match.\n\nReturns:\n\n  Extracted entity attributes.\n\nget_validated_dict#\n\nCopyget_validated_dict(json_str: Text) -> Dict[Text, Text]\n\nConverts the provided json_str to a valid dict containing the entity\nattributes.\n\nUsers can specify entity roles, synonyms, groups for an entity in a dict, e.g.\n[LA]{\"entity\": \"city\", \"role\": \"to\", \"value\": \"Los Angeles\"}.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1269": {"text": "Arguments:\n\njson_str - The entity dict as string without \"{}\".\n\nRaises:\n\n  ValidationError if validation of entity dict fails.\nJSONDecodeError if provided entity dict is not valid json.\n\nReturns:\n\n  Deserialized and validated json_str.\n\nreplace_entities#\n\nCopyreplace_entities(training_example: Text) -> Text\n\nReplace special symbols related to the entities in the provided\ntraining example.\n\nArguments:\n\ntraining_example - Original training example with special symbols.\n\nReturns:\n\n  String with removed special symbols.\n\nparse_training_example#\n\nCopyparse_training_example(example: Text, intent: Optional[Text] = None) -> \"Message\"\n\nExtract entities and synonyms, and convert to plain text.\n\nPrevious\u00ab rasa.nlu.training_data.formats.witNextrasa.nlu.training_data.loading \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1270": {"text": "Version: 3.x\n\nrasa.nlu.training_data.loading\n\nload_data#\n\nCopyload_data(resource_name: Text, language: Optional[Text] = \"en\") -> \"TrainingData\"\n\nLoad training data from disk.\n\nMerges them if loaded from disk and multiple files are found.\n\nload_data_from_endpoint#\n\nCopyasync load_data_from_endpoint(data_endpoint: EndpointConfig, language: Optional[Text] = \"en\") -> \"TrainingData\"\n\nLoad training data from a URL.\n\nguess_format#\n\nCopyguess_format(filename: Text) -> Text\n\nApplies heuristics to guess the data format of a file.\n\nArguments:\n\nfilename - file whose type should be guessed\n\nReturns:\n\n  Guessed file format.\n\nPrevious\u00ab rasa.nlu.training_data.entities_parserNextrasa.nlu.training_data.lookup_tables_parser \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1271": {"text": "Version: 3.x\n\nrasa.nlu.training_data.lookup_tables_parser\n\nadd_item_to_lookup_tables#\n\nCopyadd_item_to_lookup_tables(title: Text, item: Text, existing_lookup_tables: List[Dict[Text, List[Text]]]) -> None\n\nTakes a list of lookup table dictionaries.  Finds the one associated\nwith the current lookup, then adds the item to the list.\n\nArguments:\n\ntitle - Name of the lookup item.item - The lookup item.existing_lookup_tables - Existing lookup items that will be extended.\n\nPrevious\u00ab rasa.nlu.training_data.loadingNextrasa.nlu.training_data.message \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1272": {"text": "Version: 3.x\n\nrasa.nlu.training_data.message\n\nMessage Objects#\n\nCopyclass Message()\n\nas_dict_nlu#\n\nCopy | as_dict_nlu() -> dict\n\nGet dict representation of message as it would appear in training data\n\nbuild#\n\nCopy | @classmethod | build(cls, text: Text, intent: Optional[Text] = None, entities: List[Dict[Text, Any]] = None, **kwargs: Any, ,) -> \"Message\"\n\nBuild a Message from UserUttered data.\n\nArguments:\n\ntext - text of a user's utteranceintent - an intent of the user utteranceentities - entities in the user's utterance\n\nReturns:\n\n  Message\n\nbuild_from_action#\n\nCopy | @classmethod | build_from_action(cls, action_text: Optional[Text] = \"\", action_name: Optional[Text] = \"\", **kwargs: Any, ,) -> \"Message\"\n\nBuild a Message from ActionExecuted data.\n\nArguments:\n\naction_text - text of a bot's utteranceaction_name - name of an action executed\n\nReturns:\n\n  Message\n\nget_full_intent#\n\nCopy | get_full_intent() -> Text\n\nGet intent as it appears in training data\n\nget_combined_intent_response_key#\n\nCopy | get_combined_intent_response_key() -> Text\n\nGet intent as it appears in training data\n\nget_sparse_features#\n\nCopy | get_sparse_features(attribute: Text, featurizers: Optional[List[Text]] = None) -> Tuple[Optional[\"Features\"], Optional[\"Features\"]]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1273": {"text": "Get all sparse features for the given attribute that are coming from the\ngiven list of featurizers.\nIf no featurizers are provided, all available features will be considered.\n\nArguments:\n\nattribute - message attributefeaturizers - names of featurizers to consider\n\nReturns:\n\n  Sparse features.\n\nget_dense_features#\n\nCopy | get_dense_features(attribute: Text, featurizers: Optional[List[Text]] = None) -> Tuple[Optional[\"Features\"], Optional[\"Features\"]]\n\nGet all dense features for the given attribute that are coming from the given\nlist of featurizers.\nIf no featurizers are provided, all available features will be considered.\n\nArguments:\n\nattribute - message attributefeaturizers - names of featurizers to consider\n\nReturns:\n\n  Dense features.\n\nfeatures_present#\n\nCopy | features_present(attribute: Text, featurizers: Optional[List[Text]] = None) -> bool\n\nCheck if there are any features present for the given attribute and\nfeaturizers.\nIf no featurizers are provided, all available features will be considered.\n\nArguments:\n\nattribute - message attributefeaturizers - names of featurizers to consider\n\nReturns:\n\n True, if features are present, False otherwise\n\nPrevious\u00ab rasa.nlu.training_data.lookup_tables_parserNextrasa.nlu.training_data.synonyms_parser \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1274": {"text": "Version: 3.x\n\nrasa.nlu.training_data.synonyms_parser\n\nadd_synonyms_from_entities#\n\nCopyadd_synonyms_from_entities(plain_text: Text, entities: List[Dict], existing_synonyms: Dict[Text, Any]) -> None\n\nAdds synonyms found in intent examples.\n\nArguments:\n\nplain_text - Plain (with removed special symbols) user utterance.entities - Entities that were extracted from the original user utterance.existing_synonyms - The dict with existing synonyms mappings that will\nbe extended.\n\nadd_synonym#\n\nCopyadd_synonym(synonym_value: Text, synonym_name: Text, existing_synonyms: Dict[Text, Any]) -> None\n\nAdds a new synonym mapping to the provided list of synonyms.\n\nArguments:\n\nsynonym_value - Value of the synonym.synonym_name - Name of the synonym.existing_synonyms - Dictionary will synonym mappings that will be extended.\n\nPrevious\u00ab rasa.nlu.training_data.messageNextrasa.nlu.training_data.training_data \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1275": {"text": "Version: 3.x\n\nrasa.nlu.training_data.training_data\n\nTrainingData Objects#\n\nCopyclass TrainingData()\n\nHolds loaded intent and entity training data.\n\nmerge#\n\nCopy | merge(*others: \"TrainingData\") -> \"TrainingData\"\n\nReturn merged instance of this data with other training data.\n\nfilter_training_examples#\n\nCopy | filter_training_examples(condition: Callable[[Message], bool]) -> \"TrainingData\"\n\nFilter training examples.\n\nArguments:\n\ncondition - A function that will be applied to filter training examples.\n\nReturns:\n\nTrainingData - A TrainingData with filtered training examples.\n\nsanitize_examples#\n\nCopy | @staticmethod | sanitize_examples(examples: List[Message]) -> List[Message]\n\nMakes sure the training data is clean.\n\nRemove trailing whitespaces from intent and response annotations and drop\nduplicate examples.\n\nintents#\n\nCopy | @lazy_property | intents() -> Set[Text]\n\nReturns the set of intents in the training data.\n\nretrieval_intents#\n\nCopy | @lazy_property | retrieval_intents() -> Set[Text]\n\nReturns the total number of response types in the training data\n\nnumber_of_examples_per_intent#\n\nCopy | @lazy_property | number_of_examples_per_intent() -> Dict[Text, int]\n\nCalculates the number of examples per intent.\n\nnumber_of_examples_per_response#\n\nCopy | @lazy_property | number_of_examples_per_response() -> Dict[Text, int]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1276": {"text": "Calculates the number of examples per response.\n\nentities#\n\nCopy | @lazy_property | entities() -> Set[Text]\n\nReturns the set of entity types in the training data.\n\nentity_roles#\n\nCopy | @lazy_property | entity_roles() -> Set[Text]\n\nReturns the set of entity roles in the training data.\n\nentity_groups#\n\nCopy | @lazy_property | entity_groups() -> Set[Text]\n\nReturns the set of entity groups in the training data.\n\nnumber_of_examples_per_entity#\n\nCopy | @lazy_property | number_of_examples_per_entity() -> Dict[Text, int]\n\nCalculates the number of examples per entity.\n\nsort_regex_features#\n\nCopy | sort_regex_features() -> None\n\nSorts regex features lexicographically by name+pattern\n\nnlu_as_json#\n\nCopy | nlu_as_json(**kwargs: Any) -> Text\n\nRepresent this set of training examples as json.\n\nnlg_as_markdown#\n\nCopy | nlg_as_markdown() -> Text\n\nGenerates the markdown representation of the response phrases (NLG) of\nTrainingData.\n\nnlg_as_yaml#\n\nCopy | nlg_as_yaml() -> Text\n\nGenerates yaml representation of the response phrases (NLG) of TrainingData.\n\nReturns:\n\n  responses in yaml format as a string\n\nnlu_as_markdown#\n\nCopy | nlu_as_markdown() -> Text\n\nGenerates the markdown representation of the NLU part of TrainingData.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1277": {"text": "Generates the markdown representation of the NLU part of TrainingData.\n\npersist#\n\nCopy | persist(dir_name: Text, filename: Text = DEFAULT_TRAINING_DATA_OUTPUT_PATH) -> Dict[Text, Any]\n\nPersists this training data to disk and returns necessary\ninformation to load it again.\n\nsorted_entities#\n\nCopy | sorted_entities() -> List[Any]\n\nExtract all entities from examples and sorts them by entity type.\n\nsorted_intent_examples#\n\nCopy | sorted_intent_examples() -> List[Message]\n\nSorts the intent examples by the name of the intent and then response\n\nvalidate#\n\nCopy | validate() -> None\n\nEnsures that the loaded training data is valid.\n\nChecks that the data has a minimum of certain training examples.\n\ntrain_test_split#\n\nCopy | train_test_split(train_frac: float = 0.8, random_seed: Optional[int] = None) -> Tuple[\"TrainingData\", \"TrainingData\"]\n\nSplit into a training and test dataset,\npreserving the fraction of examples per intent.\n\nsplit_nlu_examples#\n\nCopy | split_nlu_examples(train_frac: float, random_seed: Optional[int] = None) -> Tuple[list, list]\n\nSplit the training data into a train and test set.\n\nArguments:\n\ntrain_frac - percentage of examples to add to the training set.random_seed - random seed\n\nReturns:\n\n  Test and training examples.\n\nis_empty#\n\nCopy | is_empty() -> bool\n\nChecks if any training data was loaded.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1278": {"text": "Checks if any training data was loaded.\n\nwithout_empty_e2e_examples#\n\nCopy | without_empty_e2e_examples() -> \"TrainingData\"\n\nRemoves training data examples from intent labels and action names which\nwere added for end-to-end training.\n\nReturns:\n\n  Itself but without training examples which don't have a text or intent.\n\nPrevious\u00ab rasa.nlu.training_data.synonyms_parserNextrasa.nlu.training_data.util \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1279": {"text": "Version: 3.x\n\nrasa.nlu.training_data.util\n\ntransform_entity_synonyms#\n\nCopytransform_entity_synonyms(synonyms, known_synonyms: Optional[Dict[Text, Any]] = None) -> Dict[Text, Any]\n\nTransforms the entity synonyms into a text->value dictionary\n\nremove_untrainable_entities_from#\n\nCopyremove_untrainable_entities_from(example: Dict[Text, Any]) -> None\n\nRemove untrainable entities from serialised training example example.\n\nEntities with an untrainable extractor will be removed. Untrainable extractors\nare defined in rasa.nlu.constants.PRETRAINED_EXTRACTORS.\n\nArguments:\n\nexample - Serialised training example to inspect.\n\nPrevious\u00ab rasa.nlu.training_data.training_dataNextrasa.nlu.utils.hugging_face.hf_transformers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1280": {"text": "Version: 3.x\n\nrasa.nlu.utils.hugging_face.hf_transformers\n\nHFTransformersNLP Objects#\n\nCopyclass HFTransformersNLP(Component)\n\nThis component is deprecated and will be removed in the future.\n\nUse the LanguageModelFeaturizer instead.\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, skip_model_load: bool = False) -> None\n\nInitializes HFTransformsNLP with the models specified.\n\ncache_key#\n\nCopy | @classmethod | cache_key(cls, component_meta: Dict[Text, Any], model_metadata: Metadata) -> Optional[Text]\n\nCache the component for future use.\n\nArguments:\n\ncomponent_meta - configuration for the component.model_metadata - configuration for the whole pipeline.Returns - key of the cache for future retrievals.\n\ntrain#\n\nCopy | train(training_data: TrainingData, config: Optional[RasaNLUModelConfig] = None, **kwargs: Any, ,) -> None\n\nCompute tokens and dense features for each message in training data.\n\nArguments:\n\ntraining_data - NLU training data to be tokenized and featurizedconfig - NLU pipeline config consisting of all components.\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nProcess an incoming message by computing its tokens and dense features.\n\nArguments:\n\nmessage - Incoming message object\n\nPrevious\u00ab rasa.nlu.training_data.utilNextrasa.nlu.utils.hugging_face.transformers_pre_post_processors \u00bb", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1281": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1282": {"text": "Version: 3.x\n\nrasa.nlu.utils.hugging_face.transformers_pre_post_processors\n\ncleanup_tokens#\n\nCopydef cleanup_tokens(token_ids_string: List[Tuple[int, Text]],                   delimiter: Text) -> Tuple[List[int], List[Text]]\n\nUtility method to apply delimiter based cleanup on list of tokens.\n\nArguments:\n\ntoken_ids_string - List of tuples with each tuple containing\n(token id, token string).delimiter - character/string to be cleaned from token strings.\n\nReturns:\n\n  Token ids and Token strings unpacked.\n\nbert_tokens_pre_processor#\n\nCopydef bert_tokens_pre_processor(token_ids: List[int]) -> List[int]\n\nAdd BERT style special tokens(CLS and SEP).\n\nArguments:\n\ntoken_ids - List of token ids without any special tokens.\n\nReturns:\n\n  List of token ids augmented with special tokens.\n\ngpt_tokens_pre_processor#\n\nCopydef gpt_tokens_pre_processor(token_ids: List[int]) -> List[int]\n\nAdd GPT style special tokens(None).\n\nArguments:\n\ntoken_ids - List of token ids without any special tokens.\n\nReturns:\n\n  List of token ids augmented with special tokens.\n\nxlnet_tokens_pre_processor#\n\nCopydef xlnet_tokens_pre_processor(token_ids: List[int]) -> List[int]\n\nAdd XLNET style special tokens.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1283": {"text": "Add XLNET style special tokens.\n\nArguments:\n\ntoken_ids - List of token ids without any special tokens.\n\nReturns:\n\n  List of token ids augmented with special tokens.\n\nroberta_tokens_pre_processor#\n\nCopydef roberta_tokens_pre_processor(token_ids: List[int]) -> List[int]\n\nAdd RoBERTa style special tokens.\n\nArguments:\n\ntoken_ids - List of token ids without any special tokens.\n\nReturns:\n\n  List of token ids augmented with special tokens.\n\nxlm_tokens_pre_processor#\n\nCopydef xlm_tokens_pre_processor(token_ids: List[int]) -> List[int]\n\nAdd XLM style special tokens.\n\nArguments:\n\ntoken_ids - List of token ids without any special tokens.\n\nReturns:\n\n  List of token ids augmented with special tokens.\n\ncamembert_tokens_pre_processor#\n\nCopydef camembert_tokens_pre_processor(token_ids: List[int]) -> List[int]\n\nAdd camembert style special tokens.\n\nArguments:\n\ntoken_ids - List of token ids without any special tokens.\n\nReturns:\n\n  List of token ids augmented with special tokens.\n\nbert_embeddings_post_processor#\n\nCopydef bert_embeddings_post_processor(        sequence_embeddings: np.ndarray) -> Tuple[np.ndarray, np.ndarray]\n\nPost-process embeddings from BERT.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1284": {"text": "Post-process embeddings from BERT.\n\nby removing CLS and SEP embeddings and returning CLS token embedding as\nsentence representation.\n\nArguments:\n\nsequence_embeddings - Sequence of token level embeddings received as output from\nBERT.\n\nReturns:\n\n  sentence level embedding and post-processed sequence level embedding.\n\ngpt_embeddings_post_processor#\n\nCopydef gpt_embeddings_post_processor(        sequence_embeddings: np.ndarray) -> Tuple[np.ndarray, np.ndarray]\n\nPost-process embeddings from GPT models.\n\nby taking a mean over sequence embeddings and returning that as sentence\nrepresentation.\n\nArguments:\n\nsequence_embeddings - Sequence of token level embeddings received as output from\nGPT.\n\nReturns:\n\n  sentence level embedding and post-processed sequence level embedding.\n\nxlnet_embeddings_post_processor#\n\nCopydef xlnet_embeddings_post_processor(        sequence_embeddings: np.ndarray) -> Tuple[np.ndarray, np.ndarray]\n\nPost-process embeddings from XLNet models.\n\nby taking a mean over sequence embeddings and returning that as sentence\nrepresentation. Remove last two time steps corresponding\nto special tokens from the sequence embeddings.\n\nArguments:\n\nsequence_embeddings - Sequence of token level embeddings received as output from\nXLNet.\n\nReturns:\n\n  sentence level embedding and post-processed sequence level embedding.\n\nroberta_embeddings_post_processor#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1285": {"text": "roberta_embeddings_post_processor#\n\nCopydef roberta_embeddings_post_processor(        sequence_embeddings: np.ndarray) -> Tuple[np.ndarray, np.ndarray]\n\nPost process embeddings from Roberta models.\n\nby taking a mean over sequence embeddings and returning that as sentence\nrepresentation. Remove first and last time steps\ncorresponding to special tokens from the sequence embeddings.\n\nArguments:\n\nsequence_embeddings - Sequence of token level embeddings received as output from\nRoberta\n\nReturns:\n\n  sentence level embedding and post-processed sequence level embedding\n\nxlm_embeddings_post_processor#\n\nCopydef xlm_embeddings_post_processor(        sequence_embeddings: np.ndarray) -> Tuple[np.ndarray, np.ndarray]\n\nPost process embeddings from XLM models\n\nby taking a mean over sequence embeddings and returning that as sentence\nrepresentation. Remove first and last time steps\ncorresponding to special tokens from the sequence embeddings.\n\nArguments:\n\nsequence_embeddings - Sequence of token level embeddings received as output from\nXLM\n\nReturns:\n\n  sentence level embedding and post-processed sequence level embedding\n\nbert_tokens_cleaner#\n\nCopydef bert_tokens_cleaner(        token_ids: List[int],        token_strings: List[Text]) -> Tuple[List[int], List[Text]]\n\nToken cleanup method for BERT.\n\nClean up tokens with the extra delimiters(##) BERT adds while breaking a token into\nsub-tokens.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1286": {"text": "Arguments:\n\ntoken_ids - List of token ids received as output from BERT Tokenizer.token_strings - List of token strings received as output from BERT Tokenizer.\n\nReturns:\n\n  Cleaned token ids and token strings.\n\nopenaigpt_tokens_cleaner#\n\nCopydef openaigpt_tokens_cleaner(        token_ids: List[int],        token_strings: List[Text]) -> Tuple[List[int], List[Text]]\n\nToken cleanup method for GPT.\n\nClean up tokens with the extra delimiters(</w>) OpenAIGPT adds while breaking a\ntoken into sub-tokens.\n\nArguments:\n\ntoken_ids - List of token ids received as output from GPT Tokenizer.token_strings - List of token strings received as output from GPT Tokenizer.\n\nReturns:\n\n  Cleaned token ids and token strings.\n\ngpt2_tokens_cleaner#\n\nCopydef gpt2_tokens_cleaner(        token_ids: List[int],        token_strings: List[Text]) -> Tuple[List[int], List[Text]]\n\nToken cleanup method for GPT2.\n\nClean up tokens with the extra delimiters(\u0120) GPT2 adds while breaking a token into\nsub-tokens.\n\nArguments:\n\ntoken_ids - List of token ids received as output from GPT Tokenizer.token_strings - List of token strings received as output from GPT Tokenizer.\n\nReturns:\n\n  Cleaned token ids and token strings.\n\nxlnet_tokens_cleaner#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1287": {"text": "xlnet_tokens_cleaner#\n\nCopydef xlnet_tokens_cleaner(        token_ids: List[int],        token_strings: List[Text]) -> Tuple[List[int], List[Text]]\n\nToken cleanup method for XLNet.\n\nClean up tokens with the extra delimiters(\u2581) XLNet adds while breaking a token into\nsub-tokens.\n\nArguments:\n\ntoken_ids - List of token ids received as output from GPT Tokenizer.token_strings - List of token strings received as output from GPT Tokenizer.\n\nReturns:\n\n  Cleaned token ids and token strings.\n\nPrevious\u00ab rasa.nlu.utils.hugging_face.hf_transformersNextrasa.nlu.utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1288": {"text": "Version: 3.x\n\nrasa.nlu.utils\n\nwrite_json_to_file#\n\nCopydef write_json_to_file(filename: Text, obj: Any, **kwargs: Any) -> None\n\nWrite an object as a json string to a file.\n\nwrite_to_file#\n\nCopydef write_to_file(filename: Text, text: Any) -> None\n\nWrite a text to a file.\n\nis_url#\n\nCopydef is_url(resource_name: Text) -> bool\n\nCheck whether the url specified is a well formed one.\n\nArguments:\n\nresource_name - Remote URL to validate\n\nReturns:\n\n True if valid, otherwise False.\n\nPrevious\u00ab rasa.nlu.utils.hugging_face.transformers_pre_post_processorsNextrasa.nlu.utils._mitie_utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1289": {"text": "Version: 3.x\n\nrasa.nlu.utils._mitie_utils\n\nMitieNLP Objects#\n\nCopyclass MitieNLP(Component)\n\n__init__#\n\nCopy | __init__(component_config: Optional[Dict[Text, Any]] = None, extractor: Optional[\"mitie.total_word_feature_extractor\"] = None) -> None\n\nConstruct a new language model from the MITIE framework.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[Metadata] = None, cached_component: Optional[\"MitieNLP\"] = None, **kwargs: Any, ,) -> \"MitieNLP\"\n\nLoads trained component (see parent class for full docstring).\n\nPrevious\u00ab rasa.nlu.utilsNextrasa.nlu.utils._spacy_utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1290": {"text": "Version: 3.x\n\nrasa.nlu.utils._spacy_utils\n\nSpacyNLP Objects#\n\nCopyclass SpacyNLP(Component)\n\nThe core component that links spaCy to related components in the pipeline.\n\nload_model#\n\nCopy | @staticmethod | load_model(spacy_model_name: Text) -> \"Language\"\n\nTry loading the model, catching the OSError if missing.\n\nprovide_context#\n\nCopy | provide_context() -> Dict[Text, Any]\n\nCreates a context dictionary from spaCy nlp object.\n\ndoc_for_text#\n\nCopy | doc_for_text(text: Text) -> \"Doc\"\n\nMakes a spaCy doc object from a string of text.\n\npreprocess_text#\n\nCopy | preprocess_text(text: Optional[Text]) -> Text\n\nProcesses the text before it is handled by spaCy.\n\nmerge_content_lists#\n\nCopy | @staticmethod | merge_content_lists(indexed_training_samples: List[Tuple[int, Text]], doc_lists: List[Tuple[int, \"Doc\"]]) -> List[Tuple[int, \"Doc\"]]\n\nMerge lists with processed Docs back into their original order.\n\nfilter_training_samples_by_content#\n\nCopy | @staticmethod | filter_training_samples_by_content(indexed_training_samples: List[Tuple[int, Text]]) -> Tuple[List[Tuple[int, Text]], List[Tuple[int, Text]]]\n\nSeparates empty training samples from content bearing ones.\n\nprocess_content_bearing_samples#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1291": {"text": "process_content_bearing_samples#\n\nCopy | process_content_bearing_samples(samples_to_pipe: List[Tuple[int, Text]]) -> List[Tuple[int, \"Doc\"]]\n\nSends content bearing training samples to spaCy's pipe.\n\nprocess_non_content_bearing_samples#\n\nCopy | process_non_content_bearing_samples(empty_samples: List[Tuple[int, Text]]) -> List[Tuple[int, \"Doc\"]]\n\nCreates empty Doc-objects from zero-lengthed training samples strings.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: \"Metadata\" = None, cached_component: Optional[\"SpacyNLP\"] = None, **kwargs: Any, ,) -> \"SpacyNLP\"\n\nLoads trained component (see parent class for full docstring).\n\nensure_proper_language_model#\n\nCopy | @staticmethod | ensure_proper_language_model(nlp: Optional[\"Language\"]) -> None\n\nChecks if the spacy language model is properly loaded.\n\nRaises an exception if the model is invalid.\n\nPrevious\u00ab rasa.nlu.utils._mitie_utilsNextrasa.nlu.utils.bilou_utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1292": {"text": "Version: 3.x\n\nrasa.nlu.utils.bilou_utils\n\nbilou_prefix_from_tag#\n\nCopydef bilou_prefix_from_tag(tag: Text) -> Optional[Text]\n\nReturns the BILOU prefix from the given tag.\n\nArguments:\n\ntag - the tagReturns - the BILOU prefix of the tag\n\ntag_without_prefix#\n\nCopydef tag_without_prefix(tag: Text) -> Text\n\nRemove the BILOU prefix from the given tag.\n\nArguments:\n\ntag - the tagReturns - the tag without the BILOU prefix\n\nbilou_tags_to_ids#\n\nCopydef bilou_tags_to_ids(message: \"Message\",                      tag_id_dict: Dict[Text, int],                      tag_name: Text = ENTITY_ATTRIBUTE_TYPE) -> List[int]\n\nMaps the entity tags of the message to the ids of the provided dict.\n\nArguments:\n\nmessage - the messagetag_id_dict - mapping of tags to idstag_name - tag name of interestReturns - a list of tag ids\n\nget_bilou_key_for_tag#\n\nCopydef get_bilou_key_for_tag(tag_name: Text) -> Text\n\nGet the message key for the BILOU tagging format of the provided tag name.\n\nArguments:\n\ntag_name - the tag name\n\nReturns:\n\n  the message key to store the BILOU tags\n\nbuild_tag_id_dict#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1293": {"text": "build_tag_id_dict#\n\nCopydef build_tag_id_dict(        training_data: \"TrainingData\",        tag_name: Text = ENTITY_ATTRIBUTE_TYPE) -> Optional[Dict[Text, int]]\n\nCreate a mapping of unique tags to ids.\n\nArguments:\n\ntraining_data - the training datatag_name - tag name of interestReturns - a mapping of tags to ids\n\napply_bilou_schema#\n\nCopydef apply_bilou_schema(training_data: \"TrainingData\") -> None\n\nGet a list of BILOU entity tags and set them on the given messages.\n\nArguments:\n\ntraining_data - the training data\n\napply_bilou_schema_to_message#\n\nCopydef apply_bilou_schema_to_message(message: \"Message\") -> None\n\nGet a list of BILOU entity tags and set them on the given message.\n\nArguments:\n\nmessage - the message\n\nmap_message_entities#\n\nCopydef map_message_entities(    message: \"Message\",    attribute_key: Text = ENTITY_ATTRIBUTE_TYPE) -> List[Tuple[int, int, Text]]\n\nMaps the entities of the given message to their start, end, and tag values.\n\nArguments:\n\nmessage - the messageattribute_key - key of tag value to useReturns - a list of start, end, and tag value tuples\n\nbilou_tags_from_offsets#\n\nCopydef bilou_tags_from_offsets(        tokens: List[\"Token\"], entities: List[Tuple[int, int,                                                    Text]]) -> List[Text]", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1294": {"text": "Creates BILOU tags for the given tokens and entities.\n\nArguments:\n\nmessage - The message object.tokens - The list of tokens.entities - The list of start, end, and tag tuples.missing - The tag for missing entities.\n\nReturns:\n\n  BILOU tags.\n\nensure_consistent_bilou_tagging#\n\nCopydef ensure_consistent_bilou_tagging(        predicted_tags: List[Text],        predicted_confidences: List[float]) -> Tuple[List[Text], List[float]]\n\nEnsure predicted tags follow the BILOU tagging schema.\n\nWe assume that starting B- tags are correct. Followed tags that belong to start\ntag but have a different entity type are updated considering also the confidence\nvalues of those tags.\nFor example, B-a I-b L-a is updated to B-a I-a L-a and B-a I-a O is changed to\nB-a L-a.\n\nArguments:\n\npredicted_tags - predicted tagspredicted_confidences - predicted confidences\n\nReturns:\n\n  List of tags.\nList of confidences.\n\nPrevious\u00ab rasa.nlu.utils._spacy_utilsNextrasa.nlu.utils.mitie_utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1295": {"text": "Version: 3.x\n\nrasa.nlu.utils.mitie_utils\n\nMitieModel Objects#\n\nCopyclass MitieModel()\n\nWraps MitieNLP output to make it fingerprintable.\n\n__init__#\n\nCopydef __init__(    model_path: Path,    word_feature_extractor: Optional[ \"mitie.total_word_feature_extractor\"] = None) -> None\n\nInitializing MitieModel.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nFingerprints the model path.\n\nUse a static fingerprint as we assume this only changes if the file path\nchanges and want to avoid investigating the model in greater detail for now.\n\nReturns:\n\n  Fingerprint for model.\n\nMitieNLP Objects#\n\nCopy@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.MODEL_LOADER, is_trainable=False)class MitieNLP(GraphComponent)\n\nComponent which provides the common configuration and loaded model to others.\n\nThis is used to avoid loading the Mitie model multiple times. Instead the Mitie\nmodel is only loaded once and then shared by depending components.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nReturns default config (see parent class for full docstring).\n\n__init__#\n\nCopydef __init__(        path_to_model_file: Path,        extractor: Optional[\"mitie.total_word_feature_extractor\"] = None) -> None\n\nConstructs a new language model from the MITIE framework.\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1296": {"text": "Copy@staticmethoddef required_packages() -> List[Text]\n\nLists required dependencies (see parent class for full docstring).\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> MitieNLP\n\nCreates component (see parent class for full docstring).\n\nprovide#\n\nCopydef provide() -> MitieModel\n\nProvides loaded MitieModel and path during training and inference.\n\nPrevious\u00ab rasa.nlu.utils.bilou_utilsNextrasa.nlu.utils.pattern_utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1297": {"text": "Version: 3.x\n\nrasa.nlu.utils.pattern_utils\n\nread_lookup_table_file#\n\nCopydef read_lookup_table_file(lookup_table_file: Text) -> List[Text]\n\nRead the lookup table file.\n\nArguments:\n\nlookup_table_file - the file path to the lookup table\n\nReturns:\n\n  Elements listed in the lookup table file.\n\nPrevious\u00ab rasa.nlu.utils.mitie_utilsNextrasa.nlu.utils.spacy_utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1298": {"text": "Version: 3.x\n\nrasa.nlu.utils.spacy_utils\n\nSpacyModel Objects#\n\nCopy@dataclasses.dataclassclass SpacyModel()\n\nWraps SpacyNLP output to make it fingerprintable.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nFingerprints the model name.\n\nUse a static fingerprint as we assume this only changes if the model name\nchanges and want to avoid investigating the model in greater detail for now.\n\nReturns:\n\n  Fingerprint for model.\n\nSpacyNLP Objects#\n\nCopy@DefaultV1Recipe.register( [        DefaultV1Recipe.ComponentType.MODEL_LOADER,        DefaultV1Recipe.ComponentType.MESSAGE_FEATURIZER, ],    is_trainable=False,    model_from=\"SpacyNLP\",)class SpacyNLP(GraphComponent)\n\nComponent which provides the common loaded SpaCy model to others.\n\nThis is used to avoid loading the SpaCy model multiple times. Instead the Spacy\nmodel is only loaded once and then shared by depending components.\n\n__init__#\n\nCopydef __init__(model: SpacyModel, config: Dict[Text, Any]) -> None\n\nInitializes a SpacyNLP.\n\nget_default_config#\n\nCopy@staticmethoddef get_default_config() -> Dict[Text, Any]\n\nDefault config.\n\nload_model#\n\nCopy@staticmethoddef load_model(spacy_model_name: Text) -> SpacyModel\n\nTry loading the model, catching the OSError if missing.\n\nrequired_packages#\n\nCopy@staticmethoddef required_packages() -> List[Text]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1299": {"text": "Copy@staticmethoddef required_packages() -> List[Text]\n\nLists required dependencies (see parent class for full docstring).\n\ncreate#\n\nCopy@classmethoddef create(cls, config: Dict[Text, Any], model_storage: ModelStorage,           resource: Resource,           execution_context: ExecutionContext) -> SpacyNLP\n\nCreates component (see parent class for full docstring).\n\nensure_proper_language_model#\n\nCopy@staticmethoddef ensure_proper_language_model(nlp: Optional[Language]) -> None\n\nChecks if the SpaCy language model is properly loaded.\n\nRaises an exception if the model is invalid.\n\nprovide#\n\nCopydef provide() -> SpacyModel\n\nProvides the loaded SpaCy model.\n\nprocess_training_data#\n\nCopydef process_training_data(training_data: TrainingData,                          model: SpacyModel) -> TrainingData\n\nAdds SpaCy tokens and features to training data messages.\n\nprocess#\n\nCopydef process(messages: List[Message], model: SpacyModel) -> List[Message]\n\nAdds SpaCy tokens and features to messages.\n\nPrevious\u00ab rasa.nlu.utils.pattern_utilsNextrasa.nlu.components \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1300": {"text": "Version: 3.x\n\nrasa.nlu.components\n\nvalidate_requirements#\n\nCopyvalidate_requirements(component_names: List[Optional[Text]]) -> None\n\nValidates that all required importable python packages are installed.\n\nRaises:\n\nInvalidConfigException - If one of the component names is None, likely\nindicates that a custom implementation is missing this property\nor that there is an invalid configuration file that we did not\ncatch earlier.\n\nArguments:\n\ncomponent_names - The list of component names.\n\nvalidate_component_keys#\n\nCopyvalidate_component_keys(component: \"Component\", component_config: Dict[Text, Any]) -> None\n\nValidates that all keys for a component are valid.\n\nArguments:\n\ncomponent - The component classcomponent_config - The user-provided config for the component in the pipeline\n\nvalidate_empty_pipeline#\n\nCopyvalidate_empty_pipeline(pipeline: List[\"Component\"]) -> None\n\nEnsures the pipeline is not empty.\n\nArguments:\n\npipeline - the list of the :class:rasa.nlu.components.Component.\n\nvalidate_only_one_tokenizer_is_used#\n\nCopyvalidate_only_one_tokenizer_is_used(pipeline: List[\"Component\"]) -> None\n\nValidates that only one tokenizer is present in the pipeline.\n\nArguments:\n\npipeline - the list of the :class:rasa.nlu.components.Component.\n\nvalidate_required_components#\n\nCopyvalidate_required_components(pipeline: List[\"Component\"]) -> None", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1301": {"text": "Validates that all required components are present in the pipeline.\n\nArguments:\n\npipeline - The list of the :class:rasa.nlu.components.Component.\n\nvalidate_pipeline#\n\nCopyvalidate_pipeline(pipeline: List[\"Component\"]) -> None\n\nValidates the pipeline.\n\nArguments:\n\npipeline - The list of the :class:rasa.nlu.components.Component.\n\nany_components_in_pipeline#\n\nCopyany_components_in_pipeline(components: Iterable[Text], pipeline: List[\"Component\"]) -> bool\n\nCheck if any of the provided components are listed in the pipeline.\n\nArguments:\n\ncomponents - Component class names to check.pipeline - A list of :class:rasa.nlu.components.Components.\n\nReturns:\n\n True if any of the components are in the pipeline, else False.\n\nfind_components_in_pipeline#\n\nCopyfind_components_in_pipeline(components: Iterable[Text], pipeline: List[\"Component\"]) -> Set[Text]\n\nFinds those of the given components that are present in the pipeline.\n\nArguments:\n\ncomponents - A list of str of component class names to check.pipeline - A list of :class:rasa.nlu.components.Components.\n\nReturns:\n\n  A list of str of component class names that are present in the pipeline.\n\nvalidate_required_components_from_data#\n\nCopyvalidate_required_components_from_data(pipeline: List[\"Component\"], data: TrainingData) -> None", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1302": {"text": "Validates that all components are present in the pipeline based on data.\n\nArguments:\n\npipeline - The list of the :class:rasa.nlu.components.Components.data - The :class:rasa.shared.nlu.training_data.training_data.TrainingData.\n\nwarn_of_competing_extractors#\n\nCopywarn_of_competing_extractors(pipeline: List[\"Component\"]) -> None\n\nWarns the user when using competing extractors.\n\nCompeting extractors are e.g. CRFEntityExtractor and DIETClassifier.\nBoth of these look for the same entities based on the same training data\nleading to ambiguity in the results.\n\nArguments:\n\npipeline - The list of the :class:rasa.nlu.components.Components.\n\nwarn_of_competition_with_regex_extractor#\n\nCopywarn_of_competition_with_regex_extractor(pipeline: List[\"Component\"], data: TrainingData) -> None\n\nWarns when regex entity extractor is competing with a general one.\n\nThis might be the case when the following conditions are all met:\n\nYou are using a general entity extractor and the RegexEntityExtractorAND you have regex patterns for entity type AAND you have annotated text examples for entity type A\n\nArguments:\n\npipeline - The list of the :class:rasa.nlu.components.Components.data - The :class:rasa.shared.nlu.training_data.training_data.TrainingData.\n\nMissingArgumentError Objects#\n\nCopyclass MissingArgumentError(ValueError)", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1303": {"text": "MissingArgumentError Objects#\n\nCopyclass MissingArgumentError(ValueError)\n\nRaised when not all parameters can be filled from the context / config.\n\nAttributes:\n\nmessage - explanation of which parameter is missing\n\nUnsupportedLanguageError Objects#\n\nCopyclass UnsupportedLanguageError(RasaException)\n\nRaised when a component is created but the language is not supported.\n\nAttributes:\n\ncomponent - component namelanguage - language that component doesn't support\n\nComponentMetaclass Objects#\n\nCopyclass ComponentMetaclass(type)\n\nMetaclass with name class property.\n\nname#\n\nCopy | @property | name(cls) -> Text\n\nThe name property is a function of the class - its name.\n\nComponent Objects#\n\nCopyclass Component(, metaclass=ComponentMetaclass)\n\nA component is a message processing unit in a pipeline.\n\nComponents are collected sequentially in a pipeline. Each component\nis called one after another. This holds for\ninitialization, training, persisting and loading the components.\nIf a component comes first in a pipeline, its\nmethods will be called first.\n\nE.g. to process an incoming message, the process method of\neach component will be called. During the processing\n(as well as the training, persisting and initialization)\ncomponents can pass information to other components.\nThe information is passed to other components by providing\nattributes to the so called pipeline context. The\npipeline context contains all the information of the previous\ncomponents a component can use to do its own\nprocessing. For example, a featurizer component can provide\nfeatures that are used by another component down\nthe pipeline to do intent classification.\n\nname#\n\nCopy | @property | name() -> Text", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1304": {"text": "name#\n\nCopy | @property | name() -> Text\n\nReturns the name of the component to be used in the model configuration.\n\nComponent class name is used when integrating it in a\npipeline. E.g. [ComponentA, ComponentB]\nwill be a proper pipeline definition where ComponentA\nis the name of the first component of the pipeline.\n\nunique_name#\n\nCopy | @property | unique_name() -> Text\n\nGets a unique name for the component in the pipeline.\n\nThe unique name can be used to distinguish components in\na pipeline, e.g. when the pipeline contains multiple\nfeaturizers of the same type.\n\nrequired_components#\n\nCopy | @classmethod | required_components(cls) -> List[Type[\"Component\"]]\n\nSpecifies which components need to be present in the pipeline.\n\nWhich components are required by this component.\nListed components should appear before the component itself in the pipeline.\n\nReturns:\n\n  The class names of the required components.\n\nrequired_packages#\n\nCopy | @classmethod | required_packages(cls) -> List[Text]\n\nSpecifies which python packages need to be installed.\n\nE.g. [&quot;spacy&quot;]. More specifically, these should be\nimportable python package names e.g. sklearn and not package\nnames in the dependencies sense e.g. scikit-learn\n\nThis list of requirements allows us to fail early during training\nif a required package is not installed.\n\nReturns:\n\n  The list of required package names.\n\nload#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1305": {"text": "Returns:\n\n  The list of required package names.\n\nload#\n\nCopy | @classmethod | load(cls, meta: Dict[Text, Any], model_dir: Text, model_metadata: Optional[\"Metadata\"] = None, cached_component: Optional[\"Component\"] = None, **kwargs: Any, ,) -> \"Component\"\n\nLoads this component from file.\n\nAfter a component has been trained, it will be persisted by\ncalling persist. When the pipeline gets loaded again,\nthis component needs to be able to restore itself.\nComponents can rely on any context attributes that are\ncreated by :meth:components.Component.create\ncalls to components previous to this one.\n\nArguments:\n\nmeta - Any configuration parameter related to the model.model_dir - The directory to load the component from.model_metadata - The model's :class:rasa.nlu.model.Metadata.cached_component - The cached component.\n\nReturns:\n\n  the loaded component\n\ncreate#\n\nCopy | @classmethod | create(cls, component_config: Dict[Text, Any], config: RasaNLUModelConfig) -> \"Component\"\n\nCreates this component (e.g. before a training is started).\n\nMethod can access all configuration parameters.\n\nArguments:\n\ncomponent_config - The components configuration parameters.config - The model configuration parameters.\n\nReturns:\n\n  The created component.\n\nprovide_context#\n\nCopy | provide_context() -> Optional[Dict[Text, Any]]\n\nInitializes this component for a new pipeline.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1306": {"text": "Initializes this component for a new pipeline.\n\nThis function will be called before the training\nis started and before the first message is processed using\nthe interpreter. The component gets the opportunity to\nadd information to the context that is passed through\nthe pipeline during training and message parsing. Most\ncomponents do not need to implement this method.\nIt's mostly used to initialize framework environments\nlike MITIE and spacy\n(e.g. loading word vectors for the pipeline).\n\nReturns:\n\n  The updated component configuration.\n\ntrain#\n\nCopy | train(training_data: TrainingData, config: Optional[RasaNLUModelConfig] = None, **kwargs: Any, ,) -> None\n\nTrains this component.\n\nThis is the components chance to train itself provided\nwith the training data. The component can rely on\nany context attribute to be present, that gets created\nby a call to :meth:rasa.nlu.components.Component.create\nof ANY component and\non any context attributes created by a call to\n:meth:rasa.nlu.components.Component.train\nof components previous to this one.\n\nArguments:\n\ntraining_data - The\n:class:rasa.shared.nlu.training_data.training_data.TrainingData.config - The model configuration parameters.\n\nprocess#\n\nCopy | process(message: Message, **kwargs: Any) -> None\n\nProcesses an incoming message.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1307": {"text": "Processes an incoming message.\n\nThis is the components chance to process an incoming\nmessage. The component can rely on\nany context attribute to be present, that gets created\nby a call to :meth:rasa.nlu.components.Component.create\nof ANY component and\non any context attributes created by a call to\n:meth:rasa.nlu.components.Component.process\nof components previous to this one.\n\nArguments:\n\nmessage - The :class:rasa.shared.nlu.training_data.message.Message to\nprocess.\n\npersist#\n\nCopy | persist(file_name: Text, model_dir: Text) -> Optional[Dict[Text, Any]]\n\nPersists this component to disk for future loading.\n\nArguments:\n\nfile_name - The file name of the model.model_dir - The directory to store the model to.\n\nReturns:\n\n  An optional dictionary with any information about the stored model.\n\ncache_key#\n\nCopy | @classmethod | cache_key(cls, component_meta: Dict[Text, Any], model_metadata: \"Metadata\") -> Optional[Text]\n\nThis key is used to cache components.\n\nIf a component is unique to a model it should return None.\nOtherwise, an instantiation of the\ncomponent will be reused for all models where the\nmetadata creates the same key.\n\nArguments:\n\ncomponent_meta - The component configuration.model_metadata - The component's :class:rasa.nlu.model.Metadata.\n\nReturns:\n\n  A unique caching key.\n\n__getstate__#\n\nCopy | __getstate__() -> Any\n\nGets a copy of picklable parts of the component.", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1308": {"text": "Gets a copy of picklable parts of the component.\n\nprepare_partial_processing#\n\nCopy | prepare_partial_processing(pipeline: List[\"Component\"], context: Dict[Text, Any]) -> None\n\nSets the pipeline and context used for partial processing.\n\nThe pipeline should be a list of components that are\nprevious to this one in the pipeline and\nhave already finished their training (and can therefore\nbe safely used to process messages).\n\nArguments:\n\npipeline - The list of components.context - The context of processing.\n\npartially_process#\n\nCopy | partially_process(message: Message) -> Message\n\nAllows the component to process messages during\ntraining (e.g. external training data).\n\nThe passed message will be processed by all components\nprevious to this one in the pipeline.\n\nArguments:\n\nmessage - The :class:rasa.shared.nlu.training_data.message.Message to\nprocess.\n\nReturns:\n\n  The processed :class:rasa.shared.nlu.training_data.message.Message.\n\ncan_handle_language#\n\nCopy | @classmethod | can_handle_language(cls, language: Hashable) -> bool\n\nCheck if component supports a specific language.\n\nThis method can be overwritten when needed. (e.g. dynamically\ndetermine which language is supported.)\n\nArguments:\n\nlanguage - The language to check.\n\nReturns:\n\n True if component can handle specific language, False otherwise.\n\nComponentBuilder Objects#\n\nCopyclass ComponentBuilder()\n\nCreates trainers and interpreters based on configurations.\n\nCaches components for reuse.\n\nload_component#", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1309": {"text": "Caches components for reuse.\n\nload_component#\n\nCopy | load_component(component_meta: Dict[Text, Any], model_dir: Text, model_metadata: \"Metadata\", **context: Any, ,) -> Optional[Component]\n\nLoads a component.\n\nTries to retrieve a component from the cache, else calls\nload to create a new component.\n\nArguments:\n\n  component_meta:\nThe metadata of the component to load in the pipeline.\nmodel_dir:\nThe directory to read the model from.\nmodel_metadata (Metadata):\nThe model's :class:rasa.nlu.model.Metadata.\n\nReturns:\n\n  The loaded component.\n\ncreate_component#\n\nCopy | create_component(component_config: Dict[Text, Any], cfg: RasaNLUModelConfig) -> Component\n\nCreates a component.\n\nTries to retrieve a component from the cache,\ncalls create to create a new component.\n\nArguments:\n\ncomponent_config - The component configuration.cfg - The model configuration.\n\nReturns:\n\n  The created component.\n\nPrevious\u00ab rasa.nlu.utils.spacy_utilsNextrasa.nlu.config \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1310": {"text": "Version: 3.x\n\nrasa.nlu.config\n\nload#\n\nCopyload(config: Optional[Union[Text, Dict]] = None, **kwargs: Any) -> \"RasaNLUModelConfig\"\n\nCreate configuration from file or dict.\n\nArguments:\n\nconfig - a file path, a dictionary with configuration keys. If set to\nNone the configuration will be loaded from the default file\npath.\n\nReturns:\n\n  Configuration object.\n\ncomponent_config_from_pipeline#\n\nCopycomponent_config_from_pipeline(index: int, pipeline: List[Dict[Text, Any]], defaults: Optional[Dict[Text, Any]] = None) -> Dict[Text, Any]\n\nGets the configuration of the indexth component.\n\nArguments:\n\nindex - Index of the component in the pipeline.pipeline - Configurations of the components in the pipeline.defaults - Default configuration.\n\nReturns:\n\n  The indexth component configuration, expanded\nby the given defaults.\n\nRasaNLUModelConfig Objects#\n\nCopyclass RasaNLUModelConfig()\n\nA class that stores NLU model configuration parameters.\n\n__init__#\n\nCopy | __init__(configuration_values: Optional[Dict[Text, Any]] = None) -> None\n\nCreate a model configuration.\n\nArguments:\n\nconfiguration_values - optional dictionary to override defaults.\n\noverride#\n\nCopy | override(config: Optional[Dict[Text, Any]] = None) -> None\n\nOverrides default config with given values.\n\nArguments:\n\nconfig - New values for the configuration.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1311": {"text": "Arguments:\n\nconfig - New values for the configuration.\n\nPrevious\u00ab rasa.nlu.componentsNextrasa.nlu.convert \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1312": {"text": "Version: 3.x\n\nrasa.nlu.convert\n\nconvert_training_data#\n\nCopydef convert_training_data(data_file: Union[list, Text], out_file: Text,                          output_format: Text, language: Text) -> None\n\nConvert training data.\n\nArguments:\n\ndata_file Union[list, Text] - Path to the file or directory\ncontaining Rasa data.out_file Text - File or existing path where to save\ntraining data in Rasa format.output_format Text - Output format the training data\nshould be converted into.language Text - Language of the data.\n\nPrevious\u00ab rasa.nlu.configNextrasa.nlu.model \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1313": {"text": "Version: 3.x\n\nrasa.nlu.model\n\nInvalidModelError Objects#\n\nCopyclass InvalidModelError(RasaException)\n\nRaised when a model failed to load.\n\nAttributes:\n\nmessage - explanation of why the model is invalid\n\n__init__#\n\nCopydef __init__(message: Text) -> None\n\nInitialize message attribute.\n\nPrevious\u00ab rasa.nlu.convertNextrasa.nlu.persistor \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1314": {"text": "Version: 3.x\n\nrasa.nlu.persistor\n\nget_persistor#\n\nCopydef get_persistor(name: Text) -> Optional[\"Persistor\"]\n\nReturns an instance of the requested persistor.\n\nCurrently, aws, gcs, azure and providing module paths are supported remote\nstorages.\n\nPersistor Objects#\n\nCopyclass Persistor(abc.ABC)\n\nStore models in cloud and fetch them when needed.\n\npersist#\n\nCopydef persist(model_directory: Text, model_name: Text) -> None\n\nUploads a model persisted in the target_dir to cloud storage.\n\nretrieve#\n\nCopydef retrieve(model_name: Text, target_path: Text) -> None\n\nDownloads a model that has been persisted to cloud storage.\n\nAWSPersistor Objects#\n\nCopyclass AWSPersistor(Persistor)\n\nStore models on S3.\n\nFetches them when needed, instead of storing them on the local disk.\n\nGCSPersistor Objects#\n\nCopyclass GCSPersistor(Persistor)\n\nStore models on Google Cloud Storage.\n\nFetches them when needed, instead of storing them on the local disk.\n\n__init__#\n\nCopydef __init__(bucket_name: Text) -> None\n\nInitialise class with client and bucket.\n\nAzurePersistor Objects#\n\nCopyclass AzurePersistor(Persistor)\n\nStore models on Azure.\n\nPrevious\u00ab rasa.nlu.modelNextrasa.nlu.registry \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1315": {"text": "Version: 3.x\n\nrasa.nlu.registry\n\nThis is a somewhat delicate package. It contains all registered components\nand preconfigured templates.\n\nHence, it imports all of the components. To avoid cycles, no component should\nimport this in module scope.\n\nComponentNotFoundException Objects#\n\nCopyclass ComponentNotFoundException(ModuleNotFoundError,  RasaException)\n\nRaised if a module referenced by name can not be imported.\n\nget_component_class#\n\nCopyget_component_class(component_name: Text) -> Type[\"Component\"]\n\nResolve component name to a registered components class.\n\nload_component_by_meta#\n\nCopyload_component_by_meta(component_meta: Dict[Text, Any], model_dir: Text, metadata: Metadata, cached_component: Optional[\"Component\"], **kwargs: Any, ,) -> Optional[\"Component\"]\n\nResolves a component and calls its load method.\n\nInits it based on a previously persisted model.\n\ncreate_component_by_config#\n\nCopycreate_component_by_config(component_config: Dict[Text, Any], config: \"RasaNLUModelConfig\") -> \"Component\"\n\nResolves a component and calls it's create method.\n\nInits it based on a previously persisted model.\n\nPrevious\u00ab rasa.nlu.persistorNextrasa.nlu.run \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1316": {"text": "Version: 3.x\n\nrasa.nlu.run\n\nrun_cmdline#\n\nCopydef run_cmdline(model_path: Text) -> None\n\nLoops over CLI input, passing each message to a loaded NLU model.\n\nPrevious\u00ab rasa.nlu.registryNextrasa.nlu.test \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1317": {"text": "Version: 3.x\n\nrasa.nlu.test\n\nCVEvaluationResult Objects#\n\nCopyclass CVEvaluationResult(NamedTuple)\n\nStores NLU cross-validation results.\n\nlog_evaluation_table#\n\nCopydef log_evaluation_table(report: Text, precision: float, f1: float,                         accuracy: float) -> None\n\nLog the sklearn evaluation metrics.\n\nremove_empty_intent_examples#\n\nCopydef remove_empty_intent_examples(    intent_results: List[IntentEvaluationResult]) -> List[IntentEvaluationResult]\n\nRemove those examples without an intent.\n\nArguments:\n\nintent_results - intent evaluation resultsReturns - intent evaluation results\n\nremove_empty_response_examples#\n\nCopydef remove_empty_response_examples(    response_results: List[ResponseSelectionEvaluationResult]) -> List[ResponseSelectionEvaluationResult]\n\nRemove those examples without a response.\n\nArguments:\n\nresponse_results - response selection evaluation results\n\nReturns:\n\n  Response selection evaluation results\n\ndrop_intents_below_freq#\n\nCopydef drop_intents_below_freq(training_data: TrainingData,                            cutoff: int = 5) -> TrainingData\n\nRemove intent groups with less than cutoff instances.\n\nArguments:\n\ntraining_data - training datacutoff - thresholdReturns - updated training data\n\nwrite_intent_successes#\n\nCopydef write_intent_successes(intent_results: List[IntentEvaluationResult],                           successes_filename: Text) -> None\n\nWrite successful intent predictions to a file.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1318": {"text": "Write successful intent predictions to a file.\n\nArguments:\n\nintent_results - intent evaluation resultsuccesses_filename - filename of file to save successful predictions to\n\nwrite_response_successes#\n\nCopydef write_response_successes(        response_results: List[ResponseSelectionEvaluationResult],        successes_filename: Text) -> None\n\nWrite successful response selection predictions to a file.\n\nArguments:\n\nresponse_results - response selection evaluation resultsuccesses_filename - filename of file to save successful predictions to\n\nplot_attribute_confidences#\n\nCopydef plot_attribute_confidences(results: Union[    List[IntentEvaluationResult], List[ResponseSelectionEvaluationResult]],                               hist_filename: Optional[Text], target_key: Text,                               prediction_key: Text, title: Text) -> None\n\nCreate histogram of confidence distribution.\n\nArguments:\n\nresults - evaluation resultshist_filename - filename to save plot totarget_key - key of target in resultsprediction_key - key of predictions in resultstitle - title of plot\n\nplot_entity_confidences#\n\nCopydef plot_entity_confidences(merged_targets: List[Text],                            merged_predictions: List[Text],                            merged_confidences: List[float],                            hist_filename: Text, title: Text) -> None\n\nCreates histogram of confidence distribution.\n\nArguments:\n\nmerged_targets - Entity labels.merged_predictions - Predicted entities.merged_confidences - Confidence scores of predictions.hist_filename - filename to save plot totitle - title of plot\n\nevaluate_response_selections#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1319": {"text": "evaluate_response_selections#\n\nCopydef evaluate_response_selections(        response_selection_results: List[ResponseSelectionEvaluationResult],        output_directory: Optional[Text],        successes: bool,        errors: bool,        disable_plotting: bool,        report_as_dict: Optional[bool] = None) -> Dict\n\nCreates summary statistics for response selection.\n\nOnly considers those examples with a set response.\nOthers are filtered out. Returns a dictionary of containing the\nevaluation result.\n\nArguments:\n\nresponse_selection_results - response selection evaluation resultsoutput_directory - directory to store files tosuccesses - if True success are written down to diskerrors - if True errors are written down to diskdisable_plotting - if True no plots are createdreport_as_dict - True if the evaluation report should be returned as dict.\nIf False the report is returned in a human-readable text format. If Nonereport_as_dict is considered as True in case an output_directory is\ngiven.output_directory3 - dictionary with evaluation results\n\nevaluate_intents#\n\nCopydef evaluate_intents(intent_results: List[IntentEvaluationResult],                     output_directory: Optional[Text],                     successes: bool,                     errors: bool,                     disable_plotting: bool,                     report_as_dict: Optional[bool] = None) -> Dict\n\nCreates summary statistics for intents.\n\nOnly considers those examples with a set intent. Others are filtered out.\nReturns a dictionary of containing the evaluation result.\n\nArguments:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1320": {"text": "Arguments:\n\nintent_results - intent evaluation resultsoutput_directory - directory to store files tosuccesses - if True correct predictions are written to diskerrors - if True incorrect predictions are written to diskdisable_plotting - if True no plots are createdreport_as_dict - True if the evaluation report should be returned as dict.\nIf False the report is returned in a human-readable text format. If Nonereport_as_dict is considered as True in case an output_directory is\ngiven.output_directory3 - dictionary with evaluation results\n\nmerge_labels#\n\nCopydef merge_labels(aligned_predictions: List[Dict],                 extractor: Optional[Text] = None) -> List[Text]\n\nConcatenates all labels of the aligned predictions.\n\nTakes the aligned prediction labels which are grouped for each message\nand concatenates them.\n\nArguments:\n\naligned_predictions - aligned predictionsextractor - entity extractor name\n\nReturns:\n\n  Concatenated predictions\n\nmerge_confidences#\n\nCopydef merge_confidences(aligned_predictions: List[Dict],                      extractor: Optional[Text] = None) -> List[float]\n\nConcatenates all confidences of the aligned predictions.\n\nTakes the aligned prediction confidences which are grouped for each message\nand concatenates them.\n\nArguments:\n\naligned_predictions - aligned predictionsextractor - entity extractor name\n\nReturns:\n\n  Concatenated confidences\n\nsubstitute_labels#\n\nCopydef substitute_labels(labels: List[Text], old: Text, new: Text) -> List[Text]\n\nReplaces label names in a list of labels.\n\nArguments:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1321": {"text": "Replaces label names in a list of labels.\n\nArguments:\n\nlabels - list of labelsold - old label name that should be replacednew - new label nameReturns - updated labels\n\ncollect_incorrect_entity_predictions#\n\nCopydef collect_incorrect_entity_predictions(        entity_results: List[EntityEvaluationResult],        merged_predictions: List[Text],        merged_targets: List[Text]) -> List[\"EntityPrediction\"]\n\nGet incorrect entity predictions.\n\nArguments:\n\nentity_results - entity evaluation resultsmerged_predictions - list of predicted entity labelsmerged_targets - list of true entity labelsReturns - list of incorrect predictions\n\nwrite_successful_entity_predictions#\n\nCopydef write_successful_entity_predictions(        entity_results: List[EntityEvaluationResult],        merged_targets: List[Text], merged_predictions: List[Text],        successes_filename: Text) -> None\n\nWrite correct entity predictions to a file.\n\nArguments:\n\nentity_results - response selection evaluation resultmerged_predictions - list of predicted entity labelsmerged_targets - list of true entity labelssuccesses_filename - filename of file to save correct predictions to\n\ncollect_successful_entity_predictions#\n\nCopydef collect_successful_entity_predictions(        entity_results: List[EntityEvaluationResult],        merged_predictions: List[Text],        merged_targets: List[Text]) -> List[\"EntityPrediction\"]\n\nGet correct entity predictions.\n\nArguments:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1322": {"text": "Get correct entity predictions.\n\nArguments:\n\nentity_results - entity evaluation resultsmerged_predictions - list of predicted entity labelsmerged_targets - list of true entity labelsReturns - list of correct predictions\n\nevaluate_entities#\n\nCopydef evaluate_entities(entity_results: List[EntityEvaluationResult],                      extractors: Set[Text],                      output_directory: Optional[Text],                      successes: bool,                      errors: bool,                      disable_plotting: bool,                      report_as_dict: Optional[bool] = None) -> Dict\n\nCreates summary statistics for each entity extractor.\n\nLogs precision, recall, and F1 per entity type for each extractor.\n\nArguments:\n\nentity_results - entity evaluation resultsextractors - entity extractors to consideroutput_directory - directory to store files tosuccesses - if True correct predictions are written to diskerrors - if True incorrect predictions are written to diskdisable_plotting - if True no plots are createdreport_as_dict - True if the evaluation report should be returned as dict.\nIf False the report is returned in a human-readable text format. If extractors0\nreport_as_dict is considered as True in case an output_directory is\ngiven.extractors4 - dictionary with evaluation results\n\nis_token_within_entity#\n\nCopydef is_token_within_entity(token: Token, entity: Dict) -> bool\n\nChecks if a token is within the boundaries of an entity.\n\ndoes_token_cross_borders#\n\nCopydef does_token_cross_borders(token: Token, entity: Dict) -> bool\n\nChecks if a token crosses the boundaries of an entity.\n\ndetermine_intersection#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1323": {"text": "determine_intersection#\n\nCopydef determine_intersection(token: Token, entity: Dict) -> int\n\nCalculates how many characters a given token and entity share.\n\ndo_entities_overlap#\n\nCopydef do_entities_overlap(entities: List[Dict]) -> bool\n\nChecks if entities overlap.\n\nI.e. cross each others start and end boundaries.\n\nArguments:\n\nentities - list of entitiesReturns - true if entities overlap, false otherwise.\n\nfind_intersecting_entities#\n\nCopydef find_intersecting_entities(token: Token,                               entities: List[Dict]) -> List[Dict]\n\nFinds the entities that intersect with a token.\n\nArguments:\n\ntoken - a single tokenentities - entities found by a single extractorReturns - list of entities\n\npick_best_entity_fit#\n\nCopydef pick_best_entity_fit(        token: Token,        candidates: List[Dict[Text, Any]]) -> Optional[Dict[Text, Any]]\n\nDetermines the best fitting entity given intersecting entities.\n\nArguments:\n\ntoken - a single tokencandidates - entities found by a single extractorattribute_key - the attribute key of interest\n\nReturns:\n\n  the value of the attribute key of the best fitting entity\n\ndetermine_token_labels#\n\nCopydef determine_token_labels(        token: Token,        entities: List[Dict],        extractors: Optional[Set[Text]] = None,        attribute_key: Text = ENTITY_ATTRIBUTE_TYPE) -> Text", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1324": {"text": "Determines the token label for the provided attribute key given entities that do\nnot overlap.\n\nArguments:\n\ntoken - a single tokenentities - entities found by a single extractorextractors - list of extractorsattribute_key - the attribute key for which the entity type should be returned\n\nReturns:\n\n  entity type\n\ndetermine_entity_for_token#\n\nCopydef determine_entity_for_token(        token: Token,        entities: List[Dict[Text, Any]],        extractors: Optional[Set[Text]] = None) -> Optional[Dict[Text, Any]]\n\nDetermines the best fitting entity for the given token, given entities that do\nnot overlap.\n\nArguments:\n\ntoken - a single tokenentities - entities found by a single extractorextractors - list of extractors\n\nReturns:\n\n  entity type\n\ndo_any_extractors_not_support_overlap#\n\nCopydef do_any_extractors_not_support_overlap(        extractors: Optional[Set[Text]]) -> bool\n\nChecks if any extractor does not support overlapping entities.\n\nArguments:\n\n  Names of the entitiy extractors\n\nReturns:\n\n True if and only if CRFEntityExtractor or DIETClassifier is in extractors\n\nalign_entity_predictions#\n\nCopydef align_entity_predictions(result: EntityEvaluationResult,                             extractors: Set[Text]) -> Dict\n\nAligns entity predictions to the message tokens.\n\nDetermines for every token the true label based on the\nprediction targets and the label assigned by each\nsingle extractor.\n\nArguments:", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1325": {"text": "Arguments:\n\nresult - entity evaluation resultextractors - the entity extractors that should be consideredReturns - dictionary containing the true token labels and token labels\nfrom the extractors\n\nalign_all_entity_predictions#\n\nCopydef align_all_entity_predictions(entity_results: List[EntityEvaluationResult],                                 extractors: Set[Text]) -> List[Dict]\n\nAligns entity predictions to the message tokens for the whole dataset\nusing align_entity_predictions.\n\nArguments:\n\nentity_results - list of entity prediction resultsextractors - the entity extractors that should be consideredReturns - list of dictionaries containing the true token labels and token\nlabels from the extractors\n\nget_eval_data#\n\nCopyasync def get_eval_data(    processor: MessageProcessor, test_data: TrainingData) -> Tuple[        List[IntentEvaluationResult],        List[ResponseSelectionEvaluationResult],        List[EntityEvaluationResult],]\n\nRuns the model for the test set and extracts targets and predictions.\n\nReturns intent results (intent targets and predictions, the original\nmessages and the confidences of the predictions), response results (\nresponse targets and predictions) as well as entity results\n(entity_targets, entity_predictions, and tokens).\n\nArguments:\n\nprocessor - the processortest_data - test dataReturns - intent, response, and entity evaluation results\n\nrun_evaluation#", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1326": {"text": "run_evaluation#\n\nCopyasync def run_evaluation(data_path: Text,                         processor: MessageProcessor,                         output_directory: Optional[Text] = None,                         successes: bool = False,                         errors: bool = False,                         disable_plotting: bool = False,                         report_as_dict: Optional[bool] = None,                         domain_path: Optional[Text] = None) -> Dict\n\nEvaluate intent classification, response selection and entity extraction.\n\nArguments:\n\ndata_path - path to the test dataprocessor - the processor used to process and predictoutput_directory - path to folder where all output will be storedsuccesses - if true successful predictions are written to a fileerrors - if true incorrect predictions are written to a filedisable_plotting - if true confusion matrix and histogram will not be renderedreport_as_dict - True if the evaluation report should be returned as dict.\nIf False the report is returned in a human-readable text format. If processor0\nreport_as_dict is considered as True in case an output_directory is\ngiven.processor4 - Path to the domain file(s).processor5 - dictionary containing evaluation results\n\ngenerate_folds#\n\nCopydef generate_folds(    n: int, training_data: TrainingData) -> Iterator[Tuple[TrainingData, TrainingData]]\n\nGenerates n cross validation folds for given training data.\n\ncombine_result#", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1327": {"text": "Generates n cross validation folds for given training data.\n\ncombine_result#\n\nCopyasync def combine_result(    intent_metrics: IntentMetrics,    entity_metrics: EntityMetrics,    response_selection_metrics: ResponseSelectionMetrics,    processor: MessageProcessor,    data: TrainingData,    intent_results: Optional[List[IntentEvaluationResult]] = None,    entity_results: Optional[List[EntityEvaluationResult]] = None,    response_selection_results: Optional[        List[ResponseSelectionEvaluationResult]] = None) -> Tuple[IntentMetrics, EntityMetrics, ResponseSelectionMetrics]\n\nCollects intent, response selection and entity metrics for cross validation\nfolds.\n\nIf intent_results, response_selection_results or entity_results is provided\nas a list, prediction results are also collected.\n\nArguments:\n\nintent_metrics - intent metricsentity_metrics - entity metricsresponse_selection_metrics - response selection metricsprocessor - the processordata - training dataintent_results - intent evaluation resultsentity_results - entity evaluation resultsresponse_selection_results - reponse selection evaluation resultsresponse_selection_results1 - intent, entity, and response selection metrics\n\ncross_validate#\n\nCopyasync def cross_validate(    data: TrainingData,    n_folds: int,    nlu_config: Union[Text, Dict],    output: Optional[Text] = None,    successes: bool = False,    errors: bool = False,    disable_plotting: bool = False,    report_as_dict: Optional[bool] = None) -> Tuple[CVEvaluationResult, CVEvaluationResult, CVEvaluationResult]", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1328": {"text": "Stratified cross validation on data.\n\nArguments:\n\ndata - Training Datan_folds - integer, number of cv foldsnlu_config - nlu config fileoutput - path to folder where reports are storedsuccesses - if true successful predictions are written to a fileerrors - if true incorrect predictions are written to a filedisable_plotting - if true no confusion matrix and historgram plates are createdreport_as_dict - True if the evaluation report should be returned as dict.\nIf n_folds0 the report is returned in a human-readable text format. If n_folds1\nreport_as_dict is considered as True in case an n_folds4 is\ngiven.\n\nReturns:\n\n  dictionary with key, list structure, where each entry in list\ncorresponds to the relevant result for one fold\n\ncompute_metrics#\n\nCopyasync def compute_metrics(    processor: MessageProcessor, training_data: TrainingData) -> Tuple[        IntentMetrics,        EntityMetrics,        ResponseSelectionMetrics,        List[IntentEvaluationResult],        List[EntityEvaluationResult],        List[ResponseSelectionEvaluationResult],]\n\nComputes metrics for intent classification, response selection and entity\nextraction.\n\nArguments:\n\nprocessor - the processortraining_data - training dataReturns - intent, response selection and entity metrics, and prediction results.\n\ncompare_nlu#", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1329": {"text": "compare_nlu#\n\nCopyasync def compare_nlu(configs: List[Text], data: TrainingData,                      exclusion_percentages: List[int],                      f_score_results: Dict[Text, List[List[float]]],                      model_names: List[Text], output: Text,                      runs: int) -> List[int]\n\nTrains and compares multiple NLU models.\nFor each run and exclusion percentage a model per config file is trained.\nThereby, the model is trained only on the current percentage of training data.\nAfterwards, the model is tested on the complete test data of that run.\nAll results are stored in the provided output directory.\n\nArguments:\n\nconfigs - config files needed for trainingdata - training dataexclusion_percentages - percentages of training data to exclude during comparisonf_score_results - dictionary of model name to f-score results per runmodel_names - names of the models to trainoutput - the output directoryruns - number of comparison runsReturns - training examples per run\n\nlog_results#\n\nCopydef log_results(results: IntentMetrics, dataset_name: Text) -> None\n\nLogs results of cross validation.\n\nArguments:\n\nresults - dictionary of results returned from cross validationdataset_name - string of which dataset the results are from, e.g. test/train\n\nlog_entity_results#\n\nCopydef log_entity_results(results: EntityMetrics, dataset_name: Text) -> None\n\nLogs entity results of cross validation.\n\nArguments:\n\nresults - dictionary of dictionaries of results returned from cross validationdataset_name - string of which dataset the results are from, e.g. test/train", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1330": {"text": "Previous\u00ab rasa.nlu.runNextrasa.nlu.train \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1331": {"text": "Version: 3.x\n\nrasa.nlu.train\n\nTrainingException Objects#\n\nCopyclass TrainingException(Exception)\n\nException wrapping lower level exceptions that may happen while training\n\nAttributes:\n\nfailed_target_project - name of the failed projectmessage - explanation of why the request is invalid\n\nload_data_from_endpoint#\n\nCopyasync load_data_from_endpoint(data_endpoint: EndpointConfig, language: Optional[Text] = \"en\") -> \"TrainingData\"\n\nLoad training data from a URL.\n\ncreate_persistor#\n\nCopycreate_persistor(persistor: Optional[Text]) -> Optional[\"Persistor\"]\n\nCreate a remote persistor to store the model if configured.\n\ntrain#\n\nCopyasync train(nlu_config: Union[Text, Dict, RasaNLUModelConfig], data: Union[Text, \"TrainingDataImporter\"], path: Optional[Text] = None, fixed_model_name: Optional[Text] = None, storage: Optional[Text] = None, component_builder: Optional[ComponentBuilder] = None, training_data_endpoint: Optional[EndpointConfig] = None, persist_nlu_training_data: bool = False, model_to_finetune: Optional[Interpreter] = None, **kwargs: Any, ,) -> Tuple[Trainer, Interpreter, Optional[Text]]\n\nLoads the trainer and the data and runs the training of the model.\n\nPrevious\u00ab rasa.nlu.testNextrasa.shared.core.training_data.story_reader.markdown_story_reader \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1332": {"text": "Version: 3.x\n\nrasa.shared.core.training_data.story_reader.markdown_story_reader\n\nMarkdownStoryReader Objects#\n\nCopyclass MarkdownStoryReader(StoryReader)\n\nClass that reads the core training data in a Markdown format.\n\n__init__#\n\nCopy | __init__(domain: Optional[Domain] = None, template_vars: Optional[Dict] = None, use_e2e: bool = False, source_name: Optional[Text] = None, is_used_for_training: bool = True, ignore_deprecation_warning: bool = False) -> None\n\nCreates reader. See parent class docstring for more information.\n\nread_from_file#\n\nCopy | read_from_file(filename: Union[Text, Path], skip_validation: bool = False) -> List[StoryStep]\n\nGiven a md file reads the contained stories.\n\nparse_e2e_message#\n\nCopy | parse_e2e_message(line: Text, is_used_for_training: bool = True) -> Message\n\nParses an md list item line based on the current section type.\n\nMatches expressions of the form &lt;intent&gt;:&lt;example&gt;. For the\nsyntax of &lt;example&gt; see the Rasa docs on NLU training data.\n\nis_stories_file#\n\nCopy | @staticmethod | is_stories_file(file_path: Union[Text, Path]) -> bool\n\nCheck if file contains Core training data or rule data in Markdown format.\n\nArguments:\n\nfile_path - Path of the file to check.\n\nReturns:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1333": {"text": "file_path - Path of the file to check.\n\nReturns:\n\n True in case the file is a Core Markdown training data or rule data file,\nFalse otherwise.\n\nis_test_stories_file#\n\nCopy | @staticmethod | is_test_stories_file(file_path: Union[Text, Path]) -> bool\n\nChecks if a file contains test stories.\n\nArguments:\n\nfile_path - Path of the file which should be checked.\n\nReturns:\n\n True if it's a file containing test stories, otherwise False.\n\nPrevious\u00ab rasa.nlu.trainNextrasa.shared.core.training_data.story_reader.story_reader \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1334": {"text": "Version: 3.x\n\nrasa.shared.core.training_data.story_reader.story_reader\n\nStoryReader Objects#\n\nCopyclass StoryReader()\n\nHelper class to read a story file.\n\n__init__#\n\nCopydef __init__(domain: Optional[Domain] = None,             source_name: Optional[Text] = None) -> None\n\nConstructor for the StoryReader.\n\nArguments:\n\ndomain - Domain object.source_name - Name of the training data source.\n\nread_from_file#\n\nCopydef read_from_file(filename: Text,                   skip_validation: bool = False) -> List[StoryStep]\n\nReads stories or rules from file.\n\nArguments:\n\nfilename - Path to the story/rule file.skip_validation - True if file validation should be skipped.\n\nReturns:\n\n StorySteps read from filename.\n\nis_stories_file#\n\nCopy@staticmethoddef is_stories_file(filename: Union[Text, Path]) -> bool\n\nChecks if the specified file is a story file.\n\nArguments:\n\nfilename - File to check.\n\nReturns:\n\n True if specified file is a story file, False otherwise.\n\nStoryParseError Objects#\n\nCopyclass StoryParseError(RasaCoreException, ValueError)\n\nRaised if there is an error while parsing a story file.\n\nPrevious\u00ab rasa.shared.core.training_data.story_reader.markdown_story_readerNextrasa.shared.core.training_data.story_reader.story_step_builder \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1335": {"text": "Version: 3.x\n\nrasa.shared.core.training_data.story_reader.story_step_builder\n\nStoryStepBuilder Objects#\n\nCopyclass StoryStepBuilder()\n\nadd_checkpoint#\n\nCopydef add_checkpoint(name: Text, conditions: Optional[Dict[Text, Any]]) -> None\n\nAdd a checkpoint to story steps.\n\nadd_user_messages#\n\nCopydef add_user_messages(messages: List[UserUttered]) -> None\n\nAdds next story steps with the user's utterances.\n\nArguments:\n\nmessages - User utterances.\n\nadd_events#\n\nCopydef add_events(events: List[Event]) -> None\n\nAdds next story steps with the specified list of events.\n\nArguments:\n\nevents - Events that need to be added.\n\nPrevious\u00ab rasa.shared.core.training_data.story_reader.story_readerNextrasa.shared.core.training_data.story_reader.yaml_story_reader \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1336": {"text": "Version: 3.x\n\nrasa.shared.core.training_data.story_reader.yaml_story_reader\n\nYAMLStoryReader Objects#\n\nCopyclass YAMLStoryReader(StoryReader)\n\nClass that reads Core training data and rule data in YAML format.\n\nfrom_reader#\n\nCopy@classmethoddef from_reader(cls, reader: \"YAMLStoryReader\") -> \"YAMLStoryReader\"\n\nCreate a reader from another reader.\n\nArguments:\n\nreader - Another reader.\n\nReturns:\n\n  A new reader instance.\n\nread_from_file#\n\nCopydef read_from_file(filename: Union[Text, Path],                   skip_validation: bool = False) -> List[StoryStep]\n\nRead stories or rules from file.\n\nArguments:\n\nfilename - Path to the story/rule file.skip_validation - True if the file was already validated\ne.g. when it was stored in the database.\n\nReturns:\n\n StorySteps read from filename.\n\nread_from_string#\n\nCopydef read_from_string(string: Text,                     skip_validation: bool = False) -> List[StoryStep]\n\nRead stories or rules from a string.\n\nArguments:\n\nstring - Unprocessed YAML file content.skip_validation - True if the string was already validated\ne.g. when it was stored in the database.\n\nReturns:\n\n StorySteps read from string.\n\nread_from_parsed_yaml#\n\nCopydef read_from_parsed_yaml(        parsed_content: Dict[Text, Union[Dict, List]]) -> List[StoryStep]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1337": {"text": "Read stories from parsed YAML.\n\nArguments:\n\nparsed_content - The parsed YAML as a dictionary.\n\nReturns:\n\n  The parsed stories or rules.\n\nis_stories_file#\n\nCopy@classmethoddef is_stories_file(cls, file_path: Union[Text, Path]) -> bool\n\nCheck if file contains Core training data or rule data in YAML format.\n\nArguments:\n\nfile_path - Path of the file to check.\n\nReturns:\n\n True in case the file is a Core YAML training data or rule data file,\nFalse otherwise.\n\nRaises:\n\nYamlException - if the file seems to be a YAML file (extension) but\ncan not be read / parsed.\n\nis_test_stories_file#\n\nCopy@classmethoddef is_test_stories_file(cls, file_path: Union[Text, Path]) -> bool\n\nChecks if a file is a test conversations file.\n\nArguments:\n\nfile_path - Path of the file which should be checked.\n\nReturns:\n\n True if it's a conversation test file, otherwise False.\n\nunpack_regex_message#\n\nCopy@staticmethoddef unpack_regex_message(        message: Message,        domain: Optional[Domain] = None,        entity_extractor_name: Optional[Text] = None) -> Message\n\nUnpacks the message if TEXT contains an encoding of attributes.\n\nArguments:\n\nmessage - some messagedomain - the domainentity_extractor_name - An extractor name which should be added for the\nentities.\n\nReturns:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1338": {"text": "Returns:\n\n  the given message if that message does not need to be unpacked, and a new\nmessage with the extracted attributes otherwise\n\nStoryParser Objects#\n\nCopyclass StoryParser(YAMLStoryReader)\n\nEncapsulate story-specific parser behavior.\n\nRuleParser Objects#\n\nCopyclass RuleParser(YAMLStoryReader)\n\nEncapsulate rule-specific parser behavior.\n\nPrevious\u00ab rasa.shared.core.training_data.story_reader.story_step_builderNextrasa.shared.core.training_data.story_writer.markdown_story_writer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1339": {"text": "Version: 3.x\n\nrasa.shared.core.training_data.story_writer.markdown_story_writer\n\nMarkdownStoryWriter Objects#\n\nCopyclass MarkdownStoryWriter(StoryWriter)\n\nWrites Core training data into a file in a markdown format.\n\ndump#\n\nCopy | @staticmethod | dump(target: Union[Text, Path, yaml.StringIO], story_steps: List[StoryStep], is_appendable: bool = False, is_test_story: bool = False) -> None\n\nWrites Story steps into a target file/stream.\n\nArguments:\n\ntarget - name of the target file/stream to write the string to.story_steps - Original story steps to be converted to the string.is_appendable - Specify if result should not contain\nhigh level keys/definitions and can be appended to\nthe existing story file.is_test_story - Identifies if the stories should be exported in test stories\nformat.\n\ndumps#\n\nCopy | @staticmethod | dumps(story_steps: List[StoryStep], is_appendable: bool = False, is_test_story: bool = False, ignore_deprecation_warning: bool = False) -> Text\n\nTurns Story steps into a markdown string.\n\nArguments:\n\nstory_steps - Original story steps to be converted to the markdown.is_appendable - Specify if result should not contain\nhigh level keys/definitions and can be appended to\nthe existing story file.is_test_story - Identifies if the stories should be exported in test stories\nformat.ignore_deprecation_warning - True if printing the deprecation warning\nshould be suppressed.\n\nReturns:\n\n  Story steps in the markdown format.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1340": {"text": "Returns:\n\n  Story steps in the markdown format.\n\nPrevious\u00ab rasa.shared.core.training_data.story_reader.yaml_story_readerNextrasa.shared.core.training_data.story_writer.story_writer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1341": {"text": "Version: 3.x\n\nrasa.shared.core.training_data.story_writer.story_writer\n\nStoryWriter Objects#\n\nCopyclass StoryWriter()\n\nWrites story training data to file.\n\ndumps#\n\nCopydef dumps(story_steps: List[\"StoryStep\"],          is_appendable: bool = False,          is_test_story: bool = False) -> Text\n\nTurns Story steps into an string.\n\nArguments:\n\nstory_steps - Original story steps to be converted to the YAML.is_appendable - Specify if result should not contain\nhigh level keys/definitions and can be appended to\nthe existing story file.is_test_story - Identifies if the stories should be exported in test stories\nformat.\n\nReturns:\n\n  String with story steps in the desired format.\n\ndump#\n\nCopydef dump(target: Union[Text, Path, yaml.StringIO],         story_steps: List[\"StoryStep\"],         is_appendable: bool = False,         is_test_story: bool = False) -> None\n\nWrites Story steps into a target file/stream.\n\nArguments:\n\ntarget - name of the target file/stream to write the string to.story_steps - Original story steps to be converted to the string.is_appendable - Specify if result should not contain\nhigh level keys/definitions and can be appended to\nthe existing story file.is_test_story - Identifies if the stories should be exported in test stories\nformat.\n\nPrevious\u00ab rasa.shared.core.training_data.story_writer.markdown_story_writerNextrasa.shared.core.training_data.story_writer.yaml_story_writer \u00bb", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1342": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1343": {"text": "Version: 3.x\n\nrasa.shared.core.training_data.story_writer.yaml_story_writer\n\nYAMLStoryWriter Objects#\n\nCopyclass YAMLStoryWriter(StoryWriter)\n\nWrites Core training data into a file in a YAML format.\n\ndumps#\n\nCopydef dumps(story_steps: List[StoryStep],          is_appendable: bool = False,          is_test_story: bool = False) -> Text\n\nTurns Story steps into an YAML string.\n\nArguments:\n\nstory_steps - Original story steps to be converted to the YAML.is_appendable - Specify if result should not contain\nhigh level keys/definitions and can be appended to\nthe existing story file.is_test_story - Identifies if the stories should be exported in test stories\nformat.\n\nReturns:\n\n  String with story steps in the YAML format.\n\ndump#\n\nCopydef dump(target: Union[Text, Path, yaml.StringIO],         story_steps: List[StoryStep],         is_appendable: bool = False,         is_test_story: bool = False) -> None\n\nWrites Story steps into a target file/stream.\n\nArguments:\n\ntarget - name of the target file/stream to write the YAML to.story_steps - Original story steps to be converted to the YAML.is_appendable - Specify if result should not contain\nhigh level keys/definitions and can be appended to\nthe existing story file.is_test_story - Identifies if the stories should be exported in test stories\nformat.\n\nstories_to_yaml#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1344": {"text": "stories_to_yaml#\n\nCopydef stories_to_yaml(story_steps: List[StoryStep],                    is_test_story: bool = False) -> Dict[Text, Any]\n\nConverts a sequence of story steps into yaml format.\n\nArguments:\n\nstory_steps - Original story steps to be converted to the YAML.is_test_story - True if the story is an end-to-end conversation test story.\n\nprocess_story_step#\n\nCopydef process_story_step(story_step: StoryStep) -> OrderedDict\n\nConverts a single story step into an ordered dict.\n\nArguments:\n\nstory_step - A single story step to be converted to the dict.\n\nReturns:\n\n  Dict with a story step.\n\nprocess_event#\n\nCopydef process_event(event: Union[Event, List[Event]]) -> Optional[OrderedDict]\n\nProcess an event or list of events.\n\nstories_contain_loops#\n\nCopy@staticmethoddef stories_contain_loops(stories: List[StoryStep]) -> bool\n\nChecks if the stories contain at least one active loop.\n\nArguments:\n\nstories - Stories steps.\n\nReturns:\n\n True if the stories contain at least one active loop.\nFalse otherwise.\n\nprocess_user_utterance#\n\nCopy@staticmethoddef process_user_utterance(user_utterance: UserUttered,                           is_test_story: bool = False) -> OrderedDict\n\nConverts a single user utterance into an ordered dict.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1345": {"text": "Converts a single user utterance into an ordered dict.\n\nArguments:\n\nuser_utterance - Original user utterance object.is_test_story - Identifies if the user utterance should be added\nto the final YAML or not.\n\nReturns:\n\n  Dict with a user utterance.\n\nprocess_action#\n\nCopy@staticmethoddef process_action(action: ActionExecuted) -> Optional[OrderedDict]\n\nConverts a single action into an ordered dict.\n\nArguments:\n\naction - Original action object.\n\nReturns:\n\n  Dict with an action.\n\nprocess_slot#\n\nCopy@staticmethoddef process_slot(event: SlotSet) -> OrderedDict\n\nConverts a single SlotSet event into an ordered dict.\n\nArguments:\n\nevent - Original SlotSet event.\n\nReturns:\n\n  OrderedDict with an SlotSet event.\n\nprocess_checkpoints#\n\nCopy@staticmethoddef process_checkpoints(checkpoints: List[Checkpoint]) -> List[OrderedDict]\n\nConverts checkpoints event into an ordered dict.\n\nArguments:\n\ncheckpoints - List of original checkpoint.\n\nReturns:\n\n  List of converted checkpoints.\n\nprocess_or_utterances#\n\nCopydef process_or_utterances(utterances: List[UserUttered]) -> OrderedDict\n\nConverts user utterance containing the OR statement.\n\nArguments:\n\nutterances - User utterances belonging to the same OR statement.\n\nReturns:\n\n  Dict with converted user utterances.\n\nprocess_active_loop#\n\nCopy@staticmethoddef process_active_loop(event: ActiveLoop) -> OrderedDict", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1346": {"text": "Converts ActiveLoop event into an ordered dict.\n\nArguments:\n\nevent - ActiveLoop event.\n\nReturns:\n\n  Converted event.\n\nprocess_rule_step#\n\nCopydef process_rule_step(rule_step: RuleStep) -> OrderedDict\n\nConverts a RuleStep into an ordered dict.\n\nArguments:\n\nrule_step - RuleStep object.\n\nReturns:\n\n  Converted rule step.\n\nPrevious\u00ab rasa.shared.core.training_data.story_writer.story_writerNextrasa.shared.core.training_data.loading \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1347": {"text": "Version: 3.x\n\nrasa.shared.core.training_data.loading\n\nload_data_from_resource#\n\nCopydef load_data_from_resource(        resource: Union[Text],        domain: Domain,        exclusion_percentage: Optional[int] = None) -> List[\"StoryStep\"]\n\nLoads core training data from the specified folder.\n\nArguments:\n\nresource - Folder/File with core training data files.domain - Domain object.exclusion_percentage - Identifies the percentage of training data that\nshould be excluded from the training.\n\nReturns:\n\n  Story steps from the training data.\n\nload_data_from_files#\n\nCopydef load_data_from_files(        story_files: List[Text],        domain: Domain,        exclusion_percentage: Optional[int] = None) -> List[\"StoryStep\"]\n\nLoads core training data from the specified files.\n\nArguments:\n\nstory_files - List of files with training data in it.domain - Domain object.exclusion_percentage - Identifies the percentage of training data that\nshould be excluded from the training.\n\nReturns:\n\n  Story steps from the training data.\n\nPrevious\u00ab rasa.shared.core.training_data.story_writer.yaml_story_writerNextrasa.shared.core.training_data.structures \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1348": {"text": "Version: 3.x\n\nrasa.shared.core.training_data.structures\n\nEventTypeError Objects#\n\nCopyclass EventTypeError(RasaCoreException, ValueError)\n\nRepresents an error caused by a Rasa Core event not being of the expected\ntype.\n\nCheckpoint Objects#\n\nCopyclass Checkpoint()\n\nRepresents places where trackers split.\n\nThis currently happens if\n\nusers place manual checkpoints in their storieshave or statements for intents in their stories.\n\n__init__#\n\nCopydef __init__(name: Text, conditions: Optional[Dict[Text, Any]] = None) -> None\n\nCreates Checkpoint.\n\nArguments:\n\nname - Name of the checkpoint.conditions - Slot conditions for this checkpoint.\n\nfilter_trackers#\n\nCopydef filter_trackers(        trackers: List[DialogueStateTracker]) -> List[DialogueStateTracker]\n\nFilters out all trackers that do not satisfy the conditions.\n\nStoryStep Objects#\n\nCopyclass StoryStep()\n\nA StoryStep is a section of a story block between two checkpoints.\n\nNOTE: Checkpoints are not only limited to those manually written\nin the story file, but are also implicitly created at points where\nmultiple intents are separated in one line by chaining them with \"OR\"s.\n\n__init__#\n\nCopydef __init__(block_name: Text,             start_checkpoints: Optional[List[Checkpoint]] = None,             end_checkpoints: Optional[List[Checkpoint]] = None,             events: Optional[List[Union[Event, List[Event]]]] = None,             source_name: Optional[Text] = None) -> None\n\nInitialise StoryStep default attributes.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1349": {"text": "Initialise StoryStep default attributes.\n\nas_story_string#\n\nCopydef as_story_string(flat: bool = False, e2e: bool = False) -> Text\n\nReturns a story as a string.\n\nis_action_unlikely_intent#\n\nCopy@staticmethoddef is_action_unlikely_intent(event: Event) -> bool\n\nChecks if the executed action is a action_unlikely_intent.\n\nis_action_session_start#\n\nCopy@staticmethoddef is_action_session_start(event: Event) -> bool\n\nChecks if the executed action is a action_session_start.\n\nexplicit_events#\n\nCopydef explicit_events(domain: Domain,                    should_append_final_listen: bool = True) -> List[Event]\n\nReturns events contained in the story step including implicit events.\n\nNot all events are always listed in the story dsl. This\nincludes listen actions as well as implicitly\nset slots. This functions makes these events explicit and\nreturns them with the rest of the steps events.\n\nRuleStep Objects#\n\nCopyclass RuleStep(StoryStep)\n\nA Special type of StoryStep representing a Rule.\n\nget_rules_condition#\n\nCopydef get_rules_condition() -> List[Union[Event, List[Event]]]\n\nReturns a list of events forming a condition of the Rule.\n\nget_rules_events#\n\nCopydef get_rules_events() -> List[Union[Event, List[Event]]]\n\nReturns a list of events forming the Rule, that are not conditions.\n\nadd_event_as_condition#\n\nCopydef add_event_as_condition(event: Event) -> None", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1350": {"text": "Copydef add_event_as_condition(event: Event) -> None\n\nAdds event to the Rule as part of its condition.\n\nArguments:\n\nevent - The event to be added.\n\nStory Objects#\n\nCopyclass Story()\n\nfrom_events#\n\nCopy@staticmethoddef from_events(events: List[Event],                story_name: Optional[Text] = None) -> \"Story\"\n\nCreate a story from a list of events.\n\nStoryGraph Objects#\n\nCopyclass StoryGraph()\n\nGraph of the story-steps pooled from all stories in the training data.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturn hash for the story step.\n\nReturns:\n\n  Hash of the story step.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns a unique hash for the stories which is stable across python runs.\n\nReturns:\n\n  fingerprint of the stories\n\nordered_steps#\n\nCopydef ordered_steps() -> List[StoryStep]\n\nReturns the story steps ordered by topological order of the DAG.\n\ncyclic_edges#\n\nCopydef cyclic_edges() -> List[Tuple[Optional[StoryStep], Optional[StoryStep]]]\n\nReturns the story steps ordered by topological order of the DAG.\n\nmerge#\n\nCopydef merge(other: Optional[\"StoryGraph\"]) -> \"StoryGraph\"\n\nMerge two StoryGraph together.\n\noverlapping_checkpoint_names#\n\nCopy@staticmethoddef overlapping_checkpoint_names(cps: List[Checkpoint],                                 other_cps: List[Checkpoint]) -> Set[Text]\n\nFind overlapping checkpoints names.\n\nwith_cycles_removed#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1351": {"text": "Find overlapping checkpoints names.\n\nwith_cycles_removed#\n\nCopydef with_cycles_removed() -> \"StoryGraph\"\n\nCreate a graph with the cyclic edges removed from this graph.\n\norder_steps#\n\nCopy@staticmethoddef order_steps(        story_steps: List[StoryStep]) -> Tuple[deque, List[Tuple[Text, Text]]]\n\nTopological sort of the steps returning the ids of the steps.\n\ntopological_sort#\n\nCopy@staticmethoddef topological_sort(        graph: Dict[Text, Set[Text]]) -> Tuple[deque, List[Tuple[Text, Text]]]\n\nCreates a top sort of a directed graph. This is an unstable sorting!\n\nThe function returns the sorted nodes as well as the edges that need\nto be removed from the graph to make it acyclic (and hence, sortable).\n\nThe graph should be represented as a dictionary, e.g.:\n\n>>> example_graph = {\n...         \"a\": set(\"b\", \"c\", \"d\"),\n...         \"b\": set(),\n...         \"c\": set(\"d\"),\n...         \"d\": set(),\n...         \"e\": set(\"f\"),\n...         \"f\": set()}\n>>> StoryGraph.topological_sort(example_graph)\n(deque([u'e', u'f', u'a', u'c', u'd', u'b']), [])\n\nis_empty#\n\nCopydef is_empty() -> bool\n\nChecks if StoryGraph is empty.\n\n__repr__#\n\nCopydef __repr__() -> Text\n\nReturns text representation of object.\n\ngenerate_id#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1352": {"text": "Returns text representation of object.\n\ngenerate_id#\n\nCopydef generate_id(prefix: Text = \"\", max_chars: Optional[int] = None) -> Text\n\nGenerate a random UUID.\n\nArguments:\n\nprefix - String to prefix the ID with.max_chars - Maximum number of characters.\n\nReturns:\n\n  Generated random UUID.\n\nPrevious\u00ab rasa.shared.core.training_data.loadingNextrasa.shared.core.training_data.visualization \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1353": {"text": "Version: 3.x\n\nrasa.shared.core.training_data.visualization\n\nUserMessageGenerator Objects#\n\nCopyclass UserMessageGenerator()\n\nmessage_for_data#\n\nCopydef message_for_data(structured_info: Dict[Text, Any]) -> Any\n\nFind a data sample with the same intent.\n\npersist_graph#\n\nCopydef persist_graph(graph: \"networkx.Graph\", output_file: Text) -> None\n\nPlots the graph and persists it into a html file.\n\nvisualize_neighborhood#\n\nCopydef visualize_neighborhood(current: Optional[List[Event]],                           event_sequences: List[List[Event]],                           output_file: Optional[Text] = None,                           max_history: int = 2,                           nlu_training_data: Optional[\"TrainingData\"] = None,                           should_merge_nodes: bool = True,                           max_distance: int = 1,                           fontsize: int = 12) -> \"networkx.MultiDiGraph\"\n\nGiven a set of event lists, visualizing the flows.\n\nvisualize_stories#\n\nCopydef visualize_stories(story_steps: List[StoryStep],                      domain: Domain,                      output_file: Optional[Text],                      max_history: int,                      nlu_training_data: Optional[\"TrainingData\"] = None,                      should_merge_nodes: bool = True,                      fontsize: int = 12) -> \"networkx.MultiDiGraph\"\n\nGiven a set of stories, generates a graph visualizing the flows in the stories.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1354": {"text": "Given a set of stories, generates a graph visualizing the flows in the stories.\n\nVisualization is always a trade off between making the graph as small as\npossible while\nat the same time making sure the meaning doesn't change to \"much\". The\nalgorithm will\ncompress the graph generated from the stories to merge nodes that are\nsimilar. Hence,\nthe algorithm might create paths through the graph that aren't actually\nspecified in the\nstories, but we try to minimize that.\n\nOutput file defines if and where a file containing the plotted graph\nshould be stored.\n\nThe history defines how much 'memory' the graph has. This influences in\nwhich situations the\nalgorithm will merge nodes. Nodes will only be merged if they are equal\nwithin the history, this\nmeans the larger the history is we take into account the less likely it\nis we merge any nodes.\n\nThe training data parameter can be used to pass in a Rasa NLU training\ndata instance. It will\nbe used to replace the user messages from the story file with actual\nmessages from the training data.\n\nPrevious\u00ab rasa.shared.core.training_data.structuresNextrasa.shared.core.constants \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1355": {"text": "Version: 3.x\n\nrasa.shared.core.constants\n\nSlotMappingType Objects#\n\nCopyclass SlotMappingType(Enum)\n\nSlot mapping types.\n\n__str__#\n\nCopydef __str__() -> str\n\nReturns the string representation that should be used in config files.\n\nis_predefined_type#\n\nCopydef is_predefined_type() -> bool\n\nReturns True iff the mapping type is predefined.\n\nThat is, to evaluate the mapping no custom action execution is needed.\n\nPrevious\u00ab rasa.shared.core.training_data.visualizationNextrasa.shared.core.conversation \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1356": {"text": "Version: 3.x\n\nrasa.shared.core.conversation\n\nDialogue Objects#\n\nCopyclass Dialogue()\n\nA dialogue comprises a list of Turn objects\n\n__init__#\n\nCopydef __init__(name: Text, events: List[\"Event\"]) -> None\n\nThis function initialises the dialogue with the dialogue name and the event\nlist.\n\n__str__#\n\nCopydef __str__() -> Text\n\nThis function returns the dialogue and turns.\n\nas_dict#\n\nCopydef as_dict() -> Dict\n\nThis function returns the dialogue as a dictionary to assist in\nserialization.\n\nfrom_parameters#\n\nCopy@classmethoddef from_parameters(cls, parameters: Dict[Text, Any]) -> \"Dialogue\"\n\nCreate Dialogue from parameters.\n\nArguments:\n\nparameters - Serialised dialogue, should contain keys 'name' and 'events'.\n\nReturns:\n\n  Deserialised Dialogue.\n\nPrevious\u00ab rasa.shared.core.constantsNextrasa.shared.core.domain \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1357": {"text": "Version: 3.x\n\nrasa.shared.core.domain\n\nInvalidDomain Objects#\n\nCopyclass InvalidDomain(RasaException)\n\nException that can be raised when domain is not valid.\n\nActionNotFoundException Objects#\n\nCopyclass ActionNotFoundException(ValueError, RasaException)\n\nRaised when an action name could not be found.\n\nSessionConfig Objects#\n\nCopyclass SessionConfig(NamedTuple)\n\nThe Session Configuration.\n\ndefault#\n\nCopy@staticmethoddef default() -> \"SessionConfig\"\n\nReturns the SessionConfig with the default values.\n\nare_sessions_enabled#\n\nCopydef are_sessions_enabled() -> bool\n\nReturns a boolean value depending on the value of session_expiration_time.\n\nas_dict#\n\nCopydef as_dict() -> Dict\n\nReturn serialized SessionConfig.\n\nEntityProperties Objects#\n\nCopy@dataclassclass EntityProperties()\n\nClass for keeping track of the properties of entities in the domain.\n\nDomain Objects#\n\nCopyclass Domain()\n\nThe domain specifies the universe in which the bot's policy acts.\n\nA Domain subclass provides the actions the bot can take, the intents\nand entities it can recognise.\n\nempty#\n\nCopy@classmethoddef empty(cls) -> \"Domain\"\n\nReturns empty Domain.\n\nload#\n\nCopy@classmethoddef load(cls, paths: Union[List[Union[Path, Text]], Text, Path]) -> \"Domain\"\n\nReturns loaded Domain after merging all domain files.\n\nfrom_path#\n\nCopy@classmethoddef from_path(cls, path: Union[Text, Path]) -> \"Domain\"\n\nLoads the Domain from a path.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1358": {"text": "Loads the Domain from a path.\n\nfrom_file#\n\nCopy@classmethoddef from_file(cls, path: Text) -> \"Domain\"\n\nLoads the Domain from a YAML file.\n\nfrom_yaml#\n\nCopy@classmethoddef from_yaml(cls, yaml: Text, original_filename: Text = \"\") -> \"Domain\"\n\nLoads the Domain from YAML text after validating it.\n\nfrom_dict#\n\nCopy@classmethoddef from_dict(cls, data: Dict) -> \"Domain\"\n\nDeserializes and creates domain.\n\nArguments:\n\ndata - The serialized domain.\n\nReturns:\n\n  The instantiated Domain object.\n\nfrom_directory#\n\nCopy@classmethoddef from_directory(cls, path: Text) -> \"Domain\"\n\nLoads and merges multiple domain files recursively from a directory tree.\n\nmerge#\n\nCopydef merge(domain: Optional[\"Domain\"], override: bool = False) -> \"Domain\"\n\nMerges this domain dict with another one, combining their attributes.\n\nThis method merges domain dicts, and ensures all attributes (like intents,\nentities, and actions) are known to the Domain when the\nobject is created.\n\nList attributes like intents and actions are deduped\nand merged. Single attributes are taken from 0 unless\noverride is 1, in which case they are taken from ``2.\n\nmerge_domain_dicts#\n\nCopy@staticmethoddef merge_domain_dicts(domain_dict: Dict,                       combined: Dict,                       override: bool = False) -> Dict\n\nCombines two domain dictionaries.\n\ncollect_slots#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1359": {"text": "Combines two domain dictionaries.\n\ncollect_slots#\n\nCopy@staticmethoddef collect_slots(slot_dict: Dict[Text, Any]) -> List[Slot]\n\nCollects a list of slots from a dictionary.\n\nretrieval_intents#\n\nCopy@rasa.shared.utils.common.lazy_propertydef retrieval_intents() -> List[Text]\n\nList retrieval intents present in the domain.\n\ncollect_entity_properties#\n\nCopy@classmethoddef collect_entity_properties(        cls, domain_entities: List[Union[Text,                                         Dict[Text,                                              Any]]]) -> EntityProperties\n\nGet entity properties for a domain from what is provided by a domain file.\n\nArguments:\n\ndomain_entities - The entities as provided by a domain file.\n\nReturns:\n\n  An instance of EntityProperties.\n\ncollect_intent_properties#\n\nCopy@classmethoddef collect_intent_properties(    cls, intents: List[Union[Text,                             Dict[Text,                                  Any]]], entity_properties: EntityProperties) -> Dict[Text, Dict[Text, Union[bool, List]]]\n\nGet intent properties for a domain from what is provided by a domain file.\n\nArguments:\n\nintents - The intents as provided by a domain file.entity_properties - Entity properties as provided by the domain file.\n\nReturns:\n\n  The intent properties to be stored in the domain.\n\n__init__#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1360": {"text": "The intent properties to be stored in the domain.\n\n__init__#\n\nCopydef __init__(intents: Union[Set[Text], List[Text], List[Dict[Text, Any]]],             entities: List[Union[Text, Dict[Text, Any]]],             slots: List[Slot],             responses: Dict[Text, List[Dict[Text, Any]]],             action_names: List[Text],             forms: Union[Dict[Text, Any], List[Text]],             data: Dict,             action_texts: Optional[List[Text]] = None,             store_entities_as_slots: bool = True,             session_config: SessionConfig = SessionConfig.default(), **kwargs: Any) -> None\n\nCreate a Domain.\n\nArguments:\n\nintents - Intent labels.entities - The names of entities which might be present in user messages.slots - Slots to store information during the conversation.responses - Bot responses. If an action with the same name is executed, it\nwill send the matching response to the user.action_names - Names of custom actions.forms - Form names and their slot mappings.data - original domain dict representation.action_texts - End-to-End bot utterances from end-to-end stories.store_entities_as_slots - If intents0 Rasa will automatically create intents1\nevents for entities if there are slots with the same name as the entity.intents2 - Configuration for conversation sessions. Conversations are\nrestarted at the end of a session.\n\n__deepcopy__#\n\nCopydef __deepcopy__(memo: Optional[Dict[int, Any]]) -> \"Domain\"", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1361": {"text": "Enables making a deep copy of the Domain using copy.deepcopy.\n\nSee https://docs.python.org/3/library/copy.html#copy.deepcopy\nfor more implementation.\n\nArguments:\n\nmemo - Optional dictionary of objects already copied during the current\ncopying pass.\n\nReturns:\n\n  A deep copy of the current domain.\n\ncount_conditional_response_variations#\n\nCopydef count_conditional_response_variations() -> int\n\nReturns count of conditional response variations.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns a unique hash for the domain.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns a unique hash for the domain which is stable across python runs.\n\nReturns:\n\n  fingerprint of the domain\n\nuser_actions_and_forms#\n\nCopy@rasa.shared.utils.common.lazy_propertydef user_actions_and_forms() -> List[Text]\n\nReturns combination of user actions and forms.\n\nnum_actions#\n\nCopy@rasa.shared.utils.common.lazy_propertydef num_actions() -> int\n\nReturns the number of available actions.\n\nnum_states#\n\nCopy@rasa.shared.utils.common.lazy_propertydef num_states() -> int\n\nNumber of used input states for the action prediction.\n\nretrieval_intent_responses#\n\nCopy@rasa.shared.utils.common.lazy_propertydef retrieval_intent_responses() -> Dict[Text, List[Dict[Text, Any]]]\n\nReturn only the responses which are defined for retrieval intents.\n\nis_retrieval_intent_response#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1362": {"text": "is_retrieval_intent_response#\n\nCopy@staticmethoddef is_retrieval_intent_response(        response: Tuple[Text, List[Dict[Text, Any]]]) -> bool\n\nCheck if the response is for a retrieval intent.\n\nThese responses have a / symbol in their name. Use that to filter them from\nthe rest.\n\nindex_for_action#\n\nCopydef index_for_action(action_name: Text) -> int\n\nLooks up which action index corresponds to this action name.\n\nraise_action_not_found_exception#\n\nCopydef raise_action_not_found_exception(action_name_or_text: Text) -> NoReturn\n\nRaises exception if action name or text not part of the domain or stories.\n\nArguments:\n\naction_name_or_text - Name of an action or its text in case it's an\nend-to-end bot utterance.\n\nRaises:\n\nActionNotFoundException - If action_name_or_text are not part of this\ndomain.\n\nslot_states#\n\nCopy@rasa.shared.utils.common.lazy_propertydef slot_states() -> List[Text]\n\nReturns all available slot state strings.\n\nentity_states#\n\nCopy@rasa.shared.utils.common.lazy_propertydef entity_states() -> List[Text]\n\nReturns all available entity state strings.\n\nconcatenate_entity_labels#\n\nCopy@staticmethoddef concatenate_entity_labels(entity_labels: Dict[Text, List[Text]],                              entity: Optional[Text] = None) -> List[Text]", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1363": {"text": "Concatenates the given entity labels with their corresponding sub-labels.\n\nIf a specific entity label is given, only this entity label will be\nconcatenated with its corresponding sub-labels.\n\nArguments:\n\nentity_labels - A map of an entity label to its sub-label list.entity - If present, only this entity will be considered.\n\nReturns:\n\n  A list of labels.\n\ninput_state_map#\n\nCopy@rasa.shared.utils.common.lazy_propertydef input_state_map() -> Dict[Text, int]\n\nProvide a mapping from state names to indices.\n\ninput_states#\n\nCopy@rasa.shared.utils.common.lazy_propertydef input_states() -> List[Text]\n\nReturns all available states.\n\nget_active_state#\n\nCopydef get_active_state(tracker: \"DialogueStateTracker\",                     omit_unset_slots: bool = False) -> State\n\nGiven a dialogue tracker, makes a representation of current dialogue state.\n\nArguments:\n\ntracker - dialog state tracker containing the dialog so faromit_unset_slots - If True do not include the initial values of slots.\n\nReturns:\n\n  A representation of the dialogue's current state.\n\nstates_for_tracker_history#\n\nCopydef states_for_tracker_history(        tracker: \"DialogueStateTracker\",        omit_unset_slots: bool = False,        ignore_rule_only_turns: bool = False,        rule_only_data: Optional[Dict[Text, Any]] = None) -> List[State]\n\nList of states for each state of the trackers history.\n\nArguments:", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1364": {"text": "List of states for each state of the trackers history.\n\nArguments:\n\ntracker - Dialogue state tracker containing the dialogue so far.omit_unset_slots - If True do not include the initial values of slots.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.\n\nReturns:\n\n  A list of states.\n\nslots_for_entities#\n\nCopydef slots_for_entities(entities: List[Dict[Text, Any]]) -> List[SlotSet]\n\nCreates slot events for entities if from_entity mapping matches.\n\nArguments:\n\nentities - The list of entities.\n\nReturns:\n\n  A list of SlotSet events.\n\npersist_specification#\n\nCopydef persist_specification(model_path: Text) -> None\n\nPersist the domain specification to storage.\n\nload_specification#\n\nCopy@classmethoddef load_specification(cls, path: Text) -> Dict[Text, Any]\n\nLoad a domains specification from a dumped model directory.\n\ncompare_with_specification#\n\nCopydef compare_with_specification(path: Text) -> bool\n\nCompare the domain spec of the current and the loaded domain.\n\nThrows exception if the loaded domain specification is different\nto the current domain are different.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturn serialized Domain.\n\nget_responses_with_multilines#", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1365": {"text": "Return serialized Domain.\n\nget_responses_with_multilines#\n\nCopy@staticmethoddef get_responses_with_multilines(    responses: Dict[Text, List[Dict[Text, Any]]]) -> Dict[Text, List[Dict[Text, Any]]]\n\nReturns responses with preserved multilines in the text key.\n\nArguments:\n\nresponses - Original responses.\n\nReturns:\n\n responses with preserved multilines in the text key.\n\npersist#\n\nCopydef persist(filename: Union[Text, Path]) -> None\n\nWrite domain to a file.\n\nas_yaml#\n\nCopydef as_yaml() -> Text\n\nDump the Domain object as a YAML string.\n\nThis function preserves the orders of the keys in the domain.\n\nReturns:\n\n  A string in YAML format representing the domain.\n\nintent_config#\n\nCopydef intent_config(intent_name: Text) -> Dict[Text, Any]\n\nReturn the configuration for an intent.\n\nintents#\n\nCopy@rasa.shared.utils.common.lazy_propertydef intents() -> List[Text]\n\nReturns sorted list of intents.\n\nentities#\n\nCopy@rasa.shared.utils.common.lazy_propertydef entities() -> List[Text]\n\nReturns sorted list of entities.\n\ndomain_warnings#", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1366": {"text": "Returns sorted list of entities.\n\ndomain_warnings#\n\nCopydef domain_warnings(    intents: Optional[Union[List[Text], Set[Text]]] = None,    entities: Optional[Union[List[Text], Set[Text]]] = None,    actions: Optional[Union[List[Text], Set[Text]]] = None,    slots: Optional[Union[List[Text], Set[Text]]] = None) -> Dict[Text, Dict[Text, Set[Text]]]\n\nGenerate domain warnings from intents, entities, actions and slots.\n\nReturns a dictionary with entries for intent_warnings,\nentity_warnings, action_warnings and slot_warnings. Excludes domain slots\nfrom domain warnings in case they are not featurized.\n\nutterances_for_response#\n\nCopy@propertydef utterances_for_response() -> Set[Text]\n\nReturns utterance set which should have a response.\n\nWill filter out utterances which are subintent (retrieval intent) types.\neg. if actions have ['utter_chitchat', 'utter_chitchat/greet'], this\nwill only return ['utter_chitchat/greet'] as only that will need a\nresponse.\n\ncheck_missing_responses#\n\nCopydef check_missing_responses() -> None\n\nWarn user of utterance names which have no specified response.\n\nis_empty#\n\nCopydef is_empty() -> bool\n\nCheck whether the domain is empty.\n\nis_domain_file#\n\nCopy@staticmethoddef is_domain_file(filename: Union[Text, Path]) -> bool\n\nChecks whether the given file path is a Rasa domain file.\n\nArguments:", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1367": {"text": "Arguments:\n\nfilename - Path of the file which should be checked.\n\nReturns:\n\n True if it's a domain file, otherwise False.\n\nRaises:\n\nYamlException - if the file seems to be a YAML file (extension) but\ncan not be read / parsed.\n\nrequired_slots_for_form#\n\nCopydef required_slots_for_form(form_name: Text) -> List[Text]\n\nRetrieve the list of required slot names for a form defined in the domain.\n\nArguments:\n\nform_name - The name of the form.\n\nReturns:\n\n  The list of slot names or an empty list if no form was found.\n\ncount_slot_mapping_statistics#\n\nCopydef count_slot_mapping_statistics() -> Tuple[int, int, int]\n\nCounts the total number of slot mappings and custom slot mappings.\n\nReturns:\n\n  A triple of integers where the first entry is the total number of mappings,\nthe second entry is the total number of custom mappings, and the third entry\nis the total number of mappings which have conditions attached.\n\ndoes_custom_action_explicitly_need_domain#\n\nCopydef does_custom_action_explicitly_need_domain(action_name: Text) -> bool\n\nAssert if action has explicitly stated that it needs domain.\n\nArguments:\n\naction_name - Name of the action to be checked\n\nReturns:\n\n  True if action has explicitly stated that it needs domain.\nOtherwise, it returns false.\n\n__repr__#\n\nCopydef __repr__() -> Text\n\nReturns text representation of object.", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1368": {"text": "Copydef __repr__() -> Text\n\nReturns text representation of object.\n\nwarn_about_duplicates_found_during_domain_merging#\n\nCopydef warn_about_duplicates_found_during_domain_merging(        duplicates: Dict[Text, List[Text]]) -> None\n\nEmits warning about found duplicates while loading multiple domain paths.\n\nPrevious\u00ab rasa.shared.core.conversationNextrasa.shared.core.events \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1369": {"text": "Version: 3.x\n\nrasa.shared.core.events\n\ndeserialise_events#\n\nCopydef deserialise_events(        serialized_events: List[Dict[Text, Any]]) -> List[\"Event\"]\n\nConvert a list of dictionaries to a list of corresponding events.\n\nExample format:\n[{\"event\": \"slot\", \"value\": 5, \"name\": \"my_slot\"}]\n\nformat_message#\n\nCopydef format_message(text: Text, intent: Optional[Text],                   entities: Union[Text, List[Any]]) -> Text\n\nUses NLU parser information to generate a message with inline entity annotations.\n\nArguments:\n\ntext - text of the messageintent - intent of the messageentities - entities of the message\n\nReturns:\n\n  Message with entities annotated inline, e.g.\nI am from [Berlin]{\"entity\": \"city\"}.\n\nsplit_events#\n\nCopydef split_events(events: Iterable[\"Event\"],                 event_type_to_split_on: Type[\"Event\"],                 additional_splitting_conditions: Optional[Dict[Text,                                                                Any]] = None,                 include_splitting_event: bool = True) -> List[List[\"Event\"]]\n\nSplits events according to an event type and condition.\n\nExamples:\n\n  Splitting events according to the event type ActionExecuted and the\naction_name 'action_session_start' would look as follows:\n\n  >> _events = split_events(\nevents,\nActionExecuted,\n\n{\"action_name\" - \"action_session_start\"},\nTrue\n)\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1370": {"text": "Arguments:\n\nevents - Events to split.event_type_to_split_on - The event type to split on.additional_splitting_conditions - Additional event attributes to split on.include_splitting_event - Whether the events of the type on which the split\nis based should be included in the returned events.\n\nReturns:\n\n  The split events.\n\ndo_events_begin_with_session_start#\n\nCopydef do_events_begin_with_session_start(events: List[\"Event\"]) -> bool\n\nDetermines whether events begins with a session start sequence.\n\nA session start sequence is a sequence of two events: an executed\naction_session_start as well as a logged session_started.\n\nArguments:\n\nevents - The events to inspect.\n\nReturns:\n\n  Whether events begins with a session start sequence.\n\nEvent Objects#\n\nCopyclass Event(ABC)\n\nDescribes events in conversation and how the affect the conversation state.\n\nImmutable representation of everything which happened during a conversation of the\nuser with the assistant. Tells the rasa.shared.core.trackers.DialogueStateTracker\nhow to update its state as the events occur.\n\nas_story_string#\n\nCopy@abc.abstractmethoddef as_story_string() -> Optional[Text]\n\nReturns the event as story string.\n\nReturns:\n\n  textual representation of the event or None.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns a unique hash for the event which is stable across python runs.\n\nReturns:\n\n  fingerprint of the event\n\nresolve_by_type#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1371": {"text": "Returns:\n\n  fingerprint of the event\n\nresolve_by_type#\n\nCopy@staticmethoddef resolve_by_type(        type_name: Text,        default: Optional[Type[\"Event\"]] = None) -> Optional[Type[\"Event\"]]\n\nReturns a slots class by its type name.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nArguments:\n\ntracker - The current conversation state.\n\n__eq__#\n\nCopy@abc.abstractmethoddef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\nAlwaysEqualEventMixin Objects#\n\nCopyclass AlwaysEqualEventMixin(Event, ABC)\n\nClass to deduplicate common behavior for events without additional attributes.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\nSkipEventInMDStoryMixin Objects#\n\nCopyclass SkipEventInMDStoryMixin(Event, ABC)\n\nSkips the visualization of an event in Markdown stories.\n\nas_story_string#\n\nCopydef as_story_string() -> None\n\nReturns the event as story string.\n\nReturns:\n\n  None, as this event should not appear inside the story.\n\nUserUttered Objects#\n\nCopyclass UserUttered(Event)\n\nThe user has said something to the bot.\n\nAs a side effect a new Turn will be created in the Tracker.\n\n__init__#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1372": {"text": "__init__#\n\nCopydef __init__(text: Optional[Text] = None,             intent: Optional[Dict] = None,             entities: Optional[List[Dict]] = None,             parse_data: Optional[\"NLUPredictionData\"] = None,             timestamp: Optional[float] = None,             input_channel: Optional[Text] = None,             message_id: Optional[Text] = None,             metadata: Optional[Dict] = None,             use_text_for_featurization: Optional[bool] = None) -> None\n\nCreates event for incoming user message.\n\nArguments:\n\ntext - Text of user message.intent - Intent prediction of user message.entities - Extracted entities.parse_data - Detailed NLU parsing result for message.timestamp - When the event was created.metadata - Additional event metadata.input_channel - Which channel the user used to send message.message_id - Unique ID for message.use_text_for_featurization - True if the message's text was used to predict\nnext action. intent0 if the message's intent was used.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash of object.\n\nintent_name#\n\nCopy@propertydef intent_name() -> Optional[Text]\n\nReturns intent name or None if no intent.\n\nfull_retrieval_intent_name#\n\nCopy@propertydef full_retrieval_intent_name() -> Optional[Text]\n\nReturns full retrieval intent name or None if no retrieval intent.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\n__str__#\n\nCopydef __str__() -> Text", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1373": {"text": "__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\nas_sub_state#\n\nCopydef as_sub_state() -> Dict[Text, Union[None, Text, List[Optional[Text]]]]\n\nTurns a UserUttered event into features.\n\nThe substate contains information about entities, intent and text of the\nUserUttered event.\n\nReturns:\n\n  a dictionary with intent name, text and entities\n\nas_story_string#\n\nCopydef as_story_string(e2e: bool = False) -> Text\n\nReturn event as string for Markdown training format.\n\nArguments:\n\ne2e - True if the the event should be printed in the format for\nend-to-end conversation tests.\n\nReturns:\n\n  Event as string.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to tracker. See docstring of Event.\n\nDefinePrevUserUtteredFeaturization Objects#\n\nCopyclass DefinePrevUserUtteredFeaturization(SkipEventInMDStoryMixin)\n\nStores information whether action was predicted based on text or intent.\n\n__init__#\n\nCopydef __init__(use_text_for_featurization: bool,             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates event.\n\nArguments:\n\nuse_text_for_featurization - True if message text was used to predict\naction. False if intent was used.timestamp - When the event was created.metadata - Additional event metadata.\n\n__str__#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1374": {"text": "__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nArguments:\n\ntracker - The current conversation state.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\nEntitiesAdded Objects#\n\nCopyclass EntitiesAdded(SkipEventInMDStoryMixin)\n\nEvent that is used to add extracted entities to the tracker state.\n\n__init__#\n\nCopydef __init__(entities: List[Dict[Text, Any]],             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nInitializes event.\n\nArguments:\n\nentities - Entities extracted from previous user message. This can either\nbe done by NLU components or end-to-end policy predictions.timestamp - the timestampmetadata - some optional metadata\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns the string representation of the event.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns the hash value of the event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares this event with another event.\n\nas_dict#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1375": {"text": "Compares this event with another event.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nConverts the event into a dict.\n\nReturns:\n\n  A dict that represents this event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nArguments:\n\ntracker - The current conversation state.\n\nBotUttered Objects#\n\nCopyclass BotUttered(SkipEventInMDStoryMixin)\n\nThe bot has said something to the user.\n\nThis class is not used in the story training as it is contained in the\n\nActionExecuted class. An entry is made in the Tracker.\n\n__init__#\n\nCopydef __init__(text: Optional[Text] = None,             data: Optional[Dict] = None,             metadata: Optional[Dict[Text, Any]] = None,             timestamp: Optional[float] = None) -> None\n\nCreates event for a bot response.\n\nArguments:\n\ntext - Plain text which bot responded with.data - Additional data for more complex utterances (e.g. buttons).timestamp - When the event was created.metadata - Additional event metadata.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\n__repr__#\n\nCopydef __repr__() -> Text\n\nReturns text representation of event for debugging.\n\napply_to#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1376": {"text": "Returns text representation of event for debugging.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nmessage#\n\nCopydef message() -> Dict[Text, Any]\n\nReturn the complete message as a dictionary.\n\nempty#\n\nCopy@staticmethoddef empty() -> \"BotUttered\"\n\nCreates an empty bot utterance.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\nSlotSet Objects#\n\nCopyclass SlotSet(Event)\n\nThe user has specified their preference for the value of a slot.\n\nEvery slot has a name and a value. This event can be used to set a\nvalue for a slot on a conversation.\n\nAs a side effect the Tracker's slots will be updated so\nthat tracker.slots[key]=value.\n\n__init__#\n\nCopydef __init__(key: Text,             value: Optional[Any] = None,             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates event to set slot.\n\nArguments:\n\nkey - Name of the slot which is set.value - Value to which slot is set.timestamp - When the event was created.metadata - Additional event metadata.\n\n__repr__#\n\nCopydef __repr__() -> Text\n\nReturns text representation of event.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1377": {"text": "Compares object with other object.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nRestarted Objects#\n\nCopyclass Restarted(AlwaysEqualEventMixin)\n\nConversation should start over & history wiped.\n\nInstead of deleting all events, this event can be used to reset the\ntrackers state (e.g. ignoring any past user messages & resetting all\nthe slots).\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nResets the tracker and triggers a followup ActionSessionStart.\n\nUserUtteranceReverted Objects#\n\nCopyclass UserUtteranceReverted(AlwaysEqualEventMixin)\n\nBot reverts everything until before the most recent user message.\n\nThe bot will revert all events after the latest UserUttered, this\nalso means that the last event on the tracker is usually action_listen\nand the bot is waiting for a new user message.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\nas_story_string#\n\nCopydef as_story_string() -> Text", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1378": {"text": "as_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nAllSlotsReset Objects#\n\nCopyclass AllSlotsReset(AlwaysEqualEventMixin)\n\nAll Slots are reset to their initial values.\n\nIf you want to keep the dialogue history and only want to reset the\nslots, you can use this event to set all the slots to their initial\nvalues.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nReminderScheduled Objects#\n\nCopyclass ReminderScheduled(Event)\n\nSchedules the asynchronous triggering of a user intent at a given time.\n\nThe triggered intent can include entities if needed.\n\n__init__#\n\nCopydef __init__(intent: Text,             trigger_date_time: datetime,             entities: Optional[List[Dict]] = None,             name: Optional[Text] = None,             kill_on_user_message: bool = True,             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates the reminder.\n\nArguments:", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1379": {"text": "Creates the reminder.\n\nArguments:\n\nintent - Name of the intent to be triggered.trigger_date_time - Date at which the execution of the action\nshould be triggered (either utc or with tz).name - ID of the reminder. If there are multiple reminders with\nthe same id only the last will be run.entities - Entities that should be supplied together with the\ntriggered intent.kill_on_user_message - True means a user message before the\ntrigger date will abort the reminder.timestamp - Creation date of the event.metadata - Optional event metadata.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\nReminderCancelled Objects#\n\nCopyclass ReminderCancelled(Event)\n\nCancel certain jobs.\n\n__init__#\n\nCopydef __init__(name: Optional[Text] = None,             intent: Optional[Text] = None,             entities: Optional[List[Dict]] = None,             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates a ReminderCancelled event.", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1380": {"text": "Creates a ReminderCancelled event.\n\nIf all arguments are None, this will cancel all reminders.\nare to be cancelled. If no arguments are supplied, this will cancel all\nreminders.\n\nArguments:\n\nname - Name of the reminder to be cancelled.intent - Intent name that is to be used to identify the reminders to be\ncancelled.entities - Entities that are to be used to identify the reminders to be\ncancelled.timestamp - Optional timestamp.metadata - Optional event metadata.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\ncancels_job_with_name#\n\nCopydef cancels_job_with_name(job_name: Text, sender_id: Text) -> bool\n\nDetermines if this event should cancel the job with the given name.\n\nArguments:\n\njob_name - Name of the job to be tested.sender_id - The sender_id of the tracker.\n\nReturns:\n\n True, if this ReminderCancelled event should cancel the job with the\ngiven name, and False otherwise.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\nActionReverted Objects#\n\nCopyclass ActionReverted(AlwaysEqualEventMixin)\n\nBot undoes its last action.", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1381": {"text": "Bot undoes its last action.\n\nThe bot reverts everything until before the most recent action.\nThis includes the action itself, as well as any events that\naction created, like set slot events - the bot will now\npredict a new action using the state before the most recent\naction.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nStoryExported Objects#\n\nCopyclass StoryExported(Event)\n\nStory should get dumped to a file.\n\n__init__#\n\nCopydef __init__(path: Optional[Text] = None,             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates event about story exporting.\n\nArguments:\n\npath - Path to which story was exported to.timestamp - When the event was created.metadata - Additional event metadata.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\nFollowupAction Objects#", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1382": {"text": "Compares object with other object.\n\nFollowupAction Objects#\n\nCopyclass FollowupAction(Event)\n\nEnqueue a followup action.\n\n__init__#\n\nCopydef __init__(name: Text,             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates an event which forces the model to run a certain action next.\n\nArguments:\n\nname - Name of the action to run.timestamp - When the event was created.metadata - Additional event metadata.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nConversationPaused Objects#\n\nCopyclass ConversationPaused(AlwaysEqualEventMixin)\n\nIgnore messages from the user to let a human take over.\n\nAs a side effect the Tracker's paused attribute will\nbe set to True.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\nas_story_string#\n\nCopydef as_story_string() -> Text", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1383": {"text": "as_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nConversationResumed Objects#\n\nCopyclass ConversationResumed(AlwaysEqualEventMixin)\n\nBot takes over conversation.\n\nInverse of PauseConversation. As a side effect the Tracker's\npaused attribute will be set to False.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nActionExecuted Objects#\n\nCopyclass ActionExecuted(Event)\n\nAn operation describes an action taken + its result.\n\nIt comprises an action and a list of events. operations will be appended\nto the latest Turn`` in Tracker.turns`.\n\n__init__#\n\nCopydef __init__(action_name: Optional[Text] = None,             policy: Optional[Text] = None,             confidence: Optional[float] = None,             timestamp: Optional[float] = None,             metadata: Optional[Dict] = None,             action_text: Optional[Text] = None,             hide_rule_turn: bool = False) -> None\n\nCreates event for a successful event execution.\n\nArguments:", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1384": {"text": "Creates event for a successful event execution.\n\nArguments:\n\naction_name - Name of the action which was executed. None if it was an\nend-to-end prediction.policy - Policy which predicted action.confidence - Confidence with which policy predicted action.timestamp - When the event was created.metadata - Additional event metadata.action_text - In case it's an end-to-end action prediction, the text which\nwas predicted.hide_rule_turn - If True, this action should be hidden in the dialogue\nhistory created for ML-based policies.\n\n__repr__#\n\nCopydef __repr__() -> Text\n\nReturns event as string for debugging.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns event as human readable string.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\nas_story_string#\n\nCopydef as_story_string() -> Optional[Text]\n\nReturns event in Markdown format.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\nas_sub_state#\n\nCopydef as_sub_state() -> Dict[Text, Text]\n\nTurns ActionExecuted into a dictionary containing action name or action text.\n\nOne action cannot have both set at the same time\n\nReturns:\n\n  a dictionary containing action name or action text with the corresponding\nkey.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1385": {"text": "Applies event to current conversation state.\n\nAgentUttered Objects#\n\nCopyclass AgentUttered(SkipEventInMDStoryMixin)\n\nThe agent has said something to the user.\n\nThis class is not used in the story training as it is contained in the\nActionExecuted class. An entry is made in the Tracker.\n\n__init__#\n\nCopydef __init__(text: Optional[Text] = None,             data: Optional[Any] = None,             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nSee docstring of BotUttered.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\nActiveLoop Objects#\n\nCopyclass ActiveLoop(Event)\n\nIf name is given: activates a loop with name else deactivates active loop.\n\n__init__#\n\nCopydef __init__(name: Optional[Text],             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates event for active loop.\n\nArguments:\n\nname - Name of activated loop or None if current loop is deactivated.timestamp - When the event was created.metadata - Additional event metadata.\n\n__str__#\n\nCopydef __str__() -> Text", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1386": {"text": "__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\nas_story_string#\n\nCopydef as_story_string() -> Text\n\nReturns text representation of event.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nLegacyForm Objects#\n\nCopyclass LegacyForm(ActiveLoop)\n\nLegacy handler of old Form events.\n\nThe ActiveLoop event used to be called Form. This class is there to handle old\nlegacy events which were stored with the old type name form.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns the hash of the event.\n\nLoopInterrupted Objects#\n\nCopyclass LoopInterrupted(SkipEventInMDStoryMixin)\n\nEvent added by FormPolicy and RulePolicy.\n\nNotifies form action whether or not to validate the user input.\n\n__init__#\n\nCopydef __init__(is_interrupted: bool,             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nEvent to notify that loop was interrupted.", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1387": {"text": "Event to notify that loop was interrupted.\n\nThis e.g. happens when a user is within a form, and is de-railing the\nform-filling by asking FAQs.\n\nArguments:\n\nis_interrupted - True if the loop execution was interrupted, and ML\npolicies had to take over the last prediction.timestamp - When the event was created.metadata - Additional event metadata.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nLegacyFormValidation Objects#\n\nCopyclass LegacyFormValidation(LoopInterrupted)\n\nLegacy handler of old FormValidation events.\n\nThe LoopInterrupted event used to be called FormValidation. This class is there\nto handle old legacy events which were stored with the old type name\nform_validation.\n\n__init__#\n\nCopydef __init__(validate: bool,             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nSee parent class docstring.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\nfingerprint#\n\nCopydef fingerprint() -> Text", "chunk": 18, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1388": {"text": "Returns serialized event.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns hash of the event.\n\nActionExecutionRejected Objects#\n\nCopyclass ActionExecutionRejected(SkipEventInMDStoryMixin)\n\nNotify Core that the execution of the action has been rejected.\n\n__init__#\n\nCopydef __init__(action_name: Text,             policy: Optional[Text] = None,             confidence: Optional[float] = None,             timestamp: Optional[float] = None,             metadata: Optional[Dict[Text, Any]] = None) -> None\n\nCreates event.\n\nArguments:\n\naction_name - Action which was rejected.policy - Policy which predicted the rejected action.confidence - Confidence with which the reject action was predicted.timestamp - When the event was created.metadata - Additional event metadata.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns text representation of event.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\nas_dict#\n\nCopydef as_dict() -> Dict[Text, Any]\n\nReturns serialized event.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nSessionStarted Objects#\n\nCopyclass SessionStarted(AlwaysEqualEventMixin)\n\nMark the beginning of a new conversation session.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nReturns unique hash for event.\n\nas_story_string#", "chunk": 19, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1389": {"text": "Returns unique hash for event.\n\nas_story_string#\n\nCopydef as_story_string() -> None\n\nSkips representing event in stories.\n\napply_to#\n\nCopydef apply_to(tracker: \"DialogueStateTracker\") -> None\n\nApplies event to current conversation state.\n\nPrevious\u00ab rasa.shared.core.domainNextrasa.shared.core.generator \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 20, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1390": {"text": "Version: 3.x\n\nrasa.shared.core.generator\n\nTrackerWithCachedStates Objects#\n\nCopyclass TrackerWithCachedStates(DialogueStateTracker)\n\nA tracker wrapper that caches the state creation of the tracker.\n\n__init__#\n\nCopydef __init__(sender_id: Text,             slots: Optional[Iterable[Slot]],             max_event_history: Optional[int] = None,             domain: Optional[Domain] = None,             is_augmented: bool = False,             is_rule_tracker: bool = False) -> None\n\nInitializes a tracker with cached states.\n\nfrom_events#\n\nCopy@classmethoddef from_events(cls,                sender_id: Text,                evts: List[Event],                slots: Optional[Iterable[Slot]] = None,                max_event_history: Optional[int] = None,                sender_source: Optional[Text] = None,                domain: Optional[Domain] = None,                is_rule_tracker: bool = False) -> \"TrackerWithCachedStates\"\n\nInitializes a tracker with given events.\n\npast_states_for_hashing#\n\nCopydef past_states_for_hashing(domain: Domain,                            omit_unset_slots: bool = False ) -> Deque[FrozenState]\n\nGenerates and caches the past states of this tracker based on the history.\n\nArguments:\n\ndomain - a :class:rasa.shared.core.domain.Domainomit_unset_slots - If True do not include the initial values of slots.\n\nReturns:\n\n  A list of states\n\npast_states#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1391": {"text": "Returns:\n\n  A list of states\n\npast_states#\n\nCopydef past_states(        domain: Domain,        omit_unset_slots: bool = False,        ignore_rule_only_turns: bool = False,        rule_only_data: Optional[Dict[Text, Any]] = None) -> List[State]\n\nGenerates the past states of this tracker based on the history.\n\nArguments:\n\ndomain - The Domain.omit_unset_slots - If True do not include the initial values of slots.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.\n\nReturns:\n\n  a list of states\n\nclear_states#\n\nCopydef clear_states() -> None\n\nReset the states.\n\ninit_copy#\n\nCopydef init_copy() -> \"TrackerWithCachedStates\"\n\nCreate a new state tracker with the same initial values.\n\ncopy#\n\nCopydef copy(sender_id: Text = \"\",         sender_source: Text = \"\") -> \"TrackerWithCachedStates\"\n\nCreates a duplicate of this tracker.\n\nA new tracker will be created and all events\nwill be replayed.\n\nupdate#\n\nCopydef update(event: Event, domain: Optional[Domain] = None) -> None\n\nModify the state of the tracker according to an Event.\n\nTrainingDataGenerator Objects#\n\nCopyclass TrainingDataGenerator()\n\nGenerates trackers from training data.\n\n__init__#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1392": {"text": "Generates trackers from training data.\n\n__init__#\n\nCopydef __init__(story_graph: StoryGraph,             domain: Domain,             remove_duplicates: bool = True,             unique_last_num_states: Optional[int] = None,             augmentation_factor: int = 50,             tracker_limit: Optional[int] = None,             use_story_concatenation: bool = True,             debug_plots: bool = False)\n\nGiven a set of story parts, generates all stories that are possible.\n\nThe different story parts can end and start with checkpoints\nand this generator will match start and end checkpoints to\nconnect complete stories. Afterwards, duplicate stories will be\nremoved and the data is augmented (if augmentation is enabled).\n\ngenerate#\n\nCopydef generate() -> List[TrackerWithCachedStates]\n\nGenerate trackers from stories and rules.\n\nReturns:\n\n  The generated trackers.\n\ngenerate_story_trackers#\n\nCopydef generate_story_trackers() -> List[TrackerWithCachedStates]\n\nGenerate trackers from stories (exclude rule trackers).\n\nReturns:\n\n  The generated story trackers.\n\nPrevious\u00ab rasa.shared.core.eventsNextrasa.shared.core.slot_mappings \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1393": {"text": "Version: 3.x\n\nrasa.shared.core.slot_mappings\n\nSlotMapping Objects#\n\nCopyclass SlotMapping()\n\nDefines functionality for the available slot mappings.\n\nvalidate#\n\nCopy@staticmethoddef validate(mapping: Dict[Text, Any], slot_name: Text) -> None\n\nValidates a slot mapping.\n\nArguments:\n\nmapping - The mapping which is validated.slot_name - The name of the slot which is mapped by this mapping.\n\nRaises:\n\nInvalidDomain - In case the slot mapping is not valid.\n\nintent_is_desired#\n\nCopy@staticmethoddef intent_is_desired(mapping: Dict[Text,                                    Any], tracker: \"DialogueStateTracker\",                      domain: \"Domain\") -> bool\n\nChecks whether user intent matches slot mapping intent specifications.\n\nto_list#\n\nCopy@staticmethoddef to_list(x: Optional[Any]) -> List[Any]\n\nConvert object to a list if it isn't.\n\nentity_is_desired#\n\nCopy@staticmethoddef entity_is_desired(mapping: Dict[Text, Any],                      tracker: \"DialogueStateTracker\") -> bool\n\nChecks whether slot should be filled by an entity in the input or not.\n\nArguments:\n\nmapping - Slot mapping.tracker - The tracker.\n\nReturns:\n\n  True, if slot should be filled, false otherwise.\n\ncheck_mapping_validity#\n\nCopy@staticmethoddef check_mapping_validity(slot_name: Text, mapping_type: SlotMappingType,                           mapping: Dict[Text, Any], domain: \"Domain\") -> bool", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1394": {"text": "Checks the mapping for validity.\n\nArguments:\n\nslot_name - The name of the slot to be validated.mapping_type - The type of the slot mapping.mapping - Slot mapping.domain - The domain to check against.\n\nReturns:\n\n  True, if intent and entity specified in a mapping exist in domain.\n\nvalidate_slot_mappings#\n\nCopydef validate_slot_mappings(domain_slots: Dict[Text, Any]) -> None\n\nRaises InvalidDomain exception if slot mappings are invalid.\n\nPrevious\u00ab rasa.shared.core.generatorNextrasa.shared.core.slots \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1395": {"text": "Version: 3.x\n\nrasa.shared.core.slots\n\nInvalidSlotTypeException Objects#\n\nCopyclass InvalidSlotTypeException(RasaException)\n\nRaised if a slot type is invalid.\n\nInvalidSlotConfigError Objects#\n\nCopyclass InvalidSlotConfigError(RasaException, ValueError)\n\nRaised if a slot's config is invalid.\n\nSlot Objects#\n\nCopyclass Slot(ABC)\n\nKey-value store for storing information during a conversation.\n\ntype_name#\n\nCopy@property@abstractmethoddef type_name() -> Text\n\nName of the type of slot.\n\n__init__#\n\nCopydef __init__(name: Text,             mappings: List[Dict[Text, Any]],             initial_value: Any = None,             value_reset_delay: Optional[int] = None,             influence_conversation: bool = True) -> None\n\nCreate a Slot.\n\nArguments:\n\nname - The name of the slot.initial_value - The initial value of the slot.mappings - List containing slot mappings.value_reset_delay - After how many turns the slot should be reset to the\ninitial_value. This is behavior is currently not implemented.influence_conversation - If True the slot will be featurized and hence\ninfluence the predictions of the dialogue polices.\n\nfeature_dimensionality#\n\nCopydef feature_dimensionality() -> int\n\nHow many features this single slot creates.\n\nReturns:\n\n  The number of features. 0 if the slot is unfeaturized. The dimensionality\nof the array returned by as_feature needs to correspond to this value.\n\nhas_features#\n\nCopydef has_features() -> bool", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1396": {"text": "has_features#\n\nCopydef has_features() -> bool\n\nIndicate if the slot creates any features.\n\nvalue_reset_delay#\n\nCopydef value_reset_delay() -> Optional[int]\n\nAfter how many turns the slot should be reset to the initial_value.\n\nIf the delay is set to None, the slot will keep its value forever.\n\nreset#\n\nCopydef reset() -> None\n\nResets the slot's value to the initial value.\n\nvalue#\n\nCopy@propertydef value() -> Any\n\nGets the slot's value.\n\nvalue#\n\nCopy@value.setterdef value(value: Any) -> None\n\nSets the slot's value.\n\nhas_been_set#\n\nCopy@propertydef has_been_set() -> bool\n\nIndicates if the slot's value has been set.\n\nresolve_by_type#\n\nCopy@staticmethoddef resolve_by_type(type_name: Text) -> Type[\"Slot\"]\n\nReturns a slots class by its type name.\n\npersistence_info#\n\nCopydef persistence_info() -> Dict[str, Any]\n\nReturns relevant information to persist this slot.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns a unique hash for the slot which is stable across python runs.\n\nReturns:\n\n  fingerprint of the slot\n\nFloatSlot Objects#\n\nCopyclass FloatSlot(Slot)\n\nA slot storing a float value.\n\n__init__#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1397": {"text": "A slot storing a float value.\n\n__init__#\n\nCopydef __init__(name: Text,             mappings: List[Dict[Text, Any]],             initial_value: Optional[float] = None,             value_reset_delay: Optional[int] = None,             max_value: float = 1.0,             min_value: float = 0.0,             influence_conversation: bool = True) -> None\n\nCreates a FloatSlot.\n\nRaises:\n\n  InvalidSlotConfigError, if the min-max range is invalid.\nUserWarning, if initial_value is outside the min-max range.\n\npersistence_info#\n\nCopydef persistence_info() -> Dict[Text, Any]\n\nReturns relevant information to persist this slot.\n\nBooleanSlot Objects#\n\nCopyclass BooleanSlot(Slot)\n\nA slot storing a truth value.\n\nbool_from_any#\n\nCopydef bool_from_any(x: Any) -> bool\n\nConverts bool/float/int/str to bool or raises error.\n\nListSlot Objects#\n\nCopyclass ListSlot(Slot)\n\nvalue#\n\nCopy@Slot.value.setterdef value(value: Any) -> None\n\nSets the slot's value.\n\nCategoricalSlot Objects#\n\nCopyclass CategoricalSlot(Slot)\n\nSlot type which can be used to branch conversations based on its value.\n\n__init__#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1398": {"text": "__init__#\n\nCopydef __init__(name: Text,             mappings: List[Dict[Text, Any]],             values: Optional[List[Any]] = None,             initial_value: Any = None,             value_reset_delay: Optional[int] = None,             influence_conversation: bool = True) -> None\n\nCreates a Categorical  Slot (see parent class for detailed docstring).\n\nadd_default_value#\n\nCopydef add_default_value() -> None\n\nAdds the special default value to the list of possible values.\n\npersistence_info#\n\nCopydef persistence_info() -> Dict[Text, Any]\n\nReturns serialized slot.\n\nAnySlot Objects#\n\nCopyclass AnySlot(Slot)\n\nSlot which can be used to store any value.\n\nUsers need to create a subclass of Slot in case\nthe information is supposed to get featurized.\n\n__init__#\n\nCopydef __init__(name: Text,             mappings: List[Dict[Text, Any]],             initial_value: Any = None,             value_reset_delay: Optional[int] = None,             influence_conversation: bool = False) -> None\n\nCreates an Any  Slot (see parent class for detailed docstring).\n\nRaises:\n\n  InvalidSlotConfigError, if slot is featurized.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nCompares object with other object.\n\nPrevious\u00ab rasa.shared.core.slot_mappingsNextrasa.shared.core.trackers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1399": {"text": "Version: 3.x\n\nrasa.shared.core.trackers\n\nTrackerActiveLoop Objects#\n\nCopy@dataclasses.dataclassclass TrackerActiveLoop()\n\nDataclass for DialogueStateTracker.active_loop.\n\nEventVerbosity Objects#\n\nCopyclass EventVerbosity(Enum)\n\nFilter on which events to include in tracker dumps.\n\nAnySlotDict Objects#\n\nCopyclass AnySlotDict(dict)\n\nA slot dictionary that pretends every slot exists, by creating slots on demand.\n\nThis only uses the generic slot type! This means certain functionality wont work,\ne.g. properly featurizing the slot.\n\nDialogueStateTracker Objects#\n\nCopyclass DialogueStateTracker()\n\nMaintains the state of a conversation.\n\nThe field max_event_history will only give you these last events,\nit can be set in the tracker_store.\n\nfrom_dict#\n\nCopy@classmethoddef from_dict(        cls,        sender_id: Text,        events_as_dict: List[Dict[Text, Any]],        slots: Optional[Iterable[Slot]] = None,        max_event_history: Optional[int] = None) -> \"DialogueStateTracker\"\n\nCreate a tracker from dump.\n\nThe dump should be an array of dumped events. When restoring\nthe tracker, these events will be replayed to recreate the state.\n\nfrom_events#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1400": {"text": "from_events#\n\nCopy@classmethoddef from_events(cls,                sender_id: Text,                evts: List[Event],                slots: Optional[Iterable[Slot]] = None,                max_event_history: Optional[int] = None,                sender_source: Optional[Text] = None,                domain: Optional[Domain] = None) -> \"DialogueStateTracker\"\n\nCreates tracker from existing events.\n\nArguments:\n\nsender_id - The ID of the conversation.evts - Existing events which should be applied to the new tracker.slots - Slots which can be set.max_event_history - Maximum number of events which should be stored.sender_source - File source of the messages.domain - The current model domain.\n\nReturns:\n\n  Instantiated tracker with its state updated according to the given\nevents.\n\n__init__#\n\nCopydef __init__(sender_id: Text,             slots: Optional[Iterable[Slot]],             max_event_history: Optional[int] = None,             sender_source: Optional[Text] = None,             is_rule_tracker: bool = False) -> None\n\nInitialize the tracker.\n\nA set of events can be stored externally, and we will run through all\nof them to get the current state. The tracker will represent all the\ninformation we captured while processing messages of the dialogue.\n\ncurrent_state#\n\nCopydef current_state(        event_verbosity: EventVerbosity = EventVerbosity.NONE) -> Dict[Text, Any]\n\nReturns the current tracker state as an object.\n\nfreeze_current_state#\n\nCopy@staticmethoddef freeze_current_state(state: State) -> FrozenState", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1401": {"text": "Copy@staticmethoddef freeze_current_state(state: State) -> FrozenState\n\nConvert State dict into a hashable format FrozenState.\n\nArguments:\n\nstate - The state which should be converted\n\nReturns:\n\n  hashable form of the state of type FrozenState\n\npast_states#\n\nCopydef past_states(        domain: Domain,        omit_unset_slots: bool = False,        ignore_rule_only_turns: bool = False,        rule_only_data: Optional[Dict[Text, Any]] = None) -> List[State]\n\nGenerates the past states of this tracker based on the history.\n\nArguments:\n\ndomain - The Domain.omit_unset_slots - If True do not include the initial values of slots.ignore_rule_only_turns - If True ignore dialogue turns that are present\nonly in rules.rule_only_data - Slots and loops,\nwhich only occur in rules but not in stories.\n\nReturns:\n\n  A list of states\n\nchange_loop_to#\n\nCopydef change_loop_to(loop_name: Optional[Text]) -> None\n\nSet the currently active loop.\n\nArguments:\n\nloop_name - The name of loop which should be marked as active.\n\ninterrupt_loop#\n\nCopydef interrupt_loop(is_interrupted: bool) -> None\n\nInterrupt loop and mark that we entered an unhappy path in the conversation.\n\nArguments:\n\nis_interrupted - True if the loop was run after an unhappy path.\n\nreject_action#\n\nCopydef reject_action(action_name: Text) -> None\n\nNotify active loop that it was rejected.\n\nset_latest_action#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1402": {"text": "Notify active loop that it was rejected.\n\nset_latest_action#\n\nCopydef set_latest_action(action: Dict[Text, Text]) -> None\n\nSets latest action name or text.\n\nResets loop validation and rejection parameters.\n\nArguments:\n\naction - Serialized action event.\n\ncurrent_slot_values#\n\nCopydef current_slot_values() -> Dict[Text, Any]\n\nReturn the currently set values of the slots.\n\nget_slot#\n\nCopydef get_slot(key: Text) -> Optional[Any]\n\nRetrieves the value of a slot.\n\nget_latest_entity_values#\n\nCopydef get_latest_entity_values(        entity_type: Text,        entity_role: Optional[Text] = None,        entity_group: Optional[Text] = None) -> Iterator[Text]\n\nGet entity values found for the passed entity type and optional role and\ngroup in latest message.\n\nIf you are only interested in the first entity of a given type use\nnext(tracker.get_latest_entity_values(\"my_entity_name\"), None).\nIf no entity is found None is the default result.\n\nArguments:\n\nentity_type - the entity type of interestentity_role - optional entity role of interestentity_group - optional entity group of interest\n\nReturns:\n\n  Entity values.\n\nget_latest_input_channel#\n\nCopydef get_latest_input_channel() -> Optional[Text]\n\nGet the name of the input_channel of the latest UserUttered event.\n\nis_paused#\n\nCopydef is_paused() -> bool\n\nState whether the tracker is currently paused.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1403": {"text": "State whether the tracker is currently paused.\n\nidx_after_latest_restart#\n\nCopydef idx_after_latest_restart() -> int\n\nReturn the idx of the most recent restart in the list of events.\n\nIf the conversation has not been restarted, 0 is returned.\n\nevents_after_latest_restart#\n\nCopydef events_after_latest_restart() -> List[Event]\n\nReturn a list of events after the most recent restart.\n\ninit_copy#\n\nCopydef init_copy() -> \"DialogueStateTracker\"\n\nCreates a new state tracker with the same initial values.\n\ngenerate_all_prior_trackers#\n\nCopydef generate_all_prior_trackers() -> Generator[Tuple[\"DialogueStateTracker\", bool], None, None]\n\nReturns a generator of the previous trackers of this tracker.\n\nReturns:\n\n  The tuple with the tracker before each action,\nand the boolean flag representing whether this action should be hidden\nin the dialogue history created for ML-based policies.\n\napplied_events#\n\nCopydef applied_events() -> List[Event]\n\nReturns all actions that should be applied - w/o reverted events.\n\nReturns:\n\n  The events applied to the tracker.\n\nreplay_events#\n\nCopydef replay_events() -> None\n\nUpdate the tracker based on a list of events.\n\nrecreate_from_dialogue#\n\nCopydef recreate_from_dialogue(dialogue: Dialogue) -> None\n\nUse a serialised Dialogue to update the trackers state.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1404": {"text": "Use a serialised Dialogue to update the trackers state.\n\nThis uses the state as is persisted in a TrackerStore. If the\ntracker is blank before calling this method, the final state will be\nidentical to the tracker from which the dialogue was created.\n\ncopy#\n\nCopydef copy() -> \"DialogueStateTracker\"\n\nCreates a duplicate of this tracker.\n\ntravel_back_in_time#\n\nCopydef travel_back_in_time(target_time: float) -> \"DialogueStateTracker\"\n\nCreates a new tracker with a state at a specific timestamp.\n\nA new tracker will be created and all events previous to the\npassed time stamp will be replayed. Events that occur exactly\nat the target time will be included.\n\nas_dialogue#\n\nCopydef as_dialogue() -> Dialogue\n\nReturn a Dialogue object containing all of the turns.\n\nThis can be serialised and later used to recover the state\nof this tracker exactly.\n\nupdate#\n\nCopydef update(event: Event, domain: Optional[Domain] = None) -> None\n\nModify the state of the tracker according to an Event.\n\nupdate_with_events#\n\nCopydef update_with_events(new_events: List[Event],                       domain: Optional[Domain],                       override_timestamp: bool = True) -> None\n\nAdds multiple events to the tracker.\n\nArguments:\n\nnew_events - Events to apply.domain - The current model's domain.override_timestamp - If True refresh all timestamps of the events. As the\nevents are usually created at some earlier point, this makes sure that\nall new events come after any current tracker events.\n\nas_story#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1405": {"text": "as_story#\n\nCopydef as_story(include_source: bool = False) -> \"Story\"\n\nDump the tracker as a story in the Rasa Core story format.\n\nReturns the dumped tracker as a string.\n\nexport_stories#\n\nCopydef export_stories(writer: \"StoryWriter\",                   e2e: bool = False,                   include_source: bool = False,                   should_append_stories: bool = False) -> Text\n\nDump the tracker as a story in the Rasa Core story format.\n\nReturns:\n\n  The dumped tracker as a string.\n\nexport_stories_to_file#\n\nCopydef export_stories_to_file(export_path: Text = \"debug_stories.yml\") -> None\n\nDump the tracker as a story to a file.\n\nget_last_event_for#\n\nCopydef get_last_event_for(    event_type: Union[Type[\"EventTypeAlias\"], Tuple[Type[\"EventTypeAlias\"], ...]],    action_names_to_exclude: List[Text] = None,    skip: int = 0,    event_verbosity: EventVerbosity = EventVerbosity.APPLIED) -> Optional[\"EventTypeAlias\"]\n\nGets the last event of a given type which was actually applied.\n\nArguments:\n\nevent_type - The type of event you want to find.action_names_to_exclude - Events of type ActionExecuted which\nshould be excluded from the results. Can be used to skip\naction_listen events.skip - Skips n possible results before return an event.event_verbosity - Which EventVerbosity should be used to search for events.\n\nReturns:", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1406": {"text": "Returns:\n\n  event which matched the query or None if no event matched.\n\nlast_executed_action_has#\n\nCopydef last_executed_action_has(name: Text, skip: int = 0) -> bool\n\nReturns whether last ActionExecuted event had a specific name.\n\nArguments:\n\nname - Name of the event which should be matched.skip - Skips n possible results in between.\n\nReturns:\n\n True if last executed action had name name, otherwise False.\n\ntrigger_followup_action#\n\nCopydef trigger_followup_action(action: Text) -> None\n\nTriggers another action following the execution of the current.\n\nclear_followup_action#\n\nCopydef clear_followup_action() -> None\n\nClears follow up action when it was executed.\n\nactive_loop_name#\n\nCopy@propertydef active_loop_name() -> Optional[Text]\n\nGet the name of the currently active loop.\n\nReturns: None if no active loop or the name of the currently active loop.\n\nlatest_action_name#\n\nCopy@propertydef latest_action_name() -> Optional[Text]\n\nGet the name of the previously executed action or text of e2e action.\n\nReturns: name of the previously executed action or text of e2e action\n\nis_active_loop_rejected#\n\nCopy@propertydef is_active_loop_rejected() -> bool\n\nReturn True if there is an active loop and it's rejected.\n\nis_active_loop_interrupted#\n\nCopy@propertydef is_active_loop_interrupted() -> bool\n\nReturn True if there is an active loop and it's interrupted.\n\nfingerprint#\n\nCopydef fingerprint() -> Text", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1407": {"text": "fingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns a unique hash for the tracker which is stable across python runs.\n\nReturns:\n\n  fingerprint of the tracker\n\nTrackerEventDiffEngine Objects#\n\nCopyclass TrackerEventDiffEngine()\n\nComputes event difference of two trackers.\n\nevent_difference#\n\nCopy@staticmethoddef event_difference(original: DialogueStateTracker,                     tracker: DialogueStateTracker) -> List[Event]\n\nReturns all events from the new tracker which are not present\nin the original tracker.\n\nArguments:\n\ntracker - Tracker containing events from the current conversation session.\n\nget_active_loop_name#\n\nCopydef get_active_loop_name(state: State) -> Optional[Text]\n\nGet the name of current active loop.\n\nArguments:\n\nstate - The state from which the name of active loop should be extracted\n\nReturns:\n\n  the name of active loop or None\n\nis_prev_action_listen_in_state#\n\nCopydef is_prev_action_listen_in_state(state: State) -> bool\n\nCheck if action_listen is the previous executed action.\n\nArguments:\n\nstate - The state for which the check should be performed\n\nReturns:\n\n  boolean value indicating whether action_listen is previous action\n\nget_trackers_for_conversation_sessions#\n\nCopydef get_trackers_for_conversation_sessions(        tracker: DialogueStateTracker) -> List[DialogueStateTracker]\n\nGenerate trackers for tracker that are split by conversation sessions.\n\nArguments:\n\ntracker - Instance of DialogueStateTracker to split.\n\nReturns:\n\n  The trackers split by conversation sessions.", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1408": {"text": "Returns:\n\n  The trackers split by conversation sessions.\n\nPrevious\u00ab rasa.shared.core.slotsNextrasa.shared.importers.autoconfig \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1409": {"text": "Version: 3.x\n\nrasa.shared.importers.autoconfig\n\nTrainingType Objects#\n\nCopyclass TrainingType(Enum)\n\nmodel_type#\n\nCopy | @property | model_type() -> Text\n\nReturns the type of model which this training yields.\n\nget_configuration#\n\nCopyget_configuration(config_file_path: Optional[Text], training_type: Optional[TrainingType] = TrainingType.BOTH) -> Dict[Text, Any]\n\nDetermine configuration from a configuration file.\n\nKeys that are provided and have a value in the file are kept. Keys that are not\nprovided are configured automatically.\n\nArguments:\n\nconfig_file_path - The path to the configuration file.training_type - NLU, CORE or BOTH depending on what is trained.\n\nPrevious\u00ab rasa.shared.core.trackersNextrasa.shared.importers.importer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1410": {"text": "Version: 3.x\n\nrasa.shared.importers.importer\n\nTrainingDataImporter Objects#\n\nCopyclass TrainingDataImporter(ABC)\n\nCommon interface for different mechanisms to load training data.\n\n__init__#\n\nCopy@abstractmethoddef __init__(config_file: Optional[Text] = None,             domain_path: Optional[Text] = None,             training_data_paths: Optional[Union[List[Text], Text]] = None, **kwargs: Any) -> None\n\nInitialise the importer.\n\nget_domain#\n\nCopy@abstractmethoddef get_domain() -> Domain\n\nRetrieves the domain of the bot.\n\nReturns:\n\n  Loaded Domain.\n\nget_stories#\n\nCopy@abstractmethoddef get_stories(exclusion_percentage: Optional[int] = None) -> StoryGraph\n\nRetrieves the stories that should be used for training.\n\nArguments:\n\nexclusion_percentage - Amount of training data that should be excluded.\n\nReturns:\n\n StoryGraph containing all loaded stories.\n\nget_conversation_tests#\n\nCopydef get_conversation_tests() -> StoryGraph\n\nRetrieves end-to-end conversation stories for testing.\n\nReturns:\n\n StoryGraph containing all loaded stories.\n\nget_config#\n\nCopy@abstractmethoddef get_config() -> Dict\n\nRetrieves the configuration that should be used for the training.\n\nReturns:\n\n  The configuration as dictionary.\n\nget_config_file_for_auto_config#\n\nCopy@abstractmethoddef get_config_file_for_auto_config() -> Optional[Text]", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1411": {"text": "Returns config file path for auto-config only if there is a single one.\n\nget_nlu_data#\n\nCopy@abstractmethoddef get_nlu_data(language: Optional[Text] = \"en\") -> TrainingData\n\nRetrieves the NLU training data that should be used for training.\n\nArguments:\n\nlanguage - Can be used to only load training data for a certain language.\n\nReturns:\n\n  Loaded NLU TrainingData.\n\nload_from_config#\n\nCopy@staticmethoddef load_from_config(        config_path: Text,        domain_path: Optional[Text] = None,        training_data_paths: Optional[List[Text]] = None,        args: Optional[Dict[Text, Any]] = {}) -> \"TrainingDataImporter\"\n\nLoads a TrainingDataImporter instance from a configuration file.\n\nload_core_importer_from_config#\n\nCopy@staticmethoddef load_core_importer_from_config(        config_path: Text,        domain_path: Optional[Text] = None,        training_data_paths: Optional[List[Text]] = None,        args: Optional[Dict[Text, Any]] = {}) -> \"TrainingDataImporter\"\n\nLoads core TrainingDataImporter instance.\n\nInstance loaded from configuration file will only read Core training data.\n\nload_nlu_importer_from_config#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1412": {"text": "load_nlu_importer_from_config#\n\nCopy@staticmethoddef load_nlu_importer_from_config(        config_path: Text,        domain_path: Optional[Text] = None,        training_data_paths: Optional[List[Text]] = None,        args: Optional[Dict[Text, Any]] = {}) -> \"TrainingDataImporter\"\n\nLoads nlu TrainingDataImporter instance.\n\nInstance loaded from configuration file will only read NLU training data.\n\nload_from_dict#\n\nCopy@staticmethoddef load_from_dict(        config: Optional[Dict] = None,        config_path: Optional[Text] = None,        domain_path: Optional[Text] = None,        training_data_paths: Optional[List[Text]] = None,        args: Optional[Dict[Text, Any]] = {}) -> \"TrainingDataImporter\"\n\nLoads a TrainingDataImporter instance from a dictionary.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nReturns a random fingerprint as data shouldn't be cached.\n\n__repr__#\n\nCopydef __repr__() -> Text\n\nReturns text representation of object.\n\nNluDataImporter Objects#\n\nCopyclass NluDataImporter(TrainingDataImporter)\n\nImporter that skips any Core-related file reading.\n\n__init__#\n\nCopydef __init__(actual_importer: TrainingDataImporter)\n\nInitializes the NLUDataImporter.\n\nget_domain#\n\nCopydef get_domain() -> Domain\n\nRetrieves model domain (see parent class for full docstring).\n\nget_stories#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1413": {"text": "get_stories#\n\nCopydef get_stories(exclusion_percentage: Optional[int] = None) -> StoryGraph\n\nRetrieves training stories / rules (see parent class for full docstring).\n\nget_conversation_tests#\n\nCopydef get_conversation_tests() -> StoryGraph\n\nRetrieves conversation test stories (see parent class for full docstring).\n\nget_config#\n\nCopydef get_config() -> Dict\n\nRetrieves model config (see parent class for full docstring).\n\nget_nlu_data#\n\nCopydef get_nlu_data(language: Optional[Text] = \"en\") -> TrainingData\n\nRetrieves NLU training data (see parent class for full docstring).\n\nget_config_file_for_auto_config#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_config_file_for_auto_config() -> Optional[Text]\n\nReturns config file path for auto-config only if there is a single one.\n\nCombinedDataImporter Objects#\n\nCopyclass CombinedDataImporter(TrainingDataImporter)\n\nA TrainingDataImporter that combines multiple importers.\n\nUses multiple TrainingDataImporter instances\nto load the data as if they were a single instance.\n\nget_config#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_config() -> Dict\n\nRetrieves model config (see parent class for full docstring).\n\nget_domain#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_domain() -> Domain\n\nRetrieves model domain (see parent class for full docstring).\n\nget_stories#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1414": {"text": "get_stories#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_stories(exclusion_percentage: Optional[int] = None) -> StoryGraph\n\nRetrieves training stories / rules (see parent class for full docstring).\n\nget_conversation_tests#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_conversation_tests() -> StoryGraph\n\nRetrieves conversation test stories (see parent class for full docstring).\n\nget_nlu_data#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_nlu_data(language: Optional[Text] = \"en\") -> TrainingData\n\nRetrieves NLU training data (see parent class for full docstring).\n\nget_config_file_for_auto_config#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_config_file_for_auto_config() -> Optional[Text]\n\nReturns config file path for auto-config only if there is a single one.\n\nResponsesSyncImporter Objects#\n\nCopyclass ResponsesSyncImporter(TrainingDataImporter)\n\nImporter that syncs responses between Domain and NLU training data.\n\nSynchronizes responses between Domain and NLU and\nadds retrieval intent properties from the NLU training data\nback to the Domain.\n\n__init__#\n\nCopydef __init__(importer: TrainingDataImporter)\n\nInitializes the ResponsesSyncImporter.\n\nget_config#\n\nCopydef get_config() -> Dict\n\nRetrieves model config (see parent class for full docstring).", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1415": {"text": "Retrieves model config (see parent class for full docstring).\n\nget_config_file_for_auto_config#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_config_file_for_auto_config() -> Optional[Text]\n\nReturns config file path for auto-config only if there is a single one.\n\nget_domain#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_domain() -> Domain\n\nMerge existing domain with properties of retrieval intents in NLU data.\n\nget_stories#\n\nCopydef get_stories(exclusion_percentage: Optional[int] = None) -> StoryGraph\n\nRetrieves training stories / rules (see parent class for full docstring).\n\nget_conversation_tests#\n\nCopydef get_conversation_tests() -> StoryGraph\n\nRetrieves conversation test stories (see parent class for full docstring).\n\nget_nlu_data#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_nlu_data(language: Optional[Text] = \"en\") -> TrainingData\n\nUpdates NLU data with responses for retrieval intents from domain.\n\nE2EImporter Objects#\n\nCopyclass E2EImporter(TrainingDataImporter)\n\nImporter with the following functionality.\n\nenhances the NLU training data with actions / user messages from the stories.adds potential end-to-end bot messages from stories as actions to the domain\n\n__init__#\n\nCopydef __init__(importer: TrainingDataImporter) -> None\n\nInitializes the E2EImporter.\n\nget_domain#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1416": {"text": "Initializes the E2EImporter.\n\nget_domain#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_domain() -> Domain\n\nRetrieves model domain (see parent class for full docstring).\n\nget_stories#\n\nCopydef get_stories(exclusion_percentage: Optional[int] = None) -> StoryGraph\n\nRetrieves the stories that should be used for training.\n\nSee parent class for details.\n\nget_conversation_tests#\n\nCopydef get_conversation_tests() -> StoryGraph\n\nRetrieves conversation test stories (see parent class for full docstring).\n\nget_config#\n\nCopydef get_config() -> Dict\n\nRetrieves model config (see parent class for full docstring).\n\nget_config_file_for_auto_config#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_config_file_for_auto_config() -> Optional[Text]\n\nReturns config file path for auto-config only if there is a single one.\n\nget_nlu_data#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_nlu_data(language: Optional[Text] = \"en\") -> TrainingData\n\nRetrieves NLU training data (see parent class for full docstring).\n\nPrevious\u00ab rasa.shared.importers.autoconfigNextrasa.shared.importers.multi_project \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1417": {"text": "Version: 3.x\n\nrasa.shared.importers.multi_project\n\nMultiProjectImporter Objects#\n\nCopyclass MultiProjectImporter(TrainingDataImporter)\n\nget_config_file_for_auto_config#\n\nCopydef get_config_file_for_auto_config() -> Optional[Text]\n\nReturns config file path for auto-config only if there is a single one.\n\ntraining_paths#\n\nCopydef training_paths() -> Set[Text]\n\nReturns the paths which should be searched for training data.\n\nis_imported#\n\nCopydef is_imported(path: Text) -> bool\n\nChecks whether a path is imported by a skill.\n\nArguments:\n\npath - File or directory path which should be checked.\n\nReturns:\n\n True if path is imported by a skill, False if not.\n\nget_domain#\n\nCopydef get_domain() -> Domain\n\nRetrieves model domain (see parent class for full docstring).\n\nget_stories#\n\nCopydef get_stories(exclusion_percentage: Optional[int] = None) -> StoryGraph\n\nRetrieves training stories / rules (see parent class for full docstring).\n\nget_conversation_tests#\n\nCopydef get_conversation_tests() -> StoryGraph\n\nRetrieves conversation test stories (see parent class for full docstring).\n\nget_config#\n\nCopydef get_config() -> Dict\n\nRetrieves model config (see parent class for full docstring).\n\nget_nlu_data#\n\nCopydef get_nlu_data(language: Optional[Text] = \"en\") -> TrainingData", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1418": {"text": "Retrieves NLU training data (see parent class for full docstring).\n\nPrevious\u00ab rasa.shared.importers.importerNextrasa.shared.importers.rasa \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1419": {"text": "Version: 3.x\n\nrasa.shared.importers.rasa\n\nRasaFileImporter Objects#\n\nCopyclass RasaFileImporter(TrainingDataImporter)\n\nDefault TrainingFileImporter implementation.\n\nget_config#\n\nCopydef get_config() -> Dict\n\nRetrieves model config (see parent class for full docstring).\n\nget_config_file_for_auto_config#\n\nCopy@rasa.shared.utils.common.cached_methoddef get_config_file_for_auto_config() -> Optional[Text]\n\nReturns config file path for auto-config only if there is a single one.\n\nget_stories#\n\nCopydef get_stories(exclusion_percentage: Optional[int] = None) -> StoryGraph\n\nRetrieves training stories / rules (see parent class for full docstring).\n\nget_conversation_tests#\n\nCopydef get_conversation_tests() -> StoryGraph\n\nRetrieves conversation test stories (see parent class for full docstring).\n\nget_nlu_data#\n\nCopydef get_nlu_data(language: Optional[Text] = \"en\") -> TrainingData\n\nRetrieves NLU training data (see parent class for full docstring).\n\nget_domain#\n\nCopydef get_domain() -> Domain\n\nRetrieves model domain (see parent class for full docstring).\n\nPrevious\u00ab rasa.shared.importers.multi_projectNextrasa.shared.importers.utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1420": {"text": "Version: 3.x\n\nrasa.shared.importers.utils\n\nstory_graph_from_paths#\n\nCopydef story_graph_from_paths(        files: List[Text],        domain: Domain,        exclusion_percentage: Optional[int] = None) -> StoryGraph\n\nReturns the StoryGraph from paths.\n\nPrevious\u00ab rasa.shared.importers.rasaNextrasa.shared.nlu.training_data.formats.dialogflow \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1421": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.formats.dialogflow\n\nDialogflowReader Objects#\n\nCopyclass DialogflowReader(TrainingDataReader)\n\nReader for NLU training data.\n\nread#\n\nCopydef read(filename: Union[Text, Path], **kwargs: Any) -> \"TrainingData\"\n\nLoads training data stored in the Dialogflow data format.\n\nPrevious\u00ab rasa.shared.importers.utilsNextrasa.shared.nlu.training_data.formats.luis \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1422": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.formats.luis\n\nLuisReader Objects#\n\nCopyclass LuisReader(JsonTrainingDataReader)\n\nReads LUIS training data.\n\nread_from_json#\n\nCopydef read_from_json(js: Dict[Text, Any], **kwargs: Any) -> \"TrainingData\"\n\nLoads training data stored in the LUIS.ai data format.\n\nPrevious\u00ab rasa.shared.nlu.training_data.formats.dialogflowNextrasa.shared.nlu.training_data.formats.markdown \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1423": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.formats.markdown\n\nMarkdownReader Objects#\n\nCopyclass MarkdownReader(TrainingDataReader)\n\nReads markdown training data and creates a TrainingData object.\n\n__init__#\n\nCopy | __init__(ignore_deprecation_warning: bool = False) -> None\n\nCreates reader. See parent class docstring for more information.\n\nreads#\n\nCopy | reads(s: Text, **kwargs: Any) -> \"TrainingData\"\n\nRead markdown string and create TrainingData object.\n\nMarkdownWriter Objects#\n\nCopyclass MarkdownWriter(TrainingDataWriter)\n\nConverts NLU data to Markdown.\n\n__init__#\n\nCopy | __init__(ignore_deprecation_warning: bool = False) -> None\n\nCreates writer.\n\nArguments:\n\nignore_deprecation_warning - True if deprecation warning for Markdown\nformat should be suppressed.\n\ndumps#\n\nCopy | dumps(training_data: \"TrainingData\") -> Text\n\nTransforms a TrainingData object into a markdown string.\n\nPrevious\u00ab rasa.shared.nlu.training_data.formats.luisNextrasa.shared.nlu.training_data.formats.markdown_nlg \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1424": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.formats.markdown_nlg\n\nNLGMarkdownReader Objects#\n\nCopyclass NLGMarkdownReader(MarkdownReader)\n\nReads markdown training data with NLG stories and creates TrainingData object.\n\n__init__#\n\nCopy | __init__(ignore_deprecation_warning: bool = False) -> None\n\nCreates reader. See parent class docstring for more information.\n\nreads#\n\nCopy | reads(s: Text, **kwargs: Any) -> \"TrainingData\"\n\nRead markdown string and create TrainingData object.\n\nis_markdown_nlg_file#\n\nCopy | @staticmethod | is_markdown_nlg_file(filename: Union[Text, Path]) -> bool\n\nChecks if given file contains NLG training data.\n\nArguments:\n\nfilename - Path to the training data file.\n\nReturns:\n\n True if file contains NLG training data, False otherwise.\n\nNLGMarkdownWriter Objects#\n\nCopyclass NLGMarkdownWriter(MarkdownWriter)\n\nConverts retrieval intent data to Markdown.\n\ndumps#\n\nCopy | dumps(training_data: \"TrainingData\") -> Text\n\nTransforms the NlG part of TrainingData object into a markdown string.\n\nPrevious\u00ab rasa.shared.nlu.training_data.formats.markdownNextrasa.shared.nlu.training_data.formats.rasa \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1425": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.formats.rasa\n\nRasaReader Objects#\n\nCopyclass RasaReader(JsonTrainingDataReader)\n\nReader for Rasa NLU training data in JSON format.\n\nExample:\n\n  {\n\n\"rasa_nlu_data\" - {\"regex_features\" - [\n{\"name\" - \"zipcode\",\"pattern\" - \"[0-9]{5}\"\n}\n],\"entity_synonyms\" - [\n{\"value\" - \"chinese\",\"synonyms\" - [\"Chinese\", \"Chines\", \"chines\"]\n}\n],\"common_examples\" - [\n{\"text\" - \"hey\",\"intent\" - \"greet\",\"regex_features\"0 - []\n},\n{\"text\" - \"howdy\",\"intent\" - \"greet\",\"regex_features\"0 - []\n}\n]\n}\n}\n\n__init__#\n\nCopydef __init__() -> None\n\nCreates reader.\n\nread_from_json#\n\nCopydef read_from_json(js: Dict[Text, Any], **_: Any) -> \"TrainingData\"\n\nLoads training data stored in the rasa NLU data format.\n\nRasaWriter Objects#\n\nCopyclass RasaWriter(TrainingDataWriter)\n\nDumps NLU data as Rasa JSON string.\n\n__init__#\n\nCopydef __init__() -> None\n\nCreates writer.\n\ndumps#\n\nCopydef dumps(training_data: \"TrainingData\", **kwargs: Any) -> Text\n\nWrites Training Data to a string in json format.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1426": {"text": "Writes Training Data to a string in json format.\n\nPrevious\u00ab rasa.shared.nlu.training_data.formats.markdown_nlgNextrasa.shared.nlu.training_data.formats.rasa_yaml \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1427": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.formats.rasa_yaml\n\nRasaYAMLReader Objects#\n\nCopyclass RasaYAMLReader(TrainingDataReader)\n\nReads YAML training data and creates a TrainingData object.\n\nvalidate#\n\nCopydef validate(string: Text) -> None\n\nCheck if the string adheres to the NLU yaml data schema.\n\nIf the string is not in the right format, an exception will be raised.\n\nreads#\n\nCopydef reads(string: Text, **kwargs: Any) -> \"TrainingData\"\n\nReads TrainingData in YAML format from a string.\n\nArguments:\n\nstring - String with YAML training data.**kwargs - Keyword arguments.\n\nReturns:\n\n  New TrainingData object with parsed training data.\n\nis_yaml_nlu_file#\n\nCopy@staticmethoddef is_yaml_nlu_file(filename: Union[Text, Path]) -> bool\n\nChecks if the specified file possibly contains NLU training data in YAML.\n\nArguments:\n\nfilename - name of the file to check.\n\nReturns:\n\n True if the filename is possibly a valid YAML NLU file,\nFalse otherwise.\n\nRaises:\n\nYamlException - if the file seems to be a YAML file (extension) but\ncan not be read / parsed.\n\nRasaYAMLWriter Objects#\n\nCopyclass RasaYAMLWriter(TrainingDataWriter)\n\nWrites training data into a file in a YAML format.\n\ndumps#\n\nCopydef dumps(training_data: \"TrainingData\") -> Text", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1428": {"text": "Copydef dumps(training_data: \"TrainingData\") -> Text\n\nTurns TrainingData into a string.\n\ndump#\n\nCopydef dump(target: Union[Text, Path, StringIO],         training_data: \"TrainingData\") -> None\n\nWrites training data into a file in a YAML format.\n\nArguments:\n\ntarget - Name of the target object to write the YAML to.training_data - TrainingData object.\n\ntraining_data_to_dict#\n\nCopy@classmethoddef training_data_to_dict(        cls, training_data: \"TrainingData\") -> Optional[OrderedDict]\n\nRepresents NLU training data to a dict/list structure ready to be\nserialized as YAML.\n\nArguments:\n\ntraining_data - TrainingData to convert.\n\nReturns:\n\n OrderedDict containing all training data.\n\nprocess_intents#\n\nCopy@classmethoddef process_intents(cls, training_data: \"TrainingData\") -> List[OrderedDict]\n\nSerializes the intents.\n\nprocess_synonyms#\n\nCopy@classmethoddef process_synonyms(cls, training_data: \"TrainingData\") -> List[OrderedDict]\n\nSerializes the synonyms.\n\nprocess_regexes#\n\nCopy@classmethoddef process_regexes(cls, training_data: \"TrainingData\") -> List[OrderedDict]\n\nSerializes the regexes.\n\nprocess_lookup_tables#\n\nCopy@classmethoddef process_lookup_tables(cls,                          training_data: \"TrainingData\") -> List[OrderedDict]\n\nSerializes the look up tables.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1429": {"text": "Serializes the look up tables.\n\nArguments:\n\ntraining_data - The training data object with potential look up tables.\n\nReturns:\n\n  The serialized lookup tables.\n\nprocess_training_examples_by_key#\n\nCopy@staticmethoddef process_training_examples_by_key(    training_examples: Dict[Text, List[Union[Dict, Text]]], key_name: Text,    key_examples: Text,    example_extraction_predicate: Callable[[Dict[Text, Any]], Text]) -> List[OrderedDict]\n\nPrepares training examples  to be written to YAML.\n\nThis can be any NLU training data (intent examples, lookup tables, etc.)\n\nArguments:\n\ntraining_examples - Multiple training examples. Mappings in case additional\nvalues were specified for an example (e.g. metadata) or just the plain\nvalue.key_name - The top level key which the examples belong to (e.g. intents)key_examples - The sub key which the examples should be added to\n(e.g. examples).example_extraction_predicate - Function to extract example value (e.g. the\nthe text for an intent example)\n\nReturns:\n\n  NLU training data examples prepared for writing to YAML.\n\nPrevious\u00ab rasa.shared.nlu.training_data.formats.rasaNextrasa.shared.nlu.training_data.formats.readerwriter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1430": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.formats.readerwriter\n\nTrainingDataReader Objects#\n\nCopyclass TrainingDataReader(abc.ABC)\n\nReader for NLU training data.\n\n__init__#\n\nCopydef __init__() -> None\n\nCreates reader instance.\n\nread#\n\nCopydef read(filename: Union[Text, Path], **kwargs: Any) -> \"TrainingData\"\n\nReads TrainingData from a file.\n\nreads#\n\nCopy@abc.abstractmethoddef reads(s: Text, **kwargs: Any) -> \"TrainingData\"\n\nReads TrainingData from a string.\n\nTrainingDataWriter Objects#\n\nCopyclass TrainingDataWriter()\n\nA class for writing training data to a file.\n\ndump#\n\nCopydef dump(filename: Text, training_data: \"TrainingData\") -> None\n\nWrites a TrainingData object to a file.\n\ndumps#\n\nCopydef dumps(training_data: \"TrainingData\") -> Text\n\nTurns TrainingData into a string.\n\nprepare_training_examples#\n\nCopy@staticmethoddef prepare_training_examples(        training_data: \"TrainingData\") -> Dict[Text, List[Union[Dict, Text]]]\n\nPre-processes training data examples by removing not trainable entities.\n\ngenerate_list_item#\n\nCopy@staticmethoddef generate_list_item(text: Text) -> Text\n\nGenerates text for a list item.\n\ngenerate_message#\n\nCopy@staticmethoddef generate_message(message: Dict[Text, Any]) -> Text\n\nGenerates text for a message object.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1431": {"text": "Generates text for a message object.\n\nArguments:\n\nmessage - A message\n\nReturns:\n\n  The text of the message, annotated with the entity data that is contained\nin the message\n\ngenerate_entity_attributes#\n\nCopy@staticmethoddef generate_entity_attributes(text: Text,                               entity: Dict[Text, Any],                               short_allowed: bool = True) -> Text\n\nGenerates text for the entity attributes.\n\nArguments:\n\ntext - The text that is annotated with the entityentity - Entity datashort_allowed - If True, allow shorthand annotation with parenthesis\n\nReturns:\n\n  The annotation text that should follow the given text\n\ngenerate_entity#\n\nCopy@staticmethoddef generate_entity(        text: Text, entity: Union[Dict[Text, Any], List[Dict[Text,                                                             Any]]]) -> Text\n\nGenerates text for one or multiple entity objects.\n\nArguments:\n\ntext - The un-annotated textentity - One or multiple entity annotations for one part of this text\n\nReturns:\n\n  Annotated part of the text\n\nJsonTrainingDataReader Objects#\n\nCopyclass JsonTrainingDataReader(TrainingDataReader)\n\nA class for reading JSON files.\n\nreads#\n\nCopydef reads(s: Text, **kwargs: Any) -> \"TrainingData\"\n\nTransforms string into json object and passes it on.\n\nread_from_json#\n\nCopydef read_from_json(js: Dict[Text, Any], **kwargs: Any) -> \"TrainingData\"\n\nReads TrainingData from a json object.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1432": {"text": "Reads TrainingData from a json object.\n\nPrevious\u00ab rasa.shared.nlu.training_data.formats.rasa_yamlNextrasa.shared.nlu.training_data.formats.wit \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1433": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.formats.wit\n\nWitReader Objects#\n\nCopyclass WitReader(JsonTrainingDataReader)\n\nread_from_json#\n\nCopydef read_from_json(js: Dict[Text, Any], **kwargs: Any) -> TrainingData\n\nLoads training data stored in the WIT.ai data format.\n\nPrevious\u00ab rasa.shared.nlu.training_data.formats.readerwriterNextrasa.shared.nlu.training_data.schemas.data_schema \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1434": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.schemas.data_schema\n\nentity_dict_schema#\n\nCopydef entity_dict_schema() -> Dict[Text, Any]\n\nReturns: schema for defining entities.\n\nrasa_nlu_data_schema#\n\nCopydef rasa_nlu_data_schema() -> Dict[Text, Any]\n\nReturns: schema of the Rasa NLU data format (json format).\n\nPrevious\u00ab rasa.shared.nlu.training_data.formats.witNextrasa.shared.nlu.training_data.entities_parser \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1435": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.entities_parser\n\nEntityAttributes Objects#\n\nCopyclass EntityAttributes(NamedTuple)\n\nAttributes of an entity defined in markdown data.\n\nfind_entities_in_training_example#\n\nCopydef find_entities_in_training_example(example: Text) -> List[Dict[Text, Any]]\n\nExtracts entities from an annotated utterance.\n\nArguments:\n\nexample - Annotated utterance.\n\nReturns:\n\n  Extracted entities.\n\nextract_entity_attributes#\n\nCopydef extract_entity_attributes(match: Match) -> EntityAttributes\n\nExtract the entity attributes, i.e. type, value, etc., from the\nregex match.\n\nArguments:\n\nmatch - Regex match to extract the entity attributes from.\n\nReturns:\n\n  EntityAttributes object.\n\nextract_entity_attributes_from_dict#\n\nCopydef extract_entity_attributes_from_dict(entity_text: Text,                                        match: Match) -> EntityAttributes\n\nExtract entity attributes from dict format.\n\nArguments:\n\nentity_text - Original entity text.match - Regex match.\n\nReturns:\n\n  Extracted entity attributes.\n\nget_validated_dict#\n\nCopydef get_validated_dict(json_str: Text) -> Dict[Text, Text]\n\nConverts the provided json_str to a valid dict containing the entity\nattributes.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1436": {"text": "Converts the provided json_str to a valid dict containing the entity\nattributes.\n\nUsers can specify entity roles, synonyms, groups for an entity in a dict, e.g.\n[LA]{\"entity\": \"city\", \"role\": \"to\", \"value\": \"Los Angeles\"}.\n\nArguments:\n\njson_str - The entity dict as string without \"{}\".\n\nRaises:\n\n  SchemaValidationError if validation of parsed entity fails.\nInvalidEntityFormatException if provided entity is not valid json.\n\nReturns:\n\n  Deserialized and validated json_str.\n\nreplace_entities#\n\nCopydef replace_entities(training_example: Text) -> Text\n\nReplace special symbols related to the entities in the provided\ntraining example.\n\nArguments:\n\ntraining_example - Original training example with special symbols.\n\nReturns:\n\n  String with removed special symbols.\n\nparse_training_example#\n\nCopydef parse_training_example(example: Text,                           intent: Optional[Text] = None) -> \"Message\"\n\nExtract entities and synonyms, and convert to plain text.\n\nPrevious\u00ab rasa.shared.nlu.training_data.schemas.data_schemaNextrasa.shared.nlu.training_data.features \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1437": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.features\n\nFeatures Objects#\n\nCopyclass Features()\n\nStores the features produced by any featurizer.\n\n__init__#\n\nCopydef __init__(features: Union[np.ndarray,                             scipy.sparse.spmatrix], feature_type: Text,             attribute: Text, origin: Union[Text, List[Text]]) -> None\n\nInitializes the Features object.\n\nArguments:\n\nfeatures - The features.feature_type - Type of the feature, e.g. FEATURE_TYPE_SENTENCE.attribute - Message attribute, e.g. INTENT or TEXT.origin - Name of the component that created the features.\n\nis_sparse#\n\nCopydef is_sparse() -> bool\n\nChecks if features are sparse or not.\n\nReturns:\n\n  True, if features are sparse, false otherwise.\n\nis_dense#\n\nCopydef is_dense() -> bool\n\nChecks if features are dense or not.\n\nReturns:\n\n  True, if features are dense, false otherwise.\n\ncombine_with_features#\n\nCopydef combine_with_features(additional_features: Optional[Features]) -> None\n\nCombine the incoming features with this instance's features.\n\nArguments:\n\nadditional_features - additional features to add\n\nReturns:\n\n  Combined features.\n\n__key__#\n\nCopydef __key__() -> Tuple[Text, Text, Union[np.ndarray, scipy.sparse.spmatrix],                       Union[Text, List[Text]]]\n\nReturns a 4-tuple of defining properties.\n\nReturns:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1438": {"text": "Returns a 4-tuple of defining properties.\n\nReturns:\n\n  Tuple of type, attribute, features, and origin properties.\n\n__eq__#\n\nCopydef __eq__(other: Any) -> bool\n\nTests if the self Feature equals to the other.\n\nArguments:\n\nother - The other object.\n\nReturns:\n\n True when the other object is a Feature and has the same\ntype, attribute, and feature tensors.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nCalculate a stable string fingerprint for the features.\n\nfilter#\n\nCopy@staticmethoddef filter(features_list: List[Features],           attributes: Optional[Iterable[Text]] = None, type: Optional[Text] = None,           origin: Optional[List[Text]] = None,           is_sparse: Optional[bool] = None) -> List[Features]\n\nFilters the given list of features.\n\nArguments:\n\nfeatures_list - list of features to be filteredattributes - List of attributes that we're interested in. Set this to None\nto disable this filter.type - The type of feature we're interested in. Set this to None\nto disable this filter.origin - If specified, this method will check that the exact order of origins\nmatches the given list of origins. The reason for this is that if\nmultiple origins are listed for a Feature, this means that this feature\nhas been created by concatenating Features from the listed origins in\nthat particular order.is_sparse - Defines whether all features that we're interested in should be\nsparse. Set this to None to disable this filter.\n\nReturns:\n\n  sub-list of features with the desired properties\n\ngroupby_attribute#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1439": {"text": "sub-list of features with the desired properties\n\ngroupby_attribute#\n\nCopy@staticmethoddef groupby_attribute(        features_list: List[Features],        attributes: Optional[Iterable[Text]] = None) -> Dict[Text, List[Features]]\n\nGroups the given features according to their attribute.\n\nArguments:\n\nfeatures_list - list of features to be groupedattributes - If specified, the result will be a grouping with respect to\nthe given attributes. If some specified attribute has no features attached\nto it, then the resulting dictionary will map it to an empty list.\nIf this is None, the result will be a grouping according to all attributes\nfor which features can be found.\n\nReturns:\n\n  a mapping from the requested attributes to the list of correspoding\nfeatures\n\ncombine#\n\nCopy@staticmethoddef combine(features_list: List[Features],            expected_origins: Optional[List[Text]] = None) -> Features\n\nCombine features of the same type and level that describe the same attribute.\n\nIf sequence features are to be combined, then they must have the same\nsequence dimension.\n\nArguments:\n\nfeatures - Non-empty list of Features  of the same type and level that\ndescribe the same attribute.expected_origins - The expected origins of the given features. This method\nwill check that the origin information of each feature is as expected, i.e.\nthe origin of the i-th feature in the given list is the i-th origin\nin this list of origins.\n\nRaises:\n\n ValueError will be raised\n\nif the given list is emptyif there are inconsistencies in the given list of Featuresif the origins aren't as expected\n\nreduce#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1440": {"text": "reduce#\n\nCopy@staticmethoddef reduce(features_list: List[Features],           expected_origins: Optional[List[Text]] = None) -> List[Features]\n\nCombines features of same type and level into one Feature.\n\nArguments:\n\nfeatures_list - list of Features which must all describe the same attributeexpected_origins - if specified, this list will be used to validate that\nthe features from the right featurizers are combined in the right order\n(cf. Features.combine)\n\nReturns:\n\n  a list of the combined Features, i.e. at most 4 Features, where\n\nall the sparse features are listed before the dense featuressequence feature is always listed before the sentence feature with the\nsame sparseness property\n\nPrevious\u00ab rasa.shared.nlu.training_data.entities_parserNextrasa.shared.nlu.training_data.loading \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1441": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.loading\n\nload_data#\n\nCopydef load_data(resource_name: Text,              language: Optional[Text] = \"en\") -> \"TrainingData\"\n\nLoad training data from disk.\n\nMerges them if loaded from disk and multiple files are found.\n\nguess_format#\n\nCopydef guess_format(filename: Text) -> Text\n\nApplies heuristics to guess the data format of a file.\n\nArguments:\n\nfilename - file whose type should be guessed\n\nReturns:\n\n  Guessed file format.\n\nPrevious\u00ab rasa.shared.nlu.training_data.featuresNextrasa.shared.nlu.training_data.lookup_tables_parser \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1442": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.lookup_tables_parser\n\nadd_item_to_lookup_tables#\n\nCopydef add_item_to_lookup_tables(        title: Text, item: Text,        existing_lookup_tables: List[Dict[Text, Union[Text,                                                      List[Text]]]]) -> None\n\nAdd an item to a list of existing lookup tables.\n\nTakes a list of lookup table dictionaries. Finds the one associated\nwith the current lookup, then adds the item to the list.\n\nArguments:\n\ntitle - Name of the lookup item.item - The lookup item.existing_lookup_tables - Existing lookup items that will be extended.\n\nRaises:\n\nTypeError - in case we're trying to add a lookup table element to a file.\nThis is an internal error that is indicative of a parsing error.\n\nPrevious\u00ab rasa.shared.nlu.training_data.loadingNextrasa.shared.nlu.training_data.message \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1443": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.message\n\nMessage Objects#\n\nCopyclass Message()\n\nContainer for data that can be used to describe a conversation turn.\n\nThe turn is described by a set of attributes such as e.g. TEXT  and  INTENT\nwhen describing a user utterance or e.g. ACTION_NAME for describing a bot action.\nThe container includes raw information (self.data) as well as features\n(self.features) for each such attribute.\nMoreover, the message has a timestamp and can keep track about information\non a specific subset of attributes (self.output_properties).\n\n__init__#\n\nCopydef __init__(data: Optional[Dict[Text, Any]] = None,             output_properties: Optional[Set] = None,             time: Optional[int] = None,             features: Optional[List[\"Features\"]] = None, **kwargs: Any) -> None\n\nCreates an instance of Message.\n\nadd_features#\n\nCopydef add_features(features: Optional[\"Features\"]) -> None\n\nAdd more vectorized features to the message.\n\nadd_diagnostic_data#\n\nCopydef add_diagnostic_data(origin: Text, data: Dict[Text, Any]) -> None\n\nAdds diagnostic data from the origin component.\n\nArguments:\n\norigin - Name of the component that created the data.data - The diagnostic data.\n\nset#\n\nCopydef set(prop: Text, info: Any, add_to_output: bool = False) -> None\n\nSets the message's property to the given value.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1444": {"text": "Sets the message's property to the given value.\n\nArguments:\n\nprop - Name of the property to be set.info - Value to be assigned to that property.add_to_output - Decides whether to add prop to the output_properties.\n\nget#\n\nCopydef get(prop: Text, default: Optional[Any] = None) -> Any\n\nRetrieve message property.\n\nas_dict_nlu#\n\nCopydef as_dict_nlu() -> dict\n\nGet dict representation of message as it would appear in training data\n\nas_dict#\n\nCopydef as_dict(only_output_properties: bool = False) -> Dict\n\nGets dict representation of message.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nCalculate a hash for the message.\n\nReturns:\n\n  Hash of the message.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nCalculate a string fingerprint for the message.\n\nReturns:\n\n  Fingerprint of the message.\n\nbuild#\n\nCopy@classmethoddef build(cls,          text: Text,          intent: Optional[Text] = None,          entities: Optional[List[Dict[Text, Any]]] = None,          intent_metadata: Optional[Any] = None,          example_metadata: Optional[Any] = None, **kwargs: Any) -> \"Message\"\n\nBuilds a Message from UserUttered data.\n\nArguments:\n\ntext - text of a user's utteranceintent - an intent of the user utteranceentities - entities in the user's utteranceintent_metadata - optional metadata for the intentexample_metadata - optional metadata for the intent example\n\nReturns:\n\n  Message", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1445": {"text": "Returns:\n\n  Message\n\nget_full_intent#\n\nCopydef get_full_intent() -> Text\n\nGet intent as it appears in training data\n\nseparate_intent_response_key#\n\nCopy@staticmethoddef separate_intent_response_key(        original_intent: Text) -> Tuple[Text, Optional[Text]]\n\nSplits intent into main intent name and optional sub-intent name.\n\nFor example, \"FAQ/how_to_contribute\" would be split into\n(\"FAQ\", \"how_to_contribute\"). The response delimiter can\ntake different values (not just \"/\") and depends on the\nconstant - RESPONSE_IDENTIFIER_DELIMITER.\nIf there is no response delimiter in the intent, the second tuple\nitem is None, e.g. \"FAQ\" would be mapped to (\"FAQ\", None).\n\nget_sparse_features#\n\nCopydef get_sparse_features(    attribute: Text,    featurizers: Optional[List[Text]] = None) -> Tuple[Optional[\"Features\"], Optional[\"Features\"]]\n\nGets all sparse features for the attribute given the list of featurizers.\n\nIf no featurizers are provided, all available features will be considered.\n\nArguments:\n\nattribute - message attributefeaturizers - names of featurizers to consider\n\nReturns:\n\n  Sparse features.\n\nget_sparse_feature_sizes#\n\nCopydef get_sparse_feature_sizes(        attribute: Text,        featurizers: Optional[List[Text]] = None) -> Dict[Text, List[int]]\n\nGets sparse feature sizes for the attribute given the list of featurizers.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1446": {"text": "Gets sparse feature sizes for the attribute given the list of featurizers.\n\nIf no featurizers are provided, all available features will be considered.\n\nArguments:\n\nattribute - message attributefeaturizers - names of featurizers to consider\n\nReturns:\n\n  Sparse feature sizes.\n\nget_dense_features#\n\nCopydef get_dense_features(    attribute: Text,    featurizers: Optional[List[Text]] = None) -> Tuple[Optional[\"Features\"], Optional[\"Features\"]]\n\nGets all dense features for the attribute given the list of featurizers.\n\nIf no featurizers are provided, all available features will be considered.\n\nArguments:\n\nattribute - message attributefeaturizers - names of featurizers to consider\n\nReturns:\n\n  Dense features.\n\nget_all_features#\n\nCopydef get_all_features(        attribute: Text,        featurizers: Optional[List[Text]] = None) -> List[\"Features\"]\n\nGets all features for the attribute given the list of featurizers.\n\nIf no featurizers are provided, all available features will be considered.\n\nArguments:\n\nattribute - message attributefeaturizers - names of featurizers to consider\n\nReturns:\n\n  Features.\n\nfeatures_present#\n\nCopydef features_present(attribute: Text,                     featurizers: Optional[List[Text]] = None) -> bool\n\nChecks if there are any features present for the attribute and featurizers.\n\nIf no featurizers are provided, all available features will be considered.\n\nArguments:\n\nattribute - Message attribute.featurizers - Names of featurizers to consider.\n\nReturns:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1447": {"text": "Returns:\n\n True, if features are present, False otherwise.\n\nis_core_or_domain_message#\n\nCopydef is_core_or_domain_message() -> bool\n\nChecks whether the message is a core message or from the domain.\n\nE.g. a core message is created from a story or a domain action,\nnot from the NLU data.\n\nReturns:\n\n  True, if message is a core or domain message, false otherwise.\n\nis_e2e_message#\n\nCopydef is_e2e_message() -> bool\n\nChecks whether the message came from an e2e story.\n\nReturns:\n\n True, if message is a from an e2e story, False otherwise.\n\nfind_overlapping_entities#\n\nCopydef find_overlapping_entities() -> List[Tuple[Dict[Text, Any], Dict[Text, Any]]]\n\nFinds any overlapping entity annotations.\n\nPrevious\u00ab rasa.shared.nlu.training_data.lookup_tables_parserNextrasa.shared.nlu.training_data.synonyms_parser \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1448": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.synonyms_parser\n\nadd_synonyms_from_entities#\n\nCopydef add_synonyms_from_entities(plain_text: Text, entities: List[Dict],                               existing_synonyms: Dict[Text, Any]) -> None\n\nAdds synonyms found in intent examples.\n\nArguments:\n\nplain_text - Plain (with removed special symbols) user utterance.entities - Entities that were extracted from the original user utterance.existing_synonyms - The dict with existing synonyms mappings that will\nbe extended.\n\nadd_synonym#\n\nCopydef add_synonym(synonym_value: Text, synonym_name: Text,                existing_synonyms: Dict[Text, Any]) -> None\n\nAdds a new synonym mapping to the provided list of synonyms.\n\nArguments:\n\nsynonym_value - Value of the synonym.synonym_name - Name of the synonym.existing_synonyms - Dictionary will synonym mappings that will be extended.\n\nPrevious\u00ab rasa.shared.nlu.training_data.messageNextrasa.shared.nlu.training_data.training_data \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1449": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.training_data\n\nTrainingData Objects#\n\nCopyclass TrainingData()\n\nHolds loaded intent and entity training data.\n\nfingerprint#\n\nCopydef fingerprint() -> Text\n\nFingerprint the training data.\n\nReturns:\n\n  hex string as a fingerprint of the training data.\n\nlabel_fingerprint#\n\nCopydef label_fingerprint() -> Text\n\nFingerprints the labels in the training data.\n\nReturns:\n\n  hex string as a fingerprint of the training data labels.\n\nmerge#\n\nCopydef merge(*others: Optional[\"TrainingData\"]) -> \"TrainingData\"\n\nReturn merged instance of this data with other training data.\n\nArguments:\n\nothers - other training data instances to merge this one with\n\nReturns:\n\n  Merged training data object. Merging is not done in place, this\nwill be a new instance.\n\nfilter_training_examples#\n\nCopydef filter_training_examples(        condition: Callable[[Message], bool]) -> \"TrainingData\"\n\nFilter training examples.\n\nArguments:\n\ncondition - A function that will be applied to filter training examples.\n\nReturns:\n\nTrainingData - A TrainingData with filtered training examples.\n\n__hash__#\n\nCopydef __hash__() -> int\n\nCalculate hash for the training data object.\n\nReturns:\n\n  Hash of the training data object.\n\nsanitize_examples#\n\nCopy@staticmethoddef sanitize_examples(examples: List[Message]) -> List[Message]\n\nMakes sure the training data is clean.\n\nRemove trailing whitespaces from intent and response annotations and drop\nduplicate examples.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1450": {"text": "Remove trailing whitespaces from intent and response annotations and drop\nduplicate examples.\n\nnlu_examples#\n\nCopy@lazy_propertydef nlu_examples() -> List[Message]\n\nReturn examples which have come from NLU training data.\n\nE.g. If the example came from a story or domain it is not included.\n\nReturns:\n\n  List of NLU training examples.\n\nintent_examples#\n\nCopy@lazy_propertydef intent_examples() -> List[Message]\n\nReturns the list of examples that have intent.\n\nresponse_examples#\n\nCopy@lazy_propertydef response_examples() -> List[Message]\n\nReturns the list of examples that have response.\n\nentity_examples#\n\nCopy@lazy_propertydef entity_examples() -> List[Message]\n\nReturns the list of examples that have entities.\n\nintents#\n\nCopy@lazy_propertydef intents() -> Set[Text]\n\nReturns the set of intents in the training data.\n\naction_names#\n\nCopy@lazy_propertydef action_names() -> Set[Text]\n\nReturns the set of action names in the training data.\n\nretrieval_intents#\n\nCopy@lazy_propertydef retrieval_intents() -> Set[Text]\n\nReturns the total number of response types in the training data.\n\nnumber_of_examples_per_intent#\n\nCopy@lazy_propertydef number_of_examples_per_intent() -> Dict[Text, int]\n\nCalculates the number of examples per intent.\n\nnumber_of_examples_per_response#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1451": {"text": "number_of_examples_per_response#\n\nCopy@lazy_propertydef number_of_examples_per_response() -> Dict[Text, int]\n\nCalculates the number of examples per response.\n\nentities#\n\nCopy@lazy_propertydef entities() -> Set[Text]\n\nReturns the set of entity types in the training data.\n\nentity_roles#\n\nCopy@lazy_propertydef entity_roles() -> Set[Text]\n\nReturns the set of entity roles in the training data.\n\nentity_groups#\n\nCopy@lazy_propertydef entity_groups() -> Set[Text]\n\nReturns the set of entity groups in the training data.\n\nentity_roles_groups_used#\n\nCopydef entity_roles_groups_used() -> bool\n\nChecks if any entity roles or groups are used in the training data.\n\nnumber_of_examples_per_entity#\n\nCopy@lazy_propertydef number_of_examples_per_entity() -> Dict[Text, int]\n\nCalculates the number of examples per entity.\n\nsort_regex_features#\n\nCopydef sort_regex_features() -> None\n\nSorts regex features lexicographically by name+pattern\n\nnlu_as_json#\n\nCopydef nlu_as_json(**kwargs: Any) -> Text\n\nRepresent this set of training examples as json.\n\nnlg_as_yaml#\n\nCopydef nlg_as_yaml() -> Text\n\nGenerates yaml representation of the response phrases (NLG) of TrainingData.\n\nReturns:\n\n  responses in yaml format as a string", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1452": {"text": "Returns:\n\n  responses in yaml format as a string\n\nnlu_as_yaml#\n\nCopydef nlu_as_yaml() -> Text\n\nGenerates YAML representation of NLU of TrainingData.\n\nReturns:\n\n  data in YAML format as a string\n\npersist_nlu#\n\nCopydef persist_nlu(filename: Text = DEFAULT_TRAINING_DATA_OUTPUT_PATH) -> None\n\nSaves NLU to a file.\n\npersist_nlg#\n\nCopydef persist_nlg(filename: Text) -> None\n\nSaves NLG to a file.\n\nget_nlg_persist_filename#\n\nCopy@staticmethoddef get_nlg_persist_filename(nlu_filename: Text) -> Text\n\nReturns the full filename to persist NLG data.\n\npersist#\n\nCopydef persist(        dir_name: Text,        filename: Text = DEFAULT_TRAINING_DATA_OUTPUT_PATH) -> Dict[Text, Any]\n\nPersists this training data to disk and returns necessary\ninformation to load it again.\n\nsorted_entities#\n\nCopydef sorted_entities() -> List[Any]\n\nExtract all entities from examples and sorts them by entity type.\n\nvalidate#\n\nCopydef validate() -> None\n\nEnsures that the loaded training data is valid.\n\nChecks that the data has a minimum of certain training examples.\n\ntrain_test_split#\n\nCopydef train_test_split(    train_frac: float = 0.8,    random_seed: Optional[int] = None) -> Tuple[\"TrainingData\", \"TrainingData\"]", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1453": {"text": "Split into a training and test dataset,\npreserving the fraction of examples per intent.\n\nsplit_nlu_examples#\n\nCopydef split_nlu_examples(train_frac: float,                       random_seed: Optional[int] = None) -> Tuple[list, list]\n\nSplit the training data into a train and test set.\n\nArguments:\n\ntrain_frac - percentage of examples to add to the training set.random_seed - random seed used to shuffle examples.\n\nReturns:\n\n  Test and training examples.\n\nis_empty#\n\nCopydef is_empty() -> bool\n\nChecks if any training data was loaded.\n\ncontains_no_pure_nlu_data#\n\nCopydef contains_no_pure_nlu_data() -> bool\n\nChecks if any NLU training data was loaded.\n\nhas_e2e_examples#\n\nCopydef has_e2e_examples() -> bool\n\nChecks if there are any training examples from e2e stories.\n\nlist_to_str#\n\nCopydef list_to_str(lst: List[Text],                delim: Text = \", \",                quote: Text = \"'\") -> Text\n\nConverts list to a string.\n\nArguments:\n\nlst - The list to convert.delim - The delimiter that is used to separate list inputs.quote - The quote that is used to wrap list inputs.\n\nReturns:\n\n  The string.\n\nPrevious\u00ab rasa.shared.nlu.training_data.synonyms_parserNextrasa.shared.nlu.training_data.util \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1454": {"text": "Version: 3.x\n\nrasa.shared.nlu.training_data.util\n\ntransform_entity_synonyms#\n\nCopydef transform_entity_synonyms(        synonyms: List[Dict[Text, Any]],        known_synonyms: Optional[Dict[Text, Any]] = None) -> Dict[Text, Any]\n\nTransforms the entity synonyms into a text->value dictionary\n\nget_file_format_extension#\n\nCopydef get_file_format_extension(resource_name: Text) -> Text\n\nGet the file extension based on training data format. It supports both a folder and\na file, and tries to guess the format as follows:\n\nif the resource is a file and has a known format, return this format's extensionif the resource is a folder and all the resources have the\nsame known format, return it's extensionotherwise, default to DEFAULT_FILE_FORMAT (yml).\n\nArguments:\n\nresource_name - The name of the resource, can be a file or a folder.\n\nReturns:\n\n  The resource file format.\n\nremove_untrainable_entities_from#\n\nCopydef remove_untrainable_entities_from(example: Dict[Text, Any]) -> None\n\nRemove untrainable entities from serialised training example example.\n\nEntities with an untrainable extractor will be removed. Untrainable extractors\nare defined in rasa.nlu.constants.PRETRAINED_EXTRACTORS.\n\nArguments:\n\nexample - Serialised training example to inspect.\n\nintent_response_key_to_template_key#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1455": {"text": "intent_response_key_to_template_key#\n\nCopydef intent_response_key_to_template_key(intent_response_key: Text) -> Text\n\nResolve the response template key for a given intent response key.\n\nArguments:\n\nintent_response_key - retrieval intent with the response key suffix attached.Returns - The corresponding response template.\n\ntemplate_key_to_intent_response_key#\n\nCopydef template_key_to_intent_response_key(template_key: Text) -> Text\n\nResolve the intent response key for the given response template.\n\nArguments:\n\ntemplate_key - Name of the response template.Returns - The corresponding intent response key.\n\nhas_string_escape_chars#\n\nCopydef has_string_escape_chars(s: Text) -> bool\n\nChecks whether there are any of the escape characters in the string.\n\nencode_string#\n\nCopydef encode_string(s: Text) -> Text\n\nReturn an encoded python string.\n\ndecode_string#\n\nCopydef decode_string(s: Text) -> Text\n\nReturn a decoded python string.\n\nbuild_entity#\n\nCopydef build_entity(start: int,                 end: int,                 value: Text,                 entity_type: Text,                 role: Optional[Text] = None,                 group: Optional[Text] = None, **kwargs: Any) -> Dict[Text, Any]\n\nBuilds a standard entity dictionary.\n\nAdds additional keyword parameters.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1456": {"text": "Adds additional keyword parameters.\n\nArguments:\n\nstart - start position of entityend - end position of entityvalue - text value of the entityentity_type - name of the entity typerole - role of the entitygroup - group of the entity**kwargs - additional parameters\n\nReturns:\n\n  an entity dictionary\n\nsparse_matrix_to_string#\n\nCopydef sparse_matrix_to_string(m: scipy.sparse.spmatrix) -> Text\n\nTurns a sparse matrix into a string.\n\nWill return a line \"(i,j)  v\" for each value in the matrix.\n\ntaken from official scipy source to operate on full sparse matrix to not have\nto change the maxprint property in-place.\nhttps://github.com/scipy/scipy/blob/v1.7.0/scipy/sparse/base.py#L258\n\nPrevious\u00ab rasa.shared.nlu.training_data.training_dataNextrasa.shared.nlu.interpreter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1457": {"text": "Version: 3.x\n\nrasa.shared.nlu.interpreter\n\nNaturalLanguageInterpreter Objects#\n\nCopyclass NaturalLanguageInterpreter()\n\nRemove once all old components are deleted.\n\nRegexInterpreter Objects#\n\nCopyclass RegexInterpreter()\n\nRemove once all old components are deleted.\n\nPrevious\u00ab rasa.shared.nlu.training_data.utilNextrasa.shared.utils.cli \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1458": {"text": "Version: 3.x\n\nrasa.shared.utils.cli\n\nprint_color#\n\nCopydef print_color(*args: Any, color: Text) -> None\n\nPrint the given arguments to STDOUT in the specified color.\n\nArguments:\n\nargs - A list of objects to be printed.color - A textual representation of the color.\n\nprint_success#\n\nCopydef print_success(*args: Any) -> None\n\nPrint the given arguments to STDOUT in green, indicating success.\n\nArguments:\n\nargs - A list of objects to be printed.\n\nprint_info#\n\nCopydef print_info(*args: Any) -> None\n\nPrint the given arguments to STDOUT in blue.\n\nArguments:\n\nargs - A list of objects to be printed.\n\nprint_warning#\n\nCopydef print_warning(*args: Any) -> None\n\nPrint the given arguments to STDOUT in a color indicating a warning.\n\nArguments:\n\nargs - A list of objects to be printed.\n\nprint_error#\n\nCopydef print_error(*args: Any) -> None\n\nPrint the given arguments to STDOUT in a color indicating an error.\n\nArguments:\n\nargs - A list of objects to be printed.\n\nprint_error_and_exit#\n\nCopydef print_error_and_exit(message: Text, exit_code: int = 1) -> NoReturn\n\nPrint an error message and exit the application.\n\nArguments:\n\nmessage - The error message to be printed.exit_code - The program exit code, defaults to 1.\n\nPrevious\u00ab rasa.shared.nlu.interpreterNextrasa.shared.utils.common \u00bb", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1459": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1460": {"text": "Version: 3.x\n\nrasa.shared.utils.common\n\nclass_from_module_path#\n\nCopydef class_from_module_path(module_path: Text,                           lookup_path: Optional[Text] = None) -> Type\n\nGiven the module name and path of a class, tries to retrieve the class.\n\nThe loaded class can be used to instantiate new objects.\n\nArguments:\n\nmodule_path - either an absolute path to a Python class,\nor the name of the class in the local / global scope.lookup_path - a path where to load the class from, if it cannot\nbe found in the local / global scope.\n\nReturns:\n\n  a Python class\n\nRaises:\n\n  ImportError, in case the Python class cannot be found.\nRasaException, in case the imported result is something other than a class\n\nall_subclasses#\n\nCopydef all_subclasses(cls: Any) -> List[Any]\n\nReturns all known (imported) subclasses of a class.\n\nmodule_path_from_instance#\n\nCopydef module_path_from_instance(inst: Any) -> Text\n\nReturn the module path of an instance's class.\n\nsort_list_of_dicts_by_first_key#\n\nCopydef sort_list_of_dicts_by_first_key(dicts: List[Dict]) -> List[Dict]\n\nSorts a list of dictionaries by their first key.\n\nlazy_property#\n\nCopydef lazy_property(function: Callable) -> Any\n\nAllows to avoid recomputing a property over and over.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1461": {"text": "Allows to avoid recomputing a property over and over.\n\nThe result gets stored in a local var. Computation of the property\nwill happen once, on the first call of the property. All\nsucceeding calls will use the value stored in the private property.\n\ncached_method#\n\nCopydef cached_method(f: Callable[..., Any]) -> Callable[..., Any]\n\nCaches method calls based on the call's args and kwargs.\n\nWorks for async and sync methods. Don't apply this to functions.\n\nArguments:\n\nf - The decorated method whose return value should be cached.\n\nReturns:\n\n  The return value which the method gives for the first call with the given\narguments.\n\ntransform_collection_to_sentence#\n\nCopydef transform_collection_to_sentence(collection: Collection[Text]) -> Text\n\nTransforms e.g. a list like ['A', 'B', 'C'] into a sentence 'A, B and C'.\n\nminimal_kwargs#\n\nCopydef minimal_kwargs(kwargs: Dict[Text, Any],                   func: Callable,                   excluded_keys: Optional[List] = None) -> Dict[Text, Any]\n\nReturns only the kwargs which are required by a function. Keys, contained in\nthe exception list, are not included.\n\nArguments:\n\nkwargs - All available kwargs.func - The function which should be called.excluded_keys - Keys to exclude from the result.\n\nReturns:\n\n  Subset of kwargs which are accepted by func.\n\nmark_as_experimental_feature#\n\nCopydef mark_as_experimental_feature(feature_name: Text) -> None", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1462": {"text": "Warns users that they are using an experimental feature.\n\narguments_of#\n\nCopydef arguments_of(func: Callable) -> List[Text]\n\nReturn the parameters of the function func as a list of names.\n\nextract_duplicates#\n\nCopydef extract_duplicates(list1: List[Any], list2: List[Any]) -> List[Any]\n\nExtracts duplicates from two lists.\n\nclean_duplicates#\n\nCopydef clean_duplicates(dupes: Dict[Text, Any]) -> Dict[Text, Any]\n\nRemoves keys for empty values.\n\nmerge_dicts#\n\nCopydef merge_dicts(tempDict1: Dict[Text, Any],                tempDict2: Dict[Text, Any],                override_existing_values: bool = False) -> Dict[Text, Any]\n\nMerges two dicts.\n\nmerge_lists#\n\nCopydef merge_lists(list1: List[Any],                list2: List[Any],                override: bool = False) -> List[Any]\n\nMerges two lists.\n\nmerge_lists_of_dicts#\n\nCopydef merge_lists_of_dicts(dict_list1: List[Dict],                         dict_list2: List[Dict],                         override_existing_values: bool = False) -> List[Dict]\n\nMerges two dict lists.\n\nPrevious\u00ab rasa.shared.utils.cliNextrasa.shared.utils.io \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1463": {"text": "Version: 3.x\n\nrasa.shared.utils.io\n\nraise_warning#\n\nCopydef raise_warning(message: Text,                  category: Optional[Type[Warning]] = None,                  docs: Optional[Text] = None, **kwargs: Any) -> None\n\nEmit a warnings.warn with sensible defaults and a colored warning msg.\n\nwrite_text_file#\n\nCopydef write_text_file(content: Text,                    file_path: Union[Text, Path],                    encoding: Text = DEFAULT_ENCODING,                    append: bool = False) -> None\n\nWrites text to a file.\n\nArguments:\n\ncontent - The content to write.file_path - The path to which the content should be written.encoding - The encoding which should be used.append - Whether to append to the file or to truncate the file.\n\nread_file#\n\nCopydef read_file(filename: Union[Text, Path],              encoding: Text = DEFAULT_ENCODING) -> Any\n\nRead text from a file.\n\nread_json_file#\n\nCopydef read_json_file(filename: Union[Text, Path]) -> Any\n\nRead json from a file.\n\nlist_directory#\n\nCopydef list_directory(path: Text) -> List[Text]\n\nReturns all files and folders excluding hidden files.\n\nIf the path points to a file, returns the file. This is a recursive\nimplementation returning files in any depth of the path.\n\nlist_files#\n\nCopydef list_files(path: Text) -> List[Text]\n\nReturns all files excluding hidden files.\n\nIf the path points to a file, returns the file.\n\nlist_subdirectories#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1464": {"text": "list_subdirectories#\n\nCopydef list_subdirectories(path: Text) -> List[Text]\n\nReturns all folders excluding hidden files.\n\nIf the path points to a file, returns an empty list.\n\ndeep_container_fingerprint#\n\nCopydef deep_container_fingerprint(obj: Union[List[Any], Dict[Any, Any], Any],                               encoding: Text = DEFAULT_ENCODING) -> Text\n\nCalculate a hash which is stable.\n\nWorks for lists and dictionaries. For keys and values, we recursively call\nhash(...) on them. In case of a dict, the hash is independent of the containers\nkey order. Keep in mind that a list with items in a different order\nwill not create the same hash!\n\nArguments:\n\nobj - dictionary or list to be hashed.encoding - encoding used for dumping objects as strings\n\nReturns:\n\n  hash of the container.\n\nget_dictionary_fingerprint#\n\nCopydef get_dictionary_fingerprint(dictionary: Dict[Any, Any],                               encoding: Text = DEFAULT_ENCODING) -> Text\n\nCalculate the fingerprint for a dictionary.\n\nThe dictionary can contain any keys and values which are either a dict,\na list or a elements which can be dumped as a string.\n\nArguments:\n\ndictionary - dictionary to be hashedencoding - encoding used for dumping objects as strings\n\nReturns:\n\n  The hash of the dictionary\n\nget_list_fingerprint#\n\nCopydef get_list_fingerprint(elements: List[Any],                         encoding: Text = DEFAULT_ENCODING) -> Text\n\nCalculate a fingerprint for an unordered list.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1465": {"text": "Calculate a fingerprint for an unordered list.\n\nArguments:\n\nelements - unordered listencoding - encoding used for dumping objects as strings\n\nReturns:\n\n  the fingerprint of the list\n\nget_text_hash#\n\nCopydef get_text_hash(text: Text, encoding: Text = DEFAULT_ENCODING) -> Text\n\nCalculate the md5 hash for a text.\n\njson_to_string#\n\nCopydef json_to_string(obj: Any, **kwargs: Any) -> Text\n\nDumps a JSON-serializable object to string.\n\nArguments:\n\nobj - JSON-serializable object.kwargs - serialization options. Defaults to 2 space indentation\nand disable escaping of non-ASCII characters.\n\nReturns:\n\n  The objects serialized to JSON, as a string.\n\nfix_yaml_loader#\n\nCopydef fix_yaml_loader() -> None\n\nEnsure that any string read by yaml is represented as unicode.\n\nreplace_environment_variables#\n\nCopydef replace_environment_variables() -> None\n\nEnable yaml loader to process the environment variables in the yaml.\n\nread_yaml#\n\nCopydef read_yaml(content: Text,              reader_type: Union[Text, List[Text]] = \"safe\") -> Any\n\nParses yaml from a text.\n\nArguments:\n\ncontent - A text containing yaml content.reader_type - Reader type to use. By default \"safe\" will be used.\n\nRaises:\n\nruamel.yaml.parser.ParserError - If there was an error when parsing the YAML.\n\nread_yaml_file#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1466": {"text": "read_yaml_file#\n\nCopydef read_yaml_file(    filename: Union[Text, Path],    reader_type: Union[Text, List[Text]] = \"safe\") -> Union[List[Any], Dict[Text, Any]]\n\nParses a yaml file.\n\nRaises an exception if the content of the file can not be parsed as YAML.\n\nArguments:\n\nfilename - The path to the file which should be read.reader_type - Reader type to use. By default \"safe\" will be used.\n\nReturns:\n\n  Parsed content of the file.\n\nwrite_yaml#\n\nCopydef write_yaml(data: Any,               target: Union[Text, Path, StringIO],               should_preserve_key_order: bool = False) -> None\n\nWrites a yaml to the file or to the stream.\n\nArguments:\n\ndata - The data to write.target - The path to the file which should be written or a stream objectshould_preserve_key_order - Whether to force preserve key order in data.\n\nis_key_in_yaml#\n\nCopydef is_key_in_yaml(file_path: Union[Text, Path], *keys: Text) -> bool\n\nChecks if any of the keys is contained in the root object of the yaml file.\n\nArguments:\n\nfile_path - path to the yaml filekeys - keys to look for\n\nReturns:\n\n True if at least one of the keys is found, False otherwise.\n\nRaises:\n\nFileNotFoundException - if the file cannot be found.\n\nconvert_to_ordered_dict#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1467": {"text": "convert_to_ordered_dict#\n\nCopydef convert_to_ordered_dict(obj: Any) -> Any\n\nConvert object to an OrderedDict.\n\nArguments:\n\nobj - Object to convert.\n\nReturns:\n\n  An OrderedDict with all nested dictionaries converted if obj is a\ndictionary, otherwise the object itself.\n\nis_logging_disabled#\n\nCopydef is_logging_disabled() -> bool\n\nReturns True if log level is set to WARNING or ERROR, False otherwise.\n\ncreate_directory_for_file#\n\nCopydef create_directory_for_file(file_path: Union[Text, Path]) -> None\n\nCreates any missing parent directories of this file path.\n\ndump_obj_as_json_to_file#\n\nCopydef dump_obj_as_json_to_file(filename: Union[Text, Path], obj: Any) -> None\n\nDump an object as a json string to a file.\n\ndump_obj_as_yaml_to_string#\n\nCopydef dump_obj_as_yaml_to_string(obj: Any,                               should_preserve_key_order: bool = False ) -> Text\n\nWrites data (python dict) to a yaml string.\n\nArguments:\n\nobj - The object to dump. Has to be serializable.should_preserve_key_order - Whether to force preserve key order in data.\n\nReturns:\n\n  The object converted to a YAML string.\n\ncreate_directory#\n\nCopydef create_directory(directory_path: Text) -> None\n\nCreates a directory and its super paths.\n\nSucceeds even if the path already exists.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1468": {"text": "Succeeds even if the path already exists.\n\nraise_deprecation_warning#\n\nCopydef raise_deprecation_warning(        message: Text,        warn_until_version: Text = NEXT_MAJOR_VERSION_FOR_DEPRECATIONS,        docs: Optional[Text] = None, **kwargs: Any) -> None\n\nThin wrapper around raise_warning() to raise a deprecation warning. It requires\na version until which we'll warn, and after which the support for the feature will\nbe removed.\n\nread_validated_yaml#\n\nCopydef read_validated_yaml(filename: Union[Text, Path],                        schema: Text,                        reader_type: Union[Text, List[Text]] = \"safe\") -> Any\n\nValidates YAML file content and returns parsed content.\n\nArguments:\n\nfilename - The path to the file which should be read.schema - The path to the schema file which should be used for validating the\nfile content.reader_type - Reader type to use. By default \"safe\" will be used.\n\nReturns:\n\n  The parsed file content.\n\nRaises:\n\nYamlValidationException - In case the model configuration doesn't match the\nexpected schema.\n\nread_config_file#\n\nCopydef read_config_file(        filename: Union[Path, Text],        reader_type: Union[Text, List[Text]] = \"safe\") -> Dict[Text, Any]\n\nParses a yaml configuration file. Content needs to be a dictionary.\n\nArguments:\n\nfilename - The path to the file which should be read.reader_type - Reader type to use. By default \"safe\" will be used.\n\nRaises:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1469": {"text": "Raises:\n\nYamlValidationException - In case file content is not a Dict.\n\nReturns:\n\n  Parsed config file.\n\nread_model_configuration#\n\nCopydef read_model_configuration(filename: Union[Path, Text]) -> Dict[Text, Any]\n\nParses a model configuration file.\n\nArguments:\n\nfilename - The path to the file which should be read.\n\nRaises:\n\nYamlValidationException - In case the model configuration doesn't match the\nexpected schema.\n\nReturns:\n\n  Parsed config file.\n\nis_subdirectory#\n\nCopydef is_subdirectory(path: Text, potential_parent_directory: Text) -> bool\n\nChecks if path is a subdirectory of potential_parent_directory.\n\nArguments:\n\npath - Path to a file or directory.potential_parent_directory - Potential parent directory.\n\nReturns:\n\n True if path is a subdirectory of potential_parent_directory.\n\nrandom_string#\n\nCopydef random_string(length: int) -> Text\n\nReturns a random string of given length.\n\nhandle_print_blocking#\n\nCopydef handle_print_blocking(output: Text) -> None\n\nHandle print blocking (BlockingIOError) by getting the STDOUT lock.\n\nArguments:\n\noutput - Text to be printed to STDOUT.\n\nPrevious\u00ab rasa.shared.utils.commonNextrasa.shared.utils.pykwalify_extensions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1470": {"text": "Version: 3.x\n\nrasa.shared.utils.pykwalify_extensions\n\nThis module regroups custom validation functions, and it is\nloaded as an extension of the pykwalify library:\n\nhttps://pykwalify.readthedocs.io/en/latest/extensions.html#extensions\n\nrequire_response_keys#\n\nCopydef require_response_keys(responses: List[Dict[Text, Any]], _: Dict,                          __: Text) -> Union[SchemaError, bool]\n\nValidates that response dicts have either the \"text\" key or the \"custom\" key.\n\nPrevious\u00ab rasa.shared.utils.ioNextrasa.shared.utils.validation \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1471": {"text": "Version: 3.x\n\nrasa.shared.utils.validation\n\nYamlValidationException Objects#\n\nCopyclass YamlValidationException(YamlException, ValueError)\n\nRaised if a yaml file does not correspond to the expected schema.\n\n__init__#\n\nCopydef __init__(message: Text,             validation_errors: Optional[List[                 SchemaError.SchemaErrorEntry]] = None,             filename: Optional[Text] = None,             content: Any = None) -> None\n\nCreate The Error.\n\nArguments:\n\nmessage - error messagevalidation_errors - validation errorsfilename - name of the file which was validatedcontent - yaml content loaded from the file (used for line information)\n\nvalidate_yaml_schema#\n\nCopydef validate_yaml_schema(yaml_file_content: Text,                         schema_path: Text,                         package_name: Text = PACKAGE_NAME) -> None\n\nValidate yaml content.\n\nArguments:\n\nyaml_file_content - the content of the yaml file to be validatedschema_path - the schema of the yaml filepackage_name - the name of the package the schema is located in. defaults\nto rasa.\n\nvalidate_training_data#\n\nCopydef validate_training_data(json_data: Dict[Text, Any],                           schema: Dict[Text, Any]) -> None\n\nValidate rasa training data format to ensure proper training.\n\nArguments:\n\njson_data - the data to validateschema - the schema\n\nRaises:\n\n  SchemaValidationError if validation fails.\n\nvalidate_training_data_format_version#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1472": {"text": "validate_training_data_format_version#\n\nCopydef validate_training_data_format_version(yaml_file_content: Dict[Text, Any],                                          filename: Optional[Text]) -> bool\n\nValidates version on the training data content using version field\nand warns users if the file is not compatible with the current version of\nRasa Open Source.\n\nArguments:\n\nyaml_file_content - Raw content of training data file as a dictionary.filename - Name of the validated file.\n\nReturns:\n\n True if the file can be processed by current version of Rasa Open Source,\nFalse otherwise.\n\nPrevious\u00ab rasa.shared.utils.pykwalify_extensionsNextrasa.shared.data \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1473": {"text": "Version: 3.x\n\nrasa.shared.data\n\nyaml_file_extension#\n\nCopydef yaml_file_extension() -> Text\n\nReturn YAML file extension.\n\nis_likely_yaml_file#\n\nCopydef is_likely_yaml_file(file_path: Union[Text, Path]) -> bool\n\nCheck if a file likely contains yaml.\n\nArguments:\n\nfile_path - path to the file\n\nReturns:\n\n True if the file likely contains data in yaml format, False otherwise.\n\nis_likely_json_file#\n\nCopydef is_likely_json_file(file_path: Text) -> bool\n\nCheck if a file likely contains json.\n\nArguments:\n\nfile_path - path to the file\n\nReturns:\n\n True if the file likely contains data in json format, False otherwise.\n\nget_core_directory#\n\nCopydef get_core_directory(paths: Optional[Union[Text, List[Text]]]) -> Text\n\nRecursively collects all Core training files from a list of paths.\n\nArguments:\n\npaths - List of paths to training files or folders containing them.\n\nReturns:\n\n  Path to temporary directory containing all found Core training files.\n\nget_nlu_directory#\n\nCopydef get_nlu_directory(paths: Optional[Union[Text, List[Text]]]) -> Text\n\nRecursively collects all NLU training files from a list of paths.\n\nArguments:\n\npaths - List of paths to training files or folders containing them.\n\nReturns:\n\n  Path to temporary directory containing all found NLU training files.\n\nget_data_files#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1474": {"text": "get_data_files#\n\nCopydef get_data_files(paths: Optional[Union[Text, List[Text]]],                   filter_predicate: Callable[[Text], bool]) -> List[Text]\n\nRecursively collects all training files from a list of paths.\n\nArguments:\n\npaths - List of paths to training files or folders containing them.filter_predicate - property to use when filtering the paths, e.g. is_nlu_file.\n\nReturns:\n\n  Paths of training data files.\n\nis_valid_filetype#\n\nCopydef is_valid_filetype(path: Union[Path, Text]) -> bool\n\nChecks if given file has a supported extension.\n\nArguments:\n\npath - Path to the source file.\n\nReturns:\n\n True is given file has supported extension, False otherwise.\n\nis_nlu_file#\n\nCopydef is_nlu_file(file_path: Text) -> bool\n\nChecks if a file is a Rasa compatible nlu file.\n\nArguments:\n\nfile_path - Path of the file which should be checked.\n\nReturns:\n\n True if it's a nlu file, otherwise False.\n\nis_config_file#\n\nCopydef is_config_file(file_path: Text) -> bool\n\nChecks whether the given file path is a Rasa config file.\n\nArguments:\n\nfile_path - Path of the file which should be checked.\n\nReturns:\n\n True if it's a Rasa config file, otherwise False.\n\nTrainingType Objects#\n\nCopyclass TrainingType(Enum)\n\nEnum class for defining explicitly what training types exist.\n\nmodel_type#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1475": {"text": "Enum class for defining explicitly what training types exist.\n\nmodel_type#\n\nCopy@propertydef model_type() -> Text\n\nReturns the type of model which this training yields.\n\nPrevious\u00ab rasa.shared.utils.validationNextrasa.shared.exceptions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1476": {"text": "Version: 3.x\n\nrasa.shared.exceptions\n\nRasaException Objects#\n\nCopyclass RasaException(Exception)\n\nBase exception class for all errors raised by Rasa Open Source.\n\nThese exceptions result from invalid use cases and will be reported\nto the users, but will be ignored in telemetry.\n\nRasaCoreException Objects#\n\nCopyclass RasaCoreException(RasaException)\n\nBasic exception for errors raised by Rasa Core.\n\nInvalidParameterException Objects#\n\nCopyclass InvalidParameterException(RasaException, ValueError)\n\nRaised when an invalid parameter is used.\n\nYamlException Objects#\n\nCopyclass YamlException(RasaException)\n\nRaised if there is an error reading yaml.\n\n__init__#\n\nCopydef __init__(filename: Optional[Text] = None) -> None\n\nCreate exception.\n\nArguments:\n\nfilename - optional file the error occurred in\n\nYamlSyntaxException Objects#\n\nCopyclass YamlSyntaxException(YamlException)\n\nRaised when a YAML file can not be parsed properly due to a syntax error.\n\nFileNotFoundException Objects#\n\nCopyclass FileNotFoundException(RasaException, FileNotFoundError)\n\nRaised when a file, expected to exist, doesn't exist.\n\nFileIOException Objects#\n\nCopyclass FileIOException(RasaException)\n\nRaised if there is an error while doing file IO.\n\nInvalidConfigException Objects#\n\nCopyclass InvalidConfigException(ValueError, RasaException)\n\nRaised if an invalid configuration is encountered.\n\nUnsupportedFeatureException Objects#\n\nCopyclass UnsupportedFeatureException(RasaCoreException)", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1477": {"text": "Copyclass UnsupportedFeatureException(RasaCoreException)\n\nRaised if a requested feature is not supported.\n\nSchemaValidationError Objects#\n\nCopyclass SchemaValidationError(RasaException, jsonschema.ValidationError)\n\nRaised if schema validation via jsonschema failed.\n\nInvalidEntityFormatException Objects#\n\nCopyclass InvalidEntityFormatException(RasaException, json.JSONDecodeError)\n\nRaised if the format of an entity is invalid.\n\ncreate_from#\n\nCopy@classmethoddef create_from(cls, other: json.JSONDecodeError,                msg: Text) -> \"InvalidEntityFormatException\"\n\nCreates InvalidEntityFormatException from JSONDecodeError.\n\nConnectionException Objects#\n\nCopyclass ConnectionException(RasaException)\n\nRaised when a connection to a 3rd party service fails.\n\nIt's used by our broker and tracker store classes, when\nthey can't connect to services like postgres, dynamoDB, mongo.\n\nPrevious\u00ab rasa.shared.dataNextrasa.utils.tensorflow.callback \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1478": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.callback\n\nRasaTrainingLogger Objects#\n\nCopyclass RasaTrainingLogger(tf.keras.callbacks.Callback)\n\nCallback for logging the status of training.\n\n__init__#\n\nCopydef __init__(epochs: int, silent: bool) -> None\n\nInitializes the callback.\n\nArguments:\n\nepochs - Total number of epochs.silent - If 'True' the entire progressbar wrapper is disabled.\n\non_epoch_end#\n\nCopydef on_epoch_end(epoch: int, logs: Optional[Dict[Text, Any]] = None) -> None\n\nUpdates the logging output on every epoch end.\n\nArguments:\n\nepoch - The current epoch.logs - The training metrics.\n\non_train_end#\n\nCopydef on_train_end(logs: Optional[Dict[Text, Any]] = None) -> None\n\nCloses the progress bar after training.\n\nArguments:\n\nlogs - The training metrics.\n\nRasaModelCheckpoint Objects#\n\nCopyclass RasaModelCheckpoint(tf.keras.callbacks.Callback)\n\nCallback for saving intermediate model checkpoints.\n\n__init__#\n\nCopydef __init__(checkpoint_dir: Path) -> None\n\nInitializes the callback.\n\nArguments:\n\ncheckpoint_dir - Directory to store checkpoints to.\n\non_epoch_end#\n\nCopydef on_epoch_end(epoch: int, logs: Optional[Dict[Text, Any]] = None) -> None\n\nSave the model on epoch end if the model has improved.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1479": {"text": "Save the model on epoch end if the model has improved.\n\nArguments:\n\nepoch - The current epoch.logs - The training metrics.\n\nPrevious\u00ab rasa.shared.exceptionsNextrasa.utils.tensorflow.crf \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1480": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.crf\n\nCrfDecodeForwardRnnCell Objects#\n\nCopyclass CrfDecodeForwardRnnCell(tf.keras.layers.AbstractRNNCell)\n\nComputes the forward decoding in a linear-chain CRF.\n\n__init__#\n\nCopydef __init__(transition_params: TensorLike, **kwargs: Any) -> None\n\nInitialize the CrfDecodeForwardRnnCell.\n\nArguments:\n\ntransition_params - A [num_tags, num_tags] matrix of binary\npotentials. This matrix is expanded into a\n[1, num_tags, num_tags] in preparation for the broadcast\nsummation occurring within the cell.\n\noutput_size#\n\nCopy@propertydef output_size() -> int\n\nReturns count of tags.\n\nbuild#\n\nCopydef build(input_shape: Union[TensorShape, List[TensorShape]]) -> None\n\nCreates the variables of the layer.\n\ncall#\n\nCopydef call(inputs: TensorLike, state: TensorLike) -> Tuple[tf.Tensor, tf.Tensor]\n\nBuild the CrfDecodeForwardRnnCell.\n\nArguments:\n\ninputs - A [batch_size, num_tags] matrix of unary potentials.state - A [batch_size, num_tags] matrix containing the previous step's\nscore values.\n\nReturns:\n\noutput - A [batch_size, num_tags * 2] matrix of backpointers and scores.new_state - A [batch_size, num_tags] matrix of new score values.\n\ncrf_decode_forward#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1481": {"text": "crf_decode_forward#\n\nCopydef crf_decode_forward(        inputs: TensorLike, state: TensorLike, transition_params: TensorLike,        sequence_lengths: TensorLike) -> Tuple[tf.Tensor, tf.Tensor]\n\nComputes forward decoding in a linear-chain CRF.\n\nArguments:\n\ninputs - A [batch_size, num_tags] matrix of unary potentials.state - A [batch_size, num_tags] matrix containing the previous step's\nscore values.transition_params - A [num_tags, num_tags] matrix of binary potentials.sequence_lengths - A [batch_size] vector of true sequence lengths.\n\nReturns:\n\noutput - A [batch_size, num_tags * 2] matrix of backpointers and scores.new_state - A [batch_size, num_tags] matrix of new score values.\n\ncrf_decode_backward#\n\nCopydef crf_decode_backward(backpointers: TensorLike, scores: TensorLike,                        state: TensorLike) -> Tuple[tf.Tensor, tf.Tensor]\n\nComputes backward decoding in a linear-chain CRF.\n\nArguments:\n\nbackpointers - A [batch_size, num_tags] matrix of backpointer of next step\n(in time order).scores - A [batch_size, num_tags] matrix of scores of next step (in time order).state - A [batch_size, 1] matrix of tag index of next step.\n\nReturns:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1482": {"text": "Returns:\n\nnew_tags - A [batch_size, num_tags] tensor containing the new tag indices.new_scores - A [batch_size, num_tags] tensor containing the new score values.\n\ncrf_decode#\n\nCopydef crf_decode(        potentials: TensorLike, transition_params: TensorLike,        sequence_length: TensorLike) -> Tuple[tf.Tensor, tf.Tensor, tf.Tensor]\n\nDecode the highest scoring sequence of tags.\n\nArguments:\n\npotentials - A [batch_size, max_seq_len, num_tags] tensor of\nunary potentials.transition_params - A [num_tags, num_tags] matrix of\nbinary potentials.sequence_length - A [batch_size] vector of true sequence lengths.\n\nReturns:\n\ndecode_tags - A [batch_size, max_seq_len] matrix, with dtype tf.int32.\nContains the highest scoring tag indices.decode_scores - A [batch_size, max_seq_len] matrix, containing the score of\ndecode_tags.best_score - A [batch_size] vector, containing the best score of decode_tags.\n\ncrf_unary_score#\n\nCopydef crf_unary_score(tag_indices: TensorLike, sequence_lengths: TensorLike,                    inputs: TensorLike) -> tf.Tensor\n\nComputes the unary scores of tag sequences.\n\nArguments:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1483": {"text": "Computes the unary scores of tag sequences.\n\nArguments:\n\ntag_indices - A [batch_size, max_seq_len] matrix of tag indices.sequence_lengths - A [batch_size] vector of true sequence lengths.inputs - A [batch_size, max_seq_len, num_tags] tensor of unary potentials.\n\nReturns:\n\nunary_scores - A [batch_size] vector of unary scores.\n\ncrf_binary_score#\n\nCopydef crf_binary_score(tag_indices: TensorLike, sequence_lengths: TensorLike,                     transition_params: TensorLike) -> tf.Tensor\n\nComputes the binary scores of tag sequences.\n\nArguments:\n\ntag_indices - A [batch_size, max_seq_len] matrix of tag indices.sequence_lengths - A [batch_size] vector of true sequence lengths.transition_params - A [num_tags, num_tags] matrix of binary potentials.\n\nReturns:\n\nbinary_scores - A [batch_size] vector of binary scores.\n\ncrf_sequence_score#\n\nCopydef crf_sequence_score(inputs: TensorLike, tag_indices: TensorLike,                       sequence_lengths: TensorLike,                       transition_params: TensorLike) -> tf.Tensor\n\nComputes the unnormalized score for a tag sequence.\n\nArguments:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1484": {"text": "Computes the unnormalized score for a tag sequence.\n\nArguments:\n\ninputs - A [batch_size, max_seq_len, num_tags] tensor of unary potentials\nto use as input to the CRF layer.tag_indices - A [batch_size, max_seq_len] matrix of tag indices for which\nwe compute the unnormalized score.sequence_lengths - A [batch_size] vector of true sequence lengths.transition_params - A [num_tags, num_tags] transition matrix.\n\nReturns:\n\nsequence_scores - A [batch_size] vector of unnormalized sequence scores.\n\ncrf_forward#\n\nCopydef crf_forward(inputs: TensorLike, state: TensorLike,                transition_params: TensorLike,                sequence_lengths: TensorLike) -> tf.Tensor\n\nComputes the alpha values in a linear-chain CRF.\n\nSee http://www.cs.columbia.edu/~mcollins/fb.pdf for reference.\n\nArguments:\n\ninputs - A [batch_size, num_tags] matrix of unary potentials.state - A [batch_size, num_tags] matrix containing the previous alpha\nvalues.transition_params - A [num_tags, num_tags] matrix of binary potentials.\nThis matrix is expanded into a [1, num_tags, num_tags] in preparation\nfor the broadcast summation occurring within the cell.sequence_lengths - A [batch_size] vector of true sequence lengths.\n\nReturns:\n\nnew_alphas - A [batch_size, num_tags] matrix containing the\nnew alpha values.\n\ncrf_log_norm#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1485": {"text": "crf_log_norm#\n\nCopydef crf_log_norm(inputs: TensorLike, sequence_lengths: TensorLike,                 transition_params: TensorLike) -> tf.Tensor\n\nComputes the normalization for a CRF.\n\nArguments:\n\ninputs - A [batch_size, max_seq_len, num_tags] tensor of unary potentials\nto use as input to the CRF layer.sequence_lengths - A [batch_size] vector of true sequence lengths.transition_params - A [num_tags, num_tags] transition matrix.\n\nReturns:\n\nlog_norm - A [batch_size] vector of normalizers for a CRF.\n\ncrf_log_likelihood#\n\nCopydef crf_log_likelihood(    inputs: TensorLike,    tag_indices: TensorLike,    sequence_lengths: TensorLike,    transition_params: Optional[TensorLike] = None) -> Tuple[tf.Tensor, tf.Tensor]\n\nComputes the log-likelihood of tag sequences in a CRF.\n\nArguments:\n\ninputs - A [batch_size, max_seq_len, num_tags] tensor of unary potentials\nto use as input to the CRF layer.tag_indices - A [batch_size, max_seq_len] matrix of tag indices for which\nwe compute the log-likelihood.sequence_lengths - A [batch_size] vector of true sequence lengths.transition_params - A [num_tags, num_tags] transition matrix,\nif available.\n\nReturns:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1486": {"text": "Returns:\n\nlog_likelihood - A [batch_size] Tensor containing the log-likelihood of\neach example, given the sequence of tag indices.transition_params - A [num_tags, num_tags] transition matrix. This is\neither provided by the caller or created in this function.\n\nPrevious\u00ab rasa.utils.tensorflow.callbackNextrasa.utils.tensorflow.data_generator \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1487": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.data_generator\n\nRasaDataGenerator Objects#\n\nCopyclass RasaDataGenerator(Sequence)\n\nAbstract data generator.\n\n__init__#\n\nCopydef __init__(model_data: RasaModelData,             batch_size: Union[int, List[int]],             batch_strategy: Text = SEQUENCE,             shuffle: bool = True)\n\nInitializes the data generator.\n\nArguments:\n\nmodel_data - The model data to use.batch_size - The batch size(s).batch_strategy - The batch strategy.shuffle - If 'True', data should be shuffled.\n\n__len__#\n\nCopydef __len__() -> int\n\nNumber of batches in the Sequence.\n\nReturns:\n\n  The number of batches in the Sequence.\n\n__getitem__#\n\nCopydef __getitem__(index: int) -> Tuple[Any, Any]\n\nGets batch at position index.\n\nArguments:\n\nindex - position of the batch in the Sequence.\n\nReturns:\n\n  A batch (tuple of input data and target data).\n\non_epoch_end#\n\nCopydef on_epoch_end() -> None\n\nUpdate the data after every epoch.\n\nprepare_batch#\n\nCopy@staticmethoddef prepare_batch(    data: Data,    start: Optional[int] = None,    end: Optional[int] = None,    tuple_sizes: Optional[Dict[Text, int]] = None) -> Tuple[Optional[np.ndarray], ...]\n\nSlices model data into batch using given start and end value.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1488": {"text": "Arguments:\n\ndata - The data to prepare.start - The start index of the batchend - The end index of the batchtuple_sizes - In case the feature is not present we propagate the batch with\nNone. Tuple sizes contains the number of how many None values to add for\nwhat kind of feature.\n\nReturns:\n\n  The features of the batch.\n\nRasaBatchDataGenerator Objects#\n\nCopyclass RasaBatchDataGenerator(RasaDataGenerator)\n\nData generator with an optional increasing batch size.\n\n__init__#\n\nCopydef __init__(model_data: RasaModelData,             batch_size: Union[List[int], int],             epochs: int = 1,             batch_strategy: Text = SEQUENCE,             shuffle: bool = True)\n\nInitializes the increasing batch size data generator.\n\nArguments:\n\nmodel_data - The model data to use.batch_size - The batch size.epochs - The total number of epochs.batch_strategy - The batch strategy.shuffle - If 'True', data will be shuffled.\n\n__len__#\n\nCopydef __len__() -> int\n\nNumber of batches in the Sequence.\n\nReturns:\n\n  The number of batches in the Sequence.\n\n__getitem__#\n\nCopydef __getitem__(index: int) -> Tuple[Any, Any]\n\nGets batch at position index.\n\nArguments:\n\nindex - position of the batch in the Sequence.\n\nReturns:\n\n  A batch (tuple of input data and target data).\n\non_epoch_end#\n\nCopydef on_epoch_end() -> None\n\nUpdate the data after every epoch.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1489": {"text": "Update the data after every epoch.\n\nPrevious\u00ab rasa.utils.tensorflow.crfNextrasa.utils.tensorflow.environment \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1490": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.environment\n\nsetup_tf_environment#\n\nCopydef setup_tf_environment() -> None\n\nSetup CPU and GPU related environment settings for TensorFlow.\n\ncheck_deterministic_ops#\n\nCopydef check_deterministic_ops() -> None\n\nWarn user if they have set TF_DETERMINISTIC_OPS.\n\nPrevious\u00ab rasa.utils.tensorflow.data_generatorNextrasa.utils.tensorflow.exceptions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1491": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.exceptions\n\nTFLayerConfigException Objects#\n\nCopyclass TFLayerConfigException(RasaException)\n\nRaised when wrong parameters are passed to tensorflow layers.\n\nPrevious\u00ab rasa.utils.tensorflow.environmentNextrasa.utils.tensorflow.layers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1492": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.layers\n\nSparseDropout Objects#\n\nCopyclass SparseDropout(tf.keras.layers.Dropout)\n\nApplies Dropout to the input.\n\nDropout consists in randomly setting\na fraction rate of input units to 0 at each update during training time,\nwhich helps prevent overfitting.\n\nArguments:\n\nrate - Fraction of the input units to drop (between 0 and 1).\n\ncall#\n\nCopydef call(inputs: tf.SparseTensor,         training: Optional[Union[tf.Tensor, bool]] = None) -> tf.SparseTensor\n\nApply dropout to sparse inputs.\n\nArguments:\n\ninputs - Input sparse tensor (of any rank).training - Indicates whether the layer should behave in\ntraining mode (adding dropout) or in inference mode (doing nothing).\n\nReturns:\n\n  Output of dropout layer.\n\nRaises:\n\n  A ValueError if inputs is not a sparse tensor\n\nDenseForSparse Objects#\n\nCopyclass DenseForSparse(tf.keras.layers.Dense)\n\nDense layer for sparse input tensor.\n\nJust your regular densely-connected NN layer but for sparse tensors.\n\nDense implements the operation:\noutput = activation(dot(input, kernel) + bias)\nwhere activation is the element-wise activation function\npassed as the activation argument, kernel is a weights matrix\ncreated by the layer, and bias is a bias vector created by the layer\n(only applicable if use_bias is True).\n\nNote: If the input to the layer has a rank greater than 2, then\nit is flattened prior to the initial dot product with kernel.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1493": {"text": "Arguments:\n\nunits - Positive integer, dimensionality of the output space.activation - Activation function to use.\nIf you don't specify anything, no activation is applied\n(ie. \"linear\" activation: output = activation(dot(input, kernel) + bias)1).use_bias - Indicates whether the layer uses a bias vector.output = activation(dot(input, kernel) + bias)3 - Initializer for the kernel weights matrix.output = activation(dot(input, kernel) + bias)5 - Initializer for the bias vector.output = activation(dot(input, kernel) + bias)6 - regularization factoroutput = activation(dot(input, kernel) + bias)7 - Regularizer function applied to the bias vector.output = activation(dot(input, kernel) + bias)8 - Regularizer function applied to\nthe output of the layer (its \"activation\")..output = activation(dot(input, kernel) + bias)9 - Constraint function applied to\nthe kernel weights matrix.activation1 - Constraint function applied to the bias vector.Input shape:\nN-D tensor with shape: activation2.\nThe most common situation would be\na 2D input with shape activation3.Output shape:\nN-D tensor with shape: activation4.\nFor instance, for a 2D input with shape activation3,\nthe output would have shape activation6.\n\nget_units#\n\nCopydef get_units() -> int\n\nReturns number of output units.\n\nget_kernel#\n\nCopydef get_kernel() -> tf.Tensor\n\nReturns kernel tensor.\n\nget_bias#\n\nCopydef get_bias() -> Union[tf.Tensor, None]\n\nReturns bias tensor.\n\nget_feature_type#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1494": {"text": "Returns bias tensor.\n\nget_feature_type#\n\nCopydef get_feature_type() -> Union[Text, None]\n\nReturns a feature type of the data that's fed to the layer.\n\nIn order to correctly return a feature type, the function heavily relies\non the name of DenseForSparse layer to contain the feature type.\nAcceptable values of feature types are FEATURE_TYPE_SENTENCE\nand FEATURE_TYPE_SEQUENCE.\n\nReturns:\n\n  feature type of dense layer.\n\nget_attribute#\n\nCopydef get_attribute() -> Union[Text, None]\n\nReturns the attribute for which this layer was constructed.\n\nFor example: TEXT, LABEL, etc.\n\nIn order to correctly return an attribute, the function heavily relies\non the name of DenseForSparse layer being in the following format:\nf\"sparseto_dense.{attribute}{feature_type}\".\n\nReturns:\n\n  attribute of the layer.\n\ncall#\n\nCopydef call(inputs: tf.SparseTensor) -> tf.Tensor\n\nApply dense layer to sparse inputs.\n\nArguments:\n\ninputs - Input sparse tensor (of any rank).\n\nReturns:\n\n  Output of dense layer.\n\nRaises:\n\n  A ValueError if inputs is not a sparse tensor\n\nRandomlyConnectedDense Objects#\n\nCopyclass RandomlyConnectedDense(tf.keras.layers.Dense)\n\nLayer with dense ouputs that are connected to a random subset of inputs.", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1495": {"text": "Layer with dense ouputs that are connected to a random subset of inputs.\n\nRandomlyConnectedDense implements the operation:\noutput = activation(dot(input, kernel) + bias)\nwhere activation is the element-wise activation function\npassed as the activation argument, kernel is a weights matrix\ncreated by the layer, and bias is a bias vector created by the layer\n(only applicable if use_bias is True).\nIt creates kernel_mask to set a fraction of the kernel weights to zero.\n\nNote: If the input to the layer has a rank greater than 2, then\nit is flattened prior to the initial dot product with kernel.\n\nThe output is guaranteed to be dense (each output is connected to at least one\ninput), and no input is disconnected (each input is connected to at least one\noutput).\n\nAt output = activation(dot(input, kernel) + bias)1 the number of trainable weights is output = activation(dot(input, kernel) + bias)2. At\noutput = activation(dot(input, kernel) + bias)3 this layer is equivalent to output = activation(dot(input, kernel) + bias)4.\n\nInput shape:\nN-D tensor with shape: output = activation(dot(input, kernel) + bias)5.\nThe most common situation would be\na 2D input with shape output = activation(dot(input, kernel) + bias)6.\n\nOutput shape:\nN-D tensor with shape: output = activation(dot(input, kernel) + bias)7.\nFor instance, for a 2D input with shape output = activation(dot(input, kernel) + bias)6,\nthe output would have shape output = activation(dot(input, kernel) + bias)9.\n\n__init__#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1496": {"text": "__init__#\n\nCopydef __init__(density: float = 0.2, **kwargs: Any) -> None\n\nDeclares instance variables with default values.\n\nArguments:\n\ndensity - Approximate fraction of trainable weights (between 0 and 1).units - Positive integer, dimensionality of the output space.activation - Activation function to use.\nIf you don't specify anything, no activation is applied\n(ie. \"linear\" activation: a(x) = x).use_bias - Indicates whether the layer uses a bias vector.kernel_initializer - Initializer for the kernel weights matrix.bias_initializer - Initializer for the bias vector.kernel_regularizer - Regularizer function applied to\nthe kernel weights matrix.units0 - Regularizer function applied to the bias vector.units1 - Regularizer function applied to\nthe output of the layer (its \"activation\")..units2 - Constraint function applied to\nthe kernel weights matrix.units4 - Constraint function applied to the bias vector.\n\nbuild#\n\nCopydef build(input_shape: tf.TensorShape) -> None\n\nPrepares the kernel mask.\n\nArguments:\n\ninput_shape - Shape of the inputs to this layer\n\ncall#\n\nCopydef call(inputs: tf.Tensor) -> tf.Tensor\n\nProcesses the given inputs.\n\nArguments:\n\ninputs - What goes into this layer\n\nReturns:\n\n  The processed inputs.\n\nFfnn Objects#\n\nCopyclass Ffnn(tf.keras.layers.Layer)\n\nFeed-forward network layer.\n\nArguments:", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1497": {"text": "Feed-forward network layer.\n\nArguments:\n\nlayer_sizes - List of integers with dimensionality of the layers.dropout_rate - Fraction of the input units to drop (between 0 and 1).reg_lambda - regularization factor.density - Approximate fraction of trainable weights (between 0 and 1).layer_name_suffix - Text added to the name of the layers.Input shape:\nN-D tensor with shape: (batch_size, ..., input_dim).\nThe most common situation would be\na 2D input with shape (batch_size, input_dim).Output shape:\nN-D tensor with shape: (batch_size, ..., layer_sizes[-1]).\nFor instance, for a 2D input with shape (batch_size, input_dim),\nthe output would have shape (batch_size, layer_sizes[-1]).\n\ncall#\n\nCopydef call(x: tf.Tensor,         training: Optional[Union[tf.Tensor, bool]] = None) -> tf.Tensor\n\nApply feed-forward network layer.\n\nEmbed Objects#\n\nCopyclass Embed(tf.keras.layers.Layer)\n\nDense embedding layer.\n\nInput shape:\nN-D tensor with shape: (batch_size, ..., input_dim).\nThe most common situation would be\na 2D input with shape (batch_size, input_dim).\n\nOutput shape:\nN-D tensor with shape: (batch_size, ..., embed_dim).\nFor instance, for a 2D input with shape (batch_size, input_dim),\nthe output would have shape (batch_size, embed_dim).\n\n__init__#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1498": {"text": "__init__#\n\nCopydef __init__(embed_dim: int, reg_lambda: float,             layer_name_suffix: Text) -> None\n\nInitialize layer.\n\nArguments:\n\nembed_dim - Dimensionality of the output space.reg_lambda - Regularization factor.layer_name_suffix - Text added to the name of the layers.\n\ncall#\n\nCopydef call(x: tf.Tensor) -> tf.Tensor\n\nApply dense layer.\n\nInputMask Objects#\n\nCopyclass InputMask(tf.keras.layers.Layer)\n\nThe layer that masks 15% of the input.\n\nInput shape:\nN-D tensor with shape: (batch_size, ..., input_dim).\nThe most common situation would be\na 2D input with shape (batch_size, input_dim).\n\nOutput shape:\nN-D tensor with shape: (batch_size, ..., input_dim).\nFor instance, for a 2D input with shape (batch_size, input_dim),\nthe output would have shape (batch_size, input_dim).\n\ncall#\n\nCopydef call(    x: tf.Tensor,    mask: tf.Tensor,    training: Optional[Union[tf.Tensor, bool]] = None) -> Tuple[tf.Tensor, tf.Tensor]\n\nRandomly mask input sequences.\n\nArguments:\n\nx - Input sequence tensor of rank 3.mask - A tensor representing sequence mask,\ncontains 1 for inputs and 0 for padding.training - Indicates whether the layer should run in\ntraining mode (mask inputs) or in inference mode (doing nothing).\n\nReturns:\n\n  A tuple of masked inputs and boolean mask.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1499": {"text": "Returns:\n\n  A tuple of masked inputs and boolean mask.\n\nCRF Objects#\n\nCopyclass CRF(tf.keras.layers.Layer)\n\nCRF layer.\n\nArguments:\n\nnum_tags - Positive integer, number of tags.reg_lambda - regularization factor.name - Optional name of the layer.\n\ncall#\n\nCopydef call(logits: tf.Tensor,         sequence_lengths: tf.Tensor) -> Tuple[tf.Tensor, tf.Tensor]\n\nDecodes the highest scoring sequence of tags.\n\nArguments:\n\nlogits - A [batch_size, max_seq_len, num_tags] tensor of\nunary potentials.sequence_lengths - A [batch_size] vector of true sequence lengths.\n\nReturns:\n\n  A [batch_size, max_seq_len] matrix, with dtype tf.int32.\nContains the highest scoring tag indices.\nA [batch_size, max_seq_len] matrix, with dtype tf.float32.\nContains the confidence values of the highest scoring tag indices.\n\nloss#\n\nCopydef loss(logits: tf.Tensor, tag_indices: tf.Tensor,         sequence_lengths: tf.Tensor) -> tf.Tensor\n\nComputes the log-likelihood of tag sequences in a CRF.\n\nArguments:", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1500": {"text": "Arguments:\n\nlogits - A [batch_size, max_seq_len, num_tags] tensor of unary potentials\nto use as input to the CRF layer.tag_indices - A [batch_size, max_seq_len] matrix of tag indices for which\nwe compute the log-likelihood.sequence_lengths - A [batch_size] vector of true sequence lengths.\n\nReturns:\n\n  Negative mean log-likelihood of all examples,\ngiven the sequence of tag indices.\n\nf1_score#\n\nCopydef f1_score(tag_ids: tf.Tensor, pred_ids: tf.Tensor,             mask: tf.Tensor) -> tf.Tensor\n\nCalculates f1 score for train predictions\n\nDotProductLoss Objects#\n\nCopyclass DotProductLoss(tf.keras.layers.Layer)\n\nAbstract dot-product loss layer class.\n\nIdea based on StarSpace paper: http://arxiv.org/abs/1709.03856\n\nImplements similarity methods\n\nsim (computes a similarity between vectors)get_similarities_and_confidences_from_embeddings (calls sim and also computes\nconfidence values)\n\nSpecific loss functions (single- or multi-label) must be implemented in child\nclasses.\n\n__init__#\n\nCopydef __init__(num_candidates: int,             scale_loss: bool = False,             constrain_similarities: bool = True,             model_confidence: Text = SOFTMAX,             similarity_type: Text = INNER,             name: Optional[Text] = None, **kwargs: Any)\n\nDeclares instance variables with default values.\n\nArguments:", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1501": {"text": "Declares instance variables with default values.\n\nArguments:\n\nnum_candidates - Number of labels besides the positive one. Depending on\nwhether single- or multi-label loss is implemented (done in\nsub-classes), these can be all negative example labels, or a mixture of\nnegative and further positive labels, respectively.scale_loss - Boolean, if True scale loss inverse proportionally to\nthe confidence of the correct prediction.constrain_similarities - Boolean, if True applies sigmoid on all\nsimilarity terms and adds to the loss function to\nensure that similarity values are approximately bounded.\nUsed inside _loss_cross_entropy() only.model_confidence - Normalization of confidence values during inference.\nCurrently, the only possible value is SOFTMAX.similarity_type - Similarity measure to use, either cosine or inner.scale_loss0 - Optional name of the layer.\n\nRaises:\n\nscale_loss1 - When similarity_type is not one of scale_loss3 or\nscale_loss4.\n\nsim#\n\nCopydef sim(a: tf.Tensor,        b: tf.Tensor,        mask: Optional[tf.Tensor] = None) -> tf.Tensor\n\nCalculates similarity between a and b.\n\nOperates on the last dimension. When a and b are vectors, then sim\ncomputes either the dot-product, or the cosine of the angle between a and b,\ndepending on self.similarity_type.\nSpecifically, when the similarity type is INNER, then we compute the scalar\nproduct a . b. When the similarity type is b0, we compute\nb1, i.e. the cosine of the angle between a and b.\n\nArguments:", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1502": {"text": "Arguments:\n\na - Any float tensorb - Any tensor of the same shape and type as ab7 - Mask (should contain 1s for inputs and 0s for padding). Note, that\nb8 should hold.\n\nReturns:\n\n  Similarities between vectors in a and b.\n\nget_similarities_and_confidences_from_embeddings#\n\nCopydef get_similarities_and_confidences_from_embeddings(        input_embeddings: tf.Tensor,        label_embeddings: tf.Tensor,        mask: Optional[tf.Tensor] = None) -> Tuple[tf.Tensor, tf.Tensor]\n\nComputes similary between input and label embeddings and model's confidence.\n\nFirst compute the similarity from embeddings and then apply an activation\nfunction if needed to get the confidence.\n\nArguments:\n\ninput_embeddings - Embeddings of input.label_embeddings - Embeddings of labels.mask - Mask (should contain 1s for inputs and 0s for padding). Note, that\nlen(mask.shape) == len(a.shape) - 1 should hold.\n\nReturns:\n\n  similarity between input and label embeddings and model's prediction\nconfidence for each label.\n\ncall#\n\nCopydef call(*args: Any, **kwargs: Any) -> Tuple[tf.Tensor, tf.Tensor]\n\nLayer's logic - to be implemented in child class.\n\napply_mask_and_scaling#\n\nCopydef apply_mask_and_scaling(loss: tf.Tensor,                           mask: Optional[tf.Tensor]) -> tf.Tensor\n\nScales the loss and applies the mask if necessary.", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1503": {"text": "Scales the loss and applies the mask if necessary.\n\nArguments:\n\nloss - The loss tensormask - (Optional) A mask to multiply with the loss\n\nReturns:\n\n  The scaled loss, potentially averaged over the sequence\ndimension.\n\nSingleLabelDotProductLoss Objects#\n\nCopyclass SingleLabelDotProductLoss(DotProductLoss)\n\nSingle-label dot-product loss layer.\n\nThis loss layer assumes that only one output (label) is correct for any given input.\n\n__init__#\n\nCopydef __init__(num_candidates: int,             scale_loss: bool = False,             constrain_similarities: bool = True,             model_confidence: Text = SOFTMAX,             similarity_type: Text = INNER,             name: Optional[Text] = None,             loss_type: Text = CROSS_ENTROPY,             mu_pos: float = 0.8,             mu_neg: float = -0.2,             use_max_sim_neg: bool = True,             neg_lambda: float = 0.5,             same_sampling: bool = False, **kwargs: Any) -> None\n\nDeclares instance variables with default values.\n\nArguments:", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1504": {"text": "Declares instance variables with default values.\n\nArguments:\n\nnum_candidates - Positive integer, the number of incorrect labels;\nthe algorithm will minimize their similarity to the input.loss_type - The type of the loss function, either cross_entropy or\nmargin.mu_pos - Indicates how similar the algorithm should\ntry to make embedding vectors for correct labels;\nshould be 0.0 < ... < 1.0 for cosine similarity type.mu_neg - Maximum negative similarity for incorrect labels,\nshould be -1.0 < ... < 1.0 for cosine similarity type.use_max_sim_neg - If True the algorithm only minimizes\nmaximum similarity over incorrect intent labels,\nused only if loss_type is set to margin.loss_type2 - The scale of how important it is to minimize\nthe maximum similarity between embeddings of different labels,\nused only if loss_type is set to margin.loss_type5 - If True scale loss inverse proportionally to\nthe confidence of the correct prediction.loss_type7 - Similarity measure to use, either cosine or loss_type9.cross_entropy0 - Optional name of the layer.cross_entropy1 - If True sample same negative labels\nfor the whole batch.cross_entropy3 - If True and loss_type is cross_entropy, a\nsigmoid loss term is added to the total loss to ensure that similarity\nvalues are approximately bounded.cross_entropy6 - Normalization of confidence values during inference.\nCurrently, the only possible value is cross_entropy7.\n\ncall#", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1505": {"text": "call#\n\nCopydef call(inputs_embed: tf.Tensor,         labels_embed: tf.Tensor,         labels: tf.Tensor,         all_labels_embed: tf.Tensor,         all_labels: tf.Tensor,         mask: Optional[tf.Tensor] = None) -> Tuple[tf.Tensor, tf.Tensor]\n\nCalculate loss and accuracy.\n\nArguments:\n\ninputs_embed - Embedding tensor for the batch inputs;\nshape (batch_size, ..., num_features)labels_embed - Embedding tensor for the batch labels;\nshape (batch_size, ..., num_features)labels - Tensor representing batch labels; shape (batch_size, ..., 1)all_labels_embed - Embedding tensor for the all labels;\nshape (num_labels, num_features)all_labels - Tensor representing all labels; shape (num_labels, 1)(batch_size, ..., num_features)0 - Optional mask, contains (batch_size, ..., num_features)1 for inputs and (batch_size, ..., num_features)2 for padding;\nshape (batch_size, ..., num_features)3\n\nReturns:\n\n(batch_size, ..., num_features)4 - Total loss.(batch_size, ..., num_features)5 - Training accuracy.\n\nMultiLabelDotProductLoss Objects#\n\nCopyclass MultiLabelDotProductLoss(DotProductLoss)\n\nMulti-label dot-product loss layer.", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1506": {"text": "Multi-label dot-product loss layer.\n\nThis loss layer assumes that multiple outputs (labels) can be correct for any given\ninput. To accomodate for this, we use a sigmoid cross-entropy loss here.\n\n__init__#\n\nCopydef __init__(num_candidates: int,             scale_loss: bool = False,             constrain_similarities: bool = True,             model_confidence: Text = SOFTMAX,             similarity_type: Text = INNER,             name: Optional[Text] = None, **kwargs: Any) -> None\n\nDeclares instance variables with default values.\n\nArguments:\n\nnum_candidates - Positive integer, the number of candidate labels.scale_loss - If True scale loss inverse proportionally to\nthe confidence of the correct prediction.similarity_type - Similarity measure to use, either cosine or inner.name - Optional name of the layer.constrain_similarities - Boolean, if True applies sigmoid on all\nsimilarity terms and adds to the loss function to\nensure that similarity values are approximately bounded.\nUsed inside _loss_cross_entropy() only.model_confidence - Normalization of confidence values during inference.\nCurrently, the only possible value is scale_loss0.\n\ncall#\n\nCopydef call(batch_inputs_embed: tf.Tensor,         batch_labels_embed: tf.Tensor,         batch_labels_ids: tf.Tensor,         all_labels_embed: tf.Tensor,         all_labels_ids: tf.Tensor,         mask: Optional[tf.Tensor] = None) -> Tuple[tf.Tensor, tf.Tensor]\n\nCalculates loss and accuracy.", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1507": {"text": "Calculates loss and accuracy.\n\nArguments:\n\nbatch_inputs_embed - Embeddings of the batch inputs (e.g. featurized\ntrackers); shape (batch_size, 1, num_features)batch_labels_embed - Embeddings of the batch labels (e.g. featurized intents\nfor IntentTED);\nshape (batch_size, max_num_labels_per_input, num_features)batch_labels_ids - Batch label indices (e.g. indices of the intents). We\nassume that indices are integers that run from 0 to\n(number of labels) - 1.\nshape (batch_size, max_num_labels_per_input, 1)all_labels_embed - Embeddings for all labels in the domain;\nshape (batch_size, num_features)(batch_size, 1, num_features)0 - Indices for all labels in the domain;\nshape (batch_size, 1, num_features)1(batch_size, 1, num_features)2 - Optional sequence mask, which contains (batch_size, 1, num_features)3 for inputs and 0 for\npadding.\n\nReturns:\n\n(batch_size, 1, num_features)5 - Total loss (based on StarSpace http://arxiv.org/abs/1709.03856);\nscalar(batch_size, 1, num_features)6 - Training accuracy; scalar\n\nPrevious\u00ab rasa.utils.tensorflow.exceptionsNextrasa.utils.tensorflow.layers_utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1508": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.layers_utils\n\nrandom_indices#\n\nCopydef random_indices(batch_size: Union[Tensor, int], n: Union[Tensor, int],                   n_max: Union[Tensor, int]) -> Tensor\n\nCreates batch_size * n random indices that run from 0 to n_max.\n\nArguments:\n\nbatch_size - Number of items in each batchn - Number of random indices in each examplen_max - Maximum index (excluded)\n\nReturns:\n\n  A uniformly distributed integer tensor of indices\n\nbatch_flatten#\n\nCopydef batch_flatten(x: Tensor) -> Tensor\n\nFlattens all but last dimension of x so it becomes 2D.\n\nArguments:\n\nx - Any tensor with at least 2 dimensions\n\nReturns:\n\n  The reshaped tensor, where all but the last dimension\nare flattened into the first dimension\n\nget_candidate_values#\n\nCopydef get_candidate_values(x: tf.Tensor, candidate_ids: tf.Tensor) -> tf.Tensor\n\nGathers candidate values according to IDs.\n\nArguments:\n\nx - Any tensor with at least one dimensioncandidate_ids - Indicator for which candidates to gather\n\nReturns:\n\n  A tensor of shape (batch_size, 1, num_candidates, tf.shape(x)[-1]), where\nfor each batch example, we generate a list of num_candidates vectors, and\neach candidate is chosen from x according to the candidate id. For example:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1509": {"text": "Copy```x = [[0 1 2],        [3 4 5],        [6 7 8]]candidate_ids = [[0, 1], [0, 0], [2, 0]]gives[    [[0 1 2],     [3 4 5]],    [[0 1 2],     [0 1 2]],    [[6 7 8],     [0 1 2]]]```\n\nreduce_mean_equal#\n\nCopydef reduce_mean_equal(x: tf.Tensor,                      y: tf.Tensor,                      mask: Optional[tf.Tensor] = None) -> tf.Tensor\n\nComputes the mean number of matches between x and y.\n\nIf x and y have n dimensions, then the mean equal\nnumber of indices is calculated for the last dimension by\nonly taking the valid indices into consideration\n(from the mask) and then it is averaged over all\nother n-1 dimensions.\n\nFor e.g., if:\n\nx = [[1,2,3,4][5,6,7,8]]\ny = [[1,2,3,4][5,6,0,0]]\nmask = [[1,1,1,1],\n[1,1,1,0]]\n\nthen the output will be calculated as ((4/4) + 2/3) / 2\n\nArguments:\n\nx - Any numeric tensor.y - Another tensor with same shape and type as x.mask - Tensor with a mask to distinguish actual indices from padding indices.\nShape should be the same as x and y.\n\nReturns:\n\n  The mean of \"x == y\"\n\nPrevious\u00ab rasa.utils.tensorflow.layersNextrasa.utils.tensorflow.model_data \u00bb", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1510": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1511": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.model_data\n\nragged_array_to_ndarray#\n\nCopydef ragged_array_to_ndarray(ragged_array: Iterable[np.ndarray]) -> np.ndarray\n\nConverts ragged array to numpy array.\n\nRagged array, also known as a jagged array, irregular array is an array of\narrays of which the member arrays can be of different lengths.\nTry to convert as is (preserves type), if it fails because not all numpy arrays have\nthe same shape, then creates numpy array of objects.\n\nFeatureArray Objects#\n\nCopyclass FeatureArray(np.ndarray)\n\nStores any kind of features ready to be used by a RasaModel.\n\nNext to the input numpy array of features, it also received the number of\ndimensions of the features.\nAs our features can have 1 to 4 dimensions we might have different number of numpy\narrays stacked. The number of dimensions helps us to figure out how to handle this\nparticular feature array. Also, it is automatically determined whether the feature\narray is sparse or not and the number of units is determined as well.\n\nSubclassing np.array: https://numpy.org/doc/stable/user/basics.subclassing.html\n\n__new__#\n\nCopydef __new__(cls, input_array: np.ndarray,            number_of_dimensions: int) -> \"FeatureArray\"\n\nCreate and return a new object.  See help(type) for accurate signature.\n\n__init__#\n\nCopydef __init__(input_array: Any, number_of_dimensions: int, **kwargs: Any) -> None", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1512": {"text": "Initialize. FeatureArray.\n\nNeeded in order to avoid 'Invalid keyword argument number_of_dimensions\nto function FeatureArray.init '\n\nArguments:\n\ninput_array - the array that contains featuresnumber_of_dimensions - number of dimensions in input_array\n\n__array_finalize__#\n\nCopydef __array_finalize__(obj: Optional[np.ndarray]) -> None\n\nThis method is called when the system allocates a new array from obj.\n\nArguments:\n\nobj - A subclass (subtype) of ndarray.\n\n__array_ufunc__#\n\nCopydef __array_ufunc__(ufunc: Any, method: Text, *inputs: Any, **kwargs: Any) -> Any\n\nOverwrite this method as we are subclassing numpy array.\n\nArguments:\n\nufunc - The ufunc object that was called.method - A string indicating which Ufunc method was called\n(one of \"call\", \"reduce\", \"reduceat\", \"accumulate\", \"outer\",\n\"inner\").*inputs - A tuple of the input arguments to the ufunc.**kwargs - Any additional arguments\n\nReturns:\n\n  The result of the operation.\n\n__reduce__#\n\nCopydef __reduce__() -> Tuple[Any, Any, Any]\n\nNeeded in order to pickle this object.\n\nReturns:\n\n  A tuple.\n\n__setstate__#\n\nCopydef __setstate__(state: Any, **kwargs: Any) -> None\n\nSets the state.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1513": {"text": "Sets the state.\n\nArguments:\n\nstate - The state argument must be a sequence that contains the following\nelements version, shape, dtype, isFortan, rawdata.**kwargs - Any additional parameter\n\nFeatureSignature Objects#\n\nCopyclass FeatureSignature(NamedTuple)\n\nSignature of feature arrays.\n\nStores the number of units, the type (sparse vs dense), and the number of\ndimensions of features.\n\nRasaModelData Objects#\n\nCopyclass RasaModelData()\n\nData object used for all RasaModels.\n\nIt contains all features needed to train the models.\n'data' is a mapping of attribute name, e.g. TEXT, INTENT, etc., and feature name,\ne.g. SENTENCE, SEQUENCE, etc., to a list of feature arrays representing the actual\nfeatures.\n'label_key' and 'label_sub_key' point to the labels inside 'data'. For\nexample, if your intent labels are stored under INTENT -> IDS, 'label_key' would\nbe \"INTENT\" and 'label_sub_key' would be \"IDS\".\n\n__init__#\n\nCopydef __init__(label_key: Optional[Text] = None,             label_sub_key: Optional[Text] = None,             data: Optional[Data] = None) -> None\n\nInitializes the RasaModelData object.\n\nArguments:\n\nlabel_key - the key of a label used for balancing, etc.label_sub_key - the sub key of a label used for balancing, etc.data - the data holding the features\n\nget#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1514": {"text": "get#\n\nCopydef get(    key: Text,    sub_key: Optional[Text] = None) -> Union[Dict[Text, List[FeatureArray]], List[FeatureArray]]\n\nGet the data under the given keys.\n\nArguments:\n\nkey - The key.sub_key - The optional sub key.\n\nReturns:\n\n  The requested data.\n\nitems#\n\nCopydef items() -> ItemsView\n\nReturn the items of the data attribute.\n\nReturns:\n\n  The items of data.\n\nvalues#\n\nCopydef values() -> Any\n\nReturn the values of the data attribute.\n\nReturns:\n\n  The values of data.\n\nkeys#\n\nCopydef keys(key: Optional[Text] = None) -> List[Text]\n\nReturn the keys of the data attribute.\n\nArguments:\n\nkey - The optional key.\n\nReturns:\n\n  The keys of the data.\n\nsort#\n\nCopydef sort() -> None\n\nSorts data according to its keys.\n\nfirst_data_example#\n\nCopydef first_data_example() -> Data\n\nReturn the data with just one feature example per key, sub-key.\n\nReturns:\n\n  The simplified data.\n\ndoes_feature_exist#\n\nCopydef does_feature_exist(key: Text, sub_key: Optional[Text] = None) -> bool\n\nCheck if feature key (and sub-key) is present and features are available.\n\nArguments:\n\nkey - The key.sub_key - The optional sub-key.\n\nReturns:\n\n  False, if no features for the given keys exists, True otherwise.\n\ndoes_feature_not_exist#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1515": {"text": "does_feature_not_exist#\n\nCopydef does_feature_not_exist(key: Text, sub_key: Optional[Text] = None) -> bool\n\nCheck if feature key (and sub-key) is present and features are available.\n\nArguments:\n\nkey - The key.sub_key - The optional sub-key.\n\nReturns:\n\n  True, if no features for the given keys exists, False otherwise.\n\nis_empty#\n\nCopydef is_empty() -> bool\n\nChecks if data is set.\n\nnumber_of_examples#\n\nCopydef number_of_examples(data: Optional[Data] = None) -> int\n\nObtain number of examples in data.\n\nArguments:\n\ndata - The data.Raises - A ValueError if number of examples differ for different features.\n\nReturns:\n\n  The number of examples in data.\n\nnumber_of_units#\n\nCopydef number_of_units(key: Text, sub_key: Text) -> int\n\nGet the number of units of the given key.\n\nArguments:\n\nkey - The key.sub_key - The optional sub-key.\n\nReturns:\n\n  The number of units.\n\nadd_data#\n\nCopydef add_data(data: Data, key_prefix: Optional[Text] = None) -> None\n\nAdd incoming data to data.\n\nArguments:\n\ndata - The data to add.key_prefix - Optional key prefix to use in front of the key value.\n\nupdate_key#\n\nCopydef update_key(from_key: Text, from_sub_key: Text, to_key: Text,               to_sub_key: Text) -> None", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1516": {"text": "Copies the features under the given keys to the new keys and deletes the old.\n\nArguments:\n\nfrom_key - current feature keyfrom_sub_key - current feature sub-keyto_key - new key for featureto_sub_key - new sub-key for feature\n\nadd_features#\n\nCopydef add_features(key: Text, sub_key: Text,                 features: Optional[List[FeatureArray]]) -> None\n\nAdd list of features to data under specified key.\n\nShould update number of examples.\n\nArguments:\n\nkey - The keysub_key - The sub-keyfeatures - The features to add.\n\nadd_lengths#\n\nCopydef add_lengths(key: Text, sub_key: Text, from_key: Text,                from_sub_key: Text) -> None\n\nAdds a feature array of lengths of sequences to data under given key.\n\nArguments:\n\nkey - The key to add the lengths tosub_key - The sub-key to add the lengths tofrom_key - The key to take the lengths fromfrom_sub_key - The sub-key to take the lengths from\n\nadd_sparse_feature_sizes#\n\nCopydef add_sparse_feature_sizes(        sparse_feature_sizes: Dict[Text, Dict[Text, List[int]]]) -> None\n\nAdds a dictionary of feature sizes for different attributes.\n\nArguments:\n\nsparse_feature_sizes - a dictionary of attribute that has sparse\nfeatures to a dictionary of a feature type\nto a list of different sparse feature sizes.\n\nget_sparse_feature_sizes#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1517": {"text": "get_sparse_feature_sizes#\n\nCopydef get_sparse_feature_sizes() -> Dict[Text, Dict[Text, List[int]]]\n\nGet feature sizes of the model.\n\nsparse_feature_sizes is a dictionary of attribute that has sparse features to\na dictionary of a feature type to a list of different sparse feature sizes.\n\nReturns:\n\n  A dictionary of key and sub-key to a list of feature signatures\n(same structure as the data attribute).\n\nsplit#\n\nCopydef split(number_of_test_examples: int,          random_seed: int) -> Tuple[\"RasaModelData\", \"RasaModelData\"]\n\nCreate random hold out test set using stratified split.\n\nArguments:\n\nnumber_of_test_examples - Number of test examples.random_seed - Random seed.\n\nReturns:\n\n  A tuple of train and test RasaModelData.\n\nget_signature#\n\nCopydef get_signature(    data: Optional[Data] = None) -> Dict[Text, Dict[Text, List[FeatureSignature]]]\n\nGet signature of RasaModelData.\n\nSignature stores the shape and whether features are sparse or not for every key.\n\nReturns:\n\n  A dictionary of key and sub-key to a list of feature signatures\n(same structure as the data attribute).\n\nshuffled_data#\n\nCopydef shuffled_data(data: Data) -> Data\n\nShuffle model data.\n\nArguments:\n\ndata - The data to shuffle\n\nReturns:\n\n  The shuffled data.\n\nbalanced_data#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1518": {"text": "Returns:\n\n  The shuffled data.\n\nbalanced_data#\n\nCopydef balanced_data(data: Data, batch_size: int, shuffle: bool) -> Data\n\nMix model data to account for class imbalance.\n\nThis batching strategy puts rare classes approximately in every other batch,\nby repeating them. Mimics stratified batching, but also takes into account\nthat more populated classes should appear more often.\n\nArguments:\n\ndata - The data.batch_size - The batch size.shuffle - Boolean indicating whether to shuffle the data or not.\n\nReturns:\n\n  The balanced data.\n\nPrevious\u00ab rasa.utils.tensorflow.layers_utilsNextrasa.utils.tensorflow.model_data_utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1519": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.model_data_utils\n\nfeaturize_training_examples#\n\nCopydef featurize_training_examples(    training_examples: List[Message],    attributes: List[Text],    entity_tag_specs: Optional[List[\"EntityTagSpec\"]] = None,    featurizers: Optional[List[Text]] = None,    bilou_tagging: bool = False) -> Tuple[List[Dict[Text, List[\"Features\"]]], Dict[Text, Dict[Text,                                                               List[int]]]]\n\nConverts training data into a list of attribute to features.\n\nPossible attributes are, for example, INTENT, RESPONSE, TEXT, ACTION_TEXT,\nACTION_NAME or ENTITIES.\nAlso returns sparse feature sizes for each attribute. It could look like this:\n{TEXT: {FEATURE_TYPE_SEQUENCE: [16, 32], FEATURE_TYPE_SENTENCE: [16, 32]}}.\n\nArguments:\n\ntraining_examples - the list of training examplesattributes - the attributes to considerentity_tag_specs - the entity specsfeaturizers - the featurizers to considerbilou_tagging - indicates whether BILOU tagging should be used or not\n\nReturns:\n\n  A list of attribute to features.\nA dictionary of attribute to feature sizes.\n\nget_tag_ids#\n\nCopydef get_tag_ids(example: Message, tag_spec: \"EntityTagSpec\",                bilou_tagging: bool) -> \"Features\"\n\nCreates a feature array containing the entity tag ids of the given example.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1520": {"text": "Arguments:\n\nexample - the messagetag_spec - entity tag specbilou_tagging - indicates whether BILOU tagging should be used or not\n\nReturns:\n\n  A list of features.\n\nconvert_to_data_format#\n\nCopydef convert_to_data_format(    features: Union[List[List[Dict[Text, List[\"Features\"]]]],                    List[Dict[Text, List[\"Features\"]]]],    fake_features: Optional[Dict[Text, List[\"Features\"]]] = None,    consider_dialogue_dimension: bool = True,    featurizers: Optional[List[Text]] = None) -> Tuple[Data, Dict[Text, List[\"Features\"]]]\n\nConverts the input into \"Data\" format.\n\n\"features\" can, for example, be a dictionary of attributes (INTENT,\nTEXT, ACTION_NAME, ACTION_TEXT, ENTITIES, SLOTS, FORM) to a list of features for\nall dialogue turns in all training trackers.\nFor NLU training it would just be a dictionary of attributes (either INTENT or\nRESPONSE, TEXT, and potentially ENTITIES) to a list of features for all training\nexamples.\n\nThe \"Data\" format corresponds to Dict[Text, Dict[Text, List[FeatureArray]]]. It's\na dictionary of attributes (e.g. TEXT) to a dictionary of secondary attributes\n(e.g. SEQUENCE or SENTENCE) to the list of actual features.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1521": {"text": "Arguments:\n\nfeatures - a dictionary of attributes to a list of features for all\nexamples in the training datafake_features - Contains default feature values for attributesconsider_dialogue_dimension - If set to false the dialogue dimension will be\nremoved from the resulting sequence features.featurizers - the featurizers to consider\n\nReturns:\n\n  Input in \"Data\" format and fake features\n\nPrevious\u00ab rasa.utils.tensorflow.model_dataNextrasa.utils.tensorflow.models \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1522": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.models\n\nRasaModel Objects#\n\nCopyclass RasaModel(Model)\n\nAbstract custom Keras model.\n\n This model overwrites the following methods:\n\ntrain_steptest_steppredict_stepsaveload\nCannot be used as tf.keras.Model.\n\n__init__#\n\nCopydef __init__(random_seed: Optional[int] = None, **kwargs: Any) -> None\n\nInitialize the RasaModel.\n\nArguments:\n\nrandom_seed - set the random seed to get reproducible results\n\nbatch_loss#\n\nCopydef batch_loss(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> tf.Tensor\n\nCalculates the loss for the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The loss of the given batch.\n\nprepare_for_predict#\n\nCopydef prepare_for_predict() -> None\n\nPrepares tf graph fpr prediction.\n\nThis method should contain necessary tf calculations\nand set self variables that are used in batch_predict.\nFor example, pre calculation of self.all_labels_embed.\n\nbatch_predict#\n\nCopydef batch_predict(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> Dict[Text, Union[tf.Tensor, Dict[Text, tf.Tensor]]]\n\nPredicts the output of the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1523": {"text": "Arguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The output to predict.\n\ntrain_step#\n\nCopydef train_step(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> Dict[Text, float]\n\nPerforms a train step using the given batch.\n\nArguments:\n\nbatch_in - The batch input.\n\nReturns:\n\n  Training metrics.\n\ntest_step#\n\nCopydef test_step(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> Dict[Text, float]\n\nTests the model using the given batch.\n\nThis method is used during validation.\n\nArguments:\n\nbatch_in - The batch input.\n\nReturns:\n\n  Testing metrics.\n\npredict_step#\n\nCopydef predict_step(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> Dict[Text, tf.Tensor]\n\nPredicts the output for the given batch.\n\nArguments:\n\nbatch_in - The batch to predict.\n\nReturns:\n\n  Prediction output.\n\nrun_inference#\n\nCopydef run_inference(    model_data: RasaModelData,    batch_size: Union[int, List[int]] = 1,    output_keys_expected: Optional[List[Text]] = None) -> Dict[Text, Union[np.ndarray, Dict[Text, Any]]]\n\nImplements bulk inferencing through the model.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1524": {"text": "Implements bulk inferencing through the model.\n\nArguments:\n\nmodel_data - Input data to be fed to the model.batch_size - Size of batches that the generator should create.output_keys_expected - Keys which are expected in the output.\nThe output should be filtered to have only these keys before\nmerging it with the output across all batches.\n\nReturns:\n\n  Model outputs corresponding to the inputs fed.\n\nsave#\n\nCopydef save(model_file_name: Text, overwrite: bool = True) -> None\n\nSave the model to the given file.\n\nArguments:\n\nmodel_file_name - The file name to save the model to.overwrite - If 'True' an already existing model with the same file name will\nbe overwritten.\n\nload#\n\nCopy@classmethoddef load(cls,         model_file_name: Text,         model_data_example: RasaModelData,         predict_data_example: Optional[RasaModelData] = None,         finetune_mode: bool = False, *args: Any, **kwargs: Any) -> \"RasaModel\"\n\nLoads a model from the given weights.\n\nArguments:\n\nmodel_file_name - Path to file containing model weights.model_data_example - Example data point to construct the model architecture.predict_data_example - Example data point to speed up prediction during\ninference.finetune_mode - Indicates whether to load the model for further finetuning.*args - Any other non key-worded arguments.**kwargs - Any other key-worded arguments.\n\nReturns:\n\n  Loaded model with weights appropriately set.\n\nbatch_to_model_data_format#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1525": {"text": "batch_to_model_data_format#\n\nCopy@staticmethoddef batch_to_model_data_format(    batch: MaybeNestedBatchData,    data_signature: Dict[Text, Dict[Text, List[FeatureSignature]]]) -> Dict[Text, Dict[Text, List[tf.Tensor]]]\n\nConvert input batch tensors into batch data format.\n\nBatch contains any number of batch data. The order is equal to the\nkey-value pairs in session data. As sparse data were converted into (indices,\ndata, shape) before, this method converts them into sparse tensors. Dense\ndata is kept.\n\ncall#\n\nCopydef call(        inputs: Union[tf.Tensor, List[tf.Tensor]],        training: Optional[tf.Tensor] = None,        mask: Optional[tf.Tensor] = None) -> Union[tf.Tensor, List[tf.Tensor]]\n\nCalls the model on new inputs.\n\nArguments:\n\ninputs - A tensor or list of tensors.training - Boolean or boolean scalar tensor, indicating whether to run\nthe Network in training mode or inference mode.mask - A mask or list of masks. A mask can be\neither a tensor or None (no mask).\n\nReturns:\n\n  A tensor if there is a single output, or\na list of tensors if there are more than one outputs.\n\nTransformerRasaModel Objects#\n\nCopyclass TransformerRasaModel(RasaModel)\n\nadjust_for_incremental_training#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1526": {"text": "adjust_for_incremental_training#\n\nCopydef adjust_for_incremental_training(        data_example: Dict[Text, Dict[Text, List[FeatureArray]]],        new_sparse_feature_sizes: Dict[Text, Dict[Text, List[int]]],        old_sparse_feature_sizes: Dict[Text, Dict[Text, List[int]]]) -> None\n\nAdjusts the model for incremental training.\n\nFirst we should check if any of the sparse feature sizes has decreased\nand raise an exception if this happens.\nIf none of them have decreased and any of them has increased, then the\nfunction updates DenseForSparse layers, compiles the model, fits a sample\ndata on it to activate adjusted layer(s) and updates the data signatures.\n\nNew and old sparse feature sizes could look like this:\n{TEXT: {FEATURE_TYPE_SEQUENCE: [4, 24, 128], FEATURE_TYPE_SENTENCE: [4, 128]}}\n\nArguments:\n\ndata_example - a data example that is stored with the ML component.new_sparse_feature_sizes - sizes of current sparse features.old_sparse_feature_sizes - sizes of sparse features the model was\npreviously trained on.\n\ndot_product_loss_layer#\n\nCopy@propertydef dot_product_loss_layer() -> tf.keras.layers.Layer\n\nReturns the dot-product loss layer to use.\n\nReturns:\n\n  The loss layer that is used by _prepare_dot_product_loss.\n\nbatch_loss#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1527": {"text": "batch_loss#\n\nCopydef batch_loss(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> tf.Tensor\n\nCalculates the loss for the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The loss of the given batch.\n\nbatch_predict#\n\nCopydef batch_predict(    batch_in: Union[Tuple[tf.Tensor, ...], Tuple[np.ndarray, ...]]) -> Dict[Text, Union[tf.Tensor, Dict[Text, tf.Tensor]]]\n\nPredicts the output of the given batch.\n\nArguments:\n\nbatch_in - The batch.\n\nReturns:\n\n  The output to predict.\n\nPrevious\u00ab rasa.utils.tensorflow.model_data_utilsNextrasa.utils.tensorflow.numpy \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1528": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.numpy\n\nvalues_to_numpy#\n\nCopyvalues_to_numpy(data: Optional[Dict[Any, Any]]) -> Optional[Dict[Any, Any]]\n\nReplaces all tensorflow-tensor values with their numpy versions.\n\nArguments:\n\ndata - Any dictionary for which values should be converted.\n\nReturns:\n\n  A dictionary identical to data except that tensor values are\nreplaced by their corresponding numpy arrays.\n\nPrevious\u00ab rasa.utils.tensorflow.modelsNextrasa.utils.tensorflow.rasa_layers \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1529": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.rasa_layers\n\nRasaCustomLayer Objects#\n\nCopyclass RasaCustomLayer(tf.keras.layers.Layer)\n\nParent class for all classes in rasa_layers.py.\n\nAllows a shared implementation for adjusting DenseForSparse\nlayers during incremental training.\n\nDuring fine-tuning, sparse feature sizes might change due to addition of new data.\nIf this happens, we need to adjust our DenseForSparse layers to a new size.\nConcatenateSparseDenseFeatures, RasaSequenceLayer and\nRasaFeatureCombiningLayer all inherit from RasaCustomLayer and thus can\nchange their own DenseForSparse layers if it's needed.\n\nadjust_sparse_layers_for_incremental_training#\n\nCopydef adjust_sparse_layers_for_incremental_training(        new_sparse_feature_sizes: Dict[Text, Dict[Text, List[int]]],        old_sparse_feature_sizes: Dict[Text, Dict[Text, List[int]]],        reg_lambda: float) -> None\n\nFinds and adjusts DenseForSparse layers during incremental training.\n\nRecursively looks through the layers until it finds all the DenseForSparse\nones and adjusts those which have their sparse feature sizes increased.\n\nThis function heavily relies on the name of DenseForSparse layer being\nin the following format - f\"sparseto_dense.{attribute}{feature_type}\" -\nin order to correctly extract the attribute and feature type.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1530": {"text": "New and old sparse feature sizes could look like this:\n{TEXT: {FEATURE_TYPE_SEQUENCE: [4, 24, 128], FEATURE_TYPE_SENTENCE: [4, 128]}}\n\nArguments:\n\nnew_sparse_feature_sizes - sizes of current sparse features.old_sparse_feature_sizes - sizes of sparse features the model was\npreviously trained on.reg_lambda - regularization constant.\n\nConcatenateSparseDenseFeatures Objects#\n\nCopyclass ConcatenateSparseDenseFeatures(RasaCustomLayer)\n\nCombines multiple sparse and dense feature tensors into one dense tensor.\n\nThis layer combines features from various featurisers into a single feature array\nper input example. All features must be of the same feature type, i.e. sentence-\nlevel or sequence-level (token-level).\n\nThe layer combines a given list of tensors (whether sparse or dense) by:\n\nconverting sparse tensors into dense onesoptionally, applying dropout to sparse tensors before and/or after the conversionconcatenating all tensors along the last dimension\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1531": {"text": "Arguments:\n\nattribute - Name of attribute (e.g. text or label) whose features will be\nprocessed.feature_type - Feature type to be processed -- sequence or sentence.feature_type_signature - A list of signatures for the given attribute and feature\ntype.config - A model config for correctly parametrising the layer.Input shape:\nTuple containing one list of N-D tensors, each with shape: (batch_size, ...,\ninput_dim).\nAll dense tensors must have the same shape, except possibly the last dimension.\nAll sparse tensors must have the same shape, including the last dimension.Output shape:\nN-D tensor with shape: (batch_size, ..., units) where text0 is the sum of\nthe last dimension sizes across all input tensors, with sparse tensors instead\ncontributing text1 units each.\n\nRaises:\n\n  A text2 if no feature signatures are provided.\n\nAttributes:\n\ntext3 - The last dimension size of the layer's output.\n\n__init__#\n\nCopydef __init__(attribute: Text, feature_type: Text,             feature_type_signature: List[FeatureSignature],             config: Dict[Text, Any]) -> None\n\nCreates a new ConcatenateSparseDenseFeatures object.\n\ncall#\n\nCopydef call(inputs: Tuple[List[Union[tf.Tensor, tf.SparseTensor]]],         training: bool = False) -> tf.Tensor\n\nCombines sparse and dense feature tensors into one tensor.\n\nArguments:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1532": {"text": "Combines sparse and dense feature tensors into one tensor.\n\nArguments:\n\ninputs - Contains the input tensors, all of the same rank.training - A flag indicating whether the layer should behave in training mode\n(applying dropout to sparse tensors if applicable) or in inference mode\n(not applying dropout).\n\nReturns:\n\n  Single tensor with all input tensors combined along the last dimension.\n\nRasaFeatureCombiningLayer Objects#\n\nCopyclass RasaFeatureCombiningLayer(RasaCustomLayer)\n\nCombines multiple dense or sparse feature tensors into one.\n\nThis layer combines features by following these steps:\n\nApply a ConcatenateSparseDenseFeatures layer separately to sequence- and\nsentence-level features, yielding two tensors (one for each feature type).Concatenate the sequence- and sentence-level tensors along the sequence dimension\nby appending sentence-level features at the first available token position after\nthe sequence-level (token-level) features.\n\nArguments:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1533": {"text": "Arguments:\n\nattribute - Name of attribute (e.g. text or label) whose features will be\nprocessed.attribute_signature - A dictionary containing two lists of feature signatures,\none for each feature type (sequence or sentence) of the given attribute.config - A model config used for correctly parameterising the layer and the\nConcatenateSparseDenseFeatures layer it uses internally.Input shape:\nTuple of three input tensors:sequence_features - List of 3-D dense or sparse tensors, each with shape\nattribute0 where attribute1 can be\ndifferent for sparse vs dense tensors. See the input shape of\nConcatenateSparseDenseFeatures for more information.attribute3 - List of 3-D dense or sparse tensors, each with shape\nattribute4 where attribute1 can be different for\nsparse vs dense tensors, and can differ from that in\nsequence_features. See the input shape of\nConcatenateSparseDenseFeatures for more information.attribute8 - Dense tensor of shape attribute9.Output shape:text0 - A 3-D tensor with shape text1 where text2 is  completely  determined by the internally applied\nConcatenateSparseDenseFeatures layer and text4 is the combined\nlength of sequence- and sentence-level features: text5 if\nboth feature types are present, text6 if only sequence-level\nfeatures are present, and 1 if only sentence-level features are present).text7 - A 3-D tensor with shape\ntext8.\n\nRaises:\n\n  A text9 if no feature signatures are provided.\n\nAttributes:\n\nlabel0 - The last dimension size of the layer's text0 output.\n\n__init__#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1534": {"text": "__init__#\n\nCopydef __init__(attribute: Text,             attribute_signature: Dict[Text, List[FeatureSignature]],             config: Dict[Text, Any]) -> None\n\nCreates a new RasaFeatureCombiningLayer object.\n\ncall#\n\nCopydef call(inputs: Tuple[    List[Union[tf.Tensor, tf.SparseTensor]],    List[Union[tf.Tensor, tf.SparseTensor]],    tf.Tensor,],         training: bool = False) -> Tuple[tf.Tensor, tf.Tensor]\n\nCombines multiple 3-D dense/sparse feature tensors into one.\n\nArguments:\n\ninputs - Tuple containing:sequence_features - Dense or sparse tensors representing different\ntoken-level features.sentence_features - Dense or sparse tensors representing sentence-level\nfeatures.sequence_feature_lengths - A tensor containing the real sequence length\n(the number of real -- not padding -- tokens) for each example in\nthe batch.training - A flag indicating whether the layer should behave in training mode\n(applying dropout to sparse tensors if applicable) or in inference mode\n(not applying dropout).\n\nReturns:\n\n  combined features: A tensor containing all the features combined.\n\nmask_combined_sequence_sentence - A binary mask with 1s in place of real\nfeatures in the combined feature tensor, and 0s in padded positions with\nfake features.\n\nRasaSequenceLayer Objects#\n\nCopyclass RasaSequenceLayer(RasaCustomLayer)\n\nCreates an embedding from all features for a sequence attribute; facilitates MLM.", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1535": {"text": "Creates an embedding from all features for a sequence attribute; facilitates MLM.\n\nThis layer combines all features for an attribute and embeds them using a\ntransformer, optionally doing masked language modeling. The layer is meant only for\nattributes with sequence-level features, such as text, response and\naction_text.\n\nInternally, this layer applies the following steps:\n\nCombine features using RasaFeatureCombiningLayer.Apply a dense layer(s) to the combined features.Optionally, and only during training for the text attribute, apply masking to\nthe features and create further helper variables for masked language modeling.Embed the features using a transformer, effectively reducing variable-length\nsequences of features to fixed-size embeddings.\n\nArguments:", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1536": {"text": "attribute - Name of attribute (e.g. text or label) whose features will be\nprocessed.attribute_signature - A dictionary containing two lists of feature signatures,\none for each feature type (sentence or response0) of the given attribute.response1 - A model config used for correctly parameterising the underlying layers.Input shape:\nTuple of three input tensors:response2 - List of 3-D dense or sparse tensors, each with shape\nresponse3 where response4 can be\ndifferent for sparse vs dense tensors. See the input shape of\nresponse5 for more information.response6 - List of 3-D dense or sparse tensors, each with shape\nresponse7 where response4 can be different for\nsparse vs dense tensors, and can differ from that in\nresponse2. See the input shape of\nresponse5 for more information.action_text1 - Dense tensor of shape action_text2.Output shape:action_text3 - action_text4 where action_text5 matches the underlying\ntransformer's output size (if present), otherwise it matches the output size\nof the action_text6 block applied to the combined features, or it's the output\nsize of the underlying RasaFeatureCombiningLayer if the action_text6 block has 0\nlayers. action_text9 is the sum of the sequence dimension\nsizes of sequence- and sentence-level features (for details, see the output\nshape of RasaFeatureCombiningLayer). If both feature types are present,\nthen action_text9 will be 1 + the length of the longest sequence of real\ntokens across all examples in the given batch.RasaFeatureCombiningLayer2 - RasaFeatureCombiningLayer3, where RasaFeatureCombiningLayer4 is", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1537": {"text": "the output size of the underlying action_text6 block, or the output size of the\nunderlying RasaFeatureCombiningLayer if the action_text6 block has 0 layers.RasaFeatureCombiningLayer8 - RasaFeatureCombiningLayer9text0 - text1. text2 is 2 when no dense\nsequence-level features are present. Otherwise, it's arbitrarily chosen to\nmatch the last dimension size of the first dense sequence-level feature in\nthe input list of features.text3 - RasaFeatureCombiningLayer9, empty tensor if not doing MLM.text5 - text6, empty tensor if the transformer has 0 layers.", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1538": {"text": "Raises:\n\n  A text7 if no feature signatures for sequence-level features\nare provided.\n\nAttributes:\n\ntext8 - The last dimension size of the layer's first output (action_text3).\n\n__init__#\n\nCopydef __init__(attribute: Text,             attribute_signature: Dict[Text, List[FeatureSignature]],             config: Dict[Text, Any]) -> None\n\nCreates a new RasaSequenceLayer object.\n\ncall#\n\nCopydef call(    inputs: Tuple[        List[Union[tf.Tensor, tf.SparseTensor]],        List[Union[tf.Tensor, tf.SparseTensor]],        tf.Tensor, ],    training: bool = False) -> Tuple[tf.Tensor, tf.Tensor, tf.Tensor, tf.Tensor, tf.Tensor, tf.Tensor]\n\nCombines all of an attribute's features and embeds using a transformer.\n\nArguments:\n\ninputs - Tuple containing:sequence_features - Dense or sparse tensors representing different\ntoken-level features.sentence_features - Dense or sparse tensors representing different\nsentence-level features.sequence_feature_lengths - A tensor containing the real sequence length\n(the number of real -- not padding -- tokens) for each example in\nthe batch.training - A flag indicating whether the layer should behave in training mode\n(applying dropout to sparse tensors if applicable) or in inference mode\n(not applying dropout).\n\nReturns:", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1539": {"text": "Returns:\n\noutputs - Tensor with all features combined, masked (if doing MLM) and\nembedded with a transformer.seq_sent_features - Tensor with all features combined from just before the\nmasking and transformer is appliedmask_combined_sequence_sentence - A binary mask with 1s in place of real\nfeatures in the combined feature tensor, and 0s in padded positions with\nfake features.token_ids - Tensor with dense token-level features which can serve as\nIDs (unique embeddings) of all the different tokens found in the batch.\nEmpty tensor if not doing MLM.mlm_boolean_mask - A boolean mask with sequence_features0 where real tokens in outputs\nwere masked and sequence_features2 elsewhere. Empty tensor if not doing MLM.sequence_features3 - Tensor containing self-attention weights received\nfrom the underlying transformer. Empty tensor if the transformer has 0\nlayers.\n\ncompute_mask#\n\nCopydef compute_mask(sequence_lengths: tf.Tensor) -> tf.Tensor\n\nComputes binary mask given real sequence lengths.\n\nTakes a 1-D tensor of shape (batch_size,) containing the lengths of sequences\n(in terms of number of tokens) in the batch. Creates a binary mask of shape\n(batch_size, max_seq_length, 1) with 1s at positions with real tokens and 0s\nelsewhere.\n\nprepare_transformer_layer#", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1540": {"text": "prepare_transformer_layer#\n\nCopydef prepare_transformer_layer(    attribute_name: Text, config: Dict[Text, Any], num_layers: int, units: int,    drop_rate: float, unidirectional: bool) -> Union[        TransformerEncoder,        Callable[ [tf.Tensor, Optional[tf.Tensor], Optional[Union[tf.Tensor, bool]]],            Tuple[tf.Tensor, Optional[tf.Tensor]], ],]\n\nCreates & returns a transformer encoder, potentially with 0 layers.\n\nPrevious\u00ab rasa.utils.tensorflow.numpyNextrasa.utils.tensorflow.temp_keras_modules \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1541": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.temp_keras_modules\n\nTmpKerasModel Objects#\n\nCopyclass TmpKerasModel(Model)\n\nTemporary solution. Keras model that uses a custom data adapter inside fit.\n\nfit#\n\nCopy@traceback_utils.filter_tracebackdef fit(x: Optional[Union[np.ndarray, tf.Tensor, tf.data.Dataset,                          tf.keras.utils.Sequence]] = None,        y: Optional[Union[np.ndarray, tf.Tensor, tf.data.Dataset,                          tf.keras.utils.Sequence]] = None,        batch_size: Optional[int] = None,        epochs: int = 1,        verbose: int = 1,        callbacks: Optional[List[Callback]] = None,        validation_split: float = 0.0,        validation_data: Optional[Any] = None,        shuffle: bool = True,        class_weight: Optional[Dict[int, float]] = None,        sample_weight: Optional[np.ndarray] = None,        initial_epoch: int = 0,        steps_per_epoch: Optional[int] = None,        validation_steps: Optional[int] = None,        validation_batch_size: Optional[int] = None,        validation_freq: int = 1,        max_queue_size: int = 10,        workers: int = 1,        use_multiprocessing: bool = False) -> History\n\nTrains the model for a fixed number of epochs (iterations on a dataset).\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1542": {"text": "x - Input data. It could be:A Numpy array (or array-like), or a list of arrays\n(in case the model has multiple inputs).A TensorFlow tensor, or a list of tensors\n(in case the model has multiple inputs).A dict mapping input names to the corresponding array/tensors,\nif the model has named inputs.A tf.data dataset. Should return a tuple\nof either (inputs, targets) or\n(inputs, targets, sample_weights).A generator or keras.utils.Sequence returning (inputs, targets)\nor (inputs, targets, sample_weights).A tf.keras.utils.experimental.DatasetCreator, which wraps a\ncallable that takes a single argument of type\ntf.distribute.InputContext, and returns a tf.data.Dataset.\nDatasetCreator should be used when users prefer to specify the\nper-replica batching and sharding logic for the Dataset.\nSee tf.keras.utils.experimental.DatasetCreator doc for more\ninformation.\nA more detailed description of unpacking behavior for iterator types\n(Dataset, generator, Sequence) is given below. If using\ntf.distribute.experimental.ParameterServerStrategy, only\nDatasetCreator type is supported for x.y - Target data. Like the input data x,\nit could be either Numpy array(s) or TensorFlow tensor(s).\nIt should be consistent with x (you cannot have Numpy inputs and\ntensor targets, or inversely). If x is a dataset, generator,\nor keras.utils.Sequence instance, y should\nnot be specified (since targets will be obtained from x).batch_size - Integer or None.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1543": {"text": "Number of samples per gradient update.\nIf unspecified, batch_size will default to 32.\nDo not specify the batch_size if your data is in the\nform of datasets, generators, or keras.utils.Sequence instances\n(since they generate batches).epochs - Integer. Number of epochs to train the model.\nAn epoch is an iteration over the entire x and y\ndata provided\n(unless the steps_per_epoch flag is set to\nsomething other than None).\nNote that in conjunction with initial_epoch,\nepochs is to be understood as \"final epoch\".\nThe model is not trained for a number of iterations\ngiven by epochs, but merely until the epoch\nof index epochs is reached.verbose - 'auto', 0, 1, or 2. Verbosity mode.\n0 = silent, 1 = progress bar, 2 = one line per epoch.\n'auto' defaults to 1 for most cases, but 2 when used with\nParameterServerStrategy. Note that the progress bar is not\nparticularly useful when logged to a file, so verbose=2 is\nrecommended when not running interactively (eg, in a production\nenvironment).callbacks - List of keras.callbacks.Callback instances.\nList of callbacks to apply during training.\nSee tf.keras.callbacks. Note tf.keras.callbacks.ProgbarLogger\nand tf.keras.callbacks.History callbacks are created automatically\nand need not be passed into model.fit.\ntf.keras.callbacks.ProgbarLogger is created or not based on\nverbose argument to model.fit.\nCallbacks with batch-level calls are currently unsupported with\ntf.distribute.experimental.ParameterServerStrategy, and users are", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1544": {"text": "tf.distribute.experimental.ParameterServerStrategy, and users are\nadvised to implement epoch-level calls instead with an appropriate\nsteps_per_epoch value.validation_split - Float between 0 and 1.\nFraction of the training data to be used as validation data.\nThe model will set apart this fraction of the training data,\nwill not train on it, and will evaluate\nthe loss and any model metrics\non this data at the end of each epoch.\nThe validation data is selected from the last samples\nin the x and y data provided, before shuffling. This argument is\nnot supported when x is a dataset, generator or\nkeras.utils.Sequence instance.\nvalidation_split is not yet supported with\ntf.distribute.experimental.ParameterServerStrategy.validation_data - Data on which to evaluate\nthe loss and any model metrics at the end of each epoch.\nThe model will not be trained on this data. Thus, note the fact\nthat the validation loss of data provided using validation_split\nor validation_data is not affected by regularization layers like\nnoise and dropout.\nvalidation_data will override validation_split.\nvalidation_data could be:A tuple (x_val, y_val) of Numpy arrays or tensors.A tuple (x_val, y_val, val_sample_weights) of NumPy arrays.A tf.data.Dataset.A Python generator or keras.utils.Sequence returning\n(inputs, targets) or (inputs, targets, sample_weights).\nvalidation_data is not yet supported with\ntf.distribute.experimental.ParameterServerStrategy.shuffle - Boolean (whether to shuffle the training data\nbefore each epoch) or str (for 'batch'). This argument is ignored", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1545": {"text": "before each epoch) or str (for 'batch'). This argument is ignored\nwhen x is a generator or an object of tf.data.Dataset.\n'batch' is a special option for dealing\nwith the limitations of HDF5 data; it shuffles in batch-sized\nchunks. Has no effect when steps_per_epoch is not None.class_weight - Optional dictionary mapping class indices (integers)\nto a weight (float) value, used for weighting the loss function\n(during training only).\nThis can be useful to tell the model to\n\"pay more attention\" to samples from\nan under-represented class.sample_weight - Optional Numpy array of weights for\nthe training samples, used for weighting the loss function\n(during training only). You can either pass a flat (1D)\nNumpy array with the same length as the input samples\n(1:1 mapping between weights and samples),\nor in the case of temporal data,\nyou can pass a 2D array with shape\n(samples, sequence_length),\nto apply a different weight to every timestep of every sample. This\nargument is not supported when x is a dataset, generator, or\nkeras.utils.Sequence instance, instead provide the sample_weights\nas the third element of x.initial_epoch - Integer.\nEpoch at which to start training\n(useful for resuming a previous training run).steps_per_epoch - Integer or None.\nTotal number of steps (batches of samples)\nbefore declaring one epoch finished and starting the\nnext epoch. When training with input tensors such as\nTensorFlow data tensors, the default None is equal to\nthe number of samples in your dataset divided by\nthe batch size, or 1 if that cannot be determined. If x is a", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1546": {"text": "the batch size, or 1 if that cannot be determined. If x is a\ntf.data dataset, and 'steps_per_epoch'\nis None, the epoch will run until the input dataset is exhausted.\nWhen passing an infinitely repeating dataset, you must specify the\nsteps_per_epoch argument. If steps_per_epoch=-1 the training\nwill run indefinitely with an infinitely repeating dataset.\nThis argument is not supported with array inputs.\nWhen using tf.distribute.experimental.ParameterServerStrategy:steps_per_epoch=None is not supported.validation_steps - Only relevant if validation_data is provided and\nis a tf.data dataset. Total number of steps (batches of\nsamples) to draw before stopping when performing validation\nat the end of every epoch. If 'validation_steps' is None, validation\nwill run until the validation_data dataset is exhausted. In the\ncase of an infinitely repeated dataset, it will run into an\ninfinite loop. If 'validation_steps' is specified and only part of\nthe dataset will be consumed, the evaluation will start from the\nbeginning of the dataset at each epoch. This ensures that the same\nvalidation samples are used every time.validation_batch_size - Integer or None.\nNumber of samples per validation batch.\nIf unspecified, will default to batch_size.\nDo not specify the validation_batch_size if your data is in the\nform of datasets, generators, or keras.utils.Sequence instances\n(since they generate batches).validation_freq - Only relevant if validation data is provided. Integer\nor collections.abc.Container instance (e.g. list, tuple, etc.).\nIf an integer, specifies how many training epochs to run before a", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1547": {"text": "If an integer, specifies how many training epochs to run before a\nnew validation run is performed, e.g. validation_freq=2 runs\nvalidation every 2 epochs. If a Container, specifies the epochs on\nwhich to run validation, e.g. validation_freq=[1, 2, 10] runs\nvalidation at the end of the 1st, 2nd, and 10th epochs.max_queue_size - Integer. Used for generator or keras.utils.Sequence\ninput only. Maximum size for the generator queue.\nIf unspecified, max_queue_size will default to 10.workers - Integer. Used for generator or keras.utils.Sequence input\nonly. Maximum number of processes to spin up\nwhen using process-based threading. If unspecified, workers\nwill default to 1.use_multiprocessing - Boolean. Used for generator or\nkeras.utils.Sequence input only. If True, use process-based\nthreading. If unspecified, use_multiprocessing will default to\nFalse. Note that because this implementation relies on\nmultiprocessing, you should not pass non-picklable arguments to\nthe generator as they can't be passed easily to children processes.\nUnpacking behavior for iterator-like inputs:\nA common pattern is to pass a tf.data.Dataset, generator, or\ntf.keras.utils.Sequence to the x argument of fit, which will in fact\nyield not only features (x) but optionally targets (y) and sample weights.\nKeras requires that the output of such iterator-likes be unambiguous. The\niterator should return a tuple of length 1, 2, or 3, where the optional\nsecond and third elements will be used for y and sample_weight", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1548": {"text": "second and third elements will be used for y and sample_weight\nrespectively. Any other type provided will be wrapped in a length one\ntuple, effectively treating everything as 'x'. When yielding dicts, they\nshould still adhere to the top-level tuple structure.\ne.g. ({&quot;x0&quot;: x0, &quot;x1&quot;: x1}, y). Keras will not attempt to separate\nfeatures, targets, and weights from the keys of a single dict.\nA notable unsupported data type is the namedtuple. The reason is that\nit behaves like both an ordered datatype (tuple) and a mapping\ndatatype (dict). So given a namedtuple of the form:\nnamedtuple(&quot;example_tuple&quot;, [&quot;y&quot;, &quot;x&quot;])\nit is ambiguous whether to reverse the order of the elements when\ninterpreting the value. Even worse is a tuple of the form:\nnamedtuple(&quot;other_tuple&quot;, [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;])\nwhere it is unclear if the tuple was intended to be unpacked into x, y,\nand sample_weight or passed through as a single element to x. As a\nresult the data processing code will simply raise a ValueError if it\nencounters a namedtuple. (Along with instructions to remedy the issue.)", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1549": {"text": "Returns:\n\n  A History object. Its History.history attribute is\na record of training loss values and metrics values\nat successive epochs, as well as validation loss values\nand validation metrics values (if applicable).\n\nRaises:\n\nRuntimeError - 1. If the model was never compiled or,\n2. If model.fit is  wrapped in tf.function.ValueError - In case of mismatch between the provided input data\nand what the model expects or when the input data is empty.\n\nCustomDataHandler Objects#\n\nCopyclass CustomDataHandler(data_adapter.DataHandler)\n\nHandles iterating over epoch-level tf.data.Iterator objects.\n\nenumerate_epochs#\n\nCopydef enumerate_epochs() -> Generator[Tuple[int, Iterator], None, None]\n\nYields (epoch, tf.data.Iterator).\n\nPrevious\u00ab rasa.utils.tensorflow.rasa_layersNextrasa.utils.tensorflow.transformer \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1550": {"text": "Version: 3.x\n\nrasa.utils.tensorflow.transformer\n\nMultiHeadAttention Objects#\n\nCopyclass MultiHeadAttention(tf.keras.layers.Layer)\n\nMulti-headed attention layer.\n\nArguments:\n\nunits - Positive integer, output dim of hidden layer.num_heads - Positive integer, number of heads\nto repeat the same attention structure.attention_dropout_rate - Float, dropout rate inside attention for training.density - Approximate fraction of trainable weights (in\nRandomlyConnectedDense layers).unidirectional - Boolean, use a unidirectional or bidirectional encoder.use_key_relative_position - Boolean, if 'True' use key\nrelative embeddings in attention.use_value_relative_position - Boolean, if 'True' use value\nrelative embeddings in attention.max_relative_position - Positive integer, max position for relative embeddings.heads_share_relative_embedding - Boolean, if 'True'\nheads will share relative embeddings.\n\ncall#\n\nCopydef call(    query_input: tf.Tensor,    source_input: tf.Tensor,    pad_mask: Optional[tf.Tensor] = None,    training: Optional[Union[tf.Tensor, bool]] = None) -> Tuple[tf.Tensor, tf.Tensor]\n\nApply attention mechanism to query_input and source_input.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1551": {"text": "Apply attention mechanism to query_input and source_input.\n\nArguments:\n\nquery_input - A tensor with shape [batch_size, length, input_size].source_input - A tensor with shape [batch_size, length, input_size].pad_mask - Float tensor with shape broadcastable\nto (..., length, length). Defaults to None.training - A bool, whether in training mode or not.\n\nReturns:\n\n  Attention layer output with shape [batch_size, length, units]\n\nTransformerEncoderLayer Objects#\n\nCopyclass TransformerEncoderLayer(tf.keras.layers.Layer)\n\nTransformer encoder layer.\n\nThe layer is composed of the sublayers:\n\nSelf-attention layerFeed-forward network (which is 2 fully-connected layers)\n\nArguments:\n\nunits - Positive integer, output dim of hidden layer.num_heads - Positive integer, number of heads\nto repeat the same attention structure.filter_units - Positive integer, output dim of the first ffn hidden layer.dropout_rate - Float between 0 and 1; fraction of the input units to drop.attention_dropout_rate - Float, dropout rate inside attention for training.density - Fraction of trainable weights in RandomlyConnectedDense layers.unidirectional - Boolean, use a unidirectional or bidirectional encoder.use_key_relative_position - Boolean, if 'True' use key\nrelative embeddings in attention.use_value_relative_position - Boolean, if 'True' use value\nrelative embeddings in attention.num_heads0 - Positive integer, max position for relative embeddings.num_heads1 - Boolean, if 'True'\nheads will share relative embeddings.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1552": {"text": "call#\n\nCopydef call(    x: tf.Tensor,    pad_mask: Optional[tf.Tensor] = None,    training: Optional[Union[tf.Tensor, bool]] = None) -> Tuple[tf.Tensor, tf.Tensor]\n\nApply transformer encoder layer.\n\nArguments:\n\nx - A tensor with shape [batch_size, length, units].pad_mask - Float tensor with shape broadcastable\nto (..., length, length). Defaults to None.training - A bool, whether in training mode or not.\n\nReturns:\n\n  Transformer encoder layer output with shape [batch_size, length, units]\n\nTransformerEncoder Objects#\n\nCopyclass TransformerEncoder(tf.keras.layers.Layer)\n\nTransformer encoder.\n\nEncoder stack is made up of num_layers identical encoder layers.\n\nArguments:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1553": {"text": "Arguments:\n\nnum_layers - Positive integer, number of encoder layers.units - Positive integer, output dim of hidden layer.num_heads - Positive integer, number of heads\nto repeat the same attention structure.filter_units - Positive integer, output dim of the first ffn hidden layer.reg_lambda - Float, regularization factor.dropout_rate - Float between 0 and 1; fraction of the input units to drop.attention_dropout_rate - Float, dropout rate inside attention for training.density - Approximate fraction of trainable weights (in\nRandomlyConnectedDense layers).num_layers0 - Boolean, use a unidirectional or bidirectional encoder.num_layers1 - Boolean, if 'True' use key\nrelative embeddings in attention.num_layers2 - Boolean, if 'True' use value\nrelative embeddings in attention.num_layers3 - Positive integer, max position for relative embeddings.num_layers4 - Boolean, if 'True'\nheads will share relative embeddings.num_layers5 - Optional name of the layer.\n\ncall#\n\nCopydef call(    x: tf.Tensor,    pad_mask: Optional[tf.Tensor] = None,    training: Optional[Union[tf.Tensor, bool]] = None) -> Tuple[tf.Tensor, tf.Tensor]\n\nApply transformer encoder.\n\nArguments:\n\nx - A tensor with shape [batch_size, length, input_size].pad_mask - Float tensor with shape broadcastable\nto (..., length, length). Defaults to None.training - A bool, whether in training mode or not.\n\nReturns:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1554": {"text": "Returns:\n\n  Transformer encoder output with shape [batch_size, length, units]\n\nPrevious\u00ab rasa.utils.tensorflow.temp_keras_modulesNextrasa.utils.common \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1555": {"text": "Version: 3.x\n\nrasa.utils.common\n\nTempDirectoryPath Objects#\n\nCopyclass TempDirectoryPath(str, ContextManager)\n\nRepresents a path to an temporary directory.\n\nWhen used as a context manager, it erases the contents of the directory on exit.\n\nget_temp_dir_name#\n\nCopydef get_temp_dir_name() -> Text\n\nReturns the path name of a newly created temporary directory.\n\ndecode_bytes#\n\nCopydef decode_bytes(name: Union[Text, bytes]) -> Text\n\nConverts bytes object to string.\n\nread_global_config#\n\nCopydef read_global_config(path: Text) -> Dict[Text, Any]\n\nRead global Rasa configuration.\n\nArguments:\n\npath - Path to the configuration\n\nReturns:\n\n  The global configuration\n\nconfigure_logging_from_file#\n\nCopydef configure_logging_from_file(logging_config_file: Text) -> None\n\nParses YAML file content to configure logging.\n\nArguments:\n\nlogging_config_file - YAML file containing logging configuration to handle\ncustom formatting\n\nconfigure_logging_and_warnings#\n\nCopydef configure_logging_and_warnings(log_level: Optional[int] = None,                                   logging_config_file: Optional[Text] = None,                                   warn_only_once: bool = True,                                   filter_repeated_logs: bool = True) -> None\n\nSets log levels of various loggers and sets up filters for warnings and logs.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1556": {"text": "Arguments:\n\nlog_level - The log level to be used for the 'Rasa' logger. Pass None to use\neither the environment variable 'LOG_LEVEL' if it is specified, or the\ndefault log level otherwise.logging_config_file - YAML file containing logging configuration to handle\ncustom formattingwarn_only_once - determines whether user warnings should be filtered by the\nwarnings module to appear only \"once\"filter_repeated_logs - determines whether RepeatedLogFilters are added to\nthe handlers of the root logger\n\nconfigure_library_logging#\n\nCopydef configure_library_logging() -> None\n\nConfigures log levels of used libraries such as kafka, matplotlib, pika.\n\nupdate_apscheduler_log_level#\n\nCopydef update_apscheduler_log_level() -> None\n\nConfigures the log level of apscheduler.* loggers.\n\nupdate_socketio_log_level#\n\nCopydef update_socketio_log_level() -> None\n\nSet the log level of socketio.\n\nupdate_tensorflow_log_level#\n\nCopydef update_tensorflow_log_level() -> None\n\nSets Tensorflow log level based on env variable 'LOG_LEVEL_LIBRARIES'.\n\nupdate_sanic_log_level#\n\nCopydef update_sanic_log_level(log_file: Optional[Text] = None,                           use_syslog: Optional[bool] = False,                           syslog_address: Optional[Text] = None,                           syslog_port: Optional[int] = None,                           syslog_protocol: Optional[Text] = None) -> None", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1557": {"text": "Set the log level to 'LOG_LEVEL_LIBRARIES' environment variable .\n\nupdate_asyncio_log_level#\n\nCopydef update_asyncio_log_level() -> None\n\nSet the log level of asyncio to the log level.\n\nUses the log level specified in the environment variable 'LOG_LEVEL_LIBRARIES'.\n\nupdate_matplotlib_log_level#\n\nCopydef update_matplotlib_log_level(library_log_level: Text) -> None\n\nSet the log level of matplotlib.\n\nUses the library specific log level or the general libraries log level.\n\nupdate_kafka_log_level#\n\nCopydef update_kafka_log_level(library_log_level: Text) -> None\n\nSet the log level of kafka.\n\nUses the library specific log level or the general libraries log level.\n\nupdate_rabbitmq_log_level#\n\nCopydef update_rabbitmq_log_level(library_log_level: Text) -> None\n\nSet the log level of pika.\n\nUses the library specific log level or the general libraries log level.\n\nsort_list_of_dicts_by_first_key#\n\nCopydef sort_list_of_dicts_by_first_key(dicts: List[Dict]) -> List[Dict]\n\nSorts a list of dictionaries by their first key.\n\nwrite_global_config_value#\n\nCopydef write_global_config_value(name: Text, value: Any) -> bool\n\nRead global Rasa configuration.\n\nArguments:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1558": {"text": "Read global Rasa configuration.\n\nArguments:\n\nname - Name of the configuration keyvalue - Value the configuration key should be set to\n\nReturns:\n\n True if the operation was successful.\n\nread_global_config_value#\n\nCopydef read_global_config_value(name: Text, unavailable_ok: bool = True) -> Any\n\nRead a value from the global Rasa configuration.\n\nupdate_existing_keys#\n\nCopydef update_existing_keys(original: Dict[Any, Any],                         updates: Dict[Any, Any]) -> Dict[Any, Any]\n\nIterate through all the updates and update a value in the original dictionary.\n\nIf the updates contain a key that is not present in the original dict, it will\nbe ignored.\n\noverride_defaults#\n\nCopydef override_defaults(defaults: Optional[Dict[Text, Any]],                      custom: Optional[Dict[Text, Any]]) -> Dict[Text, Any]\n\nOverride default config with the given config.\n\nWe cannot use dict.update method because configs contain nested dicts.\n\nArguments:\n\ndefaults - default configcustom - user config containing new parameters\n\nReturns:\n\n  updated config\n\nRepeatedLogFilter Objects#\n\nCopyclass RepeatedLogFilter(logging.Filter)\n\nFilter repeated log records.\n\nfilter#\n\nCopydef filter(record: logging.LogRecord) -> bool\n\nDetermines whether current log is different to last log.\n\ncall_potential_coroutine#\n\nCopyasync def call_potential_coroutine(        coroutine_or_return_value: Union[Any, Coroutine]) -> Any", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1559": {"text": "Awaits coroutine or returns value directly if it's not a coroutine.\n\nArguments:\n\ncoroutine_or_return_value - Either the return value of a synchronous function\ncall or a coroutine which needs to be await first.\n\nReturns:\n\n  The return value of the function.\n\ndirectory_size_in_mb#\n\nCopydef directory_size_in_mb(        path: Path,        filenames_to_exclude: Optional[List[Text]] = None) -> float\n\nCalculates the size of a directory.\n\nArguments:\n\npath - The path to the directory.filenames_to_exclude - Allows excluding certain files from the calculation.\n\nReturns:\n\n  Directory size in MiB.\n\ncopy_directory#\n\nCopydef copy_directory(source: Path, destination: Path) -> None\n\nCopies the content of one directory into another.\n\nArguments:\n\nsource - The directory whose contents should be copied to destination.destination - The directory which should contain the content source in the end.\n\nRaises:\n\nValueError - If destination is not empty.\n\nfind_unavailable_packages#\n\nCopydef find_unavailable_packages(package_names: List[Text]) -> Set[Text]\n\nTries to import all package names and returns the packages where it failed.\n\nArguments:\n\npackage_names - The package names to import.\n\nReturns:\n\n  Package names that could not be imported.\n\nmodule_path_from_class#\n\nCopydef module_path_from_class(clazz: Type) -> Text\n\nReturn the module path of an instance's class.\n\nget_bool_env_variable#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1560": {"text": "get_bool_env_variable#\n\nCopydef get_bool_env_variable(variable_name: str,                          default_variable_value: bool) -> bool\n\nFetch bool value stored in environment variable.\n\nIf environment variable is set but value is\nnot of boolean nature, an exception will be raised.\n\nArgs: variable_name:\nName of the environment variable.\ndefault_variable_value: Value to be returned if environment variable is not set.\n\nReturns:\n\n  A boolean value stored in the environment variable\nor default value if environment variable is not set.\n\nPrevious\u00ab rasa.utils.tensorflow.transformerNextrasa.utils.converter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1561": {"text": "Version: 3.x\n\nrasa.utils.converter\n\nTrainingDataConverter Objects#\n\nCopyclass TrainingDataConverter()\n\nInterface for any training data format conversion.\n\nfilter#\n\nCopy@classmethoddef filter(cls, source_path: Path) -> bool\n\nChecks if the concrete implementation of TrainingDataConverter can convert\ntraining data file.\n\nArguments:\n\nsource_path - Path to the training data file.\n\nReturns:\n\n True if the given file can be converted, False otherwise\n\nconvert_and_write#\n\nCopy@classmethodasync def convert_and_write(cls, source_path: Path, output_path: Path) -> None\n\nConverts the given training data file and saves it to the output directory.\n\nArguments:\n\nsource_path - Path to the training data file.output_path - Path to the output directory.\n\ngenerate_path_for_converted_training_data_file#\n\nCopy@classmethoddef generate_path_for_converted_training_data_file(        cls, source_file_path: Path, output_directory: Path) -> Path\n\nGenerates path for a training data file converted to YAML format.\n\nArguments:\n\nsource_file_path - Path to the original file.output_directory - Path to the target directory.\n\nReturns:\n\n  Path to the target converted training data file.\n\nconverted_file_suffix#\n\nCopy@classmethoddef converted_file_suffix(cls) -> Text\n\nReturns suffix that should be appended to the converted\ntraining data file.\n\nPrevious\u00ab rasa.utils.commonNextrasa.utils.endpoints \u00bb", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1562": {"text": "Previous\u00ab rasa.utils.commonNextrasa.utils.endpoints \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1563": {"text": "Version: 3.x\n\nrasa.utils.endpoints\n\nread_endpoint_config#\n\nCopydef read_endpoint_config(filename: Text,                         endpoint_type: Text) -> Optional[\"EndpointConfig\"]\n\nRead an endpoint configuration file from disk and extract one\n\nconfig.\n\nconcat_url#\n\nCopydef concat_url(base: Text, subpath: Optional[Text]) -> Text\n\nAppend a subpath to a base url.\n\nStrips leading slashes from the subpath if necessary. This behaves\ndifferently than urlparse.urljoin and will not treat the subpath\nas a base url if it starts with / but will always append it to the\nbase.\n\nArguments:\n\nbase - Base URL.subpath - Optional path to append to the base URL.\n\nReturns:\n\n  Concatenated URL with base and subpath.\n\nEndpointConfig Objects#\n\nCopyclass EndpointConfig()\n\nConfiguration for an external HTTP endpoint.\n\n__init__#\n\nCopydef __init__(url: Optional[Text] = None,             params: Optional[Dict[Text, Any]] = None,             headers: Optional[Dict[Text, Any]] = None,             basic_auth: Optional[Dict[Text, Text]] = None,             token: Optional[Text] = None,             token_name: Text = \"token\",             cafile: Optional[Text] = None, **kwargs: Any) -> None\n\nCreates an EndpointConfig instance.\n\nsession#\n\nCopydef session() -> aiohttp.ClientSession\n\nCreates and returns a configured aiohttp client session.\n\nrequest#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1564": {"text": "Creates and returns a configured aiohttp client session.\n\nrequest#\n\nCopyasync def request(method: Text = \"post\",                  subpath: Optional[Text] = None,                  content_type: Optional[Text] = \"application/json\",                  compress: bool = False, **kwargs: Any) -> Optional[Any]\n\nSend a HTTP request to the endpoint. Return json response, if available.\n\nAll additional arguments will get passed through\nto aiohttp's session.request.\n\nbool_arg#\n\nCopydef bool_arg(request: Request, name: Text, default: bool = True) -> bool\n\nReturns a passed boolean argument of the request or a default.\n\nChecks the name parameter of the request if it contains a valid\nboolean value. If not, default is returned.\n\nArguments:\n\nrequest - Sanic request.name - Name of argument.default - Default value for name argument.\n\nReturns:\n\n  A bool value if name is a valid boolean, default otherwise.\n\nfloat_arg#\n\nCopydef float_arg(request: Request,              key: Text,              default: Optional[float] = None) -> Optional[float]\n\nReturns a passed argument cast as a float or None.\n\nChecks the key parameter of the request if it contains a valid\nfloat value. If not, default is returned.\n\nArguments:\n\nrequest - Sanic request.key - Name of argument.default - Default value for key argument.\n\nReturns:\n\n  A float value if key is a valid float, default otherwise.\n\nint_arg#\n\nCopydef int_arg(request: Request,            key: Text,            default: Optional[int] = None) -> Optional[int]", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1565": {"text": "Returns a passed argument cast as an int or None.\n\nChecks the key parameter of the request if it contains a valid\nint value. If not, default is returned.\n\nArguments:\n\nrequest - Sanic request.key - Name of argument.default - Default value for key argument.\n\nReturns:\n\n  An int value if key is a valid integer, default otherwise.\n\nPrevious\u00ab rasa.utils.converterNextrasa.utils.features \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1566": {"text": "Version: 3.x\n\nrasa.utils.features\n\nFeatures Objects#\n\nCopyclass Features()\n\nStores the features produces by any featurizer.\n\nis_sparse#\n\nCopy | is_sparse() -> bool\n\nChecks if features are sparse or not.\n\nReturns:\n\n  True, if features are sparse, false otherwise.\n\nis_dense#\n\nCopy | is_dense() -> bool\n\nChecks if features are dense or not.\n\nReturns:\n\n  True, if features are dense, false otherwise.\n\ncombine_with_features#\n\nCopy | combine_with_features(additional_features: Optional[\"Features\"]) -> None\n\nCombine the incoming features with this instance's features.\n\nArguments:\n\nadditional_features - additional features to add\n\nReturns:\n\n  Combined features.\n\nPrevious\u00ab rasa.utils.endpointsNextrasa.utils.io \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1567": {"text": "Version: 3.x\n\nrasa.utils.io\n\nWriteRow Objects#\n\nCopyclass WriteRow(Protocol)\n\nDescribes a csv writer supporting a writerow method (workaround for typing).\n\nwriterow#\n\nCopydef writerow(row: List[Text]) -> None\n\nWrite the given row.\n\nArguments:\n\nrow - the entries of a row as a list of strings\n\nconfigure_colored_logging#\n\nCopydef configure_colored_logging(loglevel: Text) -> None\n\nConfigures coloredlogs library for specified loglevel.\n\nArguments:\n\nloglevel - The loglevel to configure the library for\n\nenable_async_loop_debugging#\n\nCopydef enable_async_loop_debugging(        event_loop: AbstractEventLoop,        slow_callback_duration: float = 0.1) -> AbstractEventLoop\n\nEnables debugging on an event loop.\n\nArguments:\n\nevent_loop - The event loop to enable debugging onslow_callback_duration - The threshold at which a callback should be\nalerted as slow.\n\npickle_dump#\n\nCopydef pickle_dump(filename: Union[Text, Path], obj: Any) -> None\n\nSaves object to file.\n\nArguments:\n\nfilename - the filename to save the object toobj - the object to store\n\npickle_load#\n\nCopydef pickle_load(filename: Union[Text, Path]) -> Any\n\nLoads an object from a file.\n\nArguments:\n\nfilename - the filename to load the object fromReturns - the loaded object\n\ncreate_temporary_file#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1568": {"text": "create_temporary_file#\n\nCopydef create_temporary_file(data: Any,                          suffix: Text = \"\",                          mode: Text = \"w+\") -> Text\n\nCreates a tempfile.NamedTemporaryFile object for data.\n\ncreate_temporary_directory#\n\nCopydef create_temporary_directory() -> Text\n\nCreates a tempfile.TemporaryDirectory.\n\ncreate_path#\n\nCopydef create_path(file_path: Text) -> None\n\nMakes sure all directories in the 'file_path' exists.\n\nfile_type_validator#\n\nCopydef file_type_validator(valid_file_types: List[Text],                        error_message: Text) -> Type[\"Validator\"]\n\nCreates a Validator class which can be used with questionary to validate\nfile paths.\n\nnot_empty_validator#\n\nCopydef not_empty_validator(error_message: Text) -> Type[\"Validator\"]\n\nCreates a Validator class which can be used with questionary to validate\nthat the user entered something other than whitespace.\n\ncreate_validator#\n\nCopydef create_validator(function: Callable[[Text], bool],                     error_message: Text) -> Type[\"Validator\"]\n\nHelper method to create Validator classes from callable functions. Should be\nremoved when questionary supports Validator objects.\n\njson_unpickle#\n\nCopydef json_unpickle(file_name: Union[Text, Path],                  encode_non_string_keys: bool = False) -> Any\n\nUnpickle an object from file using json.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1569": {"text": "Unpickle an object from file using json.\n\nArguments:\n\nfile_name - the file to load the object fromencode_non_string_keys - If set to True then jsonpickle will encode non-string\ndictionary keys instead of coercing them into strings via repr().Returns - the object\n\njson_pickle#\n\nCopydef json_pickle(file_name: Union[Text, Path],                obj: Any,                encode_non_string_keys: bool = False) -> None\n\nPickle an object to a file using json.\n\nArguments:\n\nfile_name - the file to store the object toobj - the object to storeencode_non_string_keys - If set to True then jsonpickle will encode non-string\ndictionary keys instead of coercing them into strings via repr().\n\nget_emoji_regex#\n\nCopydef get_emoji_regex() -> Pattern\n\nReturns regex to identify emojis.\n\nare_directories_equal#\n\nCopydef are_directories_equal(dir1: Path, dir2: Path) -> bool\n\nCompares two directories recursively.\n\nFiles in each directory are\nassumed to be equal if their names and contents are equal.\n\nArguments:\n\ndir1 - The first directory.dir2 - The second directory.\n\nReturns:\n\n True if they are equal, False otherwise.\n\nPrevious\u00ab rasa.utils.featuresNextrasa.utils.plotting \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1570": {"text": "Version: 3.x\n\nrasa.utils.plotting\n\nplot_confusion_matrix#\n\nCopy@_needs_matplotlib_backenddef plot_confusion_matrix(confusion_matrix: np.ndarray,                          classes: Union[np.ndarray, List[Text]],                          normalize: bool = False,                          title: Text = \"Confusion matrix\",                          color_map: Any = None,                          zmin: int = 1,                          output_file: Optional[Text] = None) -> None\n\nPrint and plot the provided confusion matrix.\nNormalization can be applied by setting normalize=True.\n\nArguments:\n\nconfusion_matrix - confusion matrix to plotclasses - class labelsnormalize - If set to true, normalization will be applied.title - title of the plotcolor_map - color mapping\nzmin:output_file - output file to save plot to\n\nplot_paired_histogram#\n\nCopy@_needs_matplotlib_backenddef plot_paired_histogram(histogram_data: List[List[float]],                          title: Text,                          output_file: Optional[Text] = None,                          num_bins: int = 25,                          colors: Tuple[Text, Text] = (\"#009292\", \"#920000\"),                          axes_label: Tuple[Text, Text] = (\"Correct\", \"Wrong\"),                          frame_label: Tuple[Text,                                             Text] = (\"Number of Samples\", \"Confidence\"),                          density: bool = False,                          x_pad_fraction: float = 0.05,                          y_pad_fraction: float = 0.10) -> None\n\nPlots a side-by-side comparative histogram of the confidence distribution.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1571": {"text": "Plots a side-by-side comparative histogram of the confidence distribution.\n\nArguments:\n\nhistogram_data - Two data vectorstitle - Title to be displayed above the plotoutput_file - File to save the plot tonum_bins - Number of bins to be used for the histogramcolors - Left and right bar colors as hex color stringsaxes_label - Labels shown above the left and right histogram,\nrespectivelyframe_label - Labels shown below and on the left of the\nhistogram, respectivelydensity - If true, generate a probability density histogramx_pad_fraction - Percentage of extra space in the horizontal directiony_pad_fraction - Percentage of extra space in the vertical direction\n\nplot_curve#\n\nCopy@_needs_matplotlib_backenddef plot_curve(output_directory: Text, number_of_examples: List[int],               x_label_text: Text, y_label_text: Text,               graph_path: Text) -> None\n\nPlot the results from a model comparison.\n\nArguments:\n\noutput_directory - Output directory to save resulting plots tonumber_of_examples - Number of examples per runx_label_text - text for the x axisy_label_text - text for the y axisgraph_path - output path of the plot\n\nPrevious\u00ab rasa.utils.ioNextrasa.utils.pykwalify_extensions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1572": {"text": "Version: 3.x\n\nrasa.utils.pykwalify_extensions\n\nThis module regroups custom validation functions, and it is\nloaded as an extension of the pykwalify library:\n\nhttps://pykwalify.readthedocs.io/en/latest/extensions.html#extensions\n\nrequire_response_keys#\n\nCopyrequire_response_keys(responses: List[Dict[Text, Any]], rule_obj: Dict, path: Text) -> bool\n\nValidate that response dicts have either the \"text\" key or the \"custom\" key.\n\nPrevious\u00ab rasa.utils.plottingNextrasa.utils.train_utils \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1573": {"text": "Version: 3.x\n\nrasa.utils.train_utils\n\nrank_and_mask#\n\nCopydef rank_and_mask(confidences: np.ndarray,                  ranking_length: int = 0,                  renormalize: bool = False) -> Tuple[np.ndarray, np.ndarray]\n\nComputes a ranking of the given confidences.\n\nFirst, it computes a list containing the indices that would sort all the given\nconfidences in decreasing order.\nIf a ranking_length is specified, then only the indices for the ranking_length\nlargest confidences will be returned and all other confidences (i.e. whose indices\nwe do not return) will be masked by setting them to 0.\nMoreover, if renormalize is set to True, then the confidences will\nadditionally be renormalised by dividing them by their sum.\n\nWe assume that the given confidences sum up to 1 and, if the\nranking_length is 0 or larger than the given number of confidences,\nwe set the ranking_length to the number of confidences.\nHence, in this case the confidences won't be modified.\n\nArguments:\n\nconfidences - a 1-d array of confidences that are non-negative and sum up to 1ranking_length - the size of the ranking to be computed. If set to 0 or\nsomething larger than the number of given confidences, then this is set\nto the exact number of given confidences.renormalize - determines whether the masked confidences should be renormalised.\nreturn_indices:\n\nReturns:\n\n  indices of the top ranking_length confidences and an array of the same\nshape as the given confidences that contains the possibly masked and\nrenormalized confidence values\n\nupdate_similarity_type#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1574": {"text": "update_similarity_type#\n\nCopydef update_similarity_type(config: Dict[Text, Any]) -> Dict[Text, Any]\n\nIf SIMILARITY_TYPE is set to 'auto', update the SIMILARITY_TYPE depending\non the LOSS_TYPE.\n\nArguments:\n\nconfig - model configurationReturns - updated model configuration\n\nalign_token_features#\n\nCopydef align_token_features(list_of_tokens: List[List[\"Token\"]],                         in_token_features: np.ndarray,                         shape: Optional[Tuple] = None) -> np.ndarray\n\nAlign token features to match tokens.\n\nConveRTFeaturizer and LanguageModelFeaturizer might split up tokens into sub-tokens.\nWe need to take the mean of the sub-token vectors and take that as token vector.\n\nArguments:\n\nlist_of_tokens - tokens for examplesin_token_features - token features from ConveRTshape - shape of feature matrix\n\nReturns:\n\n  Token features.\n\nupdate_evaluation_parameters#\n\nCopydef update_evaluation_parameters(config: Dict[Text, Any]) -> Dict[Text, Any]\n\nIf EVAL_NUM_EPOCHS is set to -1, evaluate at the end of the training.\n\nArguments:\n\nconfig - model configurationReturns - updated model configuration\n\nload_tf_hub_model#\n\nCopydef load_tf_hub_model(model_url: Text) -> Any\n\nLoad model from cache if possible, otherwise from TFHub.\n\ncheck_deprecated_options#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1575": {"text": "check_deprecated_options#\n\nCopydef check_deprecated_options(config: Dict[Text, Any]) -> Dict[Text, Any]\n\nUpdate the config according to changed config params.\n\nIf old model configuration parameters are present in the provided config, replace\nthem with the new parameters and log a warning.\n\nArguments:\n\nconfig - model configurationReturns - updated model configuration\n\ncheck_core_deprecated_options#\n\nCopydef check_core_deprecated_options(config: Dict[Text, Any]) -> Dict[Text, Any]\n\nUpdate the core config according to changed config params.\n\nIf old model configuration parameters are present in the provided config, replace\nthem with the new parameters and log a warning.\n\nArguments:\n\nconfig - model configurationReturns - updated model configuration\n\nentity_label_to_tags#\n\nCopydef entity_label_to_tags(    model_predictions: Dict[Text, Any],    entity_tag_specs: List[\"EntityTagSpec\"],    bilou_flag: bool = False,    prediction_index: int = 0) -> Tuple[Dict[Text, List[Text]], Dict[Text, List[float]]]\n\nConvert the output predictions for entities to the actual entity tags.\n\nArguments:\n\nmodel_predictions - the output predictions using the entity tag indicesentity_tag_specs - the entity tag specificationsbilou_flag - if 'True', the BILOU tagging schema was usedprediction_index - the index in the batch of predictions\nto use for entity extraction\n\nReturns:\n\n  A map of entity tag type, e.g. entity, role, group, to actual entity tags and\nconfidences.\n\ncreate_data_generators#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1576": {"text": "create_data_generators#\n\nCopydef create_data_generators(    model_data: RasaModelData,    batch_sizes: Union[int, List[int]],    epochs: int,    batch_strategy: Text = SEQUENCE,    eval_num_examples: int = 0,    random_seed: Optional[int] = None,    shuffle: bool = True) -> Tuple[RasaBatchDataGenerator, Optional[RasaBatchDataGenerator]]\n\nCreate data generators for train and optional validation data.\n\nArguments:\n\nmodel_data - The model data to use.batch_sizes - The batch size(s).epochs - The number of epochs to train.batch_strategy - The batch strategy to use.eval_num_examples - Number of examples to use for validation data.random_seed - The random seed.shuffle - Whether to shuffle data inside the data generator.\n\nReturns:\n\n  The training data generator and optional validation data generator.\n\ncreate_common_callbacks#\n\nCopydef create_common_callbacks(        epochs: int,        tensorboard_log_dir: Optional[Text] = None,        tensorboard_log_level: Optional[Text] = None,        checkpoint_dir: Optional[Path] = None) -> List[\"Callback\"]\n\nCreate common callbacks.\n\nThe following callbacks are created:\n\nRasaTrainingLogger callbackOptional TensorBoard callbackOptional RasaModelCheckpoint callback\n\nArguments:", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1577": {"text": "Arguments:\n\nepochs - the number of epochs to traintensorboard_log_dir - optional directory that should be used for tensorboardtensorboard_log_level - defines when training metrics for tensorboard should be\nlogged. Valid values: 'epoch' and 'batch'.checkpoint_dir - optional directory that should be used for model checkpointing\n\nReturns:\n\n  A list of callbacks.\n\nupdate_confidence_type#\n\nCopydef update_confidence_type(        component_config: Dict[Text, Any]) -> Dict[Text, Any]\n\nSet model confidence to auto if margin loss is used.\n\nOption auto is reserved for margin loss type. It will be removed once margin loss\nis deprecated.\n\nArguments:\n\ncomponent_config - model configuration\n\nReturns:\n\n  updated model configuration\n\nvalidate_configuration_settings#\n\nCopydef validate_configuration_settings(component_config: Dict[Text, Any]) -> None\n\nValidates that combination of parameters in the configuration are correctly set.\n\nArguments:\n\ncomponent_config - Configuration to validate.\n\ninit_split_entities#\n\nCopydef init_split_entities(split_entities_config: Union[bool, Dict[Text, Any]],                        default_split_entity: bool) -> Dict[Text, bool]\n\nInitialise the behaviour for splitting entities by comma (or not).\n\nReturns:\n\n  Defines desired behaviour for splitting specific entity types and\ndefault behaviour for splitting any entity types for which no behaviour\nis defined.\n\nPrevious\u00ab rasa.utils.pykwalify_extensionsNextrasa.utils.validation \u00bb\n\nLast updated on 7/11/2023 by GitHub CI", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1578": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1579": {"text": "Version: 3.x\n\nrasa.utils.validation\n\nInvalidYamlFileError Objects#\n\nCopyclass InvalidYamlFileError(ValueError)\n\nRaised if an invalid yaml file was provided.\n\nvalidate_yaml_schema#\n\nCopyvalidate_yaml_schema(yaml_file_content: Text, schema_path: Text, show_validation_errors: bool = True) -> None\n\nValidate yaml content.\n\nArguments:\n\nyaml_file_content - the content of the yaml file to be validatedschema_path - the schema of the yaml fileshow_validation_errors - if true, validation errors are shown\n\nvalidate_training_data#\n\nCopyvalidate_training_data(json_data: Dict[Text, Any], schema: Dict[Text, Any]) -> None\n\nValidate rasa training data format to ensure proper training.\n\nArguments:\n\njson_data - the data to validateschema - the schema\n\nRaises:\n\n  ValidationError if validation fails.\n\nPrevious\u00ab rasa.utils.train_utilsNextrasa.__main__ \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1580": {"text": "Version: 3.x\n\nrasa.__main__\n\ncreate_argument_parser#\n\nCopydef create_argument_parser() -> argparse.ArgumentParser\n\nParse all the command line arguments for the training script.\n\nprint_version#\n\nCopydef print_version() -> None\n\nPrints version information of rasa tooling and python.\n\nmain#\n\nCopydef main() -> None\n\nRun as standalone python application.\n\nPrevious\u00ab rasa.utils.validationNextrasa.api \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1581": {"text": "Version: 3.x\n\nrasa.api\n\nrun#\n\nCopydef run(model: \"Text\",        endpoints: \"Text\",        connector: \"Text\" = None,        credentials: \"Text\" = None, **kwargs: \"Dict[Text, Any]\") -> None\n\nRuns a Rasa model.\n\nArguments:\n\nmodel - Path to model archive.endpoints - Path to endpoints file.connector - Connector which should be use (overwrites credentials\nfield).credentials - Path to channel credentials file.**kwargs - Additional arguments which are passed to\nrasa.core.run.serve_application.\n\ntrain#\n\nCopydef train(domain: \"Text\",          config: \"Text\",          training_files: \"Union[Text, List[Text]]\",          output: \"Text\" = rasa.shared.constants.DEFAULT_MODELS_PATH,          dry_run: bool = False,          force_training: bool = False,          fixed_model_name: \"Optional[Text]\" = None,          persist_nlu_training_data: bool = False,          core_additional_arguments: \"Optional[Dict]\" = None,          nlu_additional_arguments: \"Optional[Dict]\" = None,          model_to_finetune: \"Optional[Text]\" = None,          finetuning_epoch_fraction: float = 1.0) -> \"TrainingResult\"\n\nRuns Rasa Core and NLU training in async loop.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1582": {"text": "Runs Rasa Core and NLU training in async loop.\n\nArguments:\n\ndomain - Path to the domain file.config - Path to the config for Core and NLU.training_files - Paths to the training data for Core and NLU.output - Output path.dry_run - If True then no training will be done, and the information about\nwhether the training needs to be done will be printed.force_training - If True retrain model even if data has not changed.fixed_model_name - Name of model to be stored.domain0 - True if the NLU training data should be persisted\nwith the model.domain2 - Additional training parameters for core training.domain3 - Additional training parameters forwarded to training\nmethod of each NLU component.domain4 - Optional path to a model which should be finetuned or\na directory in case the latest trained model should be used.domain5 - The fraction currently specified training epochs\nin the model configuration which should be used for finetuning.\n\nReturns:\n\n  An instance of domain6.\n\ntest#\n\nCopydef test(model: \"Text\",         stories: \"Text\",         nlu_data: \"Text\",         output: \"Text\" = rasa.shared.constants.DEFAULT_RESULTS_PATH,         additional_arguments: \"Optional[Dict]\" = None) -> None\n\nTest a Rasa model against a set of test data.\n\nArguments:\n\nmodel - model to teststories - path to the dialogue test datanlu_data - path to the NLU test dataoutput - path to folder where all output will be storedadditional_arguments - additional arguments for the test call\n\nPrevious\u00ab rasa.__main__Nextrasa.data \u00bb\n\nLast updated on 7/11/2023 by GitHub CI", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1583": {"text": "Last updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1584": {"text": "Version: 3.x\n\nrasa.data\n\nget_test_directory#\n\nCopyget_test_directory(paths: Optional[Union[Text, List[Text]]]) -> Text\n\nRecursively collects all Core training files from a list of paths.\n\nArguments:\n\npaths - List of paths to training files or folders containing them.\n\nReturns:\n\n  Path to temporary directory containing all found Core training files.\n\nget_core_directory#\n\nCopyget_core_directory(paths: Optional[Union[Text, List[Text]]]) -> Text\n\nRecursively collects all Core training files from a list of paths.\n\nArguments:\n\npaths - List of paths to training files or folders containing them.\n\nReturns:\n\n  Path to temporary directory containing all found Core training files.\n\nget_nlu_directory#\n\nCopyget_nlu_directory(paths: Optional[Union[Text, List[Text]]]) -> Text\n\nRecursively collects all NLU training files from a list of paths.\n\nArguments:\n\npaths - List of paths to training files or folders containing them.\n\nReturns:\n\n  Path to temporary directory containing all found NLU training files.\n\nget_core_nlu_directories#\n\nCopyget_core_nlu_directories(paths: Optional[Union[Text, List[Text]]]) -> Tuple[Text, Text]\n\nRecursively collects all training files from a list of paths.\n\nArguments:\n\npaths - List of paths to training files or folders containing them.\n\nReturns:\n\n  Path to directory containing the Core files and path to directory\ncontaining the NLU training files.\n\nget_data_files#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1585": {"text": "get_data_files#\n\nCopyget_data_files(paths: Optional[Union[Text, List[Text]]], filter_predicate: Callable[[Text], bool]) -> List[Text]\n\nRecursively collects all training files from a list of paths.\n\nArguments:\n\npaths - List of paths to training files or folders containing them.filter_predicate - property to use when filtering the paths, e.g. is_nlu_file.\n\nReturns:\n\n  paths of training data files.\n\nis_valid_filetype#\n\nCopyis_valid_filetype(path: Union[Text, Path]) -> bool\n\nChecks if given file has a supported extension.\n\nArguments:\n\npath - Path to the source file.\n\nReturns:\n\n True is given file has supported extension, False otherwise.\n\nis_nlu_file#\n\nCopyis_nlu_file(file_path: Text) -> bool\n\nChecks if a file is a Rasa compatible nlu file.\n\nArguments:\n\nfile_path - Path of the file which should be checked.\n\nReturns:\n\n True if it's a nlu file, otherwise False.\n\nis_story_file#\n\nCopyis_story_file(file_path: Text) -> bool\n\nChecks if a file is a Rasa story file.\n\nArguments:\n\nfile_path - Path of the file which should be checked.\n\nReturns:\n\n True if it's a story file, otherwise False.\n\nis_test_stories_file#\n\nCopyis_test_stories_file(file_path: Text) -> bool\n\nChecks if a file is a test stories file.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1586": {"text": "Checks if a file is a test stories file.\n\nArguments:\n\nfile_path - Path of the file which should be checked.\n\nReturns:\n\n True if it's a story file containing tests, otherwise False.\n\nis_config_file#\n\nCopyis_config_file(file_path: Text) -> bool\n\nChecks whether the given file path is a Rasa config file.\n\nArguments:\n\nfile_path - Path of the file which should be checked.\n\nReturns:\n\n True if it's a Rasa config file, otherwise False.\n\nPrevious\u00ab rasa.apiNextrasa.exceptions \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1587": {"text": "Version: 3.x\n\nrasa.exceptions\n\nUnsupportedModelVersionError Objects#\n\nCopy@dataclassclass UnsupportedModelVersionError(RasaException)\n\nRaised when a model is too old to be loaded.\n\nArguments:\n\nmodel_version - the used model version that is not supported and triggered\nthis exception\n\nModelNotFound Objects#\n\nCopyclass ModelNotFound(RasaException)\n\nRaised when a model is not found in the path provided by the user.\n\nNoEventsToMigrateError Objects#\n\nCopyclass NoEventsToMigrateError(RasaException)\n\nRaised when no events to be migrated are found.\n\nNoConversationsInTrackerStoreError Objects#\n\nCopyclass NoConversationsInTrackerStoreError(RasaException)\n\nRaised when a tracker store does not contain any conversations.\n\nNoEventsInTimeRangeError Objects#\n\nCopyclass NoEventsInTimeRangeError(RasaException)\n\nRaised when a tracker store does not contain events within a given time range.\n\nMissingDependencyException Objects#\n\nCopyclass MissingDependencyException(RasaException)\n\nRaised if a python package dependency is needed, but not installed.\n\nPublishingError Objects#\n\nCopy@dataclassclass PublishingError(RasaException)\n\nRaised when publishing of an event fails.\n\nAttributes:\n\ntimestamp - Unix timestamp of the event during which publishing fails.\n\n__str__#\n\nCopydef __str__() -> Text\n\nReturns string representation of exception.\n\nActionLimitReached Objects#\n\nCopyclass ActionLimitReached(RasaException)\n\nRaised when predicted action limit is reached.", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1588": {"text": "Raised when predicted action limit is reached.\n\nPrevious\u00ab rasa.dataNextrasa.jupyter \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1589": {"text": "Version: 3.x\n\nrasa.jupyter\n\npprint#\n\nCopydef pprint(obj: Any) -> None\n\nPrints JSONs with indent.\n\nchat#\n\nCopydef chat(model_path: Optional[Text] = None,         endpoints: Optional[Text] = None,         agent: Optional[\"Agent\"] = None) -> None\n\nChat to the bot within a Jupyter notebook.\n\nArguments:\n\nmodel_path - Path to a combined Rasa model.endpoints - Path to a yaml with the action server is custom actions are defined.agent - Rasa Core agent (used if no Rasa model given).\n\nPrevious\u00ab rasa.exceptionsNextrasa.model \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1590": {"text": "Version: 3.x\n\nrasa.model\n\nget_local_model#\n\nCopydef get_local_model(model_path: Text = DEFAULT_MODELS_PATH) -> Text\n\nReturns verified path to local model archive.\n\nArguments:\n\nmodel_path - Path to the zipped model. If it's a directory, the latest\ntrained model is returned.\n\nReturns:\n\n  Path to the zipped model. If it's a directory, the latest\ntrained model is returned.\n\nRaises:\n\n  ModelNotFound Exception: When no model could be found at the provided path.\n\nget_latest_model#\n\nCopydef get_latest_model(model_path: Text = DEFAULT_MODELS_PATH) -> Optional[Text]\n\nGet the latest model from a path.\n\nArguments:\n\nmodel_path - Path to a directory containing zipped models.\n\nReturns:\n\n  Path to latest model in the given directory.\n\nget_model_for_finetuning#\n\nCopydef get_model_for_finetuning(        previous_model_file_or_dir: Union[Path, Text]) -> Optional[Path]\n\nGets validated path for model to finetune.\n\nArguments:\n\nprevious_model_file - Path to model file which should be used for finetuning or\na directory in case the latest trained model should be used.\n\nReturns:\n\n  Path to model archive. None if there is no model.\n\nproject_fingerprint#\n\nCopydef project_fingerprint() -> Optional[Text]\n\nCreate a hash for the project in the current working directory.\n\nReturns:\n\n  project hash\n\nPrevious\u00ab rasa.jupyterNextrasa.model_testing \u00bb", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1591": {"text": "Previous\u00ab rasa.jupyterNextrasa.model_testing \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1592": {"text": "Version: 3.x\n\nrasa.model_testing\n\nClassificationReportException Objects#\n\nCopyclass ClassificationReportException(Exception)\n\nRaised when clf_report doesn't correctly set accuracy and/or micro avg.\n\nsklearn.metrics.classification_report should provide either accuracy or micro avg.\n\ntest_core_models_in_directory#\n\nCopyasync def test_core_models_in_directory(        model_directory: Text,        stories: Text,        output: Text,        use_conversation_test_files: bool = False) -> None\n\nEvaluates a directory with multiple Core models using test data.\n\nArguments:\n\nmodel_directory - Directory containing multiple model files.stories - Path to a conversation test file.output - Output directory to store results to.use_conversation_test_files - True if conversation test files should be used\nfor testing instead of regular Core story files.\n\nplot_core_results#\n\nCopydef plot_core_results(output_directory: Text,                      number_of_examples: List[int]) -> None\n\nPlot core model comparison graph.\n\nArguments:\n\noutput_directory - path to the output directorynumber_of_examples - number of examples per run\n\ntest_core_models#\n\nCopyasync def test_core_models(models: List[Text],                           stories: Text,                           output: Text,                           use_conversation_test_files: bool = False) -> None\n\nCompares multiple Core models based on test data.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1593": {"text": "Compares multiple Core models based on test data.\n\nArguments:\n\nmodels - A list of models files.stories - Path to test data.output - Path to output directory for test results.use_conversation_test_files - True if conversation test files should be used\nfor testing instead of regular Core story files.\n\ntest_core#\n\nCopyasync def test_core(model: Optional[Text] = None,                    stories: Optional[Text] = None,                    output: Text = DEFAULT_RESULTS_PATH,                    additional_arguments: Optional[Dict] = None,                    use_conversation_test_files: bool = False) -> None\n\nTests a trained Core model against a set of test stories.\n\ntest_nlu#\n\nCopyasync def test_nlu(model: Optional[Text],                   nlu_data: Optional[Text],                   output_directory: Text = DEFAULT_RESULTS_PATH,                   additional_arguments: Optional[Dict] = None,                   domain_path: Optional[Text] = None) -> None\n\nTests the NLU Model.\n\ncompare_nlu_models#\n\nCopyasync def compare_nlu_models(configs: List[Text], test_data: TrainingData,                             output: Text, runs: int,                             exclusion_percentages: List[int]) -> None\n\nTrains multiple models, compares them and saves the results.\n\nplot_nlu_results#\n\nCopydef plot_nlu_results(output_directory: Text,                     number_of_examples: List[int]) -> None\n\nPlot NLU model comparison graph.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1594": {"text": "Plot NLU model comparison graph.\n\nArguments:\n\noutput_directory - path to the output directorynumber_of_examples - number of examples per run\n\nperform_nlu_cross_validation#\n\nCopyasync def perform_nlu_cross_validation(        config: Dict[Text, Any], data: TrainingData, output: Text,        additional_arguments: Optional[Dict[Text, Any]]) -> None\n\nRuns cross-validation on test data.\n\nArguments:\n\nconfig - The model configuration.data - The data which is used for the cross-validation.output - Output directory for the cross-validation results.additional_arguments - Additional arguments which are passed to the\ncross-validation, like number of disable_plotting.\n\nget_evaluation_metrics#\n\nCopydef get_evaluation_metrics(    targets: Iterable[Any],    predictions: Iterable[Any],    output_dict: bool = False,    exclude_label: Optional[Text] = None) -> Tuple[Union[Text, Dict[Text, Dict[Text, float]]], float, float, float]\n\nCompute the f1, precision, accuracy and summary report from sklearn.\n\nArguments:\n\ntargets - target labelspredictions - predicted labelsoutput_dict - if True sklearn returns a summary report as dict, if False the\nreport is in string formatexclude_label - labels to exclude from evaluation\n\nReturns:\n\n  Report from sklearn, precision, f1, and accuracy values.\n\nmake_classification_report_complete#\n\nCopydef make_classification_report_complete(report: dict, accuracy: float) -> dict", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1595": {"text": "Completes the sklearn classification report with accuracy xor micro avg.\n\nArguments:\n\nreport - Report generated by metrics.classification_report with output_dict=Trueaccuracy - Model accuracy\n\nRaises:\n\nException - When sklearn.metrics.classification_report\nbehaves different to our expectation.\n\nReturns:\n\nreport - Report generated by metrics.classification_report\nenhanced with accuracy xor micro avg.\n\nclean_labels#\n\nCopydef clean_labels(labels: Iterable[Text]) -> List[Text]\n\nRemove None labels. sklearn metrics do not support them.\n\nArguments:\n\nlabels - list of labels\n\nReturns:\n\n  Cleaned labels.\n\nget_unique_labels#\n\nCopydef get_unique_labels(targets: Iterable[Text],                      exclude_label: Optional[Text]) -> List[Text]\n\nGet unique labels. Exclude 'exclude_label' if specified.\n\nArguments:\n\ntargets - labelsexclude_label - label to exclude\n\nReturns:\n\n  Unique labels.\n\nPrevious\u00ab rasa.modelNextrasa.model_training \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1596": {"text": "Version: 3.x\n\nrasa.model_training\n\nTrainingResult Objects#\n\nCopyclass TrainingResult(NamedTuple)\n\nHolds information about the results of training.\n\nget_unresolved_slots#\n\nCopydef get_unresolved_slots(domain: Domain, stories: StoryGraph) -> List[Text]\n\nReturns a list of unresolved slots.\n\nArguments:\n\ndomain - The domain.stories - The story graph.\n\nReturns:\n\n  A list of unresolved slots.\n\ntrain#\n\nCopydef train(domain: Text,          config: Text,          training_files: Optional[Union[Text, List[Text]]],          output: Text = rasa.shared.constants.DEFAULT_MODELS_PATH,          dry_run: bool = False,          force_training: bool = False,          fixed_model_name: Optional[Text] = None,          persist_nlu_training_data: bool = False,          core_additional_arguments: Optional[Dict] = None,          nlu_additional_arguments: Optional[Dict] = None,          model_to_finetune: Optional[Text] = None,          finetuning_epoch_fraction: float = 1.0) -> TrainingResult\n\nTrains a Rasa model (Core and NLU).\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1597": {"text": "Trains a Rasa model (Core and NLU).\n\nArguments:\n\ndomain - Path to the domain file.config - Path to the config file.training_files - List of paths to training data files.output - Output directory for the trained model.dry_run - If True then no training will be done, and the information about\nwhether the training needs to be done will be printed.force_training - If True retrain model even if data has not changed.fixed_model_name - Name of model to be stored.persist_nlu_training_data - True if the NLU training data should be persisted\nwith the model.config1 - Additional training parameters for core training.config2 - Additional training parameters forwarded to training\nmethod of each NLU component.config3 - Optional path to a model which should be finetuned or\na directory in case the latest trained model should be used.config4 - The fraction currently specified training epochs\nin the model configuration which should be used for finetuning.\n\nReturns:\n\n  An instance of config5.\n\ntrain_core#\n\nCopydef train_core(domain: Union[Domain, Text],               config: Text,               stories: Text,               output: Text,               fixed_model_name: Optional[Text] = None,               additional_arguments: Optional[Dict] = None,               model_to_finetune: Optional[Text] = None,               finetuning_epoch_fraction: float = 1.0) -> Optional[Text]\n\nTrains a Core model.\n\nArguments:", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1598": {"text": "Trains a Core model.\n\nArguments:\n\ndomain - Path to the domain file.config - Path to the config file for Core.stories - Path to the Core training data.output - Output path.fixed_model_name - Name of model to be stored.additional_arguments - Additional training parameters.model_to_finetune - Optional path to a model which should be finetuned or\na directory in case the latest trained model should be used.finetuning_epoch_fraction - The fraction currently specified training epochs\nin the model configuration which should be used for finetuning.\n\nReturns:\n\n  Path to the model archive.\n\ntrain_nlu#\n\nCopydef train_nlu(config: Text,              nlu_data: Optional[Text],              output: Text,              fixed_model_name: Optional[Text] = None,              persist_nlu_training_data: bool = False,              additional_arguments: Optional[Dict] = None,              domain: Optional[Union[Domain, Text]] = None,              model_to_finetune: Optional[Text] = None,              finetuning_epoch_fraction: float = 1.0) -> Optional[Text]\n\nTrains an NLU model.\n\nArguments:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1599": {"text": "Trains an NLU model.\n\nArguments:\n\nconfig - Path to the config file for NLU.nlu_data - Path to the NLU training data.output - Output path.fixed_model_name - Name of the model to be stored.persist_nlu_training_data - True if the NLU training data should be persisted\nwith the model.additional_arguments - Additional training parameters which will be passed to\nthe train method of each component.domain - Path to the optional domain file/Domain object.model_to_finetune - Optional path to a model which should be finetuned or\na directory in case the latest trained model should be used.nlu_data0 - The fraction currently specified training epochs\nin the model configuration which should be used for finetuning.\n\nReturns:\n\n  Path to the model archive.\n\nPrevious\u00ab rasa.model_testingNextrasa.run \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1600": {"text": "Version: 3.x\n\nrasa.run\n\nrun#\n\nCopyrun(model: Text, endpoints: Text, connector: Text = None, credentials: Text = None, **kwargs: Dict, ,)\n\nRuns a Rasa model.\n\nArguments:\n\nmodel - Path to model archive.endpoints - Path to endpoints file.connector - Connector which should be use (overwrites credentials\nfield).credentials - Path to channel credentials file.**kwargs - Additional arguments which are passed to\nrasa.core.run.serve_application.\n\nPrevious\u00ab rasa.model_trainingNextrasa.server \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1601": {"text": "Version: 3.x\n\nrasa.server\n\nErrorResponse Objects#\n\nCopyclass ErrorResponse(Exception)\n\nCommon exception to handle failing API requests.\n\n__init__#\n\nCopydef __init__(status: Union[int, HTTPStatus],             reason: Text,             message: Text,             details: Any = None,             help_url: Optional[Text] = None) -> None\n\nCreates error.\n\nArguments:\n\nstatus - The HTTP status code to return.reason - Short summary of the error.message - Detailed explanation of the error.details - Additional details which describe the error. Must be serializable.help_url - URL where users can get further help (e.g. docs).\n\nensure_loaded_agent#\n\nCopydef ensure_loaded_agent(    app: Sanic,    require_core_is_ready: bool = False) -> Callable[[Callable], Callable[..., Any]]\n\nWraps a request handler ensuring there is a loaded and usable agent.\n\nRequire the agent to have a loaded Core model if require_core_is_ready is\nTrue.\n\nensure_conversation_exists#\n\nCopydef ensure_conversation_exists() -> Callable[[\"SanicView\"], \"SanicView\"]\n\nWraps a request handler ensuring the conversation exists.\n\nrequires_auth#\n\nCopydef requires_auth(        app: Sanic,        token: Optional[Text] = None) -> Callable[[\"SanicView\"], \"SanicView\"]\n\nWraps a request handler with token authentication.\n\nevent_verbosity_parameter#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1602": {"text": "event_verbosity_parameter#\n\nCopydef event_verbosity_parameter(        request: Request, default_verbosity: EventVerbosity) -> EventVerbosity\n\nCreate EventVerbosity object using request params if present.\n\nget_test_stories#\n\nCopyasync def get_test_stories(processor: \"MessageProcessor\",                           conversation_id: Text,                           until_time: Optional[float],                           fetch_all_sessions: bool = False) -> Text\n\nRetrieves test stories from processor for all conversation sessions for\nconversation_id.\n\nArguments:\n\nprocessor - An instance of MessageProcessor.conversation_id - Conversation ID to fetch stories for.until_time - Timestamp up to which to include events.fetch_all_sessions - Whether to fetch stories for all conversation sessions.\nIf False, only the last conversation session is retrieved.\n\nReturns:\n\n  The stories for conversation_id in test format.\n\nupdate_conversation_with_events#\n\nCopyasync def update_conversation_with_events(        conversation_id: Text, processor: \"MessageProcessor\", domain: Domain,        events: List[Event]) -> DialogueStateTracker\n\nFetches or creates a tracker for conversation_id and appends events to it.\n\nArguments:\n\nconversation_id - The ID of the conversation to update the tracker for.processor - An instance of MessageProcessor.domain - The domain associated with the current Agent.events - The events to append to the tracker.\n\nReturns:\n\n  The tracker for conversation_id with the updated events.\n\nvalidate_request_body#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1603": {"text": "validate_request_body#\n\nCopydef validate_request_body(request: Request, error_message: Text) -> None\n\nCheck if request has a body.\n\nvalidate_events_in_request_body#\n\nCopydef validate_events_in_request_body(request: Request) -> None\n\nValidates events format in request body.\n\nauthenticate#\n\nCopyasync def authenticate(_: Request) -> NoReturn\n\nCallback for authentication failed.\n\ncreate_ssl_context#\n\nCopydef create_ssl_context(        ssl_certificate: Optional[Text],        ssl_keyfile: Optional[Text],        ssl_ca_file: Optional[Text] = None,        ssl_password: Optional[Text] = None) -> Optional[\"SSLContext\"]\n\nCreate an SSL context if a proper certificate is passed.\n\nArguments:\n\nssl_certificate - path to the SSL client certificatessl_keyfile - path to the SSL key filessl_ca_file - path to the SSL CA file for verification (optional)ssl_password - SSL private key password (optional)\n\nReturns:\n\n  SSL context if a valid certificate chain can be loaded, None otherwise.\n\nconfigure_cors#\n\nCopydef configure_cors(app: Sanic,                   cors_origins: Union[Text, List[Text], None] = \"\") -> None\n\nConfigure CORS origins for the given app.\n\nadd_root_route#\n\nCopydef add_root_route(app: Sanic) -> None\n\nAdd '/' route to return hello.\n\nasync_if_callback_url#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1604": {"text": "async_if_callback_url#\n\nCopydef async_if_callback_url(f: Callable[..., Coroutine]) -> Callable\n\nDecorator to enable async request handling.\n\nIf the incoming HTTP request specified a callback_url query parameter, the request\nwill return immediately with a 204 while the actual request response will\nbe sent to the callback_url. If an error happens, the error payload will also\nbe sent to the callback_url.\n\nArguments:\n\nf - The request handler function which should be decorated.\n\nReturns:\n\n  The decorated function.\n\nrun_in_thread#\n\nCopydef run_in_thread(f: Callable[..., Coroutine]) -> Callable\n\nDecorator which runs request on a separate thread.\n\nSome requests (e.g. training or cross-validation) are computional intense requests.\nThis means that they will block the event loop and hence the processing of other\nrequests. This decorator can be used to process these requests on a separate thread\nto avoid blocking the processing of incoming requests.\n\nArguments:\n\nf - The request handler function which should be decorated.\n\nReturns:\n\n  The decorated function.\n\ninject_temp_dir#\n\nCopydef inject_temp_dir(f: Callable[..., Coroutine]) -> Callable\n\nDecorator to inject a temporary directory before a request and clean up after.\n\nArguments:\n\nf - The request handler function which should be decorated.\n\nReturns:\n\n  The decorated function.\n\ncreate_app#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1605": {"text": "Returns:\n\n  The decorated function.\n\ncreate_app#\n\nCopydef create_app(agent: Optional[\"Agent\"] = None,               cors_origins: Union[Text, List[Text], None] = \"*\",               auth_token: Optional[Text] = None,               response_timeout: int = DEFAULT_RESPONSE_TIMEOUT,               jwt_secret: Optional[Text] = None,               jwt_private_key: Optional[Text] = None,               jwt_method: Text = \"HS256\",               endpoints: Optional[AvailableEndpoints] = None) -> Sanic\n\nClass representing a Rasa HTTP server.\n\nPrevious\u00ab rasa.runNextrasa.telemetry \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1606": {"text": "Version: 3.x\n\nrasa.telemetry\n\nprint_telemetry_reporting_info#\n\nCopydef print_telemetry_reporting_info() -> None\n\nPrint telemetry information to std out.\n\nis_telemetry_enabled#\n\nCopydef is_telemetry_enabled() -> bool\n\nCheck if telemetry is enabled either in configuration or environment.\n\nReturns:\n\n True, if telemetry is enabled, False otherwise.\n\ninitialize_telemetry#\n\nCopydef initialize_telemetry() -> bool\n\nRead telemetry configuration from the user's Rasa config file in $HOME.\n\nCreates a default configuration if no configuration exists.\n\nReturns:\n\n True, if telemetry is enabled, False otherwise.\n\nensure_telemetry_enabled#\n\nCopydef ensure_telemetry_enabled(f: Callable[..., Any]) -> Callable[..., Any]\n\nFunction decorator for telemetry functions that ensures telemetry is enabled.\n\nWARNING: does not work as a decorator for async generators.\n\nArguments:\n\nf - function to call if telemetry is enabled\n\nReturns:\n\n  Return wrapped function\n\ntelemetry_write_key#\n\nCopydef telemetry_write_key() -> Optional[Text]\n\nRead the Segment write key from the segment key text file.\n\nThe segment key text file should by present only in wheel/sdist packaged\nversions of Rasa Open Source. This avoids running telemetry locally when\ndeveloping on Rasa or when running CI builds.\n\nIn local development, this should always return None to avoid logging telemetry.\n\nReturns:\n\n  Segment write key, if the key file was present.\n\nsentry_write_key#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1607": {"text": "sentry_write_key#\n\nCopydef sentry_write_key() -> Optional[Text]\n\nRead the sentry write key from the sentry key text file.\n\nReturns:\n\n  Sentry write key, if the key file was present.\n\nsegment_request_header#\n\nCopydef segment_request_header(write_key: Text) -> Dict[Text, Any]\n\nUse a segment write key to create authentication headers for the segment API.\n\nArguments:\n\nwrite_key - Authentication key for segment.\n\nReturns:\n\n  Authentication headers for segment.\n\nsegment_request_payload#\n\nCopydef segment_request_payload(distinct_id: Text, event_name: Text,                            properties: Dict[Text, Any],                            context: Dict[Text, Any]) -> Dict[Text, Any]\n\nCompose a valid payload for the segment API.\n\nArguments:\n\ndistinct_id - Unique telemetry ID.event_name - Name of the event.properties - Values to report along the event.context - Context information about the event.\n\nReturns:\n\n  Valid segment payload.\n\nin_continuous_integration#\n\nCopydef in_continuous_integration() -> bool\n\nReturns True if currently running inside a continuous integration context.\n\nprint_telemetry_event#\n\nCopydef print_telemetry_event(payload: Dict[Text, Any]) -> None\n\nPrint a telemetry events payload to the commandline.\n\nArguments:\n\npayload - payload of the event\n\nwith_default_context_fields#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1608": {"text": "payload - payload of the event\n\nwith_default_context_fields#\n\nCopydef with_default_context_fields(        context: Optional[Dict[Text, Any]] = None) -> Dict[Text, Any]\n\nReturn a new context dictionary with default and provided field values merged.\n\nThe default fields contain only the OS information for now.\n\nArguments:\n\ncontext - Context information about the event.\n\nReturns:\n\n  A new context.\n\nget_telemetry_id#\n\nCopydef get_telemetry_id() -> Optional[Text]\n\nReturn the unique telemetry identifier for this Rasa Open Source install.\n\nThe identifier can be any string, but it should be a UUID.\n\nReturns:\n\n  The identifier, if it is configured correctly.\n\ntoggle_telemetry_reporting#\n\nCopydef toggle_telemetry_reporting(is_enabled: bool) -> None\n\nWrite to the configuration if telemetry tracking should be enabled or disabled.\n\nArguments:\n\nis_enabled - True if the telemetry reporting should be enabled,\nFalse otherwise.\n\nfilter_errors#\n\nCopydef filter_errors(        event: Optional[Dict[Text, Any]],        hint: Optional[Dict[Text, Any]] = None) -> Optional[Dict[Text, Any]]\n\nFilter errors.\n\nArguments:\n\nevent - event to be logged to sentryhint - some hinting information sent alongside of the event\n\nReturns:\n\n  the event without any sensitive / PII data or None if the event constitutes\nan ImportError which should be discarded.\n\nbefore_send#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1609": {"text": "before_send#\n\nCopydef before_send(    event: Dict[Text, Any],    _unused_hint: Optional[Dict[Text,                                Any]] = None) -> Optional[Dict[Text, Any]]\n\nStrips the sensitive data and filters errors before sending to sentry.\n\nArguments:\n\nevent - event to be logged to sentry_unused_hint - some hinting information sent alongside of the event\n\nReturns:\n\n  the event without any sensitive / PII data or None if the event should\nbe discarded.\n\nstrip_sensitive_data_from_sentry_event#\n\nCopydef strip_sensitive_data_from_sentry_event(    event: Dict[Text, Any],    _unused_hint: Optional[Dict[Text,                                Any]] = None) -> Optional[Dict[Text, Any]]\n\nRemove any sensitive data from the event (e.g. path names).\n\nArguments:\n\nevent - event to be logged to sentry_unused_hint - some hinting information sent alongside of the event\n\nReturns:\n\n  the event without any sensitive / PII data or None if the event should\nbe discarded.\n\ninitialize_error_reporting#\n\nCopy@ensure_telemetry_enableddef initialize_error_reporting() -> None\n\nSets up automated error reporting.\n\nExceptions are reported to sentry. We avoid sending any metadata (local\nvariables, paths, ...) to make sure we don't compromise any data. Only the\nexception and its stacktrace is logged and only if the exception origins\nfrom the rasa package.\n\ntrack_model_training#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1610": {"text": "track_model_training#\n\nCopy@contextlib.contextmanagerdef track_model_training(        training_data: \"TrainingDataImporter\",        model_type: Text,        is_finetuning: bool = False) -> typing.Generator[None, None, None]\n\nTrack a model training started.\n\nWARNING: since this is a generator, it can't use the ensure telemetry\ndecorator. We need to manually add these checks here. This can be\nfixed as soon as we drop python 3.6 support.\n\nArguments:\n\ntraining_data - Training data used for the training.model_type - Specifies the type of training, should be either \"rasa\", \"core\"\nor \"nlu\".is_finetuning - True if the model is trained by finetuning another model.\n\ntrack_telemetry_disabled#\n\nCopy@ensure_telemetry_enableddef track_telemetry_disabled() -> None\n\nTrack when a user disables telemetry.\n\ntrack_data_split#\n\nCopy@ensure_telemetry_enableddef track_data_split(fraction: float, data_type: Text) -> None\n\nTrack when a user splits data.\n\nArguments:\n\nfraction - How much data goes into train and how much goes into testdata_type - Is this core, nlu or nlg data\n\ntrack_validate_files#\n\nCopy@ensure_telemetry_enableddef track_validate_files(validation_success: bool) -> None\n\nTrack when a user validates data files.\n\nArguments:\n\nvalidation_success - Whether the validation was successful\n\ntrack_data_convert#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1611": {"text": "track_data_convert#\n\nCopy@ensure_telemetry_enableddef track_data_convert(output_format: Text, data_type: Text) -> None\n\nTrack when a user converts data.\n\nArguments:\n\noutput_format - Target format for the converterdata_type - Is this core, nlu or nlg data\n\ntrack_tracker_export#\n\nCopy@ensure_telemetry_enableddef track_tracker_export(number_of_exported_events: int,                         tracker_store: \"TrackerStore\",                         event_broker: \"EventBroker\") -> None\n\nTrack when a user exports trackers.\n\nArguments:\n\nnumber_of_exported_events - Number of events that got exportedtracker_store - Store used to retrieve the events fromevent_broker - Broker the events are getting published towards\n\ntrack_interactive_learning_start#\n\nCopy@ensure_telemetry_enableddef track_interactive_learning_start(skip_visualization: bool,                                     save_in_e2e: bool) -> None\n\nTrack when a user starts an interactive learning session.\n\nArguments:\n\nskip_visualization - Is visualization skipped in this sessionsave_in_e2e - Is e2e used in this session\n\ntrack_server_start#\n\nCopy@ensure_telemetry_enableddef track_server_start(input_channels: List[\"InputChannel\"],                       endpoints: Optional[\"AvailableEndpoints\"],                       model_directory: Optional[Text], number_of_workers: int,                       is_api_enabled: bool) -> None\n\nTracks when a user starts a rasa server.\n\nArguments:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1612": {"text": "Tracks when a user starts a rasa server.\n\nArguments:\n\ninput_channels - Used input channelsendpoints - Endpoint configuration for the servermodel_directory - directory of the running modelnumber_of_workers - number of used Sanic workersis_api_enabled - whether the rasa API server is enabled\n\ntrack_project_init#\n\nCopy@ensure_telemetry_enableddef track_project_init(path: Text) -> None\n\nTrack when a user creates a project using rasa init.\n\nArguments:\n\npath - Location of the project\n\ntrack_shell_started#\n\nCopy@ensure_telemetry_enableddef track_shell_started(model_type: Text) -> None\n\nTrack when a user starts a bot using rasa shell.\n\nArguments:\n\nmodel_type - Type of the model, core / nlu or rasa.\n\ntrack_visualization#\n\nCopy@ensure_telemetry_enableddef track_visualization() -> None\n\nTrack when a user runs the visualization.\n\ntrack_core_model_test#\n\nCopy@ensure_telemetry_enableddef track_core_model_test(num_story_steps: int, e2e: bool,                          agent: \"Agent\") -> None\n\nTrack when a user tests a core model.\n\nArguments:\n\nnum_story_steps - Number of test stories used for the comparisone2e - indicator if tests running in end to end modeagent - Agent of the model getting tested\n\ntrack_nlu_model_test#\n\nCopy@ensure_telemetry_enableddef track_nlu_model_test(test_data: \"TrainingData\") -> None\n\nTrack when a user tests an nlu model.", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1613": {"text": "Track when a user tests an nlu model.\n\nArguments:\n\ntest_data - Data used for testing\n\ntrack_markers_extraction_initiated#\n\nCopy@ensure_telemetry_enableddef track_markers_extraction_initiated(strategy: Text, only_extract: bool,                                       seed: bool,                                       count: Optional[int]) -> None\n\nTrack when a user tries to extract success markers.\n\nArguments:\n\nstrategy - The strategy the user is using for tracker selectiononly_extract - Indicates if the user is only extracting markers or also\nproducing statsseed - Indicates if the user used a seed for this attemptcount - (Optional) The number of trackers the user is trying to select.\n\ntrack_markers_extracted#\n\nCopy@ensure_telemetry_enableddef track_markers_extracted(trackers_count: int) -> None\n\nTrack when markers have been extracted by a user.\n\nArguments:\n\ntrackers_count - The actual number of trackers processed\n\ntrack_markers_stats_computed#\n\nCopy@ensure_telemetry_enableddef track_markers_stats_computed(trackers_count: int) -> None\n\nTrack when stats over markers have been computed by a user.\n\nArguments:\n\ntrackers_count - The actual number of trackers processed\n\ntrack_markers_parsed_count#\n\nCopy@ensure_telemetry_enableddef track_markers_parsed_count(marker_count: int, max_depth: int,                               branching_factor: int) -> None\n\nTrack when markers have been successfully parsed from config.\n\nArguments:", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1614": {"text": "Track when markers have been successfully parsed from config.\n\nArguments:\n\nmarker_count - The number of markers found in the configmax_depth - The maximum depth of any marker in the configbranching_factor - The maximum number of children of any marker in the config.\n\nPrevious\u00ab rasa.serverNextrasa.test \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1615": {"text": "Version: 3.x\n\nrasa.test\n\nplot_core_results#\n\nCopyplot_core_results(output_directory: Text, number_of_examples: List[int]) -> None\n\nPlot core model comparison graph.\n\nArguments:\n\noutput_directory - path to the output directorynumber_of_examples - number of examples per run\n\ntest_core#\n\nCopytest_core(model: Optional[Text] = None, stories: Optional[Text] = None, output: Text = DEFAULT_RESULTS_PATH, additional_arguments: Optional[Dict] = None) -> None\n\nTests a trained Core model against a set of test stories.\n\ntest_nlu#\n\nCopyasync test_nlu(model: Optional[Text], nlu_data: Optional[Text], output_directory: Text = DEFAULT_RESULTS_PATH, additional_arguments: Optional[Dict] = None)\n\nTests the NLU Model.\n\ncompare_nlu_models#\n\nCopyasync compare_nlu_models(configs: List[Text], nlu: Text, output: Text, runs: int, exclusion_percentages: List[int])\n\nTrains multiple models, compares them and saves the results.\n\nplot_nlu_results#\n\nCopyplot_nlu_results(output_directory: Text, number_of_examples: List[int]) -> None\n\nPlot NLU model comparison graph.\n\nArguments:\n\noutput_directory - path to the output directorynumber_of_examples - number of examples per run\n\nget_evaluation_metrics#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1616": {"text": "get_evaluation_metrics#\n\nCopyget_evaluation_metrics(targets: Iterable[Any], predictions: Iterable[Any], output_dict: bool = False, exclude_label: Optional[Text] = None) -> Tuple[Union[Text, Dict[Text, Dict[Text, float]]], float, float, float]\n\nCompute the f1, precision, accuracy and summary report from sklearn.\n\nArguments:\n\ntargets - target labelspredictions - predicted labelsoutput_dict - if True sklearn returns a summary report as dict, if False the\nreport is in string formatexclude_label - labels to exclude from evaluation\n\nReturns:\n\n  Report from sklearn, precision, f1, and accuracy values.\n\nclean_labels#\n\nCopyclean_labels(labels: Iterable[Text]) -> List[Text]\n\nRemove None labels. sklearn metrics do not support them.\n\nArguments:\n\nlabels - list of labels\n\nReturns:\n\n  Cleaned labels.\n\nget_unique_labels#\n\nCopyget_unique_labels(targets: Iterable[Text], exclude_label: Optional[Text]) -> List[Text]\n\nGet unique labels. Exclude 'exclude_label' if specified.\n\nArguments:\n\ntargets - labelsexclude_label - label to exclude\n\nReturns:\n\n  Unique labels.\n\nPrevious\u00ab rasa.telemetryNextrasa.train \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1617": {"text": "Version: 3.x\n\nrasa.train\n\nTrainingResult Objects#\n\nCopyclass TrainingResult(NamedTuple)\n\nHolds information about the results of training.\n\ntrain#\n\nCopytrain(domain: Text, config: Text, training_files: Union[Text, List[Text]], output: Text = DEFAULT_MODELS_PATH, dry_run: bool = False, force_training: bool = False, fixed_model_name: Optional[Text] = None, persist_nlu_training_data: bool = False, core_additional_arguments: Optional[Dict] = None, nlu_additional_arguments: Optional[Dict] = None, loop: Optional[asyncio.AbstractEventLoop] = None, model_to_finetune: Optional[Text] = None, finetuning_epoch_fraction: float = 1.0) -> TrainingResult\n\nRuns Rasa Core and NLU training in async loop.\n\nArguments:", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1618": {"text": "Runs Rasa Core and NLU training in async loop.\n\nArguments:\n\ndomain - Path to the domain file.config - Path to the config for Core and NLU.training_files - Paths to the training data for Core and NLU.output - Output path.dry_run - If True then no training will be done, and the information about\nwhether the training needs to be done will be printed.force_training - If True retrain model even if data has not changed.fixed_model_name - Name of model to be stored.persist_nlu_training_data - True if the NLU training data should be persisted\nwith the model.core_additional_arguments - Additional training parameters for core training.nlu_additional_arguments - Additional training parameters forwarded to training\nmethod of each NLU component.loop - Optional EventLoop for running coroutines.model_to_finetune - Optional path to a model which should be finetuned or\na directory in case the latest trained model should be used.finetuning_epoch_fraction - The fraction currently specified training epochs\nin the model configuration which should be used for finetuning.\n\nReturns:\n\n  An instance of TrainingResult.\n\ntrain_async#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1619": {"text": "Returns:\n\n  An instance of TrainingResult.\n\ntrain_async#\n\nCopyasync train_async(domain: Union[Domain, Text], config: Text, training_files: Optional[Union[Text, List[Text]]], output: Text = DEFAULT_MODELS_PATH, dry_run: bool = False, force_training: bool = False, fixed_model_name: Optional[Text] = None, persist_nlu_training_data: bool = False, core_additional_arguments: Optional[Dict] = None, nlu_additional_arguments: Optional[Dict] = None, model_to_finetune: Optional[Text] = None, finetuning_epoch_fraction: float = 1.0) -> TrainingResult\n\nTrains a Rasa model (Core and NLU).\n\nArguments:", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1620": {"text": "Trains a Rasa model (Core and NLU).\n\nArguments:\n\ndomain - Path to the domain file.config - Path to the config for Core and NLU.training_files - Paths to the training data for Core and NLU.output_path - Output path.dry_run - If True then no training will be done, and the information about\nwhether the training needs to be done will be printed.force_training - If True retrain model even if data has not changed.fixed_model_name - Name of model to be stored.persist_nlu_training_data - True if the NLU training data should be persisted\nwith the model.core_additional_arguments - Additional training parameters for core training.nlu_additional_arguments - Additional training parameters forwarded to training\nmethod of each NLU component.model_to_finetune - Optional path to a model which should be finetuned or\na directory in case the latest trained model should be used.finetuning_epoch_fraction - The fraction currently specified training epochs\nin the model configuration which should be used for finetuning.\n\nReturns:\n\n  An instance of TrainingResult.\n\nhandle_domain_if_not_exists#\n\nCopyasync handle_domain_if_not_exists(file_importer: TrainingDataImporter, output_path, fixed_model_name)\n\nTrains only the nlu model and prints a warning about missing domain.\n\ndry_run_result#\n\nCopydry_run_result(fingerprint_comparison: FingerprintComparisonResult) -> Tuple[int, List[Text]]\n\nReturns a dry run result.\n\nArguments:\n\nfingerprint_comparison - A result of fingerprint comparison operation.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1621": {"text": "fingerprint_comparison - A result of fingerprint comparison operation.\n\nReturns:\n\n  A tuple where the first element is the result code and the second\nis the list of human-readable texts that need to be printed to the end user.\n\ntrain_core_async#\n\nCopyasync train_core_async(domain: Union[Domain, Text], config: Text, stories: Text, output: Text, train_path: Optional[Text] = None, fixed_model_name: Optional[Text] = None, additional_arguments: Optional[Dict] = None, model_to_finetune: Optional[Text] = None, finetuning_epoch_fraction: float = 1.0) -> Optional[Text]\n\nTrains a Core model.\n\nArguments:\n\ndomain - Path to the domain file.config - Path to the config file for Core.stories - Path to the Core training data.output - Output path.train_path - If None the model will be trained in a temporary\ndirectory, otherwise in the provided directory.fixed_model_name - Name of model to be stored.additional_arguments - Additional training parameters.model_to_finetune - Optional path to a model which should be finetuned or\na directory in case the latest trained model should be used.finetuning_epoch_fraction - The fraction currently specified training epochs\nin the model configuration which should be used for finetuning.\n\nReturns:\n\n  If train_path is given it returns the path to the model archive,\notherwise the path to the directory with the trained model files.\n\ntrain_nlu#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1622": {"text": "train_nlu#\n\nCopytrain_nlu(config: Text, nlu_data: Text, output: Text, train_path: Optional[Text] = None, fixed_model_name: Optional[Text] = None, persist_nlu_training_data: bool = False, additional_arguments: Optional[Dict] = None, domain: Optional[Union[Domain, Text]] = None, model_to_finetune: Optional[Text] = None, finetuning_epoch_fraction: float = 1.0) -> Optional[Text]\n\nTrains an NLU model.\n\nArguments:\n\nconfig - Path to the config file for NLU.nlu_data - Path to the NLU training data.output - Output path.train_path - If None the model will be trained in a temporary\ndirectory, otherwise in the provided directory.fixed_model_name - Name of the model to be stored.persist_nlu_training_data - True if the NLU training data should be persisted\nwith the model.additional_arguments - Additional training parameters which will be passed to\nthe train method of each component.domain - Path to the optional domain file/Domain object.model_to_finetune - Optional path to a model which should be finetuned or\na directory in case the latest trained model should be used.finetuning_epoch_fraction - The fraction currently specified training epochs\nin the model configuration which should be used for finetuning.\n\nReturns:\n\n  If train_path is given it returns the path to the model archive,\notherwise the path to the directory with the trained model files.\n\ntrain_nlu_async#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1623": {"text": "train_nlu_async#\n\nCopyasync train_nlu_async(config: Text, nlu_data: Text, output: Text, train_path: Optional[Text] = None, fixed_model_name: Optional[Text] = None, persist_nlu_training_data: bool = False, additional_arguments: Optional[Dict] = None, domain: Optional[Union[Domain, Text]] = None, model_to_finetune: Optional[Text] = None, finetuning_epoch_fraction: float = 1.0) -> Optional[Text]\n\nTrains an NLU model asynchronously.\n\nPrevious\u00ab rasa.testNextrasa.validator \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1624": {"text": "Version: 3.x\n\nrasa.validator\n\nValidator Objects#\n\nCopyclass Validator()\n\nA class used to verify usage of intents and utterances.\n\n__init__#\n\nCopydef __init__(domain: Domain, intents: TrainingData, story_graph: StoryGraph,             config: Optional[Dict[Text, Any]]) -> None\n\nInitializes the Validator object.\n\nArguments:\n\ndomain - The domain.intents - Training data.story_graph - The story graph.config - The configuration.\n\nfrom_importer#\n\nCopy@classmethoddef from_importer(cls, importer: TrainingDataImporter) -> \"Validator\"\n\nCreate an instance from the domain, nlu and story files.\n\nverify_intents#\n\nCopydef verify_intents(ignore_warnings: bool = True) -> bool\n\nCompares list of intents in domain with intents in NLU training data.\n\nverify_example_repetition_in_intents#\n\nCopydef verify_example_repetition_in_intents(ignore_warnings: bool = True) -> bool\n\nChecks if there is no duplicated example in different intents.\n\nverify_intents_in_stories#\n\nCopydef verify_intents_in_stories(ignore_warnings: bool = True) -> bool\n\nChecks intents used in stories.\n\nVerifies if the intents used in the stories are valid, and whether\nall valid intents are used in the stories.\n\nverify_utterances_in_stories#\n\nCopydef verify_utterances_in_stories(ignore_warnings: bool = True) -> bool", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1625": {"text": "Verifies usage of utterances in stories.\n\nChecks whether utterances used in the stories are valid,\nand whether all valid utterances are used in stories.\n\nverify_forms_in_stories_rules#\n\nCopydef verify_forms_in_stories_rules() -> bool\n\nVerifies that forms referenced in active_loop directives are present.\n\nverify_actions_in_stories_rules#\n\nCopydef verify_actions_in_stories_rules() -> bool\n\nVerifies that actions used in stories and rules are present in the domain.\n\nverify_story_structure#\n\nCopydef verify_story_structure(ignore_warnings: bool = True,                           max_history: Optional[int] = None) -> bool\n\nVerifies that the bot behaviour in stories is deterministic.\n\nArguments:\n\nignore_warnings - When True, return True even if conflicts were found.max_history - Maximal number of events to take into account for conflict\nidentification.\n\nReturns:\n\n False is a conflict was found and ignore_warnings is False.\nTrue otherwise.\n\nverify_nlu#\n\nCopydef verify_nlu(ignore_warnings: bool = True) -> bool\n\nRuns all the validations on intents and utterances.\n\nverify_form_slots#\n\nCopydef verify_form_slots() -> bool\n\nVerifies that form slots match the slot mappings in domain.\n\nverify_slot_mappings#\n\nCopydef verify_slot_mappings() -> bool\n\nVerifies that slot mappings match forms.\n\nverify_domain_validity#\n\nCopydef verify_domain_validity() -> bool", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1626": {"text": "Copydef verify_domain_validity() -> bool\n\nChecks whether the domain returned by the importer is empty.\n\nAn empty domain or one that uses deprecated Mapping Policy is invalid.\n\nwarn_if_config_mandatory_keys_are_not_set#\n\nCopydef warn_if_config_mandatory_keys_are_not_set() -> None\n\nRaises a warning if mandatory keys are not present in the config.\n\nAdditionally, raises a UserWarning if the assistant_id key is filled with the\ndefault placeholder value.\n\nPrevious\u00ab rasa.trainNextRasa Pro Change Log \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1627": {"text": "Version: 3.x\n\nRasa Pro Change Log\n\nAll notable changes to Rasa Pro will be documented in this page.\nThis product adheres to Semantic Versioning starting with version 3.3 (initial version).\n\nRasa Pro consists of two deployable artifacts: Rasa Plus and Rasa Pro Services. You can read the change log for both artifacts below.\n\nYou can find all changes related to Rasa Open Source in the dedicated Rasa Open Source change log.\n\nRasa Pro 3.6#\n\nRasa Plus 3.6#\n\nFeatures#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1628": {"text": "Rasa Plus 3.6#\n\nFeatures#\n\nImplemented PII (Personally Identifiable Information) management using Microsoft Presidio as the entity analyzer and\nanonymization engine.\nThe feature covers the following:anonymization of Rasa events (UserUttered, BotUttered, SlotSet, EntitiesAdded) before they are streamed to\nKafka event broker anonymization topics specified in endpoints.yml.anonymization of Rasa logs that expose PII dataThe main components of the feature are:anonymization rules that define in endpoints.yml the PII entities to be anonymized and the anonymization method to be usedanonymization executor that executes the anonymization rules on a given textanonymization orchestrator that orchestrates the execution of the anonymization rules and publishes\nthe anonymized event to the matched Kafka topic.anonymization pipeline that contains a list of orchestrators and is registered to a singleton provider component,\nwhich gets invoked in hook calls in Rasa Open Source when the pipeline must be retrieved for anonymizing events and logs.Please read through the PII Management section in the official documentation to learn how to get started.Implemented support for real time evaluation of Markers with the Analytics\nData Pipeline. For this feature, we've added support for rasa markers upload command. Running this command validates the marker configuration file against the domain file and uploads the configuration to Analytics Data Pipeline.\n\nImprovements#\n\nAdd rasa marker upload command to upload markers to the Rasa Pro Services.Enhance the validation of the anonymization key in endpoints.yaml by introducing checks for required fields and duplicate IDs.\n\nBugfixes#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1629": {"text": "Bugfixes#\n\nAnonymize rasa_events structlog key.Fixes issue with uploading locally trained model to a cloud rasa-plus instance where the conversation does not\ngo as expected because slots don't get set correctly, e.g. an error is logged \"Tried to set non existent slot 'placeholder_slot_name'.\" Make sure you added all your slots to your domain file.\nThis is because the updated domain during the cloud upload did not get passed to the wrapped tracker store of the AuthRetryTrackerStore rasa-plus component.\nThe fix was to add domain property and setter methods to the AuthRetryTrackerStore component.When using rasa studio upload, if no specific intents or entities are specified by the user, the update will now include all available intents or entities.\n\nDeprecations and Removal#\n\nRemoved Python 3.7 support as it reaches its end of life in June 2023\n\nRasa Pro Services 3.1#\n\nFeatures#\n\nYou can now process Markers with the Analytics Data Pipeline in real-time, enabling you to gain valuable insights and improve the performance of your Rasa Assistant.\n\nRasa Pro 3.5#\n\nRasa Plus 3.5#\n\nFeatures#\n\nEnd-to-end testing is an enhanced and comprehensive CLI-based testing tool that allows you to test conversation scenarios with different pre-configured contexts, execute custom actions, verify response texts or names, and assert when slots are filled. It is available using the new rasa test e2e command.You can now store your assistant's secrets in an external credentials manager. In this release, Rasa Pro currently supports credentials manager for the Tracker Store with HashiCorp Vault.\n\nRasa Pro Services 3.0#\n\nNo significant change from last minor version.\n\nRasa Pro 3.4#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1630": {"text": "No significant change from last minor version.\n\nRasa Pro 3.4#\n\nRasa Plus 3.4#\n\nFeatures#\n\nAdded a new IVR channel connector to connect your assistant to AudioCodes VoiceAI Connect.\n\nImprovements#\n\nRasa Pro now supports Python 3.10.\n\nRasa Pro Services 3.0#\n\nNo significant change from last minor version.\n\nRasa Pro 3.3#\n\nRasa Plus 3.3#\n\nFeatures#\n\nTracing capabilities for your Rasa Pro assistant. Distributed tracing tracks requests as they flow through a distributed system (in this case: a Rasa assistant), sending data about the requests to a tracing backend which collects all trace data and enables inspecting it. With this version of the Tracing feature, Rasa Pro supports OpenTelemetry.Concurrent Lock Store is a new lock store that uses Redis as a persistence layer and is safe for use with multiple Rasa server replicas.\n\nRasa Pro Services 3.0#\n\nFeatures#\n\nAnalytics Data Pipeline helps visualize and process Rasa assistant metrics in the tooling (BI tools, data warehouses) of your choice. Visualizations and analysis of the production assistant and its conversations allow you to assess ROI and improve the performance of the assistant over time.\n\nPrevious\u00ab rasa.validatorNextRasa Open Source Change Log \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1631": {"text": "Version: 3.x\n\nRasa Open Source Change Log\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to Semantic Versioning starting with version 1.0.\n\n[3.6.2] - 2023-07-06#\n\nRasa 3.6.2 (2023-07-06)                        \n\nBugfixes#\n\n#12602: Resolves the issue of importing TensorFlow on Docker for ARM64 architecture.\n\n[3.6.1] - 2023-07-03#\n\nRasa 3.6.1 (2023-07-03)                        \n\nImprovements#\n\n#12533: Add building multi-platform Docker image (amd64/arm64)#12543: Switch struct log to FilteringBoundLogger in order to retain log level set in the config.#12560: Add new anonymizable structlog keys.\n\nBugfixes#\n\n#12516: Add rasa_events to the list of anonymizable structlog keys and rename structlog keys.#12521: Introduce a validation step in rasa data validate and rasa train commands to identify non-existent paths and empty domains.#12556: Rich responses containing buttons with parentheses characters are now correctly parsed.\nPreviously any characters found between the first identified pair of () in response button took precedence.\n\nImproved Documentation#\n\n#12371: Update wording in Rasa Pro installation page.#12505: Document new PII Management section.#12527: Added Documentation for Realtime Markers Section.#12579: Add \"Rasa Pro Change Log\" to documentation.#12581: Document new Load Testing Guidelines section.#12597: Changes the formatting of realtime markers documentation page\n\n[3.6.0] - 2023-06-14#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1632": {"text": "[3.6.0] - 2023-06-14#\n\nRasa 3.6.0 (2023-06-14)                        \n\nDeprecations and Removals#\n\n#12355: Removed Python 3.7 support as it reaches its end of life in June 2023\n\nImprovements#", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1633": {"text": "Improvements#\n\n#11222: Add optional property ids to the nlg server request body.\nIDs will be transmitted to the NLG server and can be used to identify the response variation that should be used.#11775: Add building Docker container for arm64 (e.g. to allow running Rasa inside docker on M1/M2).#12162: Add support for Location data from Whatsapp on Twilio Channel#12324: Add validation to rasa train to align validation expectations with rasa data validate.\nAdd --skip-validation flag to disable validation and --fail-on-validation-warnings, --validation-max-history to rasa train to have the same options as rasa data validate.#12453: Updated tensorflow to version 2.11.1 for all platforms except Apple Silicon which stays on 2.11.0 as 2.11.1 is not available yet#12454: Slot mapping conditions accept active_loop specified as null in those cases when slots with this mapping condition\nshould be filled only outside form contexts.#12487: Add an optional description key to the Markers Configuration format. This can be used to add documentation and context about marker's usage. For example, a markers.yml can look likeCopymarker_name_provided: description: \u201cName slot has been set\u201d slot_was_set: name\nmarker_mood_expressed: description: \u201cUnhappy or Great Mood was expressed\u201d or: - intent: mood_unhappy - intent: mood_great\n\nBugfixes#\n\n#12467: Fix running custom form validation to update required slots at form activation when prefilled slots consist only of slots\nthat are not requested by the form.\n\nImproved Documentation#", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1634": {"text": "Improved Documentation#\n\n#12145: Explicitly set Node.js version to 12.x in order to run Docusaurus.#12160: Update obselete commands in docs README.#12168: Correct docker image name for deploy-rasa-pro-services in docs.#12169: Update Compatibility Matrix.#12266: Implement rasa data split stories to split stories data into train/test parts.#12362: Updated knowledge base action docs to reflect the improvements made in knowledge base actions in Rasa 3.6 version. This enhancement now allows users to query for the object attribute without the need for users to request a list of objects of a particular object type beforehand. The docs update mentions this under :::info New in 3.6 section.#12504: Fix dead link in Analytics documentation.\n\nMiscellaneous internal changes#\n\n#12291, #12329, #12332, #12365, #12372, #12386, #12492\n\n[3.5.11] - 2023-06-08#\n\nRasa 3.5.11 (2023-06-08)\n\nBugfixes#\n\n#12467: Fix running custom form validation to update required slots at form activation when prefilled slots consist only of slots\nthat are not requested by the form.\n\n[3.5.10] - 2023-05-23#\n\nRasa 3.5.10 (2023-05-23)\n\nImproved Documentation#\n\n#12437: Added documentation for spaces alpha\n\n[3.5.9] - 2023-05-19#\n\nRasa 3.5.9 (2023-05-19)\n\nNo significant changes.\n\n[3.5.8] - 2023-05-12#", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1635": {"text": "[3.5.8] - 2023-05-12#\n\nRasa 3.5.8 (2023-05-12)\n\nBugfixes#\n\n#12361: Explicitly handled BufferError exception - Local: Queue full in Kafka producer.\n\n[3.5.7] - 2023-05-09#\n\nRasa 3.5.7 (2023-05-09)\n\nBugfixes#\n\n#12314: SlotSet events will be emitted when the value set by the custom action is the same as the existing value of the slot. This was fixed for AugmentedMemoizationPolicy to work properly with truncated trackers.To restore the previous behaviour, the custom action can return a SlotSet only if the slot value has changed. For example,Copyclass CustomAction(Action):    def name(self) -> Text:        return \"custom_action\"\n    def run(self, dispatcher: CollectingDispatcher,            tracker: Tracker,            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:        # current value of the slot        slot_value = tracker.get_slot('my_slot')\n        # value of the entity        # this is parsed from the user utterance        entity_value = next(tracker.get_latest_entity_values(\"entity_name\"), None)\n        if slot_value != entity_value:          return[SlotSet(\"my_slot\", entity_value)]\n\n[3.5.6] - 2023-04-28#\n\nRasa 3.5.6 (2023-04-28)\n\nBugfixes#", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1636": {"text": "Bugfixes#\n\n#12280: Addresses Regular Expression Denial of Service vulnerability in slack connector (https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)#12325: Fix parsing of RabbitMQ URL provided in endpoints.yml file to include vhost path and query parameters.\nRe-allows inclusion of credentials in the URL as a regression fix (this was supported in 2.x).\n\n[3.5.5] - 2023-04-20#\n\nRasa 3.5.5 (2023-04-20)\n\nBugfixes#\n\n#12268: Allow slot mapping parameter intent to accept a list of intent names (as strings), in addition to accepting an intent name as a single string.#12271: Fix BlockingIOError when running rasa shell on utterances with more than 5KB of text.#12286: Use ruamel.yaml round-trip loader in order to preserve all comments after appending assistant_id to config.yml.#12295: Fix AttributeError: 'NoneType' object has no attribute 'send_response' caused by retrieving tracker via GET /conversations/{conversation_id}/tracker endpoint when action_session_start is customized in a custom action.\nThis was addressed by passing an instance of CollectingOutputChannel to the method retrieving the tracker from the MessageProcessor.\n\nImproved Documentation#", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1637": {"text": "Improved Documentation#\n\n#12272: Updated AWS model loading documentation to indicate what should AWS_ENDPOINT_URL environment variable be set to.\nAdded integration test for AWS model loading.#12279: Updated Rasa Pro Services documentation to add KAFKA_SSL_CA_LOCATION environment variable. Allows connections over SSL to Kafka#12290: Added note to CLI documentation to address encoding and color issues on certain Windows terminals\n\nMiscellaneous internal changes#\n\n#12267\n\n[3.5.4] - 2023-04-05#\n\nRasa 3.5.4 (2023-04-05)\n\nBugfixes#\n\n#12226: Fix issue with failures while publishing events to RabbitMQ after a RabbitMQ restart.\nThe fix consists of pinning aio-pika dependency to 8.2.3, since this issue was introduced in aio-pika v8.2.4.#12232: Patch redis Race Conditiion vulnerability.\n\nMiscellaneous internal changes#\n\n#12230, #12238\n\n[3.5.3] - 2023-03-30#\n\nRasa 3.5.3 (2023-03-30)\n\nImproved Documentation#\n\n#12209: Add new Rasa Pro page in docs, together with minimal content changes.\n\n[3.5.2] - 2023-03-30#\n\nRasa 3.5.2 (2023-03-30)\n\nImprovements#", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1638": {"text": "Improvements#\n\n#12144: Add a self-reference of the synonym in the EntitySynonymMapper to handle entities extracted in a casing different to synonym case. (For example if a synonym austria is added, entities extracted with any alternate casing of the synonym will also be mapped to austria). It addresses ATO-616\n\nBugfixes#\n\n#12189: Make custom actions inheriting from rasa-sdk FormValidationAction parent class an exception of the selective_domain rule and always send them domain.#12193: Fix 2 issues detected with the HTTP API:The GET /conversations/{conversation_id}/tracker endpoint was not returning the tracker with all sessions when include_events query parameter was set to ALL.\nThe fix constituted in using TrackerStore.retrieve_full_tracker method instead of TrackerStore.retrieve method in the function handling the GET /conversations/{conversation_id}/tracker endpoint.\nImplemented or updated this method across all tracker store subclasses.The GET /conversations/{conversation_id}/story endpoint was not returning all the stories for all sessions when all_sessions query parameter was set to true.\nThe fix constituted in using all events of the tracker to be converted in stories instead of only the applied_events.\n\nImproved Documentation#\n\n#12110: Add documentation for secrets managers.\n\n[3.5.1] - 2023-03-24#\n\nRasa 3.5.1 (2023-03-24)\n\nBugfixes#\n\n#12174: Fixes training DIETCLassifier on the GPU.A deterministic GPU implementation of SparseTensorDenseMatmulOp is not currently available\n\nImproved Documentation#", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1639": {"text": "Improved Documentation#\n\n#12127: Updated Test your assistant section to describe the new end-to-end testing feature.\nAlso updated CLI and telemetry reference docs.#12169: Update Compatibility Matrix.\n\n[3.5.0] - 2023-03-21#\n\nRasa 3.5.0 (2023-03-21)\n\nFeatures#\n\n#12053: Add a new required key (assistant_id) to config.yml to uniquely identify assistants in deployment.\nThe assistant identifier is extracted from the model metadata and added to the metadata of all dialogue events.\nRe-training will be required to include the assistant id in the event metadata.If the assistant identifier is missing from the config.yml or the default identifier value is not replaced, a random\nidentifier is generated during each training.An assistant running without an identifier will issue a warning that dialogue events without identifier metadata will be\nstreamed to the event broker.\n\nImprovements#\n\n#11998: Add capability to send compressed body in HTTP request to action server.\nUse COMPRESS_ACTION_SERVER_REQUEST=True to turn the feature on.\n\nBugfixes#\n\n#12136: Address potentially missing events with Pika consumer due to weak references on asynchronous tasks,\nas specifcied in Python official documentation.#12155: Sets a global seed for numpy, TensorFlow, keras, Python and CuDNN, to ensure consistent random number generation.\n\nImproved Documentation#\n\n#11893: Clarify in the docs, how rules are designed and how to use this behaviour to abort a rule\n\nMiscellaneous internal changes#\n\n#11924, #11926, #12006, #12022, #12092, #12135, #12137, #12140, #12154", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1640": {"text": "[3.4.14] - 2023-06-08#\n\nRasa 3.4.14 (2023-06-08)\n\nBugfixes#\n\n#12467: Fix running custom form validation to update required slots at form activation when prefilled slots consist only of slots\nthat are not requested by the form.\n\n[3.4.13] - 2023-05-19#\n\nRasa 3.4.13 (2023-05-19)\n\nNo significant changes.\n\n[3.4.12] - 2023-05-12#\n\nRasa 3.4.12 (2023-05-12)\n\nBugfixes#\n\n#12361: Explicitly handled BufferError exception - Local: Queue full in Kafka producer.\n\n[3.4.11] - 2023-05-09#\n\nRasa 3.4.11 (2023-05-09)\n\nBugfixes#", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1641": {"text": "Bugfixes#\n\n#12325: Fix parsing of RabbitMQ URL provided in endpoints.yml file to include vhost path and query parameters.\nRe-allows inclusion of credentials in the URL as a regression fix (this was supported in 2.x).#12364: SlotSet events will be emitted when the value set by the custom action is the same as the existing value of the slot. This was fixed for AugmentedMemoizationPolicy to work properly with truncated trackers.To restore the previous behaviour, the custom action can return a SlotSet only if the slot value has changed. For example,Copyclass CustomAction(Action):    def name(self) -> Text:        return \"custom_action\"\n    def run(self, dispatcher: CollectingDispatcher,            tracker: Tracker,            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:        # current value of the slot        slot_value = tracker.get_slot('my_slot')\n        # value of the entity        # this is parsed from the user utterance        entity_value = next(tracker.get_latest_entity_values(\"entity_name\"), None)\n        if slot_value != entity_value:          return[SlotSet(\"my_slot\", entity_value)]\n\nMiscellaneous internal changes#\n\n#12267\n\n[3.4.10] - 2023-04-17#\n\nRasa 3.4.10 (2023-04-17)\n\nMiscellaneous internal changes#\n\n#12255\n\n[3.4.9] - 2023-04-05#\n\nMiscellaneous internal changes#\n\n#12234\n\n[3.4.8] - 2023-04-03#", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1642": {"text": "[3.4.8] - 2023-04-03#\n\nRasa 3.4.8 (2023-04-03)\n\nBugfixes#\n\n#12186: Fix issue with failures while publishing events to RabbitMQ after a RabbitMQ restart.\nThe fix consists of pinning aio-pika dependency to 8.2.3, since this issue was introduced in aio-pika v8.2.4.\n\n[3.4.7] - 2023-03-30#\n\nRasa 3.4.7 (2023-03-30)\n\nImprovements#\n\n#12144: Add a self-reference of the synonym in the EntitySynonymMapper to handle entities extracted in a casing different to synonym case. (For example if a synonym austria is added, entities extracted with any alternate casing of the synonym will also be mapped to austria). It addresses ATO-616\n\nBugfixes#", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1643": {"text": "Bugfixes#\n\n#12139: Fix 2 issues detected with the HTTP API:The GET /conversations/{conversation_id}/tracker endpoint was not returning the tracker with all sessions when include_events query parameter was set to ALL.\nThe fix constituted in using TrackerStore.retrieve_full_tracker method instead of TrackerStore.retrieve method in the function handling the GET /conversations/{conversation_id}/tracker endpoint.\nImplemented or updated this method across all tracker store subclasses.The GET /conversations/{conversation_id}/story endpoint was not returning all the stories for all sessions when all_sessions query parameter was set to true.\nThe fix constituted in using all events of the tracker to be converted in stories instead of only the applied_events.#12189: Make custom actions inheriting from rasa-sdk FormValidationAction parent class an exception of the selective_domain rule and always send them domain.\n\n[3.4.6] - 2023-03-16#\n\nRasa 3.4.6 (2023-03-16)\n\nBugfixes#\n\n#12098: Fixes CountVectorFeaturizer to train when min_df != 1.\n\n[3.4.5] - 2023-03-09#\n\nRasa 3.4.5 (2023-03-09)\n\nBugfixes#\n\n#12059: Check unresolved slots before initiating model training.#12096: Fixes the bug when a slot (with from_intent mapping which contains no input for intent parameter) will no longer fill for any intent that is not under the not_intent parameter.#12099: Fix validation metrics calculation when batch_size is dynamic.\n\nImproved Documentation#", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1644": {"text": "Improved Documentation#\n\n#12062: Add a link to an existing docs section on how to test the audio channel on localhost.\n\n[3.4.4] - 2023-02-17#\n\nRasa 3.4.4 (2023-02-17)\n\nImprovements#\n\n#11997: Add capability to send compressed body in HTTP request to action server.\nUse COMPRESS_ACTION_SERVER_REQUEST=True to turn the feature on.\n\nBugfixes#\n\n#12052: Fix the error which resulted during merging multiple domain files where at least one of them contains custom actions that explicitly need send_domain set as True in the domain.\n\n[3.4.3] - 2023-02-14#\n\nRasa 3.4.3 (2023-02-14)\n\nImprovements#\n\n#12001: Add support for custom RulePolicy.#12013: Add capability to select which custom actions should receive domain when they are invoked.\n\nBugfixes#\n\n#11942: Fix calling the form validation action twice for the same user message triggering a form.#12033: Fix conditional response does not check other conditions if first condition matches.\n\nImproved Documentation#\n\n#11976: Add section in tracker store docs to document the fallback tracker store mechanism.\n\n[3.4.2] - 2023-01-27#\n\nRasa 3.4.2 (2023-01-27)\n\nBugfixes#", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1645": {"text": "Bugfixes#\n\n#11926: Decision to publish docs should not consider next major and minor alpha release versions.#11968: Exit training/running Rasa model when SpaCy runtime version is not compatible with the specified SpaCy model version.#11971: The new custom logging feature was not working due to small syntax issue in the argparse level.Previously, the file name passed using the argument --logging-config-file was never retrieved so it never creates the new custom config file with the desired formatting.\n\nMiscellaneous internal changes#\n\n#11924\n\n[3.4.1] - 2023-01-19#\n\nRasa 3.4.1 (2023-01-19)\n\nBugfixes#\n\n#11923: Changed categorical slot comparison to be case insensitive.#11929: Exit training when transformer_size is not divisible by the number_of_attention_heads parameter and update the transformer documentations.\n\nImproved Documentation#\n\n#11899: Update compatibility matrix between Rasa-plus and Rasa Pro services.\n\n[3.4.0] - 2022-12-14#\n\nRasa 3.4.0 (2022-12-14)\n\nFeatures#\n\n#11087: Add metadata to Websocket channel. Messages can now include a metadata object which will be included as metadata to Rasa.  The metadata can be supplied on a user configurable key with the metadata_key setting in the socketio section of the credentials.yml.\n\nImprovements#", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1646": {"text": "Improvements#\n\n#11517: Added ./docker/Dockerfile_pretrained_embeddings_spacy_it to include Spacy's Italian pre-trained model it_core_news_md.#11765: Replace kafka-python dependency with confluent-kafka async Producer API.#11773: Add support for Python 3.10 version.#2546: Added CLI option --logging-config-file to enable configuration of custom logs formatting.\n\nBugfixes#\n\n#11869: Implements a new CLI option --jwt-private-key required to have complete support for asymmetric algorithms as specified\noriginally in the docs.\n\nImproved Documentation#\n\n#11766: Clarify in the documentation how to write testing stories if a user presses a button with payload.#11801: Clarify prioritisation of used slot asking option in forms in documentation.\n\nMiscellaneous internal changes#\n\n#11742, #11800, #11817, #11877\n\n[3.3.8] - 2023-04-06#\n\nMiscellaneous internal changes#\n\n#12235\n\n[3.3.7] - 2023-03-31#\n\nImprovements#\n\n#12144: Add a self-reference of the synonym in the EntitySynonymMapper to handle entities extracted in a casing different to synonym case. (For example if a synonym austria is added, entities extracted with any alternate casing of the synonym will also be mapped to austria). It addresses ATO-616\n\nBugfixes#", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1647": {"text": "Bugfixes#\n\n#12187: Fix issue with failures while publishing events to RabbitMQ after a RabbitMQ restart.\nThe fix consists of pinning aio-pika dependency to 8.2.3, since this issue was introduced in aio-pika v8.2.4.#12192: Fix 2 issues detected with the HTTP API:The GET /conversations/{conversation_id}/tracker endpoint was not returning the tracker with all sessions when include_events query parameter was set to ALL.\nThe fix constituted in using TrackerStore.retrieve_full_tracker method instead of TrackerStore.retrieve method in the function handling the GET /conversations/{conversation_id}/tracker endpoint.\nImplemented or updated this method across all tracker store subclasses.The GET /conversations/{conversation_id}/story endpoint was not returning all the stories for all sessions when all_sessions query parameter was set to true.\nThe fix constituted in using all events of the tracker to be converted in stories instead of only the applied_events.\n\n[3.3.6] - 2023-03-09#\n\nRasa 3.3.6 (2023-03-09)\n\nBugfixes#\n\n#12103: Fixes the bug when a slot (with from_intent mapping which contains no input for intent parameter) will no longer fill for any intent that is not under the not_intent parameter.#12117: Fix validation metrics calculation when batch_size is dynamic.\n\n[3.3.5] - 2023-02-21#\n\nNo significant changes.\n\n[3.3.4] - 2023-02-14#\n\nRasa 3.3.4 (2023-02-14)\n\nImprovements#", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1648": {"text": "Improvements#\n\n#11996: Add capability to send compressed body in HTTP request to action server.\nUse COMPRESS_ACTION_SERVER_REQUEST=True to turn the feature on.#12001: Add support for custom RulePolicy.\n\n[3.3.3] - 2022-12-01#\n\nBugfixes#\n\n#11792: Bypass Windows path length restrictions upon saving and reading a model archive in rasa.engine.storage.LocalModelStorage.\n\nImprovements#\n\n#11819: Updated tensorflow to 2.8.4.\n\n[3.3.2] - 2022-11-30#\n\nImprovements#\n\n#11762: Added support for camembert french bert model\n\nBugfixes#\n\n#11818: Fixes RuntimeWarning: coroutine 'Bot.set_webhook' was never awaited issue encountered when starting the rasa server,\nwhich caused the Telegram bot to be unresponsive.\n\nImproved Documentation#\n\n#11768: The documentation was updated for Buttons using messages that start with '/'.\nPreviously, it wrongly stated that messages with '/' bypass NLU, which is not the case.#11799: Add documentation for Rasa Pro Services upgrades.\n\n[3.3.1] - 2022-11-09#\n\nImproved Documentation#\n\n#11721: Add docs on how to set up additional data lakes for Rasa Pro analytics pipeline.#11724: Update migration guide and form docs with prescriptive recommendation on how to implement dynamic forms with custom slot mappings.\n\nImprovements#\n\n#11732: Updated numpy and scikit learn version to fix vulnerabilities of those dependencies\n\n[3.3.0] - 2022-10-24#\n\nImprovements#", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1649": {"text": "Improvements#\n\n#11561: Added option --offset-timestamps-by-seconds to offset the timestamp of events when using rasa export#11578: Rasa supports native installations on Apple Silicon (M1 / M2). Please\nfollow the installation instructions and take a look at the limitations.#11596: Caching Message and Features fingerprints unless they are altered, saving up to 2/3 of fingerprinting time in our tests.#11598: Added package versions of component  dependencies as an additional part of fingerprinting calculation. Upgrading an dependency will thus lead to a retraining of the component in the future. Also, by changing fingerprint calculation, the next training after this change will be a complete retraining.#11623: Export events continuously rather than loading all events in memory first when\nusing rasa export. Events will be streamed right from the start rather\nthan loading all events first and pushing them to the broker afterwards.#11568: Adds new dependency pluggy, with which it was possible to implement new plugin functionality.\nThis plugin manager enables the extension and/or enhancement of the Rasa command line interface with functionality made available in the rasa-plus package.\n\nBugfixes#\n\n#11575: Fix BlockingIOError when running rasa interactive, after the upgrade of prompt-toolkit dependency.#11395: Fixes a bug that lead to initial slot values being incorporated into all rules by default, thus breaking most rules when the slot value changed from its initial value#11429: Made logistic regression classifier output a proper intent ranking and made ranking length configurable\n\nDeprecations and Removals#\n\n#11190: Remove code related to Rasa X local mode as it is deprecated and scheduled for removal.\n\nMiscellaneous internal changes#\n\n#11548\n\n[3.2.13] - 2023-03-09#", "chunk": 18, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1650": {"text": "[3.2.13] - 2023-03-09#\n\nRasa 3.2.13 (2023-03-09)\n\nBugfixes#\n\n#12099: Fix validation metrics calculation when batch_size is dynamic.#12102: Fixes the bug when a slot (with from_intent mapping which contains no input for intent parameter) will no longer fill for any intent that is not under the not_intent parameter.\n\n[3.2.12] - 2023-02-21#\n\nFeatures#\n\n#11087: Add metadata to Websocket channel. Messages can now include a metadata object which will be included as metadata to Rasa.  The metadata can be supplied on a user configurable key with the metadata_key setting in the socketio section of the credentials.yml.\n\nImprovements#\n\n#11995: Add capability to send compressed body in HTTP request to action server.\nUse COMPRESS_ACTION_SERVER_REQUEST=True to turn the feature on.\n\nBugfixes#\n\n#11926: Decision to publish docs should not consider next major and minor alpha release versions.\n\n[3.2.11] - 2022-12-05#\n\nImprovements#\n\n#11596: Caching Message and Features fingerprints unless they are altered, saving up to 2/3 of fingerprinting time in our tests.\n\nBugfixes#\n\n#11829: Implements a new CLI option --jwt-private-key required to have complete support for asymmetric algorithms as specified\noriginally in the docs.\n\n[3.2.10] - 2022-09-29#\n\nBugfixes#", "chunk": 19, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1651": {"text": "Bugfixes#\n\n#11588: Fixes scenarios in which a slot with from_trigger_intent mapping that specifies an active_loop condition was being filled despite that active_loop not being activated.\nIn addition, fixes scenario in which a slot with from_trigger_intent mapping without a specified active_loop mapping condition is only filled if the form gets activated.\nRemoves unnecessary validation warning that a slot with from_trigger_intent and a mapping condition should be included in the form's required_slots.#ato-161: Fixed a bug where DIETClassier crashed during training\nwhen both masked language modelling and evaluation\nduring training were used.\n\nImproved Documentation#\n\n#11571: Rasa SDK documentation lives now in Rasa Open Source documentation under the Rasa SDK category.\n\nMiscellaneous internal changes#\n\n#11552\n\n[3.2.9] - 2022-09-09#\n\nYanked.\n\n[3.2.8] - 2022-09-08#\n\nBugfixes#\n\n#11540: Fix bug where KeywordIntentClassifier overrides preceding intent classifiers' predictions\nalthough the KeyWordIntentClassifier was not matching any keywords.\n\n[3.2.7] - 2022-08-31#\n\nImprovements#\n\n#11448: Improve rasa data validate command so that it uses custom importers when they are defined in config file.\n\nBugfixes#\n\n#11311: Re-instates the REST channel metadata feature.  Metadata can be provided on the metadata key.\n\n[3.2.6] - 2022-08-12#\n\nBugfixes#", "chunk": 20, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1652": {"text": "Bugfixes#\n\n#11433: This fix makes sure that when a Domain object is loaded from multiple files where one file specifies a custom session config and the rest do not, the default session configuration does not override the custom session config.\n\nMiscellaneous internal changes#\n\n#11426, #11434\n\n[3.2.5] - 2022-08-05#\n\nBugfixes#\n\n#11294: Fix KeyError which resulted when action_two_stage_fallback got executed in a project whose domain contained slot mappings.#11390: Fixes regression in which slot mappings were prioritized according to reverse order as they were listed in the domain, instead of in order from first to last, as was implicitly expected in 2.x.\nClarifies this implicit priority order in the docs.#11394: Enables the dispatching of bot messages returned as events by slot validation actions.\n\n[3.2.4] - 2022-07-21#\n\nBugfixes#\n\n#11061: Added session_config key as valid domain key during domain loading from directory containing a separate domain file with session configuration.#11362: Run default action action_extract_slots after a custom action returns a UserUttered event to fill any applicable slots.#11368: Handle the case when an EndpointConfig object is given as parameter to the AwaitableTrackerStore.create() method.\n\n[3.2.3] - 2022-07-18#\n\nBugfixes#", "chunk": 21, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1653": {"text": "Bugfixes#\n\n#11305: - Fixed error in creating response when slack sends retry messages. Assigning None to response.text caused TypeError: Bad body type. Expected str, got NoneType.Fixed Slack triggering timeout after 3 seconds if the action execution is too slow. Running on_new_message as an asyncio background task instead of a blocking await fixes this by immediately returning a response with code 200.#11326: Revert change in #10295 that removed running the form validation action on activation of the form before the loop is active.#11333: SlotSet events will be emitted when the value set by the current user turn is the same as the existing value.Previously, ActionExtractSlots would not emit any SlotSet events if the new value was the same as the existing\none. This caused the augmented memoization policy to lose these slot values when truncating the tracker.\n\n[3.2.2] - 2022-07-05#\n\nImproved Documentation#\n\n#11207: Update documentation for customizable classes such as tracker stores, event brokers and lock stores.\n\nMiscellaneous internal changes#\n\n#11296\n\n[3.2.1] - 2022-06-17#\n\nBugfixes#\n\n#10430: Fix failed check in rasa data validate that verifies forms in rules or stories are consistent with the domain when the rule or story contains a default action as active_loop step.\n\n[3.2.0] - 2022-06-14#\n\nDeprecations and Removals#", "chunk": 22, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1654": {"text": "Deprecations and Removals#\n\n#10989: NLU training data in JSON format is deprecated and will be\nremoved in Rasa Open Source 4.0.\nPlease use rasa data convert nlu -f yaml --data <path to NLU data> to convert your\nNLU JSON data to YAML format before support for NLU JSON data is removed.\n\nImprovements#\n\n#10696: Make TrackerStore interface methods asynchronous and supply an AwaitableTrackerstore wrapper for custom tracker stores which do not implement the methods as asynchronous.#10897: Added flag use_gpu to TEDPolicy and UnexpecTEDIntentPolicy that can be used to enable training on CPU even when a GPU is available.#11102: Add --endpoints command line parameter to rasa train parser.\n\nBugfixes#\n\n#11129: The azure botframework channel now validates the incoming JSON Web Tokens (including signature).Previously, JWTs were not validated at all.#9386: rasa shell now outputs custom json unicode characters instead of \\uxxxx codes\n\nImproved Documentation#\n\n#11130: Clarify aspects of the API spec\nGET /status endpoint: Correct response schema for model_id - a string, not an object.GET /conversations/{conversation_id}/tracker: Describe each of the enum options for include_events query parameterPOST & PUT /conversations/{conversation_id}/tracker/eventss: Events schema added for each event typeGET /conversations/{conversation_id}/story: Clarified the all_sessions query parameter and default behaviour.POST /model/test/intents : Remove JSON payload option since it is not supportedPOST /model/parse: Explain what emulation_mode is and how it affects response results", "chunk": 23, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1655": {"text": "Miscellaneous internal changes#\n\n#11088, #11123, #9093, #9099\n\n[3.1.7] - 2022-08-30#\n\nMiscellaneous internal changes#\n\n#11522\n\n[3.1.6] - 2022-07-20#\n\nBugfixes#\n\n#11362: Run default action action_extract_slots after a custom action returns a UserUttered event to fill any applicable slots.\n\n[3.1.5] - 2022-07-15#\n\nBugfixes#\n\n#11333: SlotSet events will be emitted when the value set by the current user turn is the same as the existing value.Previously, ActionExtractSlots would not emit any SlotSet events if the new value was the same as the existing\none. This caused the augmented memoization policy to lose these slot values when truncating the tracker.\n\n[3.1.4] - 2022-06-21                          No significant changes.#\n\nUpgrade dependent libraries with security vulnerabilities (Pillow, TensorFlow, ujson).\n\n[3.1.3] - 2022-06-17#\n\nBugfixes#\n\n#11129: The azure botframework channel now validates the incoming JSON Web Tokens (including signature).Previously, JWTs were not validated at all.#11197: Backports fix for failed check in rasa data validate that verifies forms in rules or stories are consistent with the domain when the rule or story contains a default action as active_loop step.\n\n[3.1.2] - 2022-06-08#\n\nMiscellaneous internal changes#\n\n#11156, #11173\n\n[3.1.1] - 2022-06-03#\n\nBugfixes#", "chunk": 24, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1656": {"text": "Bugfixes#\n\n#10480: Remove warning for Rasa X localmode not being supported when the --production flag is present.#10908: Pin requirement for scipy<1.8.0 since scipy>=1.8.0 is not backward compatible with scipy<1.8.0 and additionally requires Python>=3.8, while Rasa supports Python 3.7 as well.#11149: Fix the extraction of values for slots with mapping conditions from trigger intents that activate a form, which was possible in 2.x.\n\n[3.1.0] - 2022-03-25#\n\nFeatures#\n\n#10203: Add configuration options (via env variables) for library logging.#10473: Support other recipe types.This pull request also adds support for graph recipes, see details at\nhttps://rasa.com/docs/rasa/model-configuration and check Graph Recipe page.Graph recipe is a raw format for specifying executed graph directly. This is\nuseful if you need a more powerful way to specify your model creation.#10545: Added optional ssl_keyfile, ssl_certfile, and ssl_ca_certs parameters to the Redis tracker store.#10650: Added LogisticRegressionClassifier to the NLU classifiers.This model is lightweight and might help in early prototyping. The training times typically decrease substantially, but the accuracy might be a bit lower too.#8762: Added support for Python 3.9.\n\nImprovements#", "chunk": 25, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1657": {"text": "Improvements#\n\n#10378: Bump TensorFlow version to 2.7.cautionWe can't guarantee the exact same output and hence model performance if your\nconfiguration uses LanguageModelFeaturizer. This applies to the case where the\nmodel is re-trained with the new rasa open source version without changing the\nconfiguration, random seeds, and data as well as to the case where a model trained with\na previous version of rasa open source is loaded with this new version for inference.We suggest training a new model if you are upgrading to this version of Rasa Open Source.#10444: Make rasa data validate check for duplicated intents, forms, responses\nand slots when using domains split between multiple files.#10899: Add an influence_conversation flag to entites to provide a shorthand for ignoring an entity for all intents.#9789: Add --request-timeout command line argument to rasa shell, allowing users to configure the time a request can take before it's terminated.\n\nBugfixes#", "chunk": 26, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1658": {"text": "Bugfixes#\n\n#10376: Validate regular expressions in nlu training data configuration.#10409: Unset the default values for num_threads and finetuning_epoch_fraction to None in order\nto fix cases when CLI defaults override the data from config.#10447: Update rasa data validate to not fail when active_loop is null#10570: Fixes Domain loading when domain config uses multiple yml files.Previously not all configures attributes were necessarily known when merging Domains, and in the case of entities were not being properly assigned to intents.#10606: Fix max_history truncation in AugmentedMemoizationPolicy to preserve the most recent UserUttered event.\nPreviously, AugmentedMemoizationPolicy failed to predict next action after long sequences of actions (longer than max_history) because the policy did not have access to the most recent user message.#10634: Add RASA_ENVIRONMENT header in Kafka only if the environmental variable is set.#10767: Merge domain entities as lists of dicts, not lists of lists to support entity roles and groups across multiple domains.#9351: Add an option to specify --domain for rasa test nlu CLI command.\n\nImproved Documentation#\n\n#10553: Fixed an over-indent in the Tokenizers section of the Components page of the docs.\n\nMiscellaneous internal changes#\n\n#10143, #10507, #10568, #10601, #10658, #10746, #10807, #9094, #9096, #9097, #9098\n\n[3.0.10] - 2022-03-15## [3.0.10] - 2022-03-15#\n\nBugfixes#", "chunk": 27, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1659": {"text": "Bugfixes#\n\n#10675: Fix broken conversion from Rasa JSON NLU data to Rasa YAML NLU data.\n\n[3.0.9] - 2022-03-11#\n\nBugfixes#\n\n#10412: Fix Socket IO connection issues by upgrading sanic to v21.12.The bug is caused by an invalid function signature and is fixed in v21.12.This update brings some deprecations in sanic:Sanic and Blueprint may no longer have arbitrary properties attached to themFixed this by moving user defined properties to the instance.ctx objectSanic and Blueprint forced to have compliant namesFixed this by using string literal names instead of the module's name via __name__sanic.exceptions.abort is DeprecatedFixed by replacing it with sanic.exceptions.SanicExceptionsanic.response.StreamingHTTPResponse is deprecatedFixed by replacing it with sanic.response.ResponseStream#10447: Update rasa data validate to not fail when active_loop is null\n\nImproved Documentation#\n\n#10798: Updated the model_confidence parameter in TEDPolicy and DIETClassifier. The linear_norm is removed\nas it is no longer supported.#10940: Added an additional step to Receiving Messages section in slack.mdx documentation. After a slack update this\nadditional step is needed to allow direct messages to the bot.#10957: Backport the updated deployment docs to 3.0.x.\n\n[3.0.8] - 2022-02-11#\n\nImprovements#", "chunk": 28, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1660": {"text": "Improvements#\n\n#10394: Allow single tokens in rasa end-to-end test files to be annotated with multiple entities.Some entity extractors (s.a. RegexEntityExtractor) can generate multiple entities from a single expression. Before this change, rasa test would fail in this case, because test stories could not be annotated correctly.\nNew annotation option isCopystories:  - story: Some story    steps:      - user: |          cancel my [iphone][{\"entity\":\"iphone\", \"value\":\"iphone\"},{\"entity\":\"smartphone\", \"value\":\"true\"}{\"entity\":\"mobile_service\", \"value\":\"true\"}]        intent: cancel_contract\n\nBugfixes#\n\n#10865: Fixed a bug where the POST /conversations/<conversation_id>/tracker/events endpoint repeated\nsession start events when appending events to a new tracker.\n\n[3.0.7] - 2022-02-09#\n\nBugfixes#\n\n#10516: Checkpoint weights were never loaded before. Implements overwriting checkpoint weights to the final model weights after training of DIETClassifier, ResponseSelector and TEDPolicy.#10782: Allow arbitrary keys under each slot in the domain to allow for custom slot types.#10840: Fix issue with missing running event loop in MainThread when starting Rasa Open\nSource for Rasa X with JWT secrets.\n\n[3.0.6] - 2022-01-28#\n\nDeprecations and Removals#\n\n#10590: Removed CompositionView.\n\nBugfixes#", "chunk": 29, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1661": {"text": "#10590: Removed CompositionView.\n\nBugfixes#\n\n#10504: Fixes a bug which was caused by DIETClassifier (ResponseSelector, SklearnIntentClassifier and CRFEntityExtractor have the same issue) trying to process message which didn't have required features. Implements removing unfeaturized messages for the above-mentioned components before training and prediction.#10540: Enable slots with from_entity mapping that are not part of a form's required slots to be set during active loop.#10673: Catch ValueError for any port values that cannot be cast to integer and re-raise as RasaException during the initialisation of SQLTrackerStore.#10728: Use tf.function for model prediction to improve inference speed.#10761: Tie prompt-toolkit to ^2.0 to fix rasa-shell.\n\nImproved Documentation#\n\n#10536: Update dynamic form behaviour docs section with an example on how to override required_slots in case of removal of a form required slot.\n\n[3.0.5] - 2022-01-19#\n\nBugfixes#\n\n#10519: Corrects transformer_size parameter value (None by default) with a default size during loading in case ResponseSelector contains transformer layers.\n\nMiscellaneous internal changes#\n\n#10385, #592\n\n[3.0.4] - 2021-12-22#\n\nMiscellaneous internal changes#\n\n#10572\n\n[3.0.3] - 2021-12-16#\n\nBugfixes#", "chunk": 30, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1662": {"text": "Bugfixes#\n\n#10448: Copy lookup tables to train and test folds in cross validation. Before, the generated folds did not have a copy of\nthe lookup tables from the original NLU data, so that RegexEntityExtractor could not recognize any entities during\nthe evaluation.#7645: Do not print warning when subintent actions have response.\n\nMiscellaneous internal changes#\n\n#9945\n\n[3.0.2] - 2021-12-09#\n\nBugfixes#\n\n#10374: Update SQLAlchemy version to a compatible one in case other dependencies force\na lower version.#10391: Fix overriding of default config with custom config containing nested dictionaries. Before,\nthe keys of a nested dictionary in the default config that were not specified in the\ncustom config got lost.#10401: Add UserWarning to alert users trying to run rasa x CLI command with rasa version 3.0 or higher that rasa-x currently doesn't support rasa 3.x.\n\nImproved Documentation#\n\n#10291: Added note to the slot mappings section of the migration guide to recommend checking dynamic form behavior on migrated assistants.\n\n[3.0.1] - 2021-12-02#\n\nBugfixes#\n\n#10235: Fix previous slots getting filled after a restart. Previously events were\nsearched from oldest to newest which meant we would find first occurrence of a\nmessage and use slots from thereafter. Now we use the last utterance or the\nrestart event.\n\nMiscellaneous internal changes#\n\n#10405\n\n[3.0.0] - 2021-11-23#\n\nDeprecations and Removals#", "chunk": 31, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1663": {"text": "#6487: Remove backwards compatibility code with Rasa Open Source 1.x, Rasa Enterprise 0.35, and other outdated\nbackwards compatibility code in rasa.cli.x, rasa.core.utils, rasa.model_testing, rasa.model_training\nand rasa.shared.core.events.#8569: Removed Python 3.6 support as it reaches its end of life in December 2021.#8862: Follow through on removing deprecation warnings for synchronous EventBroker methods.#8864: Follow through on deprecation warnings for policies and policy ensembles.#8867: Follow through on deprecation warnings for rasa.shared.data.#8868: Follow through on deprecation warnings for the Domain. Most importantly this will\nenforce the schema of the forms section in the domain file.\nThis further includes the removal of the UnfeaturizedSlot type.#8869: Remove deprecated change_form_to and set_form_validation methods from DialogueStateTracker.#8870: Remove the support of Markdown training data format. This includes:reading and writing of story files in Markdown formatreading and writing of NLU data in Markdown formatreading and writing of retrieval intent data in Markdown formatall the Markdown examples and tests that use Markdown#8871: Removed automatic renaming of deprecated action\naction_deactivate_form to action_deactivate_loop.\naction_deactivate_form will just be treated like other\nnon-existing actions from now on.#8872: Remove deprecated sorted_intent_examples method from TrainingData.#8873: Raising RasaException instead of deprecation warning when using", "chunk": 32, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1664": {"text": "class_from_module_path for loading types other than classes.#8874: Specifying the retrieve_events_from_previous_conversation_sessions kwarg for the any TrackerStore was deprecated and has now been removed.\nPlease use the retrieve_full_tracker() method instead.Deserialization of pickled trackers was deprecated and has now been removed.\nRasa will perform any future save operations of trackers using json serialisation.Removed catch for missing (deprecated) session_date when saving trackers in DynamoTrackerStore.#8879: Removed the deprecated dialogue policy state featurizers: BinarySingleStateFeature and LabelTokenizerSingleStateFeaturizer.Removed the deprecated method encode_all_actions of SingleStateFeaturizer. Use encode_all_labels instead.#8880: Follow through with removing deprecated policies: FormPolicy, MappingPolicy, FallbackPolicy, TwoStageFallbackPolicy, and SklearnPolicy.Remove warning about default value of max_history in MemoizationPolicy. The default value is now None.#8881: Follow through on deprecation warnings and remove code, tests, and docs for ConveRTTokenizer, LanguageModelTokenizer and HFTransformersNLP.#8883: rasa.shared.nlu.training_data.message.Message method get_combined_intent_response_key has been removed. get_full_intent should now be used in its place.#8974: Intent IDs sent with events (to kafka and elsewhere) have been removed, intent\nnames can be used instead (or if numerical values are needed for backwards\ncompatibility, one can also hash the names to get previous ID values, ie.\nhash(intent_name) is the old ID values). Intent IDs have been removed because\nthey were providing no extra value and integers that large were problematic for", "chunk": 33, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1665": {"text": "they were providing no extra value and integers that large were problematic for\nsome event broker implementations.#9236: Remove loop argument from train method in rasa.\nThis argument became redundant when Python 3.6 support was dropped as asyncio.run became available in Python 3.7.#9390: Remove template_variables and e2e arguments from get_stories method of TrainingDataImporter.\nThis argument was used in Markdown data format and became redundant once Markdown was removed.#9399: weight_sparsity has been removed. Developers should replace it with connection_density in the following way: connection_density = 1-weight_sparsity.softmax is not available as a loss_type anymore.The linear_norm option has been removed as possible value for model_confidence. Please, use softmax instead.minibatch has been removed as a value for tensorboard_log_level, use batch instead.Removed deprecation warnings related to the removed component config values.#9404: Follow through on removing deprecation warnings raised in these modules:rasa/server.pyrasa/core/agent.pyrasa/core/actions/action.pyrasa/core/channels/mattermost.pyrasa/core/nlg/generator.pyrasa/nlu/registry.py#9432: Remove deprecation warnings associated with the \"number_additional_patterns\" parameter of\nrasa.nlu.featurizers.sparse_featurizer.regex_featurizer.RegexFeaturizer.\nThis parameter is no longer needed for incremental training.Remove deprecation warnings associated with the \"additional_vocabulary_size\" parameter of\nrasa.nlu.featurizers.sparse_featurizer.count_vectors_featurizer.CountVectorsFeaturizer.", "chunk": 34, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1666": {"text": "This parameter is no longer needed for incremental training.Remove deprecated functions training_states_actions_and_entities and\ntraining_states_and_actions from rasa.core.featurizers.tracker_featurizers.TrackerFeaturizer.\nUse training_states_labels_and_entities and training_states_and_labels instead.#9455: Follow through on deprecation warning for NGramFeaturizer#9598: The CLI commands rasa data convert config and rasa data convert responses which\nconverted from the Rasa Open Source 1 to the Rasa Open Source 2 formats were removed.\nPlease use a Rasa Open Source 2 installation to convert your training data before\nmoving to Rasa Open Source 3.#9766: rasa.core.agent.Agent.visualize was removed. Please use rasa visualize or\nrasa.core.visualize.visualize instead.#9972: Removed slot auto-fill functionality, making the key invalid to use in the domain file.\nThe auto_fill parameter was also removed from the constructor of the Slot class.\nIn order to continue filling slots with entities of the same name, you now have to define a from_entity mapping in the slots section of the domain.\nTo learn more about how to migrate your 2.0 assistant, please read the migration guide.", "chunk": 35, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1667": {"text": "Features#", "chunk": 36, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1668": {"text": "#10150: Training data version upgraded from 2.0 to 3.0 due to breaking changes to format in Rasa Open Source 3.0#10170: A new experimental feature called Markers has been added.\nMarkers allow you to define points of interest in conversations as a set of conditions that need to be met.\nA new command rasa evaluate markers allows you to apply these conditions to your existing tracker stores\nand outputs the points at which the conditions were satisfied.#9803: Rasa Open Source now uses the model configuration to build adirected acyclic graph.\nThis graph describes the dependencies between the items in your model configuration and\nhow data flows between them. This has two major benefits:Rasa Open Source can use the computational graph to optimize the execution of your\nmodel. Examples for this are efficient caching of training steps or executing\nindependent steps in parallel.Rasa Open Source can represent different model architectures flexibly. As long as the\ngraph remains acyclic Rasa Open Source can in theory pass any data to any graph\ncomponent based on the model configuration without having to tie the underlying\nsoftware architecture to the used model architecture.This change required changes to custom policies and custom NLU components. See the\ndocumentation for a detailed\nmigration guide.#9972: Added explicit mechanism for slot filling that allows slots to be set and/or updated throughout the conversation.\nThis mechanism is enabled by defining global slot mappings in the slots section of the domain file.In order to support this new functionality, implemented a new default action: action_extract_slots. This new action runs after each user turn and checks if any slots can be filled with information extracted from the last user message based on defined slot mappings.Since slot mappings were moved away from the forms section of the domain file, converted the form's required_slots to a list of slot names.", "chunk": 37, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1669": {"text": "In order to restrict certain mappings to a form, you can now use the conditions key in the mapping to define the applicable active_loop, like so:Copyslots: location: type: text influence_conversation: false mappings: - type: from_entity entity: city conditions: - active_loop: booking_formTo learn more about how to migrate your 2.0 assistant, please read the migration guide.", "chunk": 38, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1670": {"text": "Improvements#", "chunk": 39, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1671": {"text": "#10189: Updated the /status endpoint response payload, and relevant documentation, to return/reflect the updated 3.0 keys/values.#7619: Bump TensorFlow version to 2.6.  This update brings some security benefits (see TensorFlow\nrelease notes\nfor details). However, internal experiments suggest that it is also associated with\nincreased train and inference time, as well as increased memory usage.  You can read more about why we decided to update TensorFlow, and what the expected\nimpact is here.  If you experience a significant increase in train time, inference time, and/or memory\nusage, please let us know in the forum.  Users can no longer set TF_DETERMINISTIC_OPS=1 if they are using GPU(s) because a\ntf.errors.UnimplementedError will be thrown by TensorFlow (read more\nhere).  :::caution\nThis breaks backward compatibility of previously trained models.\nIt is not possible to load models trained with previous versions of Rasa Open Source. Please re-train\nyour assistant before trying to use this version.#8057: Added authentication support for connecting to external RabbitMQ servers.", "chunk": 40, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1672": {"text": "Currently user has to hardcode a username and a password in a URL in order to connect to an external RabbitMQ server.#8459: 1) Failed test stories will display full retrieval intents.2) Retrieval intents will be extracted during action prediction in test stories so that we won't have unnecessary mismatches anymore.Let's take this example story:Copy- story: test story steps: - user: |      what is your name? intent: chitchat/ask_name - action: utter_chitchat/ask_name - intent: bye - action: utter_byeBefore:Copy steps: - intent: chitchat   # 1) intent is not displayed in it's original form - action: utter_chitchat/ask_name  # predicted: utter_chitchat # 2) retrieval intent is not extracted during action prediction and we have a mismatch", "chunk": 41, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1673": {"text": "- intent: bye  # some other fail - action: utter_bye # some other failBoth 1) and 2) problems are solved.Now:Copy steps: - intent: chitchat/ask_name - action: utter_chitchat/ask_name - intent: bye  # some other fail - action: utter_bye # some other fail#8469: Added -i command line option to make RASA listen on a specific ip-address instead of any network interface#8760: rasa data validate now checks that forms referenced in active_loop directives are defined in the domain#8914: Every conversation event now includes in its metadata the ID of the model which loaded at the time it was created.#8924: Send indices of user message tokens along with the UserUttered event through the event broker to Rasa X.#8929: Added optional flag to convert intent ID hashes from integer to string in the KafkaEventBroker.#8933: Make it possible to use or functionality for slot_was_set events.#9068: Upgraded the spaCy dependency from version 3.0 to 3.1.#9133: Implemented fingerprint methods in these classes:EventSlotDialogueStateTracker#9193: Added debug message that logs when a response condition is used.#9485: The naming scheme for trained models was changed. Unless you provide a\n--fixed-model-name to rasa train, Rasa Open Source will now generate a new model", "chunk": 42, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1674": {"text": "name using the schema <timestamp>-<random name>.tar.gz, e.g.20211018-094821-composite-pita.tar.gz (for a model containing a trained NLU and dialogue model)nlu-20211018-094821-composite-pita.tar.gz (for a model containing only a trained NLU model but not a dialogue model)core-20211018-094821-composite-pita.tar.gz (for a model containing only a trained dialogue model but no NLU model)#9604: Due to changes in the model architecture the behavior of rasa train --dry-run changed.\nThe exit codes now have the following meaning:0 means that the model does not require an expensive retraining. However, the\nresponses might still require updating by running rasa train1 means that one or multiple components require to be retrained.8 means that the --force flag was used and hence any cached results are ignored\nand the entire model is retrained.#9642: Machine learning components like DIETClassifier, ResponseSelector and TEDPolicy using a ranking_length parameter will no longer report renormalised\nconfidences for the top predictions by default.A new parameter renormalize_confidences is added to these components which if set to True, renormalizes the confidences of top ranking_length number of predictions to sum up to 1. The default value is False, which means no renormalization will be applied by default. It is advised to leave it to False but if you are trying to reproduce the results from previous versions of Rasa Open Source, you can set it to True.Renormalization will only be applied if model_confidence=softmax is used.", "chunk": 43, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1675": {"text": "Bugfixes#\n\n#10079: Fixed validation behavior and logging output around unused intents and utterances.#8614: rasa test nlu --cross-validation uses autoconfiguration when no pipeline is defined instead of failing#9195: Update DynamoDb tracker store to correctly retrieve all sender_ids from a DynamoDb table.#9629: Fix for failed_test_stories.yml not printing the correct message when the extracted entity\nspecified in a test story is incorrect.#9852: Fix CVE-2021-41127\n\nImproved Documentation#\n\n#10095: Added new docs for Markers.#10230: Update pip in same command which installs rasa and clarify supported version in\ndocs.#8568: Update pika consumer code in Event Brokers documentation.#8930: Adds documentation on how to use CRFEntityExtractor with features from a dense featurizer (e.g. LanguageModelFeaturizer).#9366: Updated docs (Domain, Forms, Default Actions, Migration Guide, CLI) to provide more detail over the new slot mappings changes.#9711: Updated documentation publishing mechanisms to build one version of the documentation\nfor each major version of Rasa Open Source, starting from 2.x upwards. Previously, we were building one\nversion of the documentation for each minor version of Rasa Open Source, resulting in a poor user\nexperience and high maintenance costs.\n\nMiscellaneous internal changes#\n\n#10065, #10084, #10086, #10131, #9078, #9131, #9135, #9557\n\n[2.8.16] - 2021-12-09#\n\nImprovements#", "chunk": 44, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1676": {"text": "Improvements#\n\n#10413: The value of the RASA_ENVIRONMENT environmental variable is sent as a header in messages logged by KafkaEventBroker.\nThis value was previously only made available by PikaEventConsumer.\n\nBugfixes#\n\n#10458: Make action_metadata json serializable and make it available on the tracker. This is a backport of a fix in 3.0.0.\n\n[2.8.15] - 2021-11-25#\n\nBugfixes#\n\n#10381: Validate regular\nexpressions in nlu training data configuration.\n\n[2.8.14] - 2021-11-18#\n\nBugfixes#\n\n#10241: Bump TensorFlow version to 2.6.2. We have plans to port this\nchange to 3.x (see this issue).#10257: Downgrade google-auth to <2.\n\n[2.8.13] - 2021-11-11#\n\nBugfixes#\n\n#9949: Fixed new intent creation in rasa interactive command. Previously, this failed with 500\nfrom the server due to UnexpecTEDIntentPolicy trying to predict with the new intent not in\ndomain.#9982: Install mitie library when preparing test runs. This step was missing before\nand tests were thus failing as we have many tests which rely on mitie library.\nPreviously, make install-full was required.\n\nMiscellaneous internal changes#\n\n#10146, #9989\n\n[2.8.12] - 2021-10-21#\n\nBugfixes#", "chunk": 45, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1677": {"text": "Bugfixes#\n\n#9771: Fixed a bug where rasa test --fail-on-prediction-errors would raise a\nWrongPredictionException for entities which were actually predicted correctly.This happened in two ways:if for a user message some entities were extracted multiple times (by multiple entity\nextractors) but listed only once in the test story,if the order in which entities from a message were extracted didn't match the order\nin which they were listed in the test story.\n\nImproved Documentation#\n\n#9691: Improve the documentation for training TEDPolicy with data augmentation.\n\n[2.8.11] - 2021-10-20#\n\nBugfixes#\n\n#9858: Updates dependency on sanic-jwt (1.5.0 -> \">=1.6.0, <1.7.0\")This removes the need to pin the version of pyjwt as the newer version of sanic-jwt\nmanages this properly.\n\n[2.8.10] - 2021-10-14#\n\nBugfixes#", "chunk": 46, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1678": {"text": "#5657: Add List handling in the send_custom_json method on channels/facebook.py.\nBellow are some examples that could cause en error before.Example 1: when the whole json is a ListCopy[    {        \"blocks\": {            \"type\": \"progression_bar\",            \"text\": {\"text\": \"progression 1\", \"level\": \"1\"},        }    },    {\"sender\": {\"id\": \"example_id\"}},]Example 2: instead of being a Dict, blocks is a List when there are 2 type\nkeys under itCopy{    \"blocks\": [        {\"type\": \"title\", \"text\": {\"text\": \"Conversation progress\"}},        {            \"type\": \"progression_bar\",            \"text\": {\"text\": \"Look how far we are...\", \"level\": \"1\"},        },    ]}#7676: Fixed bug when using wit.ai training data to train.\nTraining failed with an error similarly to this:Copy  File \"./venv/lib/python3.8/site-packages/rasa/nlu/classifiers/diet_classifier.py\", line 803, in train    self.check_correct_entity_annotations(training_data)  File \"./venv/lib/python3.8/site-packages/rasa/nlu/extractors/extractor.py\", line 418, in check_correct_entity_annotations    entities_repr = [  File \"./venv/lib/python3.8/site-packages/rasa/nlu/extractors/extractor.py\", line 422, in <listcomp>    entity[ENTITY_ATTRIBUTE_VALUE],KeyError: 'value'#9851: Fix CVE-2021-41127", "chunk": 47, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1679": {"text": "[2.8.9] - 2021-10-08#\n\nImprovements#\n\n#7619: Bump TensorFlow version to 2.6.This update brings some security benefits (see TensorFlow\nrelease notes\nfor details). However, internal experiments suggest that it is also associated with\nincreased train and inference time, as well as increased memory usage.You can read more about why we decided to update TensorFlow, and what the expected\nimpact is here.If you experience a significant increase in train time, inference time, and/or memory\nusage, please let us know in the forum.Users can no longer set TF_DETERMINISTIC_OPS=1 if they are using GPU(s) because a\ntf.errors.UnimplementedError will be thrown by TensorFlow (read more\nhere).cautionThis breaks backward compatibility of previously trained models.\nIt is not possible to load models trained with previous versions of Rasa Open Source. Please re-train\nyour assistant before trying to use this version.\n\n[2.8.8] - 2021-10-06#\n\nImprovements#\n\n#7250: Added a function to display the actual text of a Token when inspecting\na Message in a pipeline, making it easier to debug.\n\nImproved Documentation#\n\n#9780: Removing the experimental feature warning for conditional response variations from the Rasa docs.\nThe behaviour of the feature remains unchanged.#9782: Updates quick install documentation with optional venv step, better pip install instructions, & M1 warning\n\n[2.8.7] - 2021-09-20#\n\nBugfixes#\n\n#9678: Explicitly set the upper limit for currently compatible TensorFlow versions.\n\n[2.8.6] - 2021-09-09#\n\nBugfixes#", "chunk": 48, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1680": {"text": "Bugfixes#\n\n#9302: Fix rules not being applied when a featurised categorical slot has as one of its allowed\nvalues none, NoNe, None or a similar value.\n\n[2.8.5] - 2021-09-06#\n\nBugfixes#\n\n#9476: AugmentedMemoizationPolicy is accelerated for large trackers#9542: Bump tensorflow to 2.3.4 to address security vulnerabilities\n\n[2.8.4] - 2021-09-02#\n\nImprovements#\n\n#5546: Increase speed of augmented lookup for AugmentedMemoizationPolicy\n\nBugfixes#\n\n#7362: Fix --data being treated as if non-optional on sub-commands of rasa data convert#9490: Fixes bug where hide_rule_turn was defaulting to None when ActionExecuted was deserialised.\n\nMiscellaneous internal changes#\n\n#8682\n\n[2.8.3] - 2021-08-19#\n\nBugfixes#\n\n#7695: Ignore checking that intent is in domain for E2E story utterances when running rasa data validate. Previously data validation would fail on E2E stories.\n\n[2.8.2] - 2021-08-04#\n\nBugfixes#\n\n#9203: Fixes a bug which caused training of UnexpecTEDIntentPolicy to crash when end-to-end training stories were included in the training data.Stories with end-to-end training data will now be skipped for the training of UnexpecTEDIntentPolicy.\n\nImproved Documentation#", "chunk": 49, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1681": {"text": "Improved Documentation#\n\n#8024: Removing the experimental feature warning for the story validation tool from the rasa docs.\nThe behaviour of the feature remains unchanged.#8791: Removing the experimental feature warning for entity roles and groups from the rasa docs,\nand from the code where it previously appeared as a print statement.\nThe behaviour of the feature remains otherwise unchanged.\n\n[2.8.1] - 2021-07-22#\n\nImprovements#\n\n#9085: Add support for cafile parameter in endpoints.yaml.\nThis will load a custom local certificate file and use it when making requests to that endpoint.For example:Copyaction_endpoint: url: https://localhost:5055/webhook cafile: ./cert.pemThis means that requests to the action server localhost:5055 will use the certificate cert.pem located in the current working directory.\n\nBugfixes#\n\n#9182: Fixes wrong overriding of epochs parameter when TEDPolicy or UnexpecTEDIntentPolicy is not loaded in finetune mode.\n\n[2.8.0] - 2021-07-12#\n\nDeprecations and Removals#", "chunk": 50, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1682": {"text": "Deprecations and Removals#\n\n#9045: The option model_confidence=linear_norm is deprecated and will be removed in Rasa Open Source 3.0.0.Rasa Open Source 2.3.0 introduced linear_norm as a possible value for model_confidence\nparameter in machine learning components such as DIETClassifier, ResponseSelector and TEDPolicy.\nBased on user feedback, we have identified multiple problems with this option.\nTherefore, model_confidence=linear_norm is now deprecated and\nwill be removed in Rasa Open Source 3.0.0. If you were using model_confidence=linear_norm for any of the mentioned components,\nwe recommend to revert it back to model_confidence=softmax and re-train the assistant. After re-training,\nwe also recommend to re-tune the thresholds for fallback components.#9091: The fallback mechanism for spaCy models has now been removed in Rasa 3.0.0.Rasa Open Source 2.5.0 introduced support for spaCy 3.0. This introduced a\nbreaking feature because models would no longer be manually linked. To make\nthe transition smooth Rasa would rely on the language parameter in the\nconfig.yml to fallback to a medium spaCy model if no model was configured\nfor the SpacyNLP component. In Rasa Open Source 3.0.0 and onwards the\nSpacyNLP component will require the model name (like \"en_core_web_md\")\nto be passed explicitly.\n\nFeatures#", "chunk": 51, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1683": {"text": "Features#\n\n#8724: Added sasl_mechanism as an optional configurable parameters for the Kafka Producer.#8913: Introduces a new policy called UnexpecTEDIntentPolicy.UnexpecTEDIntentPolicy helps you review conversations\nand also allows your bot to react to unexpected user turns in conversations.\nIt is an auxiliary policy that should only be used in conjunction with\nat least one other policy, as the only action that it can trigger\nis the special and newly introduced\naction_unlikely_intent action. The auto-configuration will include UnexpecTEDIntentPolicy in your\nconfiguration automatically, but you can also include it yourself\nin the policies section of the configuration:Copypolicies:  - name: UnexpecTEDIntentPolicy    epochs: 200    max_history: 5As part of the feature, it also introduces:IntentMaxHistoryTrackerFeaturizer\nto featurize the trackers for UnexpecTEDIntentPolicy.MultiLabelDotProductLoss to support UnexpecTEDIntentPolicy's multi-label training objective.A new default action called action_unlikely_intent.\n\n rasa test command has also been adapted to UnexpecTEDIntentPolicy:\n\nIf a test story contains action_unlikely_intent and the policy ensemble does not trigger it, this leads to\na test error (wrongly predicted action) and the corresponding story will be logged in failed_test_stories.yml.If the story does not contain action_unlikely_intent and Rasa Open Source does predict it then\nthe prediction of action_unlikely_intent will be ignored for the evaluation (and hence not lead\nto a prediction error) but the story will be logged in a file called stories_with_warnings.yml.", "chunk": 52, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1684": {"text": "The rasa data validate command will warn if action_unlikely_intent is\nincluded in the training stories. Accordingly, YAMLStoryWriter and MarkdownStoryWriter have been updated to not dump action_unlikely_intent when writing stories to a file.\n\n  :::caution\nThe introduction of a new default action breaks backward compatibility of previously trained models.\nIt is not possible to load models trained with previous versions of Rasa Open Source. Please re-train\nyour assistant before trying to use this version.\n\n  :::\n\nImprovements#", "chunk": 53, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1685": {"text": "#8127: Added detailed json schema validation for UserUttered, SlotSet, ActionExecuted and EntitiesAdded events both sent and received from the action server, as well as covered at high-level the validation of the rest of the 20 events.\nIn case the events are invalid, a ValidationError will be raised.#8232: Users don't need to specify an additional buffer size for sparse featurizers anymore during incremental training.Space for new sparse features are created dynamically inside the downstream machine learning\nmodels - DIETClassifier, ResponseSelector. In other words, no extra buffer is created in\nadvance for additional vocabulary items and space will be dynamically allocated for them inside the model.This means there's no need to specify additional_vocabulary_size for CountVectorsFeaturizer or\nnumber_additional_patterns for RegexFeaturizer. These parameters are now deprecated.BeforeCopypipeline: - name: \"WhitespaceTokenizer\" - name: \"RegexFeaturizer\" number_additional_patterns: 100 - name: \"CountVectorsFeaturizer\" additional_vocabulary_size: {text: 100, response: 20}NowCopypipeline: - name: \"WhitespaceTokenizer\" - name: \"RegexFeaturizer\" - name: \"CountVectorsFeaturizer\"Also, all custom layers specifically built for machine learning models - RasaSequenceLayer, RasaFeatureCombiningLayer\nand ConcatenateSparseDenseFeatures now inherit from RasaCustomLayer so that they support flexible incremental training out of the box.#8295: Speed up the contradiction check of the RulePolicy", "chunk": 54, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1686": {"text": "by a factor of 3.#8801: Change the confidence score assigned by FallbackClassifier to fallback intent to be the same as the fallback threshold.#8926: Issue a UserWarning if a specified domain folder contains files that look like YML files but cannot be parsed successfully.\nOnly invoked if user specifies a folder path in --domain paramater. Previously those invalid files in the specified folder were silently ignored.\nDoes not apply to individually specified domain YAML files, e.g. --domain /some/path/domain.yml, those being invalid will still raise an exception.", "chunk": 55, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1687": {"text": "Bugfixes#\n\n#8711: Fix for unnecessary retrain and duplication of folders in the model\n\nMiscellaneous internal changes#\n\n#8241, #8525, #8694, #8704\n\n[2.7.2] - 2021-08-09#\n\nBugfixes#\n\n#7695: Ignore checking that intent is in domain for E2E story utterances when running rasa data validate. Previously data validation would fail on E2E stories.#8711: Fix for unnecessary retrain and duplication of folders in the model\n\n[2.7.1] - 2021-06-16#\n\nBugfixes#\n\n#7286: Best model checkpoint allows for metrics to be equal to previous best if at least one\nmetric improves, rather than strict improvement for each metric.#8200: Fixes a bug where multiple plots overlap each other and are rendered incorrectly when comparing performance across multiple NLU pipelines.#8812: Don't evaluate entities if no entities present in test data.Also, catch exception in plot_paired_histogram when data is empty.\n\n[2.7.0] - 2021-06-03#\n\nImprovements#\n\n#7691: Changed the default config to train the RulePolicy before the TEDPolicy.\nThis means that conflicting rule/stories will be identified before a potentially slow training of the TEDPolicy.#7799: Updated validator used by rasa data validate to verify that actions used in stories and rules are present in the domain and that form slots match domain slots.#7912: Rename plot_histogram to plot_paired_histogram and fix missing bars in the plot.#8225: Changed --data option type in the ``rasa data validate``` command to allow more than one path to be passed.\n\nBugfixes#", "chunk": 56, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1688": {"text": "Bugfixes#\n\n#8152: The file failed_test_stories.yml (generated by rasa test) now also includes the wrongly predicted entity as a comment next to the entity of a user utterance.\nAdditionally, the comment printed next to the intent of a user utterance is printed only if the intent was wrongly predicted (irrelevantly if there was a wrongly predicted entity or not in the specific user utterance).#8309: Added check in PikaEventBroker constructor: if port cannot be cast to integer, raise RasaException#8388: Fixed bug where missing intent warnings appear when running rasa test#8611: Update should_retrain function to return the correct fingerprint comparison result\neven when there is a problem with model unpacking.#8719: Handle correctly Telegram edited message.\n\nMiscellaneous internal changes#\n\n#8591, #8641, #8654, #8658, #8802\n\n[2.6.3] - 2021-05-28#\n\nBugfixes#\n\n#8046: ResponseSelector can now be trained with the transformer enabled (i.e. when a positive\nnumber_of_transformer_layers is provided) even if one doesn't specify the transformer's\nsize. Previously, not specifying transformer_size led to an error.#8386: Return EntityEvaluationResult during evaluation of test stories only if parsed_message is not None.#8546: Ignore OSError in Sentry reporting.#8547: Replaced ValueError with RasaException in TED model _check_data method.#8639: Changed import to fix agent creation in Jupyter.\n\nMiscellaneous internal changes#\n\n#7906, #8544, #8725, #8726, #8727, #8728", "chunk": 57, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1689": {"text": "[2.6.2] - 2021-05-18#\n\nBugfixes#\n\n#8364: Fixed a bug where ListSlots were filled with single items\nin case only one matching entity was extracted for this slot.Values applied to ListSlots will be converted to a List\nin case they aren't one.#8581: Fix bug with false rule conflictsThis essentially reverts PR 8446, except for the tests.\nThe PR is redundant due to PR 8646.#8590: Handle AttributeError  thrown by empty slot mappings in domain form through refactoring.#8631: Fixed incorrect The action 'utter_<response selector intent>' is used in the stories, but is not a valid utterance action\nerror when running rasa data validate with response selector responses in the domain file.\n\nImproved Documentation#\n\n#8079: Added a note to clarify best practice for resetting all slots after form deactivation.\n\nMiscellaneous internal changes#\n\n#8587\n\n[2.6.1] - 2021-05-11#\n\nBugfixes#\n\n#7908: Made SchemaError message available to validator so that the reason why reason schema validation fails during rasa data validate is displayed when response text value is null.\nAdded warning message when deprecated MappingPolicy format is used in the domain.#8623: When there are multiple entities in a user message, they will get sorted when creating a\nrepresentation of the current dialogue state.Previously, the ordering was random, leading to inconsistent state representations. This\nwould sometimes lead to memoization policies failing to recall a memorised action.\n\n[2.6.0] - 2021-05-06#\n\nDeprecations and Removals#", "chunk": 58, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1690": {"text": "Deprecations and Removals#\n\n#261: In forms, the keyword required_slots should always precede the definition of slot mappings and the lack of it is deprecated.\nPlease see the migration guide for more information.#8428: rasa.data.get_test_directory, rasa.data.get_core_nlu_directories, and\nrasa.shared.nlu.training_data.training_data.TrainingData::get_core_nlu_directories\nare deprecated and will be removed in Rasa Open Source 3.0.0.#8498: Update the minimum compatible model version to \"2.6.0\".\nThis means all models trained with an earlier version will have to be retrained.\n\nFeatures#\n\n#8103: Feature enhancement enabling JWT authentication for the Socket.IO channel. Users can define jwt_key and jwt_method as parameters in their credentials file for authentication.#8180: Allows a Rasa bot to be connected to a Twilio Voice channel. More details in the Twilio Voice docs#8532: Conditional response variations are supported in the domain.yml without requiring users to write custom actions code.A condition can be a list of slot-value mapping constraints.\n\nImprovements#", "chunk": 59, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1691": {"text": "#261: Added an optional ignored_intents parameter in forms.To use it, add the ignored_intents parameter  in your domain.yml file after the forms name and provide a list of intents to ignore. Please see Forms for more information.This can be used in case the user never wants to fill any slots of a form with the specified intent, e.g. chitchat.#5786: Add function to carry max_history to featurizer#7589: Improved the machine learning models' codebase by factoring out shared feature-processing\nlogic into three custom layer classes:ConcatenateSparseDenseFeatures combines multiple sparse and dense feature tensors\ninto one.RasaFeatureCombiningLayer additionally combines sequence-level and sentence-level\nfeatures.RasaSequenceLayer is used for attributes with sequence-level features; it\nadditionally embeds the combined features with a transformer and facilitates masked", "chunk": 60, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1692": {"text": "additionally embeds the combined features with a transformer and facilitates masked\nlanguage modeling.#7685: Added the following usability improvements with respect to entities getting extracted multiple times:Added warnings for competing entity extractors at training time and for overlapping entities at inference timeImproved docs to help users handle overlapping entity problems.#7999: Replace weight_sparsity with connection_density in all transformer-based models and add guarantees about internal layers.We rename DenseWithSparseWeights into RandomlyConnectedDense, and guarantee that even at density zero the output is dense and every input is connected to at least one output. The former weight_sparsity parameter of DIET, TED, and the ResponseSelector, is now roughly equivalent to 1 - connection_density, except at very low densities (high sparsities).All layers and components that used to have a sparsity argument (Ffnn, TransformerRasaModel, MultiHeadAttention, TransformerEncoderLayer, TransformerEncoder) now have a density argument instead.#8074: Rasa test now prints a warning if the test stories contain bot utterances that are not part of the domain.#8263: Updated asyncio.Task.all_tasks to asyncio.all_tasks, with a fallback for python 3.6, which raises an AttributeError for asyncio.all_tasks. This removes the deprecation warning for the Task.all_tasks usage.#8461: Change variable name from i to array_2D#8560: Implement a new interface run_inference inside RasaModel which performs batch inferencing through tensorflow models.rasa_predict inside RasaModel has been made a private method now by changing it to _rasa_predict.", "chunk": 61, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1693": {"text": "Bugfixes#\n\n#7005: Fixed a bug for plotting trackers with non-ascii texts during interactive training by enforcing utf-8 encoding#7589: Fix masked language modeling in DIET to only apply masking to token-level\n(sequence-level) features. Previously, masking was applied to both token-level and\nsentence-level features.#8300: Make it possible to use null entities in stories.#8333: Introduce a skip_validation flag in order to speed up reading YAML files that were already validated.#8341: Fixed a bug in interactive training that\nlead to crashes for long Chinese, Japanese,\nor Korean user or bot utterances.\n\n[2.5.2] - 2021-06-16#\n\nFeatures#\n\n#8892: Added sasl_mechanism as an optional configurable parameters for the Kafka Producer.\n\n[2.5.1] - 2021-04-28#\n\nBugfixes#\n\n#8446: Fixed prediction for rules with multiple entities.#8545: Mitigated Matplotlib backend issue using lazy configuration\nand added a more explicit error message to guide users.\n\n[2.5.0] - 2021-04-12#\n\nDeprecations and Removals#", "chunk": 62, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1694": {"text": "Deprecations and Removals#\n\n#8141: The following import abbreviations were removed:rasa.core.train: Please use rasa.core.train.train instead.rasa.core.visualize: Please use rasa.core.visualize.visualize instead.rasa.nlu.train: Please use rasa.nlu.train.train instead.rasa.nlu.test: Please use rasa.nlu.test.run_evaluation instead.rasa.nlu.cross_validate: Please use rasa.nlu.test.cross_validate instead.\n\nFeatures#", "chunk": 63, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1695": {"text": "Features#\n\n#7869: Upgraded Rasa to be compatible with spaCy 3.0.This means that we can support more features for more languages but there are also a few changes.SpaCy 3.0 deprecated the spacy link <language model> command so that means that from now on the\nfull model name needs to be used in the config.yml file.BeforeBefore you could run spacy link en en_core_web_md and then we would be able\nto pick up the correct model from the language parameter.Copylanguage: en\npipeline: - name: SpacyNLPNowThis behavior will be deprecated and instead you'll want to be explicit in config.yml.Copylanguage: en\npipeline: - name: SpacyNLP model: en_core_web_mdFallbackTo make the transition easier, Rasa will try to fall back to a medium spaCy model when-ever\na compatible language is configured for the entire pipeline in config.yml even if you don't\nspecify a model. This fallback behavior is temporary and will be deprecated in Rasa 3.0.0.We've updated our docs to reflect these changes. All examples now show a direct link to the\ncorrect spaCy model. We've also added a warning to the SpaCyNLP\ndocs that explains the fallback behavior.\n\nImprovements#", "chunk": 64, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1696": {"text": "Improvements#\n\n#4280: Improved CLI startup time.#4596: Add augmentation and num_threads arguments to API POST /model/trainFix boolean casting issue for force_training and save_to_default_model_directory arguments#7477: Add minimum compatible version to --version command#7660: Updated warning for unexpected slot events during prediction time to Rasa Open Source\n2.0 YAML training data format.#7701: Hide dialogue turns predicted by RulePolicy in the tracker states\nfor ML-only policies like TEDPolicy\nif those dialogue turns only appear as rules in the training data and do not appear in stories.Add set_shared_policy_states(...) method to all policies.\nThis method sets _rule_only_data dict with keys:rule_only_slots: Slot names, which only occur in rules but not in stories.rule_only_loops: Loop names, which only occur in rules but not in stories.This information is needed for correct featurization to hide dialogue turns that appear only in rules.#8208: Faster reading of YAML NLU training data files.#8335: Added partition_by_sender flag to Kafka Producer to optionally associate events with Kafka partition based on sender_id.\n\nBugfixes#", "chunk": 65, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1697": {"text": "Bugfixes#\n\n#7260: Fixed the 'loading model' message which was logged twice when using rasa run.#7379: Change training data validation to only count nlu training examples.#7450: Rule tracker states no longer include the initial value of slots.\nRules now only require slot values when explicitly stated in the rule.#7640: rasa test, rasa test core and rasa test nlu no longer show temporary paths\nin case there are issues in the test files.#7690: Resolved memory problems with dense features and CRFEntityExtractor#7916: Handle empty intent and entity mapping in the domain.There is now an InvalidDomain exception raised if in the domain.yml file there are empty intent or entity mappings.\nAn example of empty intent and entity mappings is the following :Copyintents:  - greet:  - goodbye:\nentities:  - cuisine:  - number:#8102: Fixed a bug in a form where slot mapping doesn't work if the predicted intent name is substring for another intent name.#8114: Fixes bug where stories could not be retrieved if entities had no start or end.#8178: Catch ChannelNotFoundEntity exception coming from the pika broker and raise as ConnectionException.#8337: Fix bug with NoReturn throwing an exception in Python 3.7.0 when running rasa train#8382: Throw RasaException instead of ValueError in situations when environment variables\nspecified in YAML cannot be expanded.#8343: Updated python-engineio version for compatibility with python-socketio\n\nMiscellaneous internal changes#\n\n#6511, #7640, #7827, #8056, #8117, #8141, #8240\n\n[2.4.3] - 2021-03-26#\n\nBugfixes#", "chunk": 66, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1698": {"text": "Bugfixes#\n\n#8114: Fixes bug where stories could not be retrieved if entities had no start or end.\n\n[2.4.2] - 2021-03-25#\n\nBugfixes#\n\n#7835: Fix UnicodeException in is_key_in_yaml.#8258: Fixed the bug that events from previous conversation sessions would be re-saved in the SQLTrackerStore or MongoTrackerStore when retrieve_events_from_previous_conversation_sessions was true.\n\n[2.4.1] - 2021-03-23#\n\nBugfixes#\n\n#8194: Fix TEDPolicy training e2e entities when no entities are present in the stories\nbut there are entities in the domain.#8198: Fixed missing model configuration file validation.#8223: In Rasa 2.4.0, support for using template in utter_message when handling a custom action was wrongly deprecated. Both template and response are now supported, though note that template will be deprecated at Rasa 3.0.0.\n\n[2.4.0] - 2021-03-11#\n\nDeprecations and Removals#", "chunk": 67, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1699": {"text": "Deprecations and Removals#\n\n#6484: NLG ServerChanged request format to send response as well as template as a field. The template field will be removed in Rasa Open Source 3.0.0.rasa.core.agentThe terminology template is deprecated and replaced by response. Support for template from the NLG response will be removed in Rasa Open Source 3.0.0. Please see here for more details.rasa.core.nlg.generatorgenerate() now takes in  utter_action as a parameter.The terminology template is deprecated and replaced by response. Support for template in the NaturalLanguageGenerator will be removed in Rasa Open Source 3.0.0.rasa.shared.core.domainThe property templates is deprecated. Use responses instead. It will be removed in Rasa Open Source 3.0.0.retrieval_intent_templates will be removed in Rasa Open Source 3.0.0. Please use retrieval_intent_responses instead.is_retrieval_intent_template will be removed in Rasa Open Source 3.0.0. Please use is_retrieval_intent_response instead.check_missing_templates will be removed in Rasa Open Source 3.0.0. Please use check_missing_responses instead.Response SelectorThe field template_name will be deprecated in Rasa Open Source 3.0.0. Please use utter_action instead. Please see here for more details.The field response_templates will be deprecated in Rasa Open Source 3.0.0. Please use responses instead. Please see here for more details.\n\nImprovements#", "chunk": 68, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1700": {"text": "#7022: The following endpoints now require the existence of the conversation for the specified conversation ID, raising an exception and returning a 404 status code.GET /conversations/<conversation_id:path>/storyPOST /conversations/<conversation_id:path>/executePOST /conversations/<conversation_id:path>/predict#7438: Simplify our training by overwriting train_step instead of fit for our custom models.This allows us to use the build-in callbacks from Keras, such as the\nTensorboard Callback,\nwhich offers more functionality compared to what we had before.  :::warning\nIf you want to use Tensorboard for DIETClassifier, ResponseSelector, or TEDPolicy and log metrics after\nevery (mini)batch, please use 'batch' instead of 'minibatch' as 'tensorboard_log_level'.#7578: When TED is configured to extract entities rasa test now evaluates them against the labels in the test stories. Results are saved in /results along with the results for the NLU components that extract entities.#7680: We're now running integration tests for Rasa Open Source, with initial coverage for SQLTrackerStore (with PostgreSQL),\nRedisLockStore (with Redis) and PikaEventBroker (with RabbitMQ). The integration tests are now part of our\nCI, and can also be ran locally using make test-integration\n(see Rasa Open Source README for more information).#7763: Allow tests to be located anywhere, not just in tests directory.#7893: Model configuration files are now validated whether they match the expected schema.#7952: Speed up YAMLStoryReader.is_key_in_yaml function by making it to check if key is in YAML without", "chunk": 69, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1701": {"text": "actually parsing the text file.#7953: Speed up YAML parsing by reusing parsers, making the process of environment variable interpolation optional,\nand by not adding duplicating implicit resolvers and YAML constructors to ruamel.yaml#7955: Drastically improved finger printing time for large story graphs#8000: Remove console logging of conversation level F1-score and precision since these calculations were not meaningful.Add conversation level accuracy to core policy results logged to file in story_report.json after running rasa test core or rasa test.#8100: Improved the lock store debug log message when the process has to\nqueue because other messages have to be processed before this item.", "chunk": 70, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1702": {"text": "Bugfixes#", "chunk": 71, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1703": {"text": "#4612: Fixed the bug that OR statements in stories would break the check whether a model needs to be retrained#7063: Update the spec of POST /model/test/intents and add tests for cases when JSON is provided.Fix the incorrect temporary file extension for the data that gets extracted from the payload provided\nin the body of POST /model/test/intents request.#7113: Fix for the cli command rasa data convert config when migrating Mapping Policy and no rules.Making rasa data convert config migrate correctly the Mapping Policy when no rules are available. It updates the config.yml file by removing the MappingPolicy and adding the RulePolicy instead. Also, it creates the data/rules.yml file even if empty in the case of no available rules.#7470: Allow to have slots with values that result to a dictionary under the key slot_was_set (in stories.yml file).An example would be to have the following story step in stories.yml:Copy- slot_was_set: - some_slot: some_key: 'some_value' other_key: 'other_value'This would be allowed if the some_slot is also set accordingly in the domain.yml with type any.#7662: Update the fingerprinting function to recognize changes in lookup files.#7932: Fixed a bug when interpolating environment variables in YAML files which included $ in their value.", "chunk": 72, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1704": {"text": "This led to the following stack trace:CopyValueError: Error when trying to expand the environment variables in '${PASSWORD}'. Please make sure to also set these environment variables: '['$qwerty']'.(13 additional frame(s) were not displayed)...  File \"rasa/utils/endpoints.py\", line 26, in read_endpoint_config    content = rasa.shared.utils.io.read_config_file(filename)  File \"rasa/shared/utils/io.py\", line 527, in read_config_file    content = read_yaml_file(filename)  File \"rasa/shared/utils/io.py\", line 368, in read_yaml_file    return read_yaml(read_file(filename, DEFAULT_ENCODING))  File \"rasa/shared/utils/io.py\", line 349, in read_yaml    return yaml_parser.load(content) or {}  File \"rasa/shared/utils/io.py\", line 314, in env_var_constructor    \" variables: '{}'.\".format(value, not_expanded)#7949: The REQUESTED_SLOT always belongs to the currently active form.Previously it was possible that after form switching, the REQUESTED_SLOT was for the previous form.#96: Update the LanguageModelFeaturizer tests to reflect new default model weights for bert, and skip all bert tests\nwith default model weights on CI, run bert tests with bert-base-uncased on CI instead.", "chunk": 73, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1705": {"text": "Improved Documentation#\n\n#8080: Update links to Sanic docs in the documentation.#8109: Update Rasa Playground to correctly use tracking_id when calling API methods.\n\nMiscellaneous internal changes#\n\n#6484, #7737, #7879, #8016\n\n[2.3.5] - 2021-06-16#\n\nFeatures#\n\n#8860: Added sasl_mechanism as an optional configurable parameters for the Kafka Producer.\n\nImprovements#\n\n#7955: Drastically improved finger printing time for large story graphs#8100: Improved the lock store debug log message when the process has to\nqueue because other messages have to be processed before this item.\n\nBugfixes#\n\n#4612: Fixed the bug that OR statements in stories would break the check whether a model needs to be retrained#8649: Updated python-engineio dependency version for compatibility with python-socketio.\n\nImproved Documentation#\n\n#8080: Update links to Sanic docs in the documentation.\n\n[2.3.4] - 2021-02-26#\n\nBugfixes#", "chunk": 74, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1706": {"text": "Bugfixes#\n\n#8014: Setting model_confidence=cosine in DIETClassifier, ResponseSelector and TEDPolicy is deprecated and will no longer be available. This was introduced in Rasa Open Source version 2.3.0 but post-release experiments suggest that using cosine similarity as model's confidences can change the ranking of predicted labels which is wrong.model_confidence=inner is deprecated and is replaced by model_confidence=linear_norm as the former produced an unbounded range of confidences which broke the logic of assistants in various other places.We encourage you to try model_confidence=linear_norm which will produce a linearly normalized version of dot product similarities with each value in the range [0,1]. This can be done with the following config:Copy- name: DIETClassifier model_confidence: linear_norm constrain_similarities: TrueThis should ease up tuning fallback thresholds as confidences for wrong predictions are better distributed across the range [0, 1].If you trained a model with model_confidence=cosine or model_confidence=inner setting using previous versions of Rasa Open Source, please re-train by either removing the model_confidence option from the configuration or setting it to linear_norm.model_confidence=cosine is removed from the configuration generated by auto-configuration.\n\n[2.3.3] - 2021-02-25#\n\nBugfixes#\n\n#8001: Fixed bug where the conversation does not lock before handling a reminder event.\n\n[2.3.2] - 2021-02-22#\n\nBugfixes#\n\n#7972: Fix a bug where, if a user injects an intent using the HTTP API, slot auto-filling is not performed on the entities provided.\n\n[2.3.1] - 2021-02-17#\n\nBugfixes#", "chunk": 75, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1707": {"text": "Bugfixes#\n\n#7970: Fixed a YAML validation error which happened when executing multiple validations\nconcurrently. This could e.g. happen when sending concurrent requests to server\nendpoints which process YAML training data.\n\n[2.3.0] - 2021-02-11#\n\nImprovements#", "chunk": 76, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1708": {"text": "#5673: Expose diagnostic data for action and NLU predictions.Add diagnostic_data field to the Message\nand Prediction objects, which contain\ninformation about attention weights and other intermediate results of the inference computation.\nThis information can be used for debugging and fine-tuning, e.g. with RasaLit.For examples of how to access the diagnostic data, see here.#5986: Using the TrainingDataImporter interface to load the data in rasa test core.Failed test stories are now referenced by their absolute path instead of the relative path.#7292: Improve error handling and Sentry tracking:Raise MarkdownException when training data in Markdown format cannot be read.Raise InvalidEntityFormatException error instead of json.JSONDecodeError when entity format is in valid\nin training data.Gracefully handle empty sections in endpoint config files.Introduce ConnectionException error and raise it when TrackerStore and EventBroker\ncannot connect to 3rd party services, instead of raising exceptions from 3rd party libraries.Improve rasa.shared.utils.common.class_from_module_path function by making sure it always returns a class.\nThe function currently raises a deprecation warning if it detects an anomaly.Ignore MemoryError and asyncio.CancelledError in Sentry.rasa.shared.utils.validation.validate_training_data now raises a SchemaValidationError when validation fails\n(this error inherits jsonschema.ValidationError, ensuring backwards compatibility).#7303: Allow PolicyEnsemble in cases where calling individual policy's load method returns None.#7420: User message metadata can now be accessed via the default slot\nsession_started_metadata during the execution of a", "chunk": 77, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1709": {"text": "session_started_metadata during the execution of a\ncustom action_session_start.Copyfrom typing import Any, Text, Dict, Listfrom rasa_sdk import Action, Trackerfrom rasa_sdk.events import SlotSet, SessionStarted, ActionExecuted, EventType\nclass ActionSessionStart(Action): def name(self) -> Text: return \"action_session_start\"\n async def run(      self, dispatcher, tracker: Tracker, domain: Dict[Text, Any] ) -> List[Dict[Text, Any]]:        metadata = tracker.get_slot(\"session_started_metadata\")\n # Do something with the metadata print(metadata)\n # the session should begin with a `session_started` event and an `action_listen` # as a user message follows return [SessionStarted(), ActionExecuted(\"action_listen\")]#7579: Add BILOU tagging schema for entity extraction in end-to-end TEDPolicy.#7616: Added two new parameters constrain_similarities and model_confidence to machine learning (ML) components - DIETClassifier, ResponseSelector and TEDPolicy.Setting constrain_similarities=True adds a sigmoid cross-entropy loss on all similarity values to restrict them to an approximate range in DotProductLoss. This should help the models to perform better on real world test sets.", "chunk": 78, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1710": {"text": "By default, the parameter is set to False to preserve the old behaviour, but users are encouraged to set it to True and re-train their assistants as it will be set to True by default from Rasa Open Source 3.0.0 onwards.Parameter model_confidence affects how model's confidence for each label is computed during inference. It can take three values:softmax - Similarities between input and label embeddings are post-processed with a softmax function, as a result of which confidence for all labels sum up to 1.cosine - Cosine similarity between input label embeddings. Confidence for each label will be in the range [-1,1].inner - Dot product similarity between input and label embeddings. Confidence for each label will be in an unbounded range.Setting model_confidence=cosine should help users tune the fallback thresholds of their assistant better. The default value is softmax to preserve the old behaviour, but we recommend using cosine as that will be the new default value from Rasa Open Source 3.0.0 onwards. The value of this option does not affect how confidences are computed for entity predictions in DIETClassifier and TEDPolicy.With both the above recommendations, users should configure their ML component, e.g. DIETClassifier, asCopy- name: DIETClassifier model_confidence: cosine constrain_similarities: True ...Once the assistant is re-trained with the above configuration, users should also tune fallback confidence thresholds.Configuration option loss_type=softmax is now deprecated and will be removed in Rasa Open Source 3.0.0 . Use loss_type=cross_entropy instead.The default auto-configuration is changed to use constrain_similarities=True and model_confidence=cosine in ML components so that new users start with the recommended configuration.EDIT: Some post-release experiments revealed that using", "chunk": 79, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1711": {"text": "so that new users start with the recommended configuration.EDIT: Some post-release experiments revealed that using model_confidence=cosine is wrong as it can change the order of predicted labels. That's why this option was removed in Rasa Open Source version 2.3.3. model_confidence=inner is deprecated as it produces an unbounded range of confidences which can break the logic of assistants in various other places. Please use model_confidence=linear_norm which will produce a linearly normalized version of dot product similarities with each value in the range [0,1]. Please read more about this change under the notes for release 2.3.4.#7817: Use simple random uniform distribution of integers in negative sampling, because", "chunk": 80, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1712": {"text": "negative sampling with tf.while_loop and random shuffle inside creates a memory leak.#7848: Added support to configure exchange_name for pika event broker.#7867: If MaxHistoryTrackerFeaturizer is used, invert the dialogue sequence before passing\nit to the transformer so that the last dialogue input becomes the first one and\ntherefore always have the same positional encoding.", "chunk": 81, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1713": {"text": "Bugfixes#\n\n#7420: Fixed an error when using the endpoint GET /conversations/<conversation_id:path>/story\nwith a tracker which contained slots.#7707: Add the option to configure whether extracted entities should be split by comma (\",\") or not to TEDPolicy. Fixes\ncrash when this parameter is accessed during extraction.#7710: When switching forms, the next form will always correctly ask for the first required slot.Before, the next form did not ask for the slot if it was the same slot as the requested slot of the previous form.#7749: Fix the bug when RulePolicy handling loop predictions are overwritten by e2e TEDPolicy.#7751: When switching forms, the next form is cleanly activated.Before, the next form was correctly activated, but the previous form had wrongly uttered\nthe response that asked for the requested slot when slot validation for that slot\nhad failed.#7829: Fix a bug in incremental training when passing a specific model path with the --finetune argument.#7867: Fix the role of unidirectional_encoder in TED. This parameter is only applied to\ntransformers for text, action_text and label_action_text.\n\nMiscellaneous internal changes#\n\n#7420, #7515, #7574, #7601\n\n[2.2.10] - 2021-02-08#\n\nImprovements#\n\n#7069: Updated error message when using incompatible model versions.\n\nBugfixes#", "chunk": 82, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1714": {"text": "#7069: Updated error message when using incompatible model versions.\n\nBugfixes#\n\n#7885: Limit numpy version to < 1.2 as tensorflow is not compatible with numpy\nversions >= 1.2. pip versions <= 20.2 don't resolve dependencies conflicts\ncorrectly which could result in an incompatible numpy version and the following\nerror:CopyNotImplementedError: Cannot convert a symbolic Tensor (strided_slice_6:0) to a numpy array. This error may indicate that you're trying to pass a Tensor to a NumPy call, which is not supported\n\n[2.2.9] - 2021-02-02#\n\nBugfixes#\n\n#7861: Correctly include the confused_with field in the test report for the\nPOST /model/test/intents endpoint.\n\n[2.2.8] - 2021-01-28#\n\nBugfixes#\n\n#7764: Fixes a bug in forms where the next slot asked was not consistent after returning to a form from an unhappy path.\n\n[2.2.7] - 2021-01-25#\n\nImprovements#\n\n#7731: Add support for in RasaYAMLWriter for writing intent and example metadata back\ninto NLU YAML files.\n\nBugfixes#\n\n#4311: Fixed a bug with Domain.is_domain_file() that could raise an Exception in case the potential domain file is not a valid YAML.\n\n[2.2.6] - 2021-01-21#\n\nBugfixes#", "chunk": 83, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1715": {"text": "Bugfixes#\n\n#7717: Fix wrong warning The method 'EventBroker.close' was changed to be asynchronous when\nthe EventBroker.close was actually asynchronous.#7720: Fix incremental training for cases when training data does not contain entities but DIETClassifier is configured to perform entity recognition also.Now, the instance of RasaModelData inside DIETClassifier does not contain entities as a feature for training if there is no training data present for entity recognition.\n\n[2.2.5] - 2021-01-12#\n\nBugfixes#\n\n#7603: Fixed key-error bug on rasa data validate stories.\n\nMiscellaneous internal changes#\n\n#7711\n\n[2.2.4] - 2021-01-08#\n\nImprovements#\n\n#7520: Improve the warning in case the RulePolicy or the deprecated\nMappingPolicy are missing\nfrom the model's policies configuration. Changed the info log to a warning as one\nof this policies should be added to the model configuration.\n\nBugfixes#\n\n#7692: Explicitly specify the crypto extra dependency of pyjwt to ensure that the\ncryptography dependency is installed. cryptography is strictly required to be able\nto be able to verify JWT tokens.\n\n[2.2.3] - 2021-01-06#\n\nBugfixes#", "chunk": 84, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1716": {"text": "Bugfixes#\n\n#7622: Correctly retrieve intent ranking from UserUttered even during default affirmation\naction implementation.#7684: Fixed a problem when using the POST /model/test/intents endpoint together with a\nmodel server. The error looked as follows:CopyERROR    rasa.core.agent:agent.py:327 Could not load model due to Detected inconsistent loop usage. Trying to schedule a task on a new event loop, but scheduler was created with a different event loop. Make sure there is only one event loop in use and that the scheduler is running on that one.This also fixes a problem where testing a model from a model server would change the\nproduction model.\n\n[2.2.2] - 2020-12-21#\n\nBugfixes#\n\n#7592: Fixed incompatibility between Rasa Open Source 2.2.x and Rasa X < 0.35.\n\n[2.2.1] - 2020-12-17#\n\nBugfixes#\n\n#7557: Fixed a problem where a form wouldn't reject when the\nFormValidationAction re-implemented required_slots.#7585: Fixed an error when using the SQLTrackerStore\nwith a Postgres database and the parameter login_db specified.The error was:Copypsycopg2.errors.SyntaxError: syntax error at end of inputrasa-production_1  | LINE 1: SELECT 1 FROM pg_catalog.pg_database WHERE datname = ?\n\n[2.2.0] - 2020-12-16#\n\nDeprecations and Removals#", "chunk": 85, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1717": {"text": "Deprecations and Removals#\n\n#6410: Domain.random_template_for is deprecated and will be removed in Rasa Open Source\n3.0.0. You can alternatively use the TemplatedNaturalLanguageGenerator.Domain.action_names is deprecated and will be removed in Rasa Open Source\n3.0.0. Please use Domain.action_names_or_texts instead.#7458: Interfaces for Policy.__init__ and Policy.load have changed.\nSee migration guide for details.#7495: Deprecate training and test data in Markdown format. This includes:reading and writing of story files in Markdown formatreading and writing of NLU data in Markdown formatreading and writing of retrieval intent data in Markdown formatSupport for Markdown data will be removed entirely in Rasa Open Source 3.0.0.Please convert your existing Markdown data by using the commands\nfrom the migration guide:Copyrasa data convert nlu -f yaml --data={SOURCE_DIR} --out={TARGET_DIR}rasa data convert nlg -f yaml --data={SOURCE_DIR} --out={TARGET_DIR}rasa data convert core -f yaml --data={SOURCE_DIR} --out={TARGET_DIR}#7529: Domain.add_categorical_slot_default_value, Domain.add_requested_slot\nand Domain.add_knowledge_base_slots are deprecated and will be removed in Rasa Open\nSource 3.0.0. Their internal versions are now called during the Domain creation.\nCalling them manually is no longer required.\n\nFeatures#", "chunk": 86, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1718": {"text": "#6971: Incremental training of models in a pipeline is now supported.If you have added new NLU training examples or new stories/rules for\ndialogue manager, you don't need to train the pipeline from scratch.\nInstead, you can initialize the pipeline with a previously trained model\nand continue finetuning the model on the complete dataset consisting of\nnew training examples. To do so, use rasa train --finetune. For more\ndetailed explanation of the command, check out the docs on incremental\ntraining.Added a configuration parameter additional_vocabulary_size to\nCountVectorsFeaturizer\nand number_additional_patterns to RegexFeaturizer.\nThese parameters are useful to configure when using incremental training for your pipelines.#7408: Add the option to use cross-validation to the\nPOST /model/test/intents endpoint.\nTo use cross-validation specify the query parameter cross_validation_folds in addition\nto the training data in YAML format.Add option to run NLU evaluation\n(POST /model/test/intents) and\nmodel training (POST /model/train)\nasynchronously.\nTo trigger asynchronous processing specify\na callback URL in the query parameter callback_url which Rasa Open Source should send\nthe results to. This URL will also be called in case of errors.#7496: Make TED Policy an end-to-end policy. Namely, make it possible to train TED on stories that contain\nintent and entities or user text and bot actions or bot text.\nIf you don't have text in your stories, TED will behave the same way as before.", "chunk": 87, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1719": {"text": "If you don't have text in your stories, TED will behave the same way as before.\nAdd possibility to predict entities using TED.Here's an example of a dialogue in the Rasa story format:Copystories:- story: collect restaurant booking info  # name of the story - just for debugging  steps:  - intent: greet                          # user message with no entities  - action: utter_ask_howcanhelp           # action that the bot should execute  - intent: inform                         # user message with entities    entities:    - location: \"rome\"    - price: \"cheap\"  - bot: On it                             # actual text that bot can output  - action: utter_ask_cuisine  - user: I would like [spanish](cuisine). # actual text that user input  - action: utter_ask_num_peopleSome model options for TEDPolicy got renamed.\nPlease update your configuration files using the following mapping:Old model optionNew model optiontransformer_sizedictionary \u201ctransformer_size\u201d with keys\u201ctext\u201d, \u201caction_text\u201d, \u201clabel_action_text\u201d, \u201cdialogue\u201dnumber_of_transformer_layersdictionary \u201cnumber_of_transformer_layers\u201d with keys\u201ctext\u201d, \u201caction_text\u201d, \u201clabel_action_text\u201d, \u201cdialogue\u201ddense_dimensiondictionary \u201cdense_dimension\u201d with keys\u201ctext\u201d, \u201caction_text\u201d, \u201clabel_action_text\u201d, \u201cintent\u201d,\u201caction_name\u201d, \u201clabel_action_name\u201d, \u201centities\u201d, \u201cslots\u201d,\u201cactive_loop\u201d", "chunk": 88, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1720": {"text": "Improvements#\n\n#3998: Added a message showing the location where the failed stories file was saved.#7232: Add support for the top-level response keys quick_replies, attachment and elements refered to in rasa.core.channels.OutputChannel.send_reponse, as well as metadata.#7257: Changed the format of the histogram of confidence values for both correct and incorrect predictions produced by running rasa test.#7284: Run bandit checks on pull requests.\nIntroduce make static-checks command to run all static checks locally.#7397: Add rasa train --dry-run command that allows to check if training needs to be performed\nand what exactly needs to be retrained.#7408: POST /model/test/intents now returns\nthe report field for intent_evaluation, entity_evaluation and\nresponse_selection_evaluation as machine-readable JSON payload instead of string.#7436: Make rasa data validate stories work for end-to-end.The rasa data validate stories function now considers the tokenized user text instead of the plain text that is part of a state.\nThis is closer to what Rasa Core actually uses to distinguish states and thus captures more story structure problems.\n\nBugfixes#", "chunk": 89, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1721": {"text": "Bugfixes#\n\n#6804: Rename language_list to supported_language_list for JiebaTokenizer.#7244: A float slot returns unambiguous values - [1.0, <value>] if successfully converted, [0.0, 0.0] if not.\nThis makes it possible to distinguish an empty float slot from a slot set to 0.0.cautionThis change is model-breaking. Please retrain your models.#7306: Fix an erroneous attribute for Redis key prefix in rasa.core.tracker_store.RedisTrackerStore: 'RedisTrackerStore' object has no attribute 'prefix'.#7407: Remove token when its text (for example, whitespace) can't be tokenized by LM tokenizer (from LanguageModelFeaturizer).#7408: Temporary directories which were created during requests to the HTTP API\nare now cleaned up correctly once the request was processed.#7422: Add option use_word_boundaries for RegexFeaturizer and RegexEntityExtractor. To correctly process languages such as Chinese that don't use whitespace for word separation, the user needs to add the use_word_boundaries: False option to those two components.#7529: Correctly fingerprint the default domain slots. Previously this led to the issue\nthat rasa train core would always retrain the model even if the training data hasn't\nchanged.\n\nImproved Documentation#\n\n#7313: Return the \"Migrate from\" entry to the docs sidebar.\n\nMiscellaneous internal changes#\n\n#7167\n\n[2.1.3] - 2020-12-04#\n\nImprovements#", "chunk": 90, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1722": {"text": "Improvements#\n\n#7426: Removed multidict from the project dependencies. multidict continues to be a second\norder dependency of Rasa Open Source but will be determined by the dependencies which\nuse it instead of by Rasa Open Source directly.This resolves issues like the following:Copysanic 20.9.1 has requirement multidict==5.0.0, but you'll have multidict 4.6.0 which is incompatible.\n\nBugfixes#\n\n#7316: SingleStateFeaturizer checks whether it was trained with RegexInterpreter as\nnlu interpreter. If that is the case, RegexInterpreter is used during prediction.#7390: Make sure the responses are synced between NLU training data and the Domain even if there're no retrieval intents in the NLU training data.#7417: Categorical slots will have a default value set when just updating nlg data in the domain.Previously this resulted in InvalidDomain being thrown.#7418: - Preserve domain slot ordering while dumping it back to the file.Preserve multiline text examples of responses defined in domain and NLU training data.\n\n[2.1.2] - 2020-11-27#\n\nBugfixes#", "chunk": 91, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1723": {"text": "Bugfixes#\n\n#7235: Slots that use initial_value won't cause rule contradiction errors when conversation_start: true is used. Previously, two rules that differed only in their use of conversation_start would be flagged as contradicting when a slot used initial_value.In checking for incomplete rules, an action will be required to have set only those slots that the same action has set in another rule. Previously, an action was expected to have set also slots which, despite being present after this action in another rule, were not actually set by this action.#7345: Fixed Rasa Open Source not being able to fetch models from certain URLs.\n\n[2.1.1] - 2020-11-23#\n\nBugfixes#\n\n#7338: Sender ID is correctly set when copying the tracker and sending it to the action server (instead of sending the default value). This fixes a problem where the action server would only retrieve trackers with a sender_id default.\n\n[2.1.0] - 2020-11-17#\n\nDeprecations and Removals#", "chunk": 92, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1724": {"text": "#7136: The Policy interface was changed to return a PolicyPrediction object when\npredict_action_probabilities is called. Returning a list of probabilities directly\nis deprecated and support for this will be removed in Rasa Open Source 3.0.You can adapt your custom policy by wrapping your probabilities in a PolicyPrediction\nobject:Copyfrom rasa.core.policies.policy import Policy, PolicyPrediction# ... other imports\ndef predict_action_probabilities(        self,        tracker: DialogueStateTracker,        domain: Domain,        interpreter: NaturalLanguageInterpreter, **kwargs: Any, ) -> PolicyPrediction:    probabilities = ... # an action prediction of your policy return PolicyPrediction(probabilities, \"policy_name\", policy_priority=self.priority)The same change was applied to the PolicyEnsemble interface. Instead of returning\na tuple of action probabilities and policy name, it is now returning a\nPolicyPrediction object. Support for the old PolicyEnsemble interface will be\nremoved in Rasa Open Source 3.0.cautionThis change is model-breaking. Please retrain your models.#7263: The Pika Event Broker no longer supports\nthe environment variables RABBITMQ_SSL_CA_FILE and RABBITMQ_SSL_KEY_PASSWORD.\nYou can alternatively specify RABBITMQ_SSL_CA_FILE in the RabbitMQ connection URL as\ndescribed in the\nRabbitMQ documentation.Copyevent_broker: type: pika url: \"amqps://user:password@host?cacertfile=path_to_ca_cert&password=private_key_password\" queues: - my_queue", "chunk": 93, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1725": {"text": "Support for RABBITMQ_SSL_KEY_PASSWORD was removed entirely.The method Event Broker.close was changed to be asynchronous.\nSupport for synchronous implementations will be removed in Rasa Open Source 3.0.0.\nTo adapt your implementation add the async keyword:Copyfrom rasa.core.brokers.broker import EventBroker\nclass MyEventBroker(EventBroker):\n async def close(self) -> None: # clean up event broker resources", "chunk": 94, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1726": {"text": "Features#\n\n#7136: Policies can now return obligatory and optional events as part of their\nprediction. Obligatory events are always applied to the current conversation tracker.\nOptional events are only applied to the conversation tracker in case the policy wins.\n\nImprovements#", "chunk": 95, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1727": {"text": "#4341: Changed Agent.load method to support pathlib paths.#5715: If you are using the feature Entity Roles and Groups, you should now also list the roles and groups\nin your domain file if you want roles and groups to influence your conversations. For example:Copyentities:  - city:      roles:        - from        - to  - name  - topping:      groups:        - 1        - 2  - size:      groups:        - 1        - 2Entity roles and groups can now influence dialogue predictions. For more information see the section\nEntity Roles and Groups influencing dialogue predictions.#6285: Predictions of the FallbackClassifier are\nignored when\nevaluating the NLU model\nNote that the FallbackClassifier predictions still apply to\ntest stories.#6474: Adapt the training data reader and emulator for wit.ai to their latest format.\nUpdate the instructions in the\nmigrate from wit.ai documentation\nto run Rasa Open Source in wit.ai emulation mode.#6498: Adding configurable prefixes to Redis Tracker and Lock Stores so that a single Redis instance (and logical DB) can support multiple conversation trackers and locks.", "chunk": 96, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1728": {"text": "By default, conversations will be prefixed with tracker:... and all locks prefixed with lock:.... Additionally, you can add an alphanumeric-only prefix: value in endpoints.yml such that keys in redis will take the form value:tracker:... and value:lock:... respectively.#6571: Log the model's relative path when using CLI commands.#6852: Adds the option to configure whether extracted entities should be split by comma (\",\") or not. The default behaviour is True - i.e. split any list of extracted entities by comma. This makes sense for a list of ingredients in a recipie, for example \"avocado, tofu, cauliflower\", however doesn't make sense for an address such as \"Sch\u00f6nhauser Allee 175, 10119 Berlin, Germany\".In the latter case, add a new option to your config, e.g. if you are using the DIETClassifier this becomes:Copy...- name: DIETClassifier split_entities_by_comma: False...in which case, none of the extracted entities will be split by comma. To switch it on/off for specific entity types you can use:Copy...- name: DIETClassifier split_entities_by_comma: address: True ingredient: False...where both address and ingredient are two entity types.This feature is also available for CRFEntityExtractor.#6860: Fetching test stories from the HTTP API endpoint\nGET /conversations/<conversation_id>/story no longer triggers an update\nof the\nconversation session.Added a new boolean query parameter all_sessions (default: false) to the\nHTTP API endpoint for fetching test stories", "chunk": 97, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1729": {"text": "HTTP API endpoint for fetching test stories\n(GET /conversations/<conversation_id>/story).When setting ?all_sessions=true, the endpoint returns test stories for all\nconversation sessions for conversation_id.\nWhen setting ?all_sessions=all_sessions, or when omitting the all_sessions\nparameter, a single test story is returned for conversation_id. In cases where\nmultiple conversation sessions exist, only the last story is returned.Specifying the retrieve_events_from_previous_conversation_sessions\nkwarg for the Tracker Store class is deprecated and will be\nremoved in Rasa Open Source 3.0. Please use the retrieve_full_tracker() method\ninstead.#6865: Improve the rasa data convert nlg command and introduce the rasa data convert responses command\nto simplify the migration from pre-2.0 response selector format to the new format.#6966: Added warning for when an option is provided for a component that is not listed as a key in the defaults for that component.#6977: Forms no longer reject their execution before a potential custom\naction for validating / extracting slots was executed.\nForms continue to reject in two cases automatically:A slot was requested to be filled, but no slot mapping applied to the latest user\nmessage and there was no custom action for potentially extracting other slots.A slot was requested to be filled, but the custom action for validating / extracting\nslots didn't return any slot event.Additionally you can also reject the form execution manually by returning a\nActionExecutionRejected event within your custom action for validating / extracting\nslots.#7027: Remove dependency between ConveRTTokenizer and ConveRTFeaturizer. The ConveRTTokenizer is now deprecated, and the", "chunk": 98, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1730": {"text": "ConveRTFeaturizer can be used with any other Tokenizer.Remove dependency between HFTransformersNLP, LanguageModelTokenizer, and LanguageModelFeaturizer. Both\nHFTransformersNLP and LanguageModelTokenizer are now deprecated. LanguageModelFeaturizer implements the behavior\nof the stack and can be used with any other Tokenizer.#7061: Gray out \"Download\" button in Rasa Playground when the project is not yet ready to be downloaded.#7068: Slot mappings for Forms in the domain are now optional. If you do not\nprovide any slot mappings as part of the domain, you need to provide\ncustom slot mappings through a custom action.\nA form without slot mappings is specified as follows:Copyforms:  my_form:    # no mappingsThe action for forms can now be overridden by defining a custom action\nwith the same name as the form. This can be used to keep using the deprecated\nRasa Open Source FormAction which is implemented within the Rasa SDK. Note that it is\nnot recommended to override the form action for anything else than using the\ndeprecated Rasa SDK FormAction.#7102: Changed the default model weights loaded for HFTransformersNLP component.Use a language agnostic sentence embedding model\nas the default model. These model weights should help improve performance on\nintent classification and response selection.#7122: Add validations for slot mappings.\nIf a slot mapping is not valid, an InvalidDomain error is raised.#7132: Adapt the training data reader and emulator for LUIS to\ntheir latest format\nand add support for roles.\nUpdate the instructions in the\n\"Migrate from LUIS\" documentation page\nto reflect the recent changes made to the UI of LUIS.#7160: Adapt the training data reader and emulator for DialogFlow to\ntheir latest format", "chunk": 99, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1731": {"text": "their latest format\nand add support for regex entities.#7263: The Pika Event Broker was reimplemented with\nthe [aio-pika library[(https://aio-pika.readthedocs.io/en/latest/). Messages will\nnow be published to RabbitMQ asynchronously which improves the prediction performance.#7278: The confidence of the FallbackClassifier\npredictions is set to 1 - top intent confidence.", "chunk": 100, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1732": {"text": "Bugfixes#", "chunk": 101, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1733": {"text": "#5974: ActionRestart will now trigger ActionSessionStart as a followup action.#6582: Fixed a bug with rasa data split nlu which caused the resulting train / test ratio to sometimes differ from the ratio specified by the user or by default.The splitting algorithm ensures that every intent and response class appears in both the training and the test set. This means that each split must contain at least as many examples as there are classes, which for small datasets can contradict the requested training fraction. When this happens, the command issues a warning to the user that the requested training fraction can't be satisfied.#6721: Fixed bug where slots with influence_conversation=false affected the action\nprediction if they were set manually using the\nPOST /conversations/<conversation_id/tracker/events endpoint in the\nHTTP API.#6760: Update Pika event broker to be a separate process and make it use a\nmultiprocessing.Queue to send and process messages. This change should help\navoid situations when events stop being sent after a while.#6973: Ignore rules when validating stories#6986: - Updated Slack Connector for new Slack Events API#7001: Update Rasa Playground \"Download\" button to work correctly depending on the current chat state.#7002: Test stories can now contain both: normal intents and retrieval intents. The failed_test_stories.yml, generated by rasa test, also specifies the full retrieval intent now.\nPreviously rasa test would fail on test stories that specified retrieval intents.#7031: The converter tool is now able to convert test stories that contain a number as entity type.#7034: The converter tool now converts test stories and stories that contain full retrieval intents correctly.", "chunk": 102, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1734": {"text": "Previously the response keys were deleted during conversion to YAML.#7204: The slack connector requires a configuration for slack_signing_secret to make\nthe connector more secure. The configuration value needs to be added to your\ncredentials.yml if you are using the slack connector.#7246: Fixed model fingerprinting - it should avoid some more unecessary retrainings now.#7253: Fixed a problem when slots of type text or list were referenced by name only in\nthe training data and this was treated as an empty value. This means that the two\nfollowing stories are equivalent in case the slot type is text:Copystories:- story: Story referencing slot by name steps: - intent: greet - slot_was_set: - name\n- story: Story referencing slot with name and value steps: - intent: greet - slot_was_set: - name: \"some name\"\nNote that you still need to specify values for all other slot types as only text\nand list slots are featurized in a binary fashion.", "chunk": 103, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1735": {"text": "Improved Documentation#\n\n#6973: Correct data validation docs\n\nMiscellaneous internal changes#\n\n#6470, #7015, #7090\n\n[2.0.8] - 2020-11-26#\n\nBugfixes#\n\n#7235: Slots that use initial_value won't cause rule contradiction errors when conversation_start: true is used. Previously, two rules that differed only in their use of conversation_start would be flagged as contradicting when a slot used initial_value.In checking for incomplete rules, an action will be required to have set only those slots that the same action has set in another rule. Previously, an action was expected to have set also slots which, despite being present after this action in another rule, were not actually set by this action.\n\n[2.0.7] - 2020-11-24#\n\nBugfixes#\n\n#5974: ActionRestart will now trigger ActionSessionStart as a followup action.#7317: Fixed Rasa Open Source not being able to fetch models from certain URLs.This addresses an issue introduced in 2.0.3 where rasa-production could not use the models from rasa-x in Rasa X server mode.#7316: SingleStateFeaturizer checks whether it was trained with RegexInterpreter as\nNLU interpreter. If that is the case, RegexInterpreter is used during prediction.\n\n[2.0.6] - 2020-11-10#\n\nBugfixes#", "chunk": 104, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1736": {"text": "Bugfixes#\n\n#6629: Fixed a bug that occurred when setting multiple Sanic workers in combination with a custom Lock Store. Previously, if the number was set higher than 1 and you were using a custom lock store, it would reject because of a strict check to use a Redis Lock Store.#7176: Fixed a bug in the TwoStageFallback action which\nreverted too many events after the user successfully rephrased.\n\n[2.0.5] - 2020-11-10#\n\nBugfixes#\n\n#7200: Fix a bug because of which only one retrieval intent was present in all_retrieval_intent key of the output of ResponseSelector even if there were multiple retrieval intents present in the training data.\n\n[2.0.4] - 2020-11-08#\n\nBugfixes#\n\n#7140: Fixed error when starting Rasa X locally without a proper git setup.#7186: Properly validate incoming webhook requests for the Slack connector to be authentic.\n\n[2.0.3] - 2020-10-29#\n\nBugfixes#\n\n#7089: Fix ConveRTTokenizer failing because of wrong model URL by making the model_url parameter of ConveRTTokenizer mandatory.Since the ConveRT model was taken offline, we can no longer use\nthe earlier public URL of the model. Additionally, since the licence for the model is unknown,\nwe cannot host it ourselves. Users can still use the component by setting model_url to a community/self-hosted\nmodel URL or path to a local directory containing model files. For example:Copypipeline: - name: ConveRTTokenizer model_url: <remote/local path to model>#7108: Update example formbot to use FormValidationAction for slot validation", "chunk": 105, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1737": {"text": "[2.0.2] - 2020-10-22#\n\nBugfixes#\n\n#6691: Fix description of previous event in output of rasa data validate stories#7053: Fixed command line coloring for windows command lines running an encoding other than utf-8.\n\nMiscellaneous internal changes#\n\n#7057\n\n[2.0.1] - 2020-10-20#\n\nBugfixes#\n\n#7018: Create correct KafkaProducer for PLAINTEXT and SASL_SSL security protocols.#7033: - Fix YAMLStoryReader not being able to represent OR statements in conversion mode.Fix MarkdownStoryWriter not being able to write stories with OR statements (when loaded in conversion mode).\n\n[2.0.0] - 2020-10-07#\n\nDeprecations and Removals#", "chunk": 106, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1738": {"text": "#5757: Removed previously deprecated packages rasa_nlu and rasa_core.Use imports from rasa.core and rasa.nlu instead.#5758: Removed previously deprecated classes:event brokers (EventChannel and FileProducer, KafkaProducer,\nPikaProducer, SQLProducer)intent classifier EmbeddingIntentClassifierpolicy KerasPolicyRemoved previously deprecated methods:Agent.handle_channelsTrackerStore.create_tracker_storeRemoved support for pipeline templates in config.ymlRemoved deprecated training data keys entity_examples and intent_examples from\njson training data format.#5834: Removed restaurantbot example as it was confusing and not a great way to build a bot.#6296: LabelTokenizerSingleStateFeaturizer is deprecated. To replicate LabelTokenizerSingleStateFeaturizer functionality,\nadd a Tokenizer  with intent_tokenization_flag: True and CountVectorsFeaturizer to the NLU pipeline.\nAn example of elements to be added to the pipeline is shown in the improvement changelog 6296`.BinarySingleStateFeaturizer is deprecated and will be removed in the future. We recommend to switch to SingleStateFeaturizer.#6354: Specifying the parameters force and save_to_default_model_directory as part of the\nJSON payload when training a model using POST /model/train is now deprecated.\nPlease use the query parameters force_training and save_to_default_model_directory\ninstead. See the API documentation for more information.#6409: The conversation event form was renamed to active_loop. Rasa Open Source\nwill continue to be able to read and process old form events. Note that\nserialized trackers will no longer have the active_form field. Instead the\nactive_loop field will contain the same information. Story representations", "chunk": 107, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1739": {"text": "active_loop field will contain the same information. Story representations\nin Markdown and YAML will use active_loop instead of form to represent the\nevent.#6453: Removed support for queue argument in PikaEventBroker (use queues instead).Domain file:Removed support for templates key (use responses instead).Removed support for string responses (use dictionaries instead).NLU Component:Removed support for provides attribute, it's not needed anymore.Removed support for requires attribute (use required_components() instead).Removed _guess_format() utils method from rasa.nlu.training_data.loading (use guess_format instead).Removed several config options for TED Policy, DIETClassifier and ResponseSelector:hidden_layers_sizes_pre_dialhidden_layers_sizes_botdropratedroprate_adroprate_bhidden_layers_sizes_ahidden_layers_sizes_bnum_transformer_layersnum_headsdense_dimembed_dimnum_negmu_posmu_neguse_max_sim_negC2C_embevaluate_every_num_epochsevaluate_on_num_examplesPlease check the documentation for more information.#6463: The conversation event form_validation was renamed to loop_interrupted.\nRasa Open Source will continue to be able to read and process old form_validation\nevents.#6658: SklearnPolicy was deprecated. TEDPolicy is the preferred machine-learning policy for dialogue models.#6809: Slots of type unfeaturized are\nnow deprecated and will be removed in Rasa Open Source 3.0. Instead you should use\nthe property influence_conversation: false for every slot type as described in the\nmigration guide.#6934: Conversation sessions are now enabled by default", "chunk": 108, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1740": {"text": "migration guide.#6934: Conversation sessions are now enabled by default\nif your Domain does not contain a session configuration.\nPreviously a missing session configuration was treated as if conversation sessions\nwere disabled. You can explicitly disable conversation sessions using the following\nsnippet:domain.ymlCopysession_config:  # A session expiration time of `0`  # disables conversation sessions  session_expiration_time: 0#6952: Using the default action action_deactivate_form to deactivate\nthe currently active loop / Form is deprecated.\nPlease use action_deactivate_loop instead.", "chunk": 109, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1741": {"text": "Features#", "chunk": 110, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1742": {"text": "#4745: Added template name to the metadata of bot utterance events.BotUttered event contains a template_name property in its metadata for any\nnew bot message.#5086: Added a --num-threads CLI argument that can be passed to rasa train\nand will be used to train NLU components.#5510: You can now define what kind of features should be used by what component\n(see Choosing a Pipeline).You can set an alias via the option alias for every featurizer in your pipeline.\nThe alias can be anything, by default it is set to the full featurizer class name.\nYou can then specify, for example, on the\nDIETClassifier what features from which\nfeaturizers should be used.\nIf you don't set the option featurizers all available features will be used.\nThis is also the default behavior.\nCheck components to see what components have the option\nfeaturizers available.Here is an example pipeline that shows the new option.\nWe define an alias for all featurizers in the pipeline.\nAll features will be used in the DIETClassifier.\nHowever, the ResponseSelector only takes the features from the", "chunk": 111, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1743": {"text": "However, the ResponseSelector only takes the features from the\nConveRTFeaturizer and the CountVectorsFeaturizer (word level).Copypipeline:- name: ConveRTTokenizer- name: ConveRTFeaturizer  alias: \"convert\"- name: CountVectorsFeaturizer  alias: \"cvf_word\"- name: CountVectorsFeaturizer  alias: \"cvf_char\"  analyzer: char_wb  min_ngram: 1  max_ngram: 4- name: RegexFeaturizer  alias: \"regex\"- name: LexicalSyntacticFeaturizer  alias: \"lsf\"- name: DIETClassifier:- name: ResponseSelector  epochs: 50  featurizers: [\"convert\", \"cvf_word\"]- name: EntitySynonymMappercautionThis change is model-breaking. Please retrain your models.#5837: Added --port commandline argument to the interactive learning mode to allow\nchanging the port for the Rasa server running in the background.#5957: Add new entity extractor RegexEntityExtractor. The entity extractor extracts entities using the lookup tables\nand regexes defined in the training data. For more information see RegexEntityExtractor.#5996: Introduced a new YAML format for Core training data and implemented a parser\nfor it. Rasa Open Source can now read stories in both Markdown and YAML format.#6020: You can now enable threaded message responses from Rasa through the Slack connector.\nThis option is enabled using an optional configuration in the credentials.yml fileCopy slack: slack_token: slack_channel: use_threads: TrueButton support has also been added in the Slack connector.#6065: Add support for rules data and forms in YAML", "chunk": 112, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1744": {"text": "format.#6066: The NLU interpreter is now passed to the Policies during training and\ninference time. Note that this requires an additional parameter interpreter in the\nmethod predict_action_probabilities of the Policy interface. In case a\ncustom Policy implementation doesn't provide this parameter Rasa Open Source\nwill print a warning and omit passing the interpreter.#6088: Added the new dialogue policy RulePolicy which will replace the old \u201crule-like\u201d\npolicies Mapping Policy,\nFallback Policy,\nTwo-Stage Fallback Policy, and\nForm Policy. These policies are now\ndeprecated and will be removed in the future. Please see the\nrules documentation for more information.Added new NLU component FallbackClassifier\nwhich predicts an intent nlu_fallback in case the confidence was below a given\nthreshold. The intent nlu_fallback may\nthen be used to write stories / rules to handle the fallback in case of low NLU\nconfidence.Copypipeline:- # Other NLU components ...- name: FallbackClassifier  # If the highest ranked intent has a confidence lower than the threshold then  # the NLU pipeline predicts an intent `nlu_fallback` which you can then be used in  # stories / rules to implement an appropriate fallback.  threshold: 0.5#6132: Added possibility to split the domain into separate files. All YAML files\nunder the path specified with --domain will be scanned for domain\ninformation (e.g. intents, actions, etc) and then combined into a single domain.The default value for --domain is still domain.yml.#6275: Add optional metadata argument to NaturalLanguageInterpreter's parse method.#6354: The Rasa Open Source API endpoint POST /model/train now supports training data in YAML", "chunk": 113, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1745": {"text": "format. Please specify the header Content-Type: application/yaml when\ntraining a model using YAML training data.\nSee the API documentation for more information.#6374: Added a YAML schema and a writer for 2.0 Training Core data.#6404: Users can now use the rasa data convert {nlu|core} -f yaml command to convert training data from Markdown format to YAML format.#6536: Add option use_lemma to CountVectorsFeaturizer. By default it is set to True.use_lemma indicates whether the featurizer should use the lemma of a word for counting (if available) or not.\nIf this option is set to False it will use the word as it is.", "chunk": 114, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1746": {"text": "Improvements#", "chunk": 115, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1747": {"text": "#4536: Add support for Python 3.8.#5368: Changed the project structure for Rasa projects initialized with the\nCLI (using the rasa init command):\nactions.py -> actions/actions.py. actions is now a Python package (it contains\na file actions/__init__.py). In addition, the __init__.py at the\nroot of the project has been removed.#5481: DIETClassifier now also assigns a confidence value to entity predictions.#5637: Added behavior to the rasa --version command. It will now also list information\nabout the operating system, python version and rasa-sdk. This will make it easier\nfor users to file bug reports.#5743: Support for additional training metadata.Training data messages now to support kwargs and the Rasa JSON data reader\nincludes all fields when instantiating a training data instance.#5748: Standardize testing output. The following test output can be produced for intents,\nresponses, entities and stories:report: a detailed report with testing metrics per label (e.g. precision,\nrecall, accuracy, etc.)errors: a file that contains incorrect predictionssuccesses: a file that contains correct predictionsconfusion matrix: plot of confusion matrixhistogram: plot of confidence distribution (not available for stories)#5756: To avoid the problem of our entity extractors predicting entity labels for\njust a part of the words, we introduced a cleaning method after the prediction\nwas done. We should avoid the incorrect prediction in the first place.\nTo achieve this we will not tokenize words into sub-words anymore.", "chunk": 116, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1748": {"text": "To achieve this we will not tokenize words into sub-words anymore.\nWe take the mean feature vectors of the sub-words as the feature vector of the word.cautionThis change is model breaking. Please, retrain your models.#5759: Move option case_sensitive from the tokenizers to the featurizers.Remove the option from the WhitespaceTokenizer and ConveRTTokenizer.Add option case_sensitive to the RegexFeaturizer.#5766: If a user sends a voice message to the bot using Facebook, users messages was set to the attachments URL. The same is now also done for the rest of attachment types (image, video, and file).#5794: Creating a Domain using Domain.fromDict can no longer alter the input dictionary.\nPreviously, there could be problems when the input dictionary was re-used for other\nthings after creating the Domain from it.#5805: The debug-level logs when instantiating an\nSQLTrackerStore\nno longer show the password in plain text. Now, the URL is displayed with the password\nhidden, e.g. postgresql://username:***@localhost:5432.#5855: Shorten the information in tqdm during training ML algorithms based on the log\nlevel. If you train your model in debug mode, all available metrics will be\nshown during training, otherwise, the information is shorten.#5913: Ignore conversation test directory tests/ when importing a project\nusing MultiProjectImporter and use_e2e is False.\nPreviously, any story data found in a project subdirectory would be imported", "chunk": 117, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1749": {"text": "Previously, any story data found in a project subdirectory would be imported\nas training data.#5985: Implemented model checkpointing for DIET (including the response selector) and TED. The best model during training will be stored instead of just the last model. The model is evaluated on the basis of evaluate_every_number_of_epochs and evaluate_on_number_of_examples.Checkpointing is enabled iff the following is set for the models in the config.yml file:checkpoint_model: Trueevaluate_on_number_of_examples > 0The model is stored to whatever location has been specified with the --out parameter when calling rasa train nlu/core ....#6024: rasa data split nlu now makes sure that there is at least one example per\nintent and response in the test data.#6039: The method ensure_consistent_bilou_tagging now also considers the confidence values of the predicted tags\nwhen updating the BILOU tags.#6045: We updated the way how we save and use features in our NLU pipeline.The message object now has a dedicated field, called features, to store the\nfeatures that are generated in the NLU pipeline. We adapted all our featurizers in a\nway that sequence and sentence features are stored independently. This allows us to\nkeep different kind of features for the sequence and the sentence. For example, the\nLexicalSyntacticFeaturizer does not produce any sentence features anymore as our\nexperiments showed that those did not bring any performance gain just quite a lot of\nadditional values to store.We also modified the DIET architecture to process the sequence and sentence\nfeatures independently at first. The features are concatenated just before\nthe transformer.We also removed the __CLS__ token again. Our Tokenizers will not", "chunk": 118, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1750": {"text": "the transformer.We also removed the __CLS__ token again. Our Tokenizers will not\nadd this token anymore.cautionThis change is model-breaking. Please retrain your models.#6052: Add endpoint kwarg to rasa.jupyter.chat to enable using a custom action server while chatting with a model in a jupyter notebook.#6055: Support for rasa conversation id with special characters on the server side - necessary for some channels (e.g. Viber)#6123: Add support for proxy use in slack input channel.#6134: Log the number of examples per intent during training. Logging can be enabled using rasa train --debug.#6237: Support for other remote storages can be achieved by using an external library.#6273: Add output_channel query param to /conversations/<conversation_id>/tracker/events route, along with boolean execute_side_effects to optionally schedule/cancel reminders, and forward bot messages to output channel.#6276: Allow Rasa to boot when model loading exception occurs. Forward HTTP Error responses to standard log output.#6294: Rename DucklingHTTPExtractor to DucklingEntityExtractor.#6296: * Modified functionality of SingleStateFeaturizer. SingleStateFeaturizer uses trained NLU Interpreter to featurize intents and action names.\nThis modified SingleStateFeaturizer can replicate LabelTokenizerSingleStateFeaturizer functionality.\nThis component is deprecated from now on.\nTo replicate LabelTokenizerSingleStateFeaturizer functionality,\nadd a Tokenizer  with intent_tokenization_flag: True and CountVectorsFeaturizer to the NLU pipeline.", "chunk": 119, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1751": {"text": "Please update your configuration file.  For example:Copy```yamllanguage: enpipeline:  - name: WhitespaceTokenizer    intent_tokenization_flag: True  - name: CountVectorsFeaturizer```  Please train both NLU and Core (using rasa train) to use a trained tokenizer and featurizer for core featurization.  The new SingleStateFeaturizer stores slots, entities and forms in sparse features for more lightweight storage. BinarySingleStateFeaturizer is deprecated and will be removed in the future.\nWe recommend to switch to SingleStateFeaturizer.Modified TEDPolicy to handle sparse features. As a result, TEDPolicy may require more epochs than before to converge.Default TEDPolicy featurizer changed to MaxHistoryTrackerFeaturizer with infinite max history (takes all dialogue turns into account).Default batch size for TED increased from [8,32] to [64, 256]#6323: Response selector templates now support all features that\ndomain utterances do. They use the yaml format instead of markdown now.\nThis means you can now use buttons, images, ... in your FAQ or chitchat responses\n(assuming they are using the response selector).As a consequence, training data form in markdown has to have the file", "chunk": 120, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1752": {"text": "suffix .md from now on to allow proper file type detection-#6457: Support for test stories written in yaml format.#6466: Response Selectors are now trained on retrieval intent labels by default instead of the actual response text. For most models, this should improve training time and accuracy of the ResponseSelector.If you want to revert to the pre-2.0 default behavior, add the use_text_as_label=true parameter to your ResponseSelector component.You can now also have multiple response templates for a single sub-intent of a retrieval intent. The first response template\ncontaining the text attribute is picked for training(if use_text_as_label=True) and a random template is picked for bot's utterance just as how other utter_ templates are picked.All response selector related evaluation artifacts - report.json, successes.json, errors.json, confusion_matrix.png now use the sub-intent of the retrieval intent as the target and predicted labels instead of the actual response text.The output schema of ResponseSelector has changed - full_retrieval_intent and name have been deprecated in favour\nof intent_response_key and response_templates respectively. Additionally a key all_retrieval_intents\nis added to the response selector output which will hold a list of all retrieval intents(faq,chitchat, etc.)", "chunk": 121, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1753": {"text": "that are present in the training data.An example output looks like this -Copy\"response_selector\": {    \"all_retrieval_intents\": [\"faq\"],    \"default\": {      \"response\": {        \"id\": 1388783286124361986, \"confidence\": 1.0, \"intent_response_key\": \"faq/is_legit\",        \"response_templates\": [          {            \"text\": \"absolutely\",            \"image\": \"https://i.imgur.com/nGF1K8f.jpg\"          },          {            \"text\": \"I think so.\"          }        ],      },      \"ranking\": [        {          \"id\": 1388783286124361986,          \"confidence\": 1.0,          \"intent_response_key\": \"faq/is_legit\"        },      ]An example bot demonstrating how to use the ResponseSelector is added to the examples folder.#6472: Do not modify conversation tracker's latest_input_channel property when using POST /trigger_intent or ReminderScheduled.#6555: Do not set the output dimension of the sparse-to-dense layers to the same dimension as the dense features.Update default value of dense_dimension and concat_dimension for text in DIETClassifier to 128.#6591: Retrieval actions with respond_ prefix are now replaced with usual utterance actions with utter_ prefix.If you were using retrieval actions before, rename all of them to start with utter_ prefix. For example, respond_chitchat becomes utter_chitchat.", "chunk": 122, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1754": {"text": "Also, in order to keep the response templates more consistent, you should now add the utter_ prefix to all response templates defined for retrieval intents. For example, a response template chitchat/ask_name becomes utter_chitchat/ask_name. Note that the NLU examples for this will still be under chitchat/ask_name intent.\nThe example responseselectorbot should help clarify these changes further.#6613: Added telemetry reporting. Rasa uses telemetry to report anonymous usage information.\nThis information is essential to help improve Rasa Open Source for all users.\nReporting will be opt-out. More information can be found in our\ntelemetry documentation.#6757: Update extract_other_slots method inside FormAction to fill a slot from an entity\nwith a different name if corresponding slot mapping of from_entity type is unique.#6809: Slots of any type can now be ignored during a conversation.\nTo do so, specify the property influence_conversation: false for the slot.Copyslot: a_slot: type: text influence_conversation: falseThe property influence_conversation is set to true by default. See the\ndocumentation for slots for more information.A new slot type any was added. Slots of this type can store\nany value. Slots of type any are always ignored during conversations.#6856: Improved exception handling within Rasa Open Source.All exceptions that are somewhat expected (e.g. errors in file formats like\nconfigurations or training data) will share a common base class\nRasaException.::warning Backwards Incompatibility\nBase class for the exception raised when an action can not be found has been changed\nfrom a NameError to a ValueError.", "chunk": 123, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1755": {"text": "from a NameError to a ValueError.\n::Some other exceptions have also slightly changed:raise YamlSyntaxException instead of YAMLError (from ruamel) when\nfailing to load a yaml file with information about the line where loading failedintroduced MissingDependencyException as an exception raised if packages\nneed to be installed#6900: Debug logs from matplotlib libraries are now hidden by default and are configurable with the LOG_LEVEL_LIBRARIES environment variable.#6943: Update KafkaEventBroker to support SASL_SSL and PLAINTEXT protocols.", "chunk": 124, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1756": {"text": "Bugfixes#", "chunk": 125, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1757": {"text": "#3597: Fixed issue where temporary model directories were not removed after pulling from a model server.If the model pulled from the server was invalid, this could lead to large amounts of local storage usage.#5038: Fixed a bug in the CountVectorsFeaturizer which resulted in the very first\nmessage after loading a model to be processed incorrectly due to the vocabulary\nnot being loaded yet.#5135: Fixed Rasa shell skipping button messages if buttons are attached to\na message previous to the latest.#5385: Stack level for FutureWarning updated to level 2.#5453: If custom utter message contains no value or integer value, then it fails\nreturning custom utter message. Fixed by converting the template to type string.#5617: Don't create TensorBoard log files during prediction.#5638: Fixed DIET breaking with empty spaCy model.#5737: Pinned the library version for the Azure\nCloud Storage to 2.1.0 since the\npersistor is currently not compatible with later versions of the azure-storage-blob\nlibrary.#5755: Remove clean_up_entities from extractors that extract pre-defined entities.\nJust keep the clean up method for entity extractors that extract custom entities.#5792: Fixed issue where the DucklingHTTPExtractor component would\nnot work if its url contained a trailing slash.#5808: Changed to variable CERT_URI in hangouts.py to a string type#5850: Slots will be correctly interpolated for button responses.Previously this resulted in no interpolation due to a bug.#5905: Remove option token_pattern from CountVectorsFeaturizer.\nInstead all tokenizers now have the option token_pattern.", "chunk": 126, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1758": {"text": "Instead all tokenizers now have the option token_pattern.\nIf a regular expression is set, the tokenizer will apply the token pattern.#5921: Allow user to retry failed file exports in interactive training.#5964: Fixed a bug when custom metadata passed with the utterance always restarted the session.#5998: WhitespaceTokenizer does not remove vowel signs in Hindi anymore.#6042: Convert entity values coming from DucklingHTTPExtractor to string\nduring evaluation to avoid mismatches due to different types.#6053: Update FeatureSignature to store just the feature dimension instead of the\ncomplete shape. This change fixes the usage of the option share_hidden_layers\nin the DIETClassifier.#6087: Unescape the \\n, \\t, \\r, \\f, \\b tokens on reading nlu data from markdown files.On converting json files into markdown, the tokens mentioned above are espaced. These tokens need to be unescaped on loading the data from markdown to ensure that the data is treated in the same way.#6120: Fix the way training data is generated in rasa test nlu when using the -P flag.\nEach percentage of the training dataset used to be formed as a part of the last\nsampled training dataset and not as a sample from the original training dataset.#6143: Prevent WhitespaceTokenizer from outputting empty list of tokens.#6198: Add EntityExtractor as a required component for EntitySynonymMapper in a pipeline.#6222: Better handling of input sequences longer than the maximum sequence length that the HFTransformersNLP models can handle.During training, messages with longer sequence length should result in an error, whereas during inference they are\ngracefully handled but a debug message is logged. Ideally, passing messages longer than the acceptable maximum sequence", "chunk": 127, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1759": {"text": "lengths of each model should be avoided.#6231: When using the DynamoTrackerStore, if there are more than 100 DynamoDB tables, the tracker could attempt to re-create an existing table if that table was not among the first 100 listed by the dynamo API.#6282: Fixed a deprication warning that pops up due to changes in numpy#6291: Update rasabaster to fix an issue with syntax highlighting on \"Prototype an Assistant\" page.Update default stories and rules on \"Prototype an Assistant\" page.#6419: Fixed a bug in the serialise method of the EvaluationStore class which resulted in a wrong end-to-end evaluation of the predicted entities.#6535: Forms with slot mappings defined in domain.yml must now be a\ndictionary (with form names as keys). The previous syntax where forms was simply a\nlist of form names is still supported.#6577: Remove BILOU tag prefix from role and group labels when creating entities.#6601: Fixed a bug in the featurization of the boolean slot type. Previously, to set a slot value to \"true\",\nyou had to set it to \"1\", which is in conflict with the documentation. In older versions true\n(without quotes) was also possible, but now raised an error during yaml validation.#6603: Fixed a bug in rasa interactive. Now it exports the stories and nlu training data as yml file.#6711: Fixed slots not being featurized before first user utterance.Fixed AugmentedMemoizationPolicy to forget the first action on the first going back#6741: Fixed the remote URL of ConveRT model as it was recently updated by its authors.#6755: Treat the length of OOV token as 1 to fix token align issue when OOV occurred.#6757: Fixed the bug when entity was extracted even", "chunk": 128, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1760": {"text": "if it had a role or group but roles or groups were not expected.#6803: Fixed the bug that caused supported_language_list of Component to not work correctly.To avoid confusion, only one of supported_language_list and not_supported_language_list can be set to not None now#6897: Fixed issue where responses including text: \"\" and no custom key would incorrectly fail domain validation.#6898: Fixed issue where extra keys other than title and payload inside of buttons made a response fail domain validation.#6919: Do not filter training data in model.py but on component side.#6929: Check if a model was provided when executing rasa test core.\nIf not, print a useful error message and stop.#6805: Transfer only response templates for retrieval intents from domain to NLU Training Data.This avoids retraining the NLU model if one of the non retrieval intent response templates are edited.", "chunk": 129, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1761": {"text": "Improved Documentation#\n\n#4441: Added documentation on ambiguity_threshold parameter in Fallback Actions page.#4605: Remove outdated whitespace tokenizer warning in Testing Your Assistant documentation.#5640: Updated Facebook Messenger channel docs with supported attachment information#5675: Update rasa shell documentation to explain how to recreate external\nchannel session behavior.#5811: Event brokers documentation should say url instead of host.#5952: Update rasa init documentation to include tests/conversation_tests.md\nin the resulting directory tree.#6819: Update \"Validating Form Input\" section to include details about\nhow FormValidationAction class makes it easier to validate form slots in custom actions and how to use it.#6823: Update the examples in the API docs to use YAML instead of Markdown\n\nMiscellaneous internal changes#\n\n#5784, #5788, #6199, #6403, #6735\n\n[1.10.26] - 2021-06-17#\n\nFeatures#\n\n#8876: Added sasl_mechanism as an optional configurable parameter for the Kafka Producer.\n\n[1.10.25] - 2021-04-14#\n\nFeatures#\n\n#8429: Added partition_by_sender flag to Kafka Producer to optionally associate events with Kafka partition based on sender_id.\n\nImprovements#\n\n#8345: Improved the lock store debug log message when the process has to queue because other messages have to be processed before this item.\n\n[1.10.24] - 2021-03-29#\n\nBugfixes#\n\n#8019: Added group_id parameter back to KafkaEventBroker to fix error when instantiating event broker with a config containing the group_id parameter which is only relevant to the event consumer", "chunk": 130, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1762": {"text": "[1.10.23] - 2021-02-22#\n\nBugfixes#\n\n#7895: Fixed bug where the conversation does not lock before handling a reminder event.\n\n[1.10.22] - 2021-02-05#\n\nBugfixes#\n\n#7772: Backported the Rasa Open Source 2 PikaEventBroker implementation to address\nproblems when using it with multiple Sanic workers.\n\n[1.10.21] - 2021-02-01#\n\nImprovements#\n\n#7439: The url option now supports a list of servers url: ['10.0.0.158:32803','10.0.0.158:32804'].\nRemoved group_id because it is not a valid Kafka producer parameter.\n\nBugfixes#\n\n#7638: Fixed a bug that occurred when setting multiple Sanic workers in combination with a custom Lock Store. Previously, if the number was set higher than 1 and you were using a custom lock store, it would reject because of a strict check to use a Redis Lock Store.#7722: Fix a bug where, if a user injects an intent using the HTTP API, slot auto-filling is not performed on the entities provided.\n\n[1.10.20] - 2020-12-18#\n\nBugfixes#\n\n#7575: Fix scikit-learn crashing during evaluation of ResponseSelector predictions.\n\n[1.10.19] - 2020-12-17#\n\nImprovements#", "chunk": 131, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1763": {"text": "Improvements#\n\n#6251: Kafka Producer connection now remains active across sends. Added support for group and client id.\nThe Kafka producer also adds support for the PLAINTEXT and SASL_SSL protocols.DynamoDB table exists check fixed bug when more than 100 tables exist.#6814: Replace use of python-telegram-bot package with pyTelegramBotAPI#7423: Use response selector keys (sub-intents) as labels for plotting the confusion matrix during NLU evaluation to improve readability.\n\n[1.10.18] - 2020-11-26#\n\nBugfixes#\n\n#7340: Fixed an issues with the DynamoDB TrackerStore creating a new table entry/object for each TrackerStore update. The column session_date has been deprecated and should be removed manually in existing DynamoDB tables.\n\n[1.10.17] - 2020-11-12#\n\nBugfixes#\n\n#7219: Prevent the message handling process in PikaEventBroker from being terminated.\n\n[1.10.16] - 2020-10-15#\n\nBugfixes#\n\n#6703: Update Pika event broker to be a separate process and make it use a\nmultiprocessing.Queue to send and process messages. This change should help\navoid situations when events stop being sent after a while.\n\n[1.10.15] - 2020-10-09#\n\nBugfixes#", "chunk": 132, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1764": {"text": "Bugfixes#\n\n#3597: Fixed issue where temporary model directories were not removed after pulling from a model server. If the model pulled from the server was invalid, this could lead to large amounts of local storage usage.#6755: Treat the length of OOV token as 1 to fix token align issue when OOV occurred.#6899: Fixed MappingPolicy not predicting action_listen after the mapped action while running rasa test.\n\nImprovements#\n\n#6900: Debug logs from matplotlib libraries are now hidden by default and are configurable with the LOG_LEVEL_LIBRARIES environment variable.\n\n[1.10.14] - 2020-09-23#\n\nBugfixes#\n\n#6741: Fixed the remote URL of ConveRT model as it was recently updated by its authors. Also made the remote URL configurable at runtime in the corresponding tokenizer's and featurizer's configuration.\n\n[1.10.13] - 2020-09-22#\n\nBugfixes#\n\n#6577: Remove BILOU tag prefix from role and group labels when creating entities.\n\n[1.10.12] - 2020-09-03#\n\nBugfixes#\n\n#6549: Fix slow training of CRFEntityExtractor when using Entity Roles and Groups.\n\n[1.10.11] - 2020-08-21#\n\nImprovements#", "chunk": 133, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1765": {"text": "Improvements#\n\n#6044: Do not deepcopy slots when instantiating trackers. This leads to a significant\nspeedup when training on domains with a large number of slots.#6226: Added more debugging logs to the Lock Stores to simplify debugging in case ofconnection problems.Added a new parameter socket_timeout to the RedisLockStore. If Redis doesn't\nanswer within socket_timeout seconds to requests from Rasa Open Source, an error\nis raised. This avoids seemingly infinitely blocking connections and exposes connection\nproblems early.\n\nBugfixes#\n\n#5182: Fixed a bug where domain fields such as store_entities_as_slots were overridden\nwith defaults and therefore ignored.#6191: If two entities are separated by a comma (or any other symbol), extract them as two separate entities.#6340: If two entities are separated by a single space and uses BILOU tagging,\nextract them as two separate entities based on their BILOU tags.\n\n[1.10.10] - 2020-08-04#\n\nBugfixes#\n\n#6280: Fixed TypeError: expected string or bytes-like object\nissue caused by integer, boolean, and null values in templates.\n\n[1.10.9] - 2020-07-29#\n\nImprovements#\n\n#6255: Rasa Open Source will no longer add responses to the actions section of the\ndomain when persisting the domain as a file. This addresses related problems in Rasa X\nwhen Integrated Version Control introduced big diffs due to the added utterances\nin the actions section.\n\nBugfixes#\n\n#6160: Consider entity roles/groups during interactive learning.\n\n[1.10.8] - 2020-07-15#\n\nBugfixes#", "chunk": 134, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1766": {"text": "Bugfixes#\n\n#6075: Add 'Access-Control-Expose-Headers' for 'filename' header#6137: Fixed a bug where an invalid language variable prevents rasa from finding training examples when importing Dialogflow data.\n\n[1.10.7] - 2020-07-07#\n\nFeatures#\n\n#6150: Add not_supported_language_list to component to be able to define languages that a component can NOT handle.WhitespaceTokenizer is not able to process languages which are not separated by whitespace. WhitespaceTokenizer\nwill throw an error if it is used with Chinese, Japanese, and Thai.\n\nBugfixes#\n\n#6150: WhitespaceTokenizer only removes emoji if complete token matches emoji regex.\n\n[1.10.6] - 2020-07-06#\n\nBugfixes#\n\n#6143: Prevent WhitespaceTokenizer from outputting empty list of tokens.\n\n[1.10.5] - 2020-07-02#\n\nBugfixes#\n\n#6119: Explicitly remove all emojis which appear as unicode characters from the output of regex.sub inside WhitespaceTokenizer.\n\n[1.10.4] - 2020-07-01#\n\nBugfixes#", "chunk": 135, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1767": {"text": "Bugfixes#\n\n#5998: WhitespaceTokenizer does not remove vowel signs in Hindi anymore.#6031: Previously, specifying a lock store in the endpoint configuration with a type other than redis or in_memory\nwould lead to an AttributeError: 'str' object has no attribute 'type'. This bug is fixed now.#6032: Fix Interpreter parsed an intent ... warning when using the /model/parse\nendpoint with an NLU-only model.#6042: Convert entity values coming from any entity extractor to string during evaluation to avoid mismatches due to\ndifferent types.#6078: The assistant will respond through the webex channel to any user (room) communicating to it. Before the bot responded only to a fixed roomId set in the credentials.yml config file.\n\n[1.10.3] - 2020-06-12#\n\nImprovements#\n\n#3900: Reduced duplicate logs and warnings when running rasa train.\n\nBugfixes#\n\n#5972: Remove the clean_up_entities method from the DIETClassifier and CRFEntityExtractor as it let to incorrect\nentity predictions.#5976: Fix server crashes that occurred when Rasa Open Source pulls a model from a\nmodel server and an exception was thrown during\nmodel loading (such as a domain with invalid YAML).\n\n[1.10.2] - 2020-06-03#\n\nBugfixes#\n\n#5521: Responses used in ResponseSelector now support new lines with explicitly adding \\\\n between them.#5758: Fixed a bug in rasa export) which caused Rasa Open Source to only migrate conversation events from the last Session configuration.\n\n[1.10.1] - 2020-05-15#\n\nImprovements#", "chunk": 136, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1768": {"text": "Improvements#\n\n#5794: Creating a Domain using Domain.fromDict can no longer alter the input dictionary.\nPreviously, there could be problems when the input dictionary was re-used for other\nthings after creating the Domain from it.\n\nBugfixes#\n\n#5617: Don't create TensorBoard log files during prediction.#5638: Fix: DIET breaks with empty spaCy model#5755: Remove clean_up_entities from extractors that extract pre-defined entities.\nJust keep the clean up method for entity extractors that extract custom entities.#5792: Fixed issue where the DucklingHTTPExtractor component would\nnot work if its url contained a trailing slash.#5825: Fix list index out of range error in ensure_consistent_bilou_tagging.\n\nMiscellaneous internal changes#\n\n#5788\n\n[1.10.0] - 2020-04-28#\n\nFeatures#", "chunk": 137, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1769": {"text": "#3765: Add support for entities with roles and grouping of entities in Rasa NLU.You can now define a role and/or group label in addition to the entity type for entities.\nUse the role label if an entity can play different roles in your assistant.\nFor example, a city can be a destination or a departure city.\nThe group label can be used to group multiple entities together.\nFor example, you could group different pizza orders, so that you know what toppings goes with which pizza and\nwhat size which pizza has.\nFor more details see Entities Roles and Groups.To fill slots from entities with a specific role/group, you need to either use forms or use a custom action.\nWe updated the tracker method get_latest_entity_values to take an optional role/group label.\nIf you want to use a form, you can add the specific role/group label of interest to the slot mapping function\nfrom_entity (see Forms).noteComposite entities are currently just supported by the DIETClassifier and CRFEntityExtractor.#5465: Update training data format for NLU to support entities with a role or group label.You can now specify synonyms, roles, and groups of entities using the following data format:\nMarkdown:Copy[LA]{\"entity\": \"location\", \"role\": \"city\", \"group\": \"CA\", \"value\": \"Los Angeles\"}JSON:Copy\"entities\": [    {        \"start\": 10,        \"end\": 12,        \"value\": \"Los Angeles\",        \"entity\": \"location\",        \"role\": \"city\",        \"group\": \"CA\",    }]The markdown format [LA](location:Los Angeles) is deprecated. To update your training data file just\nexecute the following command on the terminal of your choice:", "chunk": 138, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1770": {"text": "execute the following command on the terminal of your choice:\nsed -i -E 's/\\\\[([^)]+)\\\\]\\\\(([^)]+):([^)]+)\\\\)/[\\\\1]{\"entity\": \"\\\\2\", \"value\": \"\\\\3\"}/g' nlu.mdFor more information about the new data format see Training Data Format.", "chunk": 139, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1771": {"text": "Improvements#", "chunk": 140, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1772": {"text": "#2224: Suppressed pika logs when establishing the connection. These log messages\nmostly happened when Rasa X and RabbitMQ were started at the same time. Since RabbitMQ\ncan take a few seconds to initialize, Rasa X has to re-try until the connection is\nestablished.\nIn case you suspect a different problem (such as failing authentication) you can\nre-enable the pika logs by setting the log level to DEBUG. To run Rasa Open\nSource in debug mode, use the --debug flag. To run Rasa X in debug mode, set the\nenvironment variable DEBUG_MODE to true.#3419: Include the source filename of a story in the failed storiesInclude the source filename of a story in the failed stories to make it easier to identify the file which contains the failed story.#5544: Add confusion matrix and \u201cconfused_with\u201d to response selection evaluationIf you are using ResponseSelectors, they now produce similiar outputs during NLU evaluation. Misclassfied responses are listed in a \u201cconfused_with\u201d attribute in the evaluation report. Similiarily, a confusion matrix of all responses is plotted.#5578: Added socketio to the compatible channels for Reminders and External Events.#5595: Update POST /model/train endpoint to accept retrieval action responses\nat the responses key of the JSON payload.#5627: All Rasa Open Source images are now using Python 3.7 instead of Python 3.6.#5635: Update dependencies based on the dependabot check.#5636: Add dropout between FFNN and DenseForSparse layers in DIETClassifier,", "chunk": 141, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1773": {"text": "ResponseSelector and EmbeddingIntentClassifier controlled by use_dense_input_dropout config parameter.#5646: DIETClassifier only counts as extractor in rasa test if it was actually trained for entity recognition.#5669: Remove regularization gradient for variables that don't have prediction gradient.#5672: Raise a warning in CRFEntityExtractor and DIETClassifier if entities are not correctly annotated in the\ntraining data, e.g. their start and end values do not match any start and end values of tokens.#5690: Add full_retrieval_intent property to ResponseSelector rankings#5717: Change default values for hyper-parameters in EmbeddingIntentClassifier and DIETClassifierUse scale_loss=False in DIETClassifier. Reduce the number of dense dimensions for sparse features of text from 512 to 256 in EmbeddingIntentClassifier.", "chunk": 142, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1774": {"text": "Bugfixes#\n\n#5230: Fixed issue where posting to certain callback channel URLs would return a 500 error on successful posts due to invalid response format.#5475: One word can just have one entity label.If you are using, for example, ConveRTTokenizer words can be split into multiple tokens.\nOur entity extractors assign entity labels per token. So, it might happen, that a word, that was split into two tokens,\ngot assigned two different entity labels. This is now fixed. One word can just have one entity label at a time.#5509: An entity label should always cover a complete word.If you are using, for example, ConveRTTokenizer words can be split into multiple tokens.\nOur entity extractors assign entity labels per token. So, it might happen, that just a part of a word has\nan entity label. This is now fixed. An entity label always covers a complete word.#5574: Fixed an issue that happened when metadata is passed in a new session.Now the metadata is correctly passed to the ActionSessionStart.#5672: Updated Python dependency ruamel.yaml to >=0.16. We recommend to use at least\n0.16.10 due to the security issue\nCVE-2019-20478 which is present in\nin prior versions.\n\nMiscellaneous internal changes#\n\n#5556, #5587, #5614, #5631, #5633\n\n[1.9.7] - 2020-04-23#\n\nImprovements#\n\n#4606: The stream reading timeout for rasa shell\\ is now configurable by using the\nenvironment variable ``RASA_SHELL_STREAM_READING_TIMEOUT_IN_SECONDS.\nThis can help to fix problems when using rasa shell` with custom actions which run\n10 seconds or longer.", "chunk": 143, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1775": {"text": "Bugfixes#\n\n#5709: Reverted changes in 1.9.6 that led to model incompatibility. Upgrade to 1.9.7 to fix\nself.sequence_lengths_for(tf_batch_data[TEXT_SEQ_LENGTH][0]) IndexError: list index out of range\nerror without needing to retrain earlier 1.9 models.Therefore, all 1.9 models except for 1.9.6 will be compatible; a model trained on 1.9.6 will need\nto be retrained on 1.9.7.\n\n[1.9.6] - 2020-04-15#\n\nBugfixes#\n\n#5426: Fix rasa test nlu plotting when using multiple runs.#5489: Fixed issue where max_number_of_predictions was not considered when running end-to-end testing.\n\nMiscellaneous internal changes#\n\n#5626\n\n[1.9.5] - 2020-04-01#\n\nImprovements#\n\n#5533: Support for\nPostgreSQL schemas in\nSQLTrackerStore. The SQLTrackerStore\naccesses schemas defined by the POSTGRESQL_SCHEMA environment variable if\nconnected to a PostgreSQL database.The schema is added to the connection string option's -csearch_path key, e.g.\n-options=-csearch_path=<SCHEMA_NAME> (see the\nPostgreSQL docs for more details).\nAs before, if no POSTGRESQL_SCHEMA is defined, Rasa uses the database's default\nschema (public).The schema has to exist in the database before connecting, i.e. it needs to have been\ncreated withCopyCREATE SCHEMA schema_name;\n\nBugfixes#", "chunk": 144, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1776": {"text": "Bugfixes#\n\n#5547: Fixed ambiguous logging in DIETClassifier by adding the name of the calling class to the log message.\n\n[1.9.4] - 2020-03-30#\n\nBugfixes#\n\n#5529: Fix memory leak problem on increasing number of calls to /model/parse endpoint.\n\n[1.9.3] - 2020-03-27#\n\nBugfixes#\n\n#5505: Set default value for weight_sparsity in ResponseSelector to 0.\nThis fixes a bug in the default behavior of ResponseSelector which was accidentally introduced in rasa==1.8.0.\nUsers should update to this version and re-train their models if ResponseSelector was used in their pipeline.\n\n[1.9.2] - 2020-03-26#\n\nImproved Documentation#\n\n#5497: Fix documentation to bring back Sara.\n\n[1.9.1] - 2020-03-25#\n\nBugfixes#\n\n#5492: Fix an issue where the deprecated queue parameter for the Pika Event Broker\nwas ignored and Rasa Open Source published the events to the rasa_core_events\nqueue instead. Note that this does not change the fact that the queue argument\nis deprecated in favor of the queues argument.\n\n[1.9.0] - 2020-03-24#\n\nFeatures#", "chunk": 145, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1777": {"text": "[1.9.0] - 2020-03-24#\n\nFeatures#\n\n#5006: Channel hangouts for Rasa integration with Google Hangouts Chat is now supported out-of-the-box.#5389: Add an optional path to a specific directory to download and cache the pre-trained model weights for HFTransformersNLP.#5422: Add options tensorboard_log_directory and tensorboard_log_level to EmbeddingIntentClassifier,\nDIETClasifier, ResponseSelector, EmbeddingPolicy and TEDPolicy.By default tensorboard_log_directory is None. If a valid directory is provided,\nmetrics are written during training. After the model is trained you can take a look\nat the training metrics in tensorboard. Execute tensorboard --logdir <path-to-given-directory>.Metrics can either be written after every epoch (default) or for every training step.\nYou can specify when to write metrics using the variable tensorboard_log_level.\nValid values are 'epoch' and 'minibatch'.We also write down a model summary, i.e. layers with inputs and types, to the given directory.\n\nImprovements#", "chunk": 146, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1778": {"text": "#4756: Make response timeout configurable.\nrasa run, rasa shell and rasa x can now be started with\n--response-timeout <int> to configure a response timeout of <int> seconds.#4826: Add full retrieval intent name to message data\nResponseSelector will now add the full retrieval intent name\ne.g. faq/which_version to the prediction, making it accessible\nfrom the tracker.#5258: Added PikaEventBroker (Pika Event Broker) support for publishing to\nmultiple queues. Messages are now published to a fanout exchange with name\nrasa-exchange (see\nexchange-fanout\nfor more information on fanout exchanges).The former queue key is deprecated. Queues should now be\nspecified as a list in the endpoints.yml event broker config under a new key\nqueues. Example config:Copyevent_broker:  type: pika  url: localhost  username: username  password: password  queues:    - queue-1    - queue-2    - queue-3#5416: Change rasa init to include tests/conversation_tests.md file by default.#5446: The endpoint PUT /conversations/<conversation_id>/tracker/events no longer\nadds session start events (to learn more about conversation sessions, please\nsee Session configuration) in addition to the events which were sent in the request\npayload. To achieve the old behavior send a\nGET /conversations/<conversation_id>/tracker\nrequest before appending events.#5482: Make scale_loss for intents behave the same way as in versions below 1.8, but\nonly scale if some of the examples in a batch has probability of the golden label more than 0.5.", "chunk": 147, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1779": {"text": "Introduce scale_loss for entities in DIETClassifier.", "chunk": 148, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1780": {"text": "Bugfixes#\n\n#5205: Fixed the bug when FormPolicy was overwriting MappingPolicy prediction (e.g. /restart).\nPriorities for Mapping Policy and Form Policy are no longer linear:\nFormPolicy priority is 5, but its prediction is ignored if MappingPolicy is used for prediction.#5215: Fixed issue related to storing Python float values as decimal.Decimal objects\nin DynamoDB tracker stores. All decimal.Decimal objects are now converted to\nfloat on tracker retrieval.Added a new docs section on DynamoTrackerStore.#5356: Fixed bug where FallbackPolicy would always fall back if the fallback action is\naction_listen.#5361: Fixed bug where starting or ending a response with \\\\n\\\\n led to one of the responses returned being empty.#5405: Fixes issue where model always gets retrained if multiple NLU/story files are in a\ndirectory, by sorting the list of files.#5444: Fixed ambiguous logging in DIETClassifier by adding the name of the calling class to the log message.\n\nImproved Documentation#\n\n#2237: Restructure the \u201cEvaluating models\u201d documentation page and rename this page to Testing Your Assistant.#5302: Improved documentation on how to build and deploy an action server image for use on other servers such as Rasa X deployments.\n\nMiscellaneous internal changes#\n\n#5340\n\n[1.8.3] - 2020-03-27#\n\nBugfixes#", "chunk": 149, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1781": {"text": "Bugfixes#\n\n#5405: Fixes issue where model always gets retrained if multiple NLU/story files are in a\ndirectory, by sorting the list of files.#5444: Fixed ambiguous logging in DIETClassifier by adding the name of the calling class to the log message.#5506: Set default value for weight_sparsity in ResponseSelector to 0.\nThis fixes a bug in the default behavior of ResponseSelector which was accidentally introduced in rasa==1.8.0.\nUsers should update to this version or rasa>=1.9.3 and re-train their models if ResponseSelector was used in their pipeline.\n\nImproved Documentation#\n\n#5302: Improved documentation on how to build and deploy an action server image for use on other servers such as Rasa X deployments.\n\n[1.8.2] - 2020-03-19#\n\nBugfixes#\n\n#5438: Fixed bug when installing rasa with poetry.#5413: Fixed bug with EmbeddingIntentClassifier, where results\nweren't the same as in 1.7.x. Fixed by setting weight sparsity to 0.\n\nImproved Documentation#\n\n#5404: Explain how to run commands as root user in Rasa SDK Docker images since version\n1.8.0. Since version 1.8.0 the Rasa SDK Docker images does not longer run as\nroot user by default. For commands which require root user usage, you have to\nswitch back to the root user in your Docker image as described in\nBuilding an Action Server Image.#5402: Made improvements to Building Assistants tutorial\n\n[1.8.1] - 2020-03-06#\n\nBugfixes#", "chunk": 150, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1782": {"text": "Bugfixes#\n\n#5354: Fixed issue with using language models like xlnet along with entity_recognition set to True inside\nDIETClassifier.\n\nMiscellaneous internal changes#\n\n#5330, #5348\n\n[1.8.0] - 2020-02-26#\n\nDeprecations and Removals#\n\n#4991: Removed Agent.continue_training and the dump_flattened_stories parameter\nfrom Agent.persist.#5266: Properties Component.provides and Component.requires are deprecated.\nUse Component.required_components() instead.\n\nFeatures#", "chunk": 151, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1783": {"text": "#2674: Add default value __other__ to values of a CategoricalSlot.All values not mentioned in the list of values of a CategoricalSlot\nwill be mapped to __other__ for featurization.#4088: Add story structure validation functionality (e.g. rasa data validate stories \u2013max-history 5).#5065: Add LexicalSyntacticFeaturizer to sparse featurizers.LexicalSyntacticFeaturizer does the same featurization as the CRFEntityExtractor. We extracted the\nfeaturization into a separate component so that the features can be reused and featurization is independent from the\nentity extraction.#5187: Integrate language models from HuggingFace's Transformers Library.Add a new NLP component HFTransformersNLP which tokenizes and featurizes incoming messages using a specified\npre-trained model with the Transformers library as the backend.\nAdd LanguageModelTokenizer and LanguageModelFeaturizer which use the information from\nHFTransformersNLP and sets them correctly for message object.\nLanguage models currently supported: BERT, OpenAIGPT, GPT-2, XLNet, DistilBert, RoBERTa.#5225: Added a new CLI command rasa export to publish tracker events from a persistent\ntracker store using an event broker. See Export Conversations to an Event Broker, Tracker Stores\nand Event Brokers for more details.#5230: Refactor how GPU and CPU environments are configured for TensorFlow 2.0.Please refer to the documentation on Configuring TensorFlow to understand", "chunk": 152, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1784": {"text": "which environment variables to set in what scenarios. A couple of examples are shown below as well:Copy# This specifies to use 1024 MB of memory from GPU with logical ID 0 and 2048 MB of memory from GPU with logical ID 1TF_GPU_MEMORY_ALLOC=\"0:1024, 1:2048\"\n# Specifies that at most 3 CPU threads can be used to parallelize multiple non-blocking operationsTF_INTER_OP_PARALLELISM_THREADS=\"3\"\n# Specifies that at most 2 CPU threads can be used to parallelize a particular operation.TF_INTRA_OP_PARALLELISM_THREADS=\"2\"#5266: Added a new NLU component DIETClassifier and a new policy TEDPolicy.DIET (Dual Intent and Entity Transformer) is a multi-task architecture for intent classification and entity\nrecognition. You can read more about this component in the DIETClassifier documentation.\nThe new component will replace the EmbeddingIntentClassifier and the\nCRFEntityExtractor in the future.\nThose two components are deprecated from now on.\nSee migration guide for details on how to\nswitch to the new component.TEDPolicy is the new name for EmbeddingPolicy.\nEmbeddingPolicy is deprecated from now on.\nThe functionality of TEDPolicy and EmbeddingPolicy is the same.\nPlease update your configuration file to use the new name for the policy.#663: The sentence vector of the SpacyFeaturizer and MitieFeaturizer can be calculated using max or mean pooling.To specify the pooling operation, set the option pooling for the SpacyFeaturizer or the MitieFeaturizer\nin your configuration file. The default pooling operation is mean. The mean pooling operation also does not take", "chunk": 153, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1785": {"text": "into account words, that do not have a word vector.", "chunk": 154, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1786": {"text": "Improvements#", "chunk": 155, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1787": {"text": "#3975: Added command line argument --conversation-id to rasa interactive.\nIf the argument is not given, conversation_id defaults to a random uuid.#4653: Added a new command-line argument --init-dir to command rasa init to specify\nthe directory in which the project is initialised.#4682: Added support to send images with the twilio output channel.#4817: Part of Slack sanitization:\nMultiple garbled URL's in a string coming from slack will be converted into actual strings.\nExample: health check of <http://eemdb.net|eemdb.net> and <http://eemdb1.net|eemdb1.net> to health check of\neemdb.net and eemdb1.net#5117: New command-line argument \u2013conversation-id will be added and wiil give the ability to\nset specific conversation ID for each shell session, if not passed will be random.#5211: Messages sent to the Pika Event Broker are now persisted. This guarantees\nthe RabbitMQ will re-send previously received messages after a crash. Note that this\ndoes not help for the case where messages are sent to an unavailable RabbitMQ instance.#5250: Added support for mattermost connector to use bot accounts.#5266: We updated our code to TensorFlow 2.#5317: Events exported using rasa export receive a message header if published through a\nPikaEventBroker. The header is added to the message's BasicProperties.headers\nunder the rasa-export-process-id key\n(rasa.core.constants.RASA_EXPORT_PROCESS_ID_HEADER_NAME). The value is a\nUUID4 generated at each call of rasa export. The resulting header is a key-value", "chunk": 156, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1788": {"text": "pair that looks as follows:Copy'rasa-export-process-id': 'd3b3d3ffe2bd4f379ccf21214ccfb261'#5292: Added followlinks=True to os.walk calls, to allow the use of symlinks in training, NLU and domain data.#4811: Support invoking a SlackBot by direct messaging or @<app name> mentions.", "chunk": 157, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1789": {"text": "Bugfixes#\n\n#4006: Fixed timestamp parsing warning when using DucklingHTTPExtractor#4601: Fixed issue with action_restart getting overridden by action_listen when the Mapping Policy and the\nTwo-Stage Fallback Policy are used together.#5201: Fixed incorrectly raised Error encountered in pipelines with a ResponseSelector and NLG.When NLU training data is split before NLU pipeline comparison,\nNLG responses were not also persisted and therefore training for a pipeline including the ResponseSelector would fail.NLG responses are now persisted along with NLU data to a /train directory in the run_x/xx%_exclusion folder.#5277: Fixed sending custom json with Twilio channel\n\nImproved Documentation#\n\n#5174: Updated the documentation to properly suggest not to explicitly add utterance actions to the domain.#5189: Added user guide for reminders and external events, including reminderbot demo.\n\nMiscellaneous internal changes#\n\n#3923, #4597, #4903, #5180, #5189, #5266, #699\n\n[1.7.4] - 2020-02-24#\n\nBugfixes#\n\n#5068: Tracker stores supporting conversation sessions (SQLTrackerStore and\nMongoTrackerStore) do not save the tracker state to database immediately after\nstarting a new conversation session. This leads to the number of events being saved\nin addition to the already-existing ones to be calculated correctly.This fixes action_listen events being saved twice at the beginning of\nconversation sessions.\n\n[1.7.3] - 2020-02-21#\n\nBugfixes#\n\n#5231: Fix segmentation fault when running rasa train or rasa shell.\n\nImproved Documentation#", "chunk": 158, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1790": {"text": "Improved Documentation#\n\n#5286: Fix doc links on \u201cDeploying your Assistant\u201d page\n\n[1.7.2] - 2020-02-13#\n\nBugfixes#\n\n#5197: Fixed incompatibility of Oracle with the SQLTrackerStore, by using a Sequence\nfor the primary key columns. This does not change anything for SQL databases other than Oracle.\nIf you are using Oracle, please create a sequence with the instructions in the SQLTrackerStore docs.\n\nImproved Documentation#\n\n#5197: Added section on setting up the SQLTrackerStore with Oracle#5210: Renamed \u201cRunning the Server\u201d page to \u201cConfiguring the HTTP API\u201d\n\n[1.7.1] - 2020-02-11#\n\nBugfixes#\n\n#5106: Fixed file loading of non proper UTF-8 story files, failing properly when checking for\nstory files.#5162: Fix problem with multi-intents.\nTraining with multi-intents using the CountVectorsFeaturizer together with EmbeddingIntentClassifier is\nworking again.#5171: Fix bug ValueError: Cannot concatenate sparse features as sequence dimension does not match.When training a Rasa model that contains responses for just some of the intents, training was failing.\nFixed the featurizers to return a consistent feature vector in case no response was given for a specific message.#5199: If no text features are present in EmbeddingIntentClassifier return the intent None.#5216: Resolve version conflicts: Pin version of cloudpickle to ~=1.2.0.\n\n[1.7.0] - 2020-01-29#\n\nDeprecations and Removals#", "chunk": 159, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1791": {"text": "Deprecations and Removals#\n\n#4964: The endpoint /conversations/<conversation_id>/execute is now deprecated. Instead, users should use\nthe /conversations/<conversation_id>/trigger_intent endpoint and thus trigger intents instead of actions.#4978: Remove option use_cls_token from tokenizers and option return_sequence from featurizers.By default all tokenizer add a special token (__CLS__) to the end of the list of tokens.\nThis token will be used to capture the features of the whole utterance.The featurizers will return a matrix of size (number-of-tokens x feature-dimension) by default.\nThis allows to train sequence models.\nHowever, the feature vector of the __CLS__ token can be used to train non-sequence models.\nThe corresponding classifier can decide what kind of features to use.\n\nFeatures#", "chunk": 160, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1792": {"text": "Features#\n\n#400: Rename templates key in domain to responses.templates key will still work for backwards compatibility but will raise a future warning.#4902: Added a new configuration parameter, ranking_length to the EmbeddingPolicy, EmbeddingIntentClassifier,\nand ResponseSelector classes.#4964: External events and reminders now trigger intents (and entities) instead of actions.Add new endpoint /conversations/<conversation_id>/trigger_intent, which lets the user specify an intent and a\nlist of entities that is injected into the conversation in place of a user message. The bot then predicts and\nexecutes a response action.#4978: Add ConveRTTokenizer.The tokenizer should be used whenever the ConveRTFeaturizer is used.Every tokenizer now supports the following configuration options:\nintent_tokenization_flag: Flag to check whether to split intents (default False).\nintent_split_symbol: Symbol on which intent should be split (default _)\n\nImprovements#\n\n#1988: Remove the need of specifying utter actions in the actions section explicitly if these actions are already\nlisted in the templates section.#4877: Entity examples that have been extracted using an external extractor are excluded\nfrom Markdown dumping in MarkdownWriter.dumps(). The excluded external extractors\nare DucklingHTTPExtractor and SpacyEntityExtractor.#4902: The EmbeddingPolicy, EmbeddingIntentClassifier, and ResponseSelector now by default normalize confidence\nlevels over the top 10 results. See Rasa 1.6 to Rasa 1.7 for more details.#4964: ReminderCancelled can now cancel multiple reminders if no name is given. It still cancels a single\nreminder if the reminder's name is specified.\n\nBugfixes#", "chunk": 161, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1793": {"text": "Bugfixes#\n\n#4774: Requests to /model/train do not longer block other requests to the Rasa server.#4896: Fixed default behavior of rasa test core --evaluate-model-directory when called without --model. Previously, the latest model file was used as --model. Now the default model directory is used instead.New behavior of rasa test core --evaluate-model-directory when given an existing file as argument for --model: Previously, this led to an error. Now a warning is displayed and the directory containing the given file is used as --model.#5040: Updated the dependency networkx from 2.3.0 to 2.4.0. The old version created incompatibilities when using pip.There is an imcompatibility between Rasa dependecy requests 2.22.0 and the own depedency from Rasa for networkx raising errors upon pip install. There is also a bug corrected in requirements.txt which used ~= instead of ==. All of these are fixed using networkx 2.4.0.#5057: Fixed compatibility issue with Microsoft Bot Framework Emulator if service_url lacked a trailing /.#5092: DynamoDB tracker store decimal values will now be rounded on save. Previously values exceeding 38 digits caused an unhandled error.\n\nMiscellaneous internal changes#\n\n#4458, #4664, #4780, #5029\n\n[1.6.2] - 2020-01-28#\n\nImprovements#\n\n#4994: Switching back to a TensorFlow release which only includes CPU support to reduce the\nsize of the dependencies. If you want to use the TensorFlow package with GPU support,\nplease run pip install tensorflow-gpu==1.15.0.\n\nBugfixes#", "chunk": 162, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1794": {"text": "Bugfixes#\n\n#5111: Fixes Exception 'Loop' object has no attribute '_ready' error when running\nrasa init.#5126: Updated the end-to-end ValueError you recieve when you have a invalid story format to point\nto the updated doc link.\n\n[1.6.1] - 2020-01-07#\n\nBugfixes#\n\n#4989: Use an empty domain in case a model is loaded which has no domain\n(avoids errors when accessing agent.doman.<some attribute>).#4995: Replace error message with warning in tokenizers and featurizers if default parameter not set.#5019: Pin sanic patch version instead of minor version. Fixes sanic _run_request_middleware() error.#5032: Fix wrong calculation of additional conversation events when saving the conversation.\nThis led to conversation events not being saved.#5032: Fix wrong order of conversation events when pushing events to conversations via\nPOST /conversations/<conversation_id>/tracker/events.\n\n[1.6.0] - 2019-12-18#\n\nDeprecations and Removals#", "chunk": 163, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1795": {"text": "Deprecations and Removals#\n\n#4935: Removed ner_features as a feature name from CRFEntityExtractor, use text_dense_features instead.The following settings match the previous NGramFeaturizer:Copypipeline:- name: 'CountVectorsFeaturizer'  analyzer: 'char_wb'  min_ngram: 3  max_ngram: 17  max_features: 10  min_df: 5#4957: To use custom features in the CRFEntityExtractor\nuse text_dense_features instead of ner_features. If\ntext_dense_features are present in the feature set, the CRFEntityExtractor will automatically make use of\nthem. Just make sure to add a dense featurizer in front of the CRFEntityExtractor in your pipeline and set the\nflag return_sequence to True for that featurizer.#4990: Deprecated Agent.continue_training. Instead, a model should be retrained.#684: Specifying lookup tables directly in the NLU file is now deprecated. Please specify\nthem in an external file.\n\nFeatures#", "chunk": 164, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1796": {"text": "#4795: Replaced the warnings about missing templates, intents etc. in validator.py by debug messages.#4830: Added conversation sessions to trackers.A conversation session represents the dialog between the assistant and a user.\nConversation sessions can begin in three ways: 1. the user begins the conversation\nwith the assistant, 2. the user sends their first message after a configurable period\nof inactivity, or 3. a manual session start is triggered with the /session_start\nintent message. The period of inactivity after which a new conversation session is\ntriggered is defined in the domain using the session_expiration_time key in the\nsession_config section. The introduction of conversation sessions comprises the\nfollowing changes:Added a new event SessionStarted that marks the beginning of a new conversation\nsession.Added a new default action ActionSessionStart. This action takes all\nSlotSet events from the previous session and applies it to the next session.Added a new default intent session_start which triggers the start of a new\nconversation session.SQLTrackerStore and MongoTrackerStore only retrieve\nevents from the last session from the database.noteThe session behavior is disabled for existing projects, i.e. existing domains\nwithout session config section.#4935: Preparation for an upcoming change in the EmbeddingIntentClassifier:Add option use_cls_token to all tokenizers. If it is set to True, the token __CLS__ will be added to\nthe end of the list of tokens. Default is set to False. No need to change the default value for now.Add option return_sequence to all featurizers. By default all featurizers return a matrix of size\n(1 x feature-dimension). If the option return_sequence is set to True, the corresponding featurizer will return", "chunk": 165, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1797": {"text": "a matrix of size (token-length x feature-dimension). See Text Featurizers.\nDefault value is set to False. However, you might want to set it to True if you want to use custom features\nin the CRFEntityExtractor.\nSee passing custom features to the CRFEntityExtractorChanged some featurizers to use sparse features, which should reduce memory usage with large amounts of training data significantly.\nRead more: Text Featurizers .cautionThese changes break model compatibility. You will need to retrain your old models!", "chunk": 166, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1798": {"text": "Improvements#", "chunk": 167, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1799": {"text": "#3549: Added --no-plot option for rasa test command, which disables rendering of confusion matrix and histogram. By default plots will be rendered.#4086: If matplotlib couldn't set up a default backend, it will be set automatically to TkAgg/Agg one#4647: Add the option \\random_seed`to the`rasa data split nlu`` command to generate\nreproducible train/test splits.#4734: Changed url __init__() arguments for custom tracker stores to host to reflect the __init__ arguments of\ncurrently supported tracker stores. Note that in endpoints.yml, these are still declared as url.#4751: The kafka-python dependency has become as an \u201cextra\u201d dependency. To use the\nKafkaEventConsumer, rasa has to be installed with the [kafka] option, i.e.Copy$ pip install rasa[kafka]#4801: Allow creation of natural language interpreter and generator by classname reference\nin endpoints.yml.#4834: Made it explicit that interactive learning does not work with NLU-only models.Interactive learning no longer trains NLU-only models if no model is provided\nand no core data is provided.#4899: The intent_report.json created by rasa test now creates an extra field\nconfused_with for each intent. This is a dictionary containing the names of\nthe most common false positives when this intent should be predicted, and the\nnumber of such false positives.#4976: rasa test nlu --cross-validation now also includes an evaluation of the response selector.\nAs a result, the train and test F1-score, accuracy and precision is logged for the response selector.\nA report is also generated in the results folder by the name response_selection_report.json", "chunk": 168, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1800": {"text": "Bugfixes#\n\n#4635: If a wait_time_between_pulls is configured for the model server in endpoints.yml,\nthis will be used instead of the default one when running Rasa X.#4759: Training Luis data with luis_schema_version higher than 4.x.x will show a warning instead of throwing an exception.#4799: Running rasa interactive with no NLU data now works, with the functionality of rasa interactive core.#4917: When loading models from S3, namespaces (folders within a bucket) are now respected.\nPreviously, this would result in an error upon loading the model.#4925: \u201crasa init\u201d will ask if user wants to train a model#4942: Pin multidict dependency to 4.6.1 to prevent sanic from breaking,\nsee the Sanic GitHub issue for more info.#4985: Fix errors during training and testing of ResponseSelector.\n\n[1.5.3] - 2019-12-11#\n\nImprovements#\n\n#4933: Improved error message that appears when an incorrect parameter is passed to a policy.\n\nBugfixes#\n\n#4914: Added rasa/nlu/schemas/config.yml to wheel package#4942: Pin multidict dependency to 4.6.1 to prevent sanic from breaking,\nsee the Sanic GitHub issue\n\n[1.5.2] - 2019-12-09#\n\nImprovements#", "chunk": 169, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1801": {"text": "Improvements#\n\n#3684: rasa interactive will skip the story visualization of training stories in case\nthere are more than 200 stories. Stories created during interactive learning will be\nvisualized as before.#4792: The log level for SocketIO loggers, including websockets.protocol, engineio.server,\nand socketio.server, is now handled by the LOG_LEVEL_LIBRARIES environment variable,\nwhere the default log level is ERROR.#4873: Updated all example bots and documentation to use the updated dispatcher.utter_message() method from rasa-sdk==1.5.0.\n\nBugfixes#\n\n#3684: rasa interactive will not load training stories in case the visualization is\nskipped.#4789: Fixed error where spacy models where not found in the docker images.#4802: Fixed unnecessary kwargs unpacking in rasa.test.test_core call in rasa.test.test function.#4898: Training data files now get loaded in the same order (especially relevant to subdirectories) each time to ensure training consistency when using a random seed.#4918: Locks for tickets in LockStore are immediately issued without a redundant\ncheck for their availability.\n\nImproved Documentation#\n\n#4844: Added towncrier to automatically collect changelog entries.#4869: Document the pipeline for pretrained_embeddings_convert in the pre-configured pipelines section.#4894: Proactively Reaching Out to the User Using Actions now correctly links to the\nendpoint specification.\n\n[1.5.1] - 2019-11-27#\n\nImprovements#\n\nWhen NLU training data is dumped as Markdown file the intents are not longer ordered\nalphabetically, but in the original order of given training data\n\nBugfixes#", "chunk": 170, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1802": {"text": "Bugfixes#\n\nEnd to end stories now support literal payloads which specify entities, e.g.\ngreet: /greet{\"name\": \"John\"}Slots will be correctly interpolated if there are lists in custom response templates.Fixed compatibility issues with rasa-sdk 1.5Updated /status endpoint to show correct path to model archive\n\n[1.5.0] - 2019-11-26#\n\nFeatures#\n\nAdded data validator that checks if domain object returned is empty. If so, exit early\nfrom the command rasa data validate.Added the KeywordIntentClassifier.Added documentation for AugmentedMemoizationPolicy.Fall back to InMemoryTrackerStore in case there is any problem with the current\ntracker store.Arbitrary metadata can now be attached to any Event subclass. The data must be\nstored under the metadata key when reading the event from a JSON object or\ndictionary.Add command line argument rasa x --config CONFIG, to specify path to the policy\nand NLU pipeline configuration of your bot (default: config.yml).Added a new NLU featurizer - ConveRTFeaturizer based on ConveRT model released by PolyAI.Added a new preconfigured pipeline - pretrained_embeddings_convert.\n\nImprovements#\n\nDo not retrain the entire Core model if only the templates section of the domain\nis changed.Upgraded jsonschema version.\n\nDeprecations and Removals#\n\nRemove duplicate messages when creating training data (issues/1446).\n\nBugfixes#", "chunk": 171, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1803": {"text": "Remove duplicate messages when creating training data (issues/1446).\n\nBugfixes#\n\nMultiProjectImporter now imports files in the order of the import statementsFixed server hanging forever on leaving rasa shell before first messageFixed rasa init showing traceback error when user does Keyboard Interrupt before choosing a project pathCountVectorsFeaturizer featurizes intents only if its analyzer is set to wordFixed bug where facebooks generic template was not rendered when buttons were NoneFixed default intents unnecessarily raising undefined parsing error\n\n[1.4.6] - 2019-11-22#\n\nBugfixes#\n\nFixed Rasa X not working when any tracker store was configured for Rasa.Use the matplotlib backend agg in case the tkinter package is not installed.\n\n[1.4.5] - 2019-11-14#\n\nBugfixes#\n\nNLU-only models no longer throw warnings about parsing features not defined in the domainFixed bug that stopped Dockerfiles from building version 1.4.4.Fixed format guessing for e2e stories with intent restated as /intent\n\n[1.4.4] - 2019-11-13#\n\nFeatures#\n\nPikaEventProducer adds the RabbitMQ App ID message property to published\nmessages with the value of the RASA_ENVIRONMENT environment variable. The\nmessage property will not be assigned if this environment variable isn't set.\n\nImprovements#\n\nUpdated Mattermost connector documentation to be more clear.Updated format strings to f-strings where appropriate.Updated tensorflow requirement to 1.15.0Dump domain using UTF-8 (to avoid \\\\UXXXX sequences in the dumped files)\n\nBugfixes#\n\nFixed exporting NLU training data in json format from rasa interactiveFixed numpy deprecation warnings", "chunk": 172, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1804": {"text": "[1.4.3] - 2019-10-29#\n\nBugfixes#\n\nFixed Connection reset by peer errors and bot response delays when using the\nRabbitMQ event broker.\n\n[1.4.2] - 2019-10-28#\n\nDeprecations and Removals#\n\nTensorFlow deprecation warnings are no longer shown when running rasa x\n\nBugfixes#\n\nFixed 'Namespace' object has no attribute 'persist_nlu_data' error during\ninteractive learningPinned networkx~=2.3.0 to fix visualization in rasa interactive and Rasa XFixed No model found error when using rasa run actions with \u201cactions\u201d\nas a directory.\n\n[1.4.1] - 2019-10-22#\n\nRegression: changes from 1.2.12 were missing from 1.4.0, readded them\n\n[1.4.0] - 2019-10-19#\n\nFeatures#", "chunk": 173, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1805": {"text": "[1.4.0] - 2019-10-19#\n\nFeatures#\n\nadd flag to CLI to persist NLU training data if neededlog a warning if the Interpreter picks up an intent or an entity that does not\nexist in the domain file.added DynamoTrackerStore to support persistence of agents running on AWSadded docstrings for TrackerStore classesadded buttons and images to mattermost.CRFEntityExtractor updated to accept arbitrary token-level features like word\nvectors (issues/4214)SpacyFeaturizer updated to add ner_features for CRFEntityExtractorSanitizing incoming messages from slack to remove slack formatting like <mailto:xyz@rasa.com|xyz@rasa.com>\nor <http://url.com|url.com> and substitute it with original contentAdded the ability to configure the number of Sanic worker processes in the HTTP\nserver (rasa.server) and input channel server\n(rasa.core.agent.handle_channels()). The number of workers can be set using the\nenvironment variable SANIC_WORKERS (default: 1). A value of >1 is allowed only in\ncombination with RedisLockStore as the lock store.Botframework channel can handle uploaded files in UserMessage metadata.Added data validator that checks there is no duplicated example data across multiples intents\n\nImprovements#", "chunk": 174, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1806": {"text": "Improvements#\n\nUnknown sections in markdown format (NLU data) are not ignored anymore, but instead an error is raised.It is now easier to add metadata to a UserMessage in existing channels.\nYou can do so by overwriting the method get_metadata. The return value of this\nmethod will be passed to the UserMessage object.Tests can now be run in parallelSerialise DialogueStateTracker as json instead of pickle. DEPRECATION warning:\nDeserialisation of pickled trackers will be deprecated in version 2.0. For now,\ntrackers are still loaded from pickle but will be dumped as json in any subsequent\nsave operations.Event brokers are now also passed to custom tracker stores (using the event_broker parameter)Don't run the Rasa Docker image as root.Use multi-stage builds to reduce the size of the Rasa Docker image.Updated the /status api route to use the actual model file location instead of the tmp location.\n\nDeprecations and Removals#\n\nRemoved Python 3.5 support\n\nBugfixes#\n\nfixed missing tkinter dependency for running tests on Ubuntufixed issue with conversation JSON serializationfixed the hanging HTTP call with ner_duckling_http pipelinefixed Interactive Learning intent payload messages saving in nlu filesfixed DucklingHTTPExtractor dimensions by actually applying to the request\n\n[1.3.10] - 2019-10-18#\n\nFeatures#\n\nCan now pass a package as an argument to the --actions parameter of the\nrasa run actions command.\n\nBugfixes#\n\nFixed visualization of stories with entities which led to a failing\nvisualization in Rasa X\n\n[1.3.9] - 2019-10-10#\n\nFeatures#", "chunk": 175, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1807": {"text": "[1.3.9] - 2019-10-10#\n\nFeatures#\n\nPort of 1.2.10 (support for RabbitMQ TLS authentication and port key in\nevent broker endpoint config).Port of 1.2.11 (support for passing a CA file for SSL certificate verification via the\n\u2013ssl-ca-file flag).\n\nBugfixes#\n\nFixed the hanging HTTP call with ner_duckling_http pipeline.Fixed text processing of intent attribute inside CountVectorFeaturizer.Fixed argument of type 'NoneType' is not iterable when using rasa shell,\nrasa interactive / rasa run\n\n[1.3.8] - 2019-10-08#\n\nImprovements#\n\nPolicies now only get imported if they are actually used. This removes\nTensorFlow warnings when starting Rasa X\n\nBugfixes#\n\nFixed error Object of type 'MaxHistoryTrackerFeaturizer' is not JSON serializable\nwhen running rasa train coreDefault channel send_ methods no longer support kwargs as they caused issues in incompatible channels\n\n[1.3.7] - 2019-09-27#\n\nBugfixes#\n\nre-added TLS, SRV dependencies for PyMongosocketio can now be run without turning on the --enable-api flagMappingPolicy no longer fails when the latest action doesn't have a policy\n\n[1.3.6] - 2019-09-21#\n\nFeatures#\n\nAdded the ability for users to specify a conversation id to send a message to when\nusing the RasaChat input channel.\n\n[1.3.5] - 2019-09-20#\n\nBugfixes#\n\nFixed issue where rasa init would fail without spaCy being installed\n\n[1.3.4] - 2019-09-20#", "chunk": 176, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1808": {"text": "[1.3.4] - 2019-09-20#\n\nFeatures#\n\nAdded the ability to set the backlog parameter in Sanics run() method using\nthe SANIC_BACKLOG environment variable. This parameter sets the\nnumber of unaccepted connections the server allows before refusing new\nconnections. A default value of 100 is used if the variable is not set.Status endpoint (/status) now also returns the number of training processes currently running\n\nBugfixes#\n\nAdded the ability to properly deal with spaCy Doc-objects created on\nempty strings as discussed in\nissue #4445.\nOnly training samples that actually bear content are sent to self.nlp.pipe\nfor every given attribute. Non-content-bearing samples are converted to empty\nDoc-objects. The resulting lists are merged with their preserved order and\nproperly returned.asyncio warnings are now only printed if the callback takes more than 100ms\n(up from 1ms).agent.load_model_from_server no longer affects logging.\n\nImprovements#\n\nThe endpoint POST /model/train no longer supports specifying an output directory\nfor the trained model using the field out. Instead you can choose whether you\nwant to save the trained model in the default model directory (models)\n(default behavior) or in a temporary directory by specifying the\nsave_to_default_model_directory field in the training request.\n\n[1.3.3] - 2019-09-13#\n\nBugfixes#", "chunk": 177, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1809": {"text": "Bugfixes#\n\nAdded a check to avoid training CountVectorizer for a particular\nattribute of a message if no text is provided for that attribute across\nthe training data.Default one-hot representation for label featurization inside EmbeddingIntentClassifier if label features don't exist.Policy ensemble no longer incorrectly wrings \u201cmissing mapping policy\u201d when\nmapping policy is present.\u201ctext\u201d from utter_custom_json now correctly saved to tracker when using telegram channel\n\nDeprecations and Removals#\n\nRemoved computation of intent_spacy_doc. As a result, none of the spacy components process intents now.\n\n[1.3.2] - 2019-09-10#\n\nBugfixes#\n\nSQL tracker events are retrieved ordered by timestamps. This fixes interactive\nlearning events being shown in the wrong order.\n\n[1.3.1] - 2019-09-09#\n\nImprovements#\n\nPin gast to == 0.2.2\n\n[1.3.0] - 2019-09-05#\n\nFeatures#", "chunk": 178, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1810": {"text": "Added option to persist nlu training data (default: False)option to save stories in e2e format for interactive learningbot messages contain the timestamp of the BotUttered event, which can be used in channelsFallbackPolicy can now be configured to trigger when the difference between confidences of two predicted intents is too narrowexperimental training data importer which supports training with data of multiple\nsub bots. Please see the\ndocs for more\ninformation.throw error during training when triggers are defined in the domain without\nMappingPolicy being present in the policy ensembleThe tracker is now available within the interpreter's parse method, giving the\nability to create interpreter classes that use the tracker state (eg. slot values)\nduring the parsing of the message. More details on motivation of this change see", "chunk": 179, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1811": {"text": "during the parsing of the message. More details on motivation of this change see\nissues/3015.add example bot knowledgebasebot to showcase the usage of ActionQueryKnowledgeBasesoftmax starspace loss for both EmbeddingPolicy and EmbeddingIntentClassifierbalanced batching strategy for both EmbeddingPolicy and EmbeddingIntentClassifiermax_history parameter for EmbeddingPolicySuccessful predictions of the NER are written to a file if --successes is set when running rasa test nluIncorrect predictions of the NER are written to a file by default. You can disable it via --no-errors.New NLU component ResponseSelector added for the task of response selectionMessage data attribute can contain two more keys - response_key, response depending on the training dataNew action type implemented by ActionRetrieveResponse class and identified with response_ prefixVocabulary sharing inside CountVectorsFeaturizer with use_shared_vocab flag. If set to True, vocabulary of corpus is shared between text, intent and response attributes of messageAdded an option to share the hidden layer weights of text input and label input inside EmbeddingIntentClassifier using the flag share_hidden_layersNew type of training data file in NLU which stores response phrases for response selection task.Add flag intent_split_symbol and intent_tokenization_flag to all WhitespaceTokenizer, JiebaTokenizer and SpacyTokenizerAdded evaluation for response selector. Creates a report response_selection_report.json inside --out directory.argument --config-endpoint to specify the URL from which rasa x pulls\nthe runtime configuration (endpoints and credentials)LockStore class storing instances of TicketLock for every conversation_idenvironment variables SQL_POOL_SIZE (default: 50) and SQL_MAX_OVERFLOW", "chunk": 180, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1812": {"text": "(default: 100) can be set to control the pool size and maximum pool overflow for\nSQLTrackerStore when used with the postgresql dialectAdd a bot_challenge intent and a utter_iamabot action to all example projects and the rasa init bot.Allow sending attachments when using the socketio channelrasa data validate will fail with a non-zero exit code if validation fails", "chunk": 181, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1813": {"text": "Improvements#", "chunk": 182, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1814": {"text": "added character-level CountVectorsFeaturizer with empirically found parameters\ninto the supervised_embeddings NLU pipeline templateNLU evaluations now also stores its output in the output directory like the core evaluationshow warning in case a default path is used instead of a provided, invalid pathcompare mode of rasa train core allows the whole core config comparison,\nnaming style of models trained for comparison is changed (this is a breaking change)pika keeps a single connection open, instead of open and closing on each incoming eventRasaChatInput fetches the public key from the Rasa X API. The key is used to\ndecode the bearer token containing the conversation ID. This requires\nrasa-x>=0.20.2.more specific exception message when loading custom components depending on whether component's path or\nclass name is invalid or can't be found in the global namespacechange priorities so that the MemoizationPolicy has higher priority than the MappingPolicysubstitute LSTM with Transformer in EmbeddingPolicyEmbeddingPolicy can now use MaxHistoryTrackerFeaturizernon zero evaluate_on_num_examples in EmbeddingPolicy\nand EmbeddingIntentClassifier is the size of\nhold out validation set that is excluded from training datadefaults parameters and architectures for both EmbeddingPolicy and\nEmbeddingIntentClassifier are changed (this is a breaking change)evaluation of NER does not include 'no-entity' anymore--successes for rasa test nlu is now boolean values. If set incorrect/successful predictions\nare saved in a file.--errors is renamed to --no-errors and is now a boolean value. By default incorrect predictions are saved", "chunk": 183, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1815": {"text": "in a file. If --no-errors is set predictions are not written to a file.Remove label_tokenization_flag and label_split_symbol from EmbeddingIntentClassifier. Instead move these parameters to Tokenizers.Process features of all attributes of a message, i.e. - text, intent and response inside the respective component itself. For e.g. - intent of a message is now tokenized inside the tokenizer itself.Deprecate as_markdown and as_json in favour of nlu_as_markdown and nlu_as_json respectively.pin python-engineio >= 3.9.3update python-socketio req to >= 4.3.1", "chunk": 184, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1816": {"text": "Bugfixes#\n\nrasa test nlu with a folder of configuration filesMappingPolicy standard featurizer is set to NoneRemoved text parameter from send_attachment function in slack.py to avoid duplication of text output to slackbotserver /status endpoint reports status when an NLU-only model is loaded\n\nDeprecations and Removals#\n\nRemoved --report argument from rasa test nlu. All output files are stored in the --out directory.\n\n[1.2.12] - 2019-10-16#\n\nFeatures#\n\nSupport for transit encryption with Redis via use_ssl: True in the tracker store config in endpoints.yml\n\n[1.2.11] - 2019-10-09#\n\nFeatures#\n\nSupport for passing a CA file for SSL certificate verification via the\n\u2013ssl-ca-file flag\n\n[1.2.10] - 2019-10-08#\n\nFeatures#\n\nAdded support for RabbitMQ TLS authentication. The following environment variables\nneed to be set:\nRABBITMQ_SSL_CLIENT_CERTIFICATE - path to the SSL client certificate (required)\nRABBITMQ_SSL_CLIENT_KEY - path to the SSL client key (required)\nRABBITMQ_SSL_CA_FILE - path to the SSL CA file (optional, for certificate\nverification)\nRABBITMQ_SSL_KEY_PASSWORD - SSL private key password (optional)Added ability to define the RabbitMQ port using the port key in the\nevent_broker endpoint config.\n\n[1.2.9] - 2019-09-17#\n\nBugfixes#\n\nCorrectly pass SSL flag values to x CLI command (backport of\n\n[1.2.8] - 2019-09-10#", "chunk": 185, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1817": {"text": "[1.2.8] - 2019-09-10#\n\nBugfixes#\n\nSQL tracker events are retrieved ordered by timestamps. This fixes interactive\nlearning events being shown in the wrong order. Backport of 1.3.2 patch\n(PR #4427).\n\n[1.2.7] - 2019-09-02#\n\nBugfixes#\n\nAdded query dictionary argument to SQLTrackerStore which will be appended\nto the SQL connection URL as query parameters.\n\n[1.2.6] - 2019-09-02#\n\nBugfixes#\n\nfixed bug that occurred when sending template elements through a channel that doesn't support them\n\n[1.2.5] - 2019-08-26#\n\nFeatures#\n\nSSL support for rasa run command. Certificate can be specified using\n--ssl-certificate and --ssl-keyfile.\n\nBugfixes#\n\nmade default augmentation value consistent across repo'/restart' will now also restart the bot if the tracker is paused\n\n[1.2.4] - 2019-08-23#\n\nBugfixes#\n\nthe SocketIO input channel now allows accesses from other origins\n(fixes SocketIO channel on Rasa X)\n\n[1.2.3] - 2019-08-15#\n\nImprovements#\n\nmessages with multiple entities are now handled properly with e2e evaluationdata/test_evaluations/end_to_end_story.md was re-written in the\nrestaurantbot domain\n\n[1.2.3] - 2019-08-15#\n\nImprovements#\n\nmessages with multiple entities are now handled properly with e2e evaluationdata/test_evaluations/end_to_end_story.md was re-written in the restaurantbot domain", "chunk": 186, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1818": {"text": "Bugfixes#\n\nFree text input was not allowed in the Rasa shell when the response template\ncontained buttons, which has now been fixed.\n\n[1.2.2] - 2019-08-07#\n\nBugfixes#\n\nUserUttered events always got the same timestamp\n\n[1.2.1] - 2019-08-06#\n\nFeatures#\n\nDocs now have an EDIT THIS PAGE button\n\nBugfixes#\n\nFlood control exceeded error in Telegram connector which happened because the\nwebhook was set twice\n\n[1.2.0] - 2019-08-01#\n\nFeatures#\n\nadd root route to server started without --enable-api parameteradd --evaluate-model-directory to rasa test core to evaluate models\nfrom rasa train core -c <config-1> <config-2>option to send messages to the user by calling\nPOST /conversations/{conversation_id}/execute\n\nImprovements#\n\nAgent.update_model() and Agent.handle_message() now work without needing to set a domain\nor a policy ensembleUpdate pytype to 2019.7.11new event broker class: SQLProducer. This event broker is now used when running locally with\nRasa XAPI requests are not longer logged to rasa_core.log by default in order to avoid\nproblems when running on OpenShift (use --log-file rasa_core.log to retain the\nold behavior)metadata attribute added to UserMessage\n\nBugfixes#\n\nrasa test core can handle compressed model filesrasa can handle story files containing multi line commentstemplate will retain { if escaped with {. e.g. {{\u201cfoo\u201d: {bar}}} will result in {\u201cfoo\u201d: \u201creplaced value\u201d}", "chunk": 187, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1819": {"text": "[1.1.8] - 2019-07-25#\n\nFeatures#\n\nTrainingFileImporter interface to support customizing the process of loading\ntraining datafill slots for custom templates\n\nImprovements#\n\nAgent.update_model() and Agent.handle_message() now work without needing to set a domain\nor a policy ensembleupdate pytype to 2019.7.11\n\nBugfixes#\n\ninteractive learning bug where reverted user utterances were dumped to training dataadded timeout to terminal input channel to avoid freezing input in case of server\nerrorsfill slots for image, buttons, quick_replies and attachments in templatesrasa train core in comparison mode stores the model files compressed (tar.gz files)slot setting in interactive learning with the TwoStageFallbackPolicy\n\n[1.1.7] - 2019-07-18#\n\nFeatures#\n\nadded optional pymongo dependencies [tls, srv] to requirements.txt for better mongodb supportcase_sensitive option added to WhiteSpaceTokenizer with true as default.\n\nBugfixes#\n\nvalidation no longer throws an error during interactive learningfixed wrong cleaning of use_entities in case it was a list and not Trueupdated the server endpoint /model/parse to handle also messages with the intent prefixfixed bug where \u201cNo model found\u201d message appeared after successfully running the botdebug logs now print to rasa_core.log when running rasa x -vv or rasa run -vv\n\n[1.1.6] - 2019-07-12#\n\nFeatures#\n\nrest channel supports setting a message's input_channel through a field\ninput_channel in the request body\n\nImprovements#", "chunk": 188, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1820": {"text": "Improvements#\n\nrecommended syntax for empty use_entities and ignore_entities in the domain file\nhas been updated from False or None to an empty list ([])\n\nBugfixes#\n\nrasa run without --enable-api does not require a local model anymoreusing rasa run with --enable-api to run a server now prints\n\u201crunning Rasa server\u201d instead of \u201crunning Rasa Core server\u201dactions, intents, and utterances created in rasa interactive can no longer be empty\n\n[1.1.5] - 2019-07-10#\n\nFeatures#\n\ndebug logging now tells you which tracker store is connectedthe response of /model/train now includes a response header for the trained model filenameValidator class to help developing by checking if the files have any errorsproject's code is now linted using flake8info log when credentials were provided for multiple channels and channel in\n--connector argument was specified at the same timevalidate export paths in interactive learning\n\nImprovements#\n\ndeprecate rasa.core.agent.handle_channels(...)\\. Please use ``rasa.run(...)orrasa.core.run.configure_app` instead.Agent.load() also accepts tar.gz model file\n\nDeprecations and Removals#\n\nrevert the stripping of trailing slashes in endpoint URLs since this can lead to\nproblems in case the trailing slash is actually wantedstarter packs were removed from Github and are therefore no longer tested by Travis script\n\nBugfixes#", "chunk": 189, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1821": {"text": "Bugfixes#\n\nall temporal model files are now deleted after stopping the Rasa serverrasa shell nlu now outputs unicode characters instead of \\\\uxxxx codesfixed PUT /model with model_server by deserializing the model_server to\nEndpointConfig.x in AnySlotDict is now True for any x, which fixes empty slot warnings in\ninteractive learningrasa train now also includes NLU files in other formats than the Rasa formatrasa train core no longer crashes without a --domain argrasa interactive now looks for endpoints in endpoints.yml if no --endpoints arg is passedcustom files, e.g. custom components and channels, load correctly when using\nthe command line interfaceMappingPolicy now works correctly when used as part of a PolicyEnsemble\n\n[1.1.4] - 2019-06-18#\n\nFeatures#\n\nunfeaturize single entitiesadded agent readiness check to the /status resource\n\nImprovements#\n\nremoved leading underscore from name of '_create_initial_project' function.\n\nBugfixes#\n\nfixed bug where facebook quick replies were not renderingtake FB quick reply payload rather than text as inputfixed bug where training_data path in metadata.json was an absolute path\n\n[1.1.3] - 2019-06-14#\n\nBugfixes#\n\nfixed any inconsistent type annotations in code and some bugs revealed by\ntype checker\n\n[1.1.2] - 2019-06-13#\n\nBugfixes#\n\nfixed duplicate events appearing in tracker when using a PostgreSQL tracker store\n\n[1.1.1] - 2019-06-13#\n\nBugfixes#\n\nfixed compatibility with Rasa SDKbot responses can contain custom messages besides other message types", "chunk": 190, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1822": {"text": "fixed compatibility with Rasa SDKbot responses can contain custom messages besides other message types\n\n[1.1.0] - 2019-06-13#\n\nFeatures#\n\nnlu configs can now be directly compared for performance on a dataset\nin rasa test nlu\n\nImprovements#\n\nupdate the tracker in interactive learning through reverting and appending events\ninstead of replacing the trackerPOST /conversations/{conversation_id}/tracker/events supports a list of events\n\nBugfixes#\n\nfixed creation of RasaNLUHttpInterpreterform actions are included in domain warningsdefault actions, which are overriden by custom actions and are listed in the\ndomain are excluded from domain warningsSQL data column type to Text for compatibility with MySQLnon-featurizer training parameters don't break SklearnPolicy anymore\n\n[1.0.9] - 2019-06-10#\n\nImprovements#\n\nrevert PR #3739 (as this is a breaking change): set PikaProducer and\nKafkaProducer default queues back to rasa_core_events\n\n[1.0.8] - 2019-06-10#\n\nFeatures#\n\nsupport for specifying full database urls in the SQLTrackerStore configurationmaximum number of predictions can be set via the environment variable\nMAX_NUMBER_OF_PREDICTIONS (default is 10)\n\nImprovements#\n\ndefault PikaProducer and KafkaProducer queues to rasa_production_eventsexclude unfeaturized slots from domain warnings\n\nBugfixes#\n\nloading of additional training data with the SkillSelectorstrip trailing slashes in endpoint URLs\n\n[1.0.7] - 2019-06-06#\n\nFeatures#", "chunk": 191, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1823": {"text": "[1.0.7] - 2019-06-06#\n\nFeatures#\n\nadded argument --rasa-x-port to specify the port of Rasa X when running Rasa X locally via rasa x\n\nBugfixes#\n\nslack notifications from bots correctly render textfixed usage of --log-file argument for rasa run and rasa shellcheck if correct tracker store is configured in local mode\n\n[1.0.6] - 2019-06-03#\n\nBugfixes#\n\nfixed backwards incompatible utils changes\n\n[1.0.5] - 2019-06-03#\n\nBugfixes#\n\nfixed spacy being a required dependency (regression)\n\n[1.0.4] - 2019-06-03#\n\nFeatures#\n\nautomatic creation of index on the sender_id column when using an SQL\ntracker store. If you have an existing data and you are running into performance\nissues, please make sure to add an index manually using\nCREATE INDEX event_idx_sender_id ON events (sender_id);.\n\nImprovements#\n\nNLU evaluation in cross-validation mode now also provides intent/entity reports,\nconfusion matrix, etc.\n\n[1.0.3] - 2019-05-30#\n\nBugfixes#\n\nnon-ascii characters render correctly in stories generated from interactive learningvalidate domain file before usage, e.g. print proper error messages if domain file\nis invalid instead of raising errors\n\n[1.0.2] - 2019-05-29#\n\nFeatures#\n\nadded domain_warnings() method to Domain which returns a dict containing the\ndiff between supplied {actions, intents, entities, slots} and what's contained in the\ndomain\n\nBugfixes#", "chunk": 192, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1824": {"text": "Bugfixes#\n\nfix lookup table files failed to load issues/3622buttons can now be properly selected during cmdline chat or when in interactive learningset slots correctly when events are added through the APImapping policy no longer ignores NLU thresholdmapping policy priority is correctly persisted\n\n[1.0.1] - 2019-05-21#\n\nBugfixes#\n\nupdated installation command in docs for Rasa X\n\n[1.0.0] - 2019-05-21#\n\nFeatures#", "chunk": 193, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1825": {"text": "[1.0.0] - 2019-05-21#\n\nFeatures#\n\nadded arguments to set the file paths for interactive trainingadded quick reply representation for command-line outputadded option to specify custom button type for Facebook buttonsadded tracker store persisting trackers into a SQL database\n(SQLTrackerStore)added rasa command line interface and APIRasa  HTTP training endpoint at POST /jobs. This endpoint\nwill train a combined Rasa Core and NLU modelReminderCancelled(action_name) event to cancel given action_name reminder\nfor current userRasa HTTP intent evaluation endpoint at POST /intentEvaluation.\nThis endpoints performs an intent evaluation of a Rasa modeloption to create template for new utterance action in interactive learningyou can now choose actions previously created in the same session\nin interactive learningadd formatter 'black'channel-specific utterances via the - \"channel\": key in utterance templatesarbitrary json messages via the - \"custom\": key in utterance templates and\nvia utter_custom_json() method in custom actionssupport to load sub skills (domain, stories, nlu data)support to select which sub skills to load through import section in\nconfig.ymlsupport for spaCy 2.1a model for an agent can now also be loaded from a remote storagelog level can be set via environment variable LOG_LEVELadd --store-uncompressed to train command to not compress Rasa modellog level of libraries, such as tensorflow, can be set via environment variable LOG_LEVEL_LIBRARIESif no spaCy model is linked upon building a spaCy pipeline, an appropriate error message\nis now raised with instructions for linking one\n\nImprovements#", "chunk": 194, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1826": {"text": "Improvements#\n\nrenamed all CLI parameters containing any _ to use dashes - instead (GNU standard)renamed rasa_core package to rasa.corefor interactive learning only include manually annotated and ner_crf entities in nlu exportmade message_id an additional argument to interpreter.parsechanged removing punctuation logic in WhitespaceTokenizertraining_processes in the Rasa NLU data router have been renamed to worker_processescreated a common utils package rasa.utils for nlu and core, common methods like read_yaml moved thereremoved --num_threads from run command (server will be asynchronous but\nrunning in a single thread)the _check_token() method in RasaChat now authenticates against /auth/verify instead of /userremoved --pre_load from run command (Rasa NLU server will just have a maximum of one model and that model will be\nloaded by default)changed file format of a stored trained model from the Rasa NLU server to tar.gztrain command uses fallback config if an invalid config is giventest command now compares multiple models if a list of model files is provided for the argument --modelMerged rasa.core and rasa.nlu server into a single server. See swagger file in docs/_static/spec/server.yaml for\navailable endpoints.utter_custom_message() method in rasa_core_sdk has been renamed to utter_elements()updated dependencies. as part of this, models for spacy need to be reinstalled\nfor 2.1 (from 2.0)make sure all command line arguments for rasa test and rasa interactive are actually used, removed arguments\nthat were not used at all (e.g. --core for rasa test)\n\nDeprecations and Removals#", "chunk": 195, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1827": {"text": "Deprecations and Removals#\n\nremoved possibility to execute python -m rasa_core.train etc. (e.g. scripts in rasa.core and rasa.nlu).\nUse the CLI for rasa instead, e.g. rasa train core.removed _sklearn_numpy_warning_fix from the SklearnIntentClassifierremoved Dispatcher class from coreremoved projects: the Rasa NLU server now has a maximum of one model at a time loaded.\n\nBugfixes#\n\nevaluating core stories with two stage fallback gave an error, trying to handle None for a policythe /evaluate route for the Rasa NLU server now runs evaluation\nin a parallel process, which prevents the currently loaded model unloadingadded missing implementation of the keys() function for the Redis Tracker\nStorein interactive learning: only updates entity values if user changes annotationlog options from the command line interface are applied (they overwrite the environment variable)all message arguments (kwargs in dispatcher.utter methods, as well as template args) are now sent through to output channelsutterance templates defined in actions are checked for existence upon training a new agent, and a warning\nis thrown before training if one is missing\n\nPrevious\u00ab Rasa Pro Change LogNextRasa SDK Change Log \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 196, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1828": {"text": "Version: 3.x\n\nRasa SDK Change Log\n\nThe Rasa SDK changelog can be found in the Rasa SDK repository\n\nPrevious\u00ab Rasa Open Source Change LogNextCompatibility Matrix \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1829": {"text": "Version: 3.x\n\nCompatibility Matrix\n\nWhen choosing a version of Rasa Pro Services to deploy, you can refer to the\ntable below to see which one is compatible with your installation of Rasa Plus.\n\nRasa Pro Services version is independent of Rasa Plus version, except that they share the same major version number.\n\nRasa Pro ServicesRasa Plus3.0.x3.3.x, 3.4.x, 3.5.x3.1.x3.6.x\n\nPrevious\u00ab Rasa SDK Change LogNextVersion Migration Guide \u00bb\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1830": {"text": "Version: 3.x\n\nVersion Migration Guide\n\nThis page contains information about changes between major versions and\nhow you can migrate from one version to another.\n\nRasa 3.0 to 3.1#\n\nMachine Learning Components#\n\nTensorFlow Upgrade#\n\nDue to the TensorFlow upgrade, we can't guarantee the exact same output and hence\nmodel performance if your configuration uses LanguageModelFeaturizer.\nThis applies to the case where the model is re-trained with the new Rasa\nversion without changing the configuration, random seeds, and data as well as to the\ncase where a model trained with a previous version of Rasa is loaded with\nthis new version for inference.\n\nPlease check whether your trained model still performs as expected and retrain if needed.\n\nNLU JSON Format#\n\nNLU training data in JSON format is deprecated and will be\nremoved in Rasa 4.0.\nPlease use rasa data convert nlu -f yaml --data <path to NLU data> to convert your\nNLU JSON data to YAML format before support for NLU JSON data is removed.\n\nRasa 2.x to 3.0#\n\nMarkdown Data#\n\nMarkdown is no longer supported \u2014 all the supporting code that was previously deprecated is\nnow removed, and the convertors are removed as well.\n\nThe related CLI commands rasa data convert responses and rasa data convert config\nwere removed.\n\nIf you still have training data in Markdown format then the recommended approach is to use Rasa 2.x\nto convert your data from Markdown to YAML. Please use the commands described\nhere.\n\nModel Configuration#", "chunk": 0, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1831": {"text": "Model Configuration#\n\nIt is required to specify the used recipe within the\nmodel configuration. As of now Rasa only supports\nthe default.v1 recipe and will continue using it even if you don't specify a recipe\nin the model configuration. To avoid breaking changes in the future you should\nto specify recipe: \"default.v1\" at the top of your model configuration:\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyrecipe: default.v1\nlanguage: en\npipeline:  ...policies:  ...\n\nCustom Policies and Custom Components#\n\nRasa 3.0 changed the way NLU components and\npolicies are trained and run during inference. As part of these changes\nthe interfaces for NLU components and policies have been unified and adapted.\n\nThe next sections outline which adaptions are required to run your custom NLU components\nand policies with Rasa 3.0.\n\ncautionPlease read the updated guide on custom graph components here before\ncontinuing to follow the step-by-step guide to migrate your own custom graph components.\n\nType Annotations\n\nUntil Rasa 3.0 type annotations\nwere not required in custom policies or custom NLU components.\nIt is now required to use\ntype annotations in custom NLU\ncomponents and policies. Rasa uses these type annotations to validate that\nyour graph components are compatible and correctly configured. As outlined in the custom\ncomponents guide it is not allowed to use\nforward references.\n\nForward References with Python 3.7Use the\nfrom __future__ import annotations\nimport to avoid using forward references with Python 3.7.", "chunk": 1, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1832": {"text": "Rasa 2.0 (old)Rasa 3.0 (new)Copyfrom __future__ import annotationsfrom typing import List, Any\nfrom rasa.core.policies.policy import Policyfrom rasa.engine.storage.resource import Resourcefrom rasa.shared.core.domain import Domainfrom rasa.shared.core.generator import TrackerWithCachedStates\nclass MyPolicy(Policy): def train(        self,        training_trackers: List[TrackerWithCachedStates],        domain: Domain, **kwargs: Any, ) -> Resource: ...\n\nChanges to Custom NLU Components#\n\nInheriting from GraphComponent\n\nNLU components which previously inherited from one of the following classes additionally\nneed to inherit from the\nGraphComponent interface:\n\nSparseFeaturizerDenseFeaturizerIntentClassifierEntityExtractorComponent\n\nThis snippet shows the required changes:\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyfrom rasa.engine.graph import GraphComponentfrom rasa.nlu.featurizers.sparse_featurizer.sparse_featurizer import SparseFeaturizer\nclass MyNLUComponent(GraphComponent, SparseFeaturizer): ...\n\n Inheriting from EntityExtractorMixin instead of EntityExtractor\n\nThe EntityExtractor class was renamed to EntityExtractorMixin:\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyfrom rasa.engine.graph import GraphComponentfrom rasa.nlu.extractors.extractor import EntityExtractorMixin\nclass MyNLUComponent(GraphComponent, EntityExtractorMixin): ...\n\nInstantiating a NLU Component for Training", "chunk": 2, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1833": {"text": "Instantiating a NLU Component for Training\n\nNLU components are no longer instantiated via their constructor. Instead, all NLU\ncomponents have to override the create method of the\nGraphComponent interface. The\npassed in configuration is your NLU component's default configuration including any updates\nfrom your model configuration file.\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyfrom typing import Dict, Text, Any\nfrom rasa.engine.graph import GraphComponent, ExecutionContextfrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStoragefrom rasa.nlu.classifiers.classifier import IntentClassifier\nclass MyNLUComponent(GraphComponent, IntentClassifier):\n def __init__(self, component_config: Dict[Text, Any]) -> None:      self.component_config = component_config ...\n  @classmethod def create(      cls,      config: Dict[Text, Any],      model_storage: ModelStorage,      resource: Resource,      execution_context: ExecutionContext, ) -> GraphComponent: return cls(config)\n\nPersisting a Trained NLU Component\n\nNLU components used to be persisted by a call to the NLU component's persist method\nfrom outside the NLU component itself.\nWith Rasa 3.0 NLU components are responsible for persisting themselves.\nUse the provided model_storage and resource parameters\nto persist your NLU component at the end of the training and then return the resource\nas result of your NLU component's train method.\nSee component persistence for more details.", "chunk": 3, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1834": {"text": "Rasa 2.0 (old)Rasa 3.0 (new)Copyfrom rasa.engine.graph import GraphComponentfrom rasa.engine.storage.resource import Resourcefrom rasa.nlu.classifiers.classifier import IntentClassifierfrom rasa.shared.nlu.training_data.training_data import TrainingData\nclass MyNLUComponent(GraphComponent, IntentClassifier): def train(self, training_data: TrainingData) -> Resource: ...        self.persist() return self._resource\n def persist(self) -> None: with self._model_storage.write_to(self._resource) as directory:            model_data_file = directory / \"model_data.json\"            rasa.shared.utils.io.dump_obj_as_json_to_file(model_data_file,                self.get_model_data()) ...\n\nInstantiating a Trained NLU Component\n\nPreviously NLU components had to persist their own configuration. Now the config passed\ninto load will automatically contain the configuration which your model was trained with.\nTo instantiate a persisted NLU component, you need to use model_storage and resource in your NLU component's\nload method.", "chunk": 4, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1835": {"text": "Rasa 2.0 (old)Rasa 3.0 (new)Copyfrom __future__ import annotationsimport jsonfrom typing import Any, Text, Dict\nfrom rasa.engine.graph import GraphComponent, ExecutionContextfrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStoragefrom rasa.nlu.classifiers.classifier import IntentClassifierfrom rasa.shared.exceptions import FileIOException\nclass MyNLUComponent(GraphComponent, IntentClassifier):    @classmethod def load(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, **kwargs: Any, ) -> MyNLUComponent:        model_data = {}\n try: with model_storage.read_from(resource) as path:\n                model_data_file = path / \"model_data.json\"                model_data = json.loads(rasa.shared.utils.io.read_file(model_data_file))\n except (ValueError, FileNotFoundError, FileIOException):            logger.debug( f\"Couldn't load metadata for component '{cls.__name__}' as the persisted \" f\"model data couldn't be loaded.\" )\n return cls(            config, model_data=model_data )\n\nProviding a Default Configuration for an NLU Component\n\nThe default configuration is no longer a static class property but instead returned\nby the static method get_default_config:", "chunk": 5, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1836": {"text": "Rasa 2.0 (old)Rasa 3.0 (new)Copyfrom typing import Text, Any, Dict\nfrom rasa.engine.graph import GraphComponentfrom rasa.nlu.classifiers.classifier import IntentClassifier\nclass MyNLUComponent(GraphComponent, IntentClassifier): ...    @staticmethod def get_default_config() -> Dict[Text, Any]: return {\"key1\": \"value1\"}\n\n\nAugmenting Training Data in an NLU Component\n\nNLU Components like tokenizers or\nfeaturizers augment the training data with their\noutput during the model training. Their output is required by NLU components later in the\npipeline. Typically, featurizers require tokenized messages and intent\nclassifiers require featurized training data to train themselves. Rasa\n3.0 makes these different purposes explicit. Previously both NLU component training and\ntraining data augmentation were done as part of the train method. In Rasa\n3.0 they are split into train and process_training_data:", "chunk": 6, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1837": {"text": "Rasa 2.0 (old)Rasa 3.0 (new)Copyfrom rasa.engine.graph import GraphComponentfrom rasa.engine.storage.resource import Resourcefrom rasa.nlu.featurizers.sparse_featurizer.sparse_featurizer import SparseFeaturizerfrom rasa.shared.nlu.training_data.training_data import TrainingData\nclass MyNLUComponent(GraphComponent, SparseFeaturizer): def train(self, training_data: TrainingData) -> Resource:        self.train_featurizer(training_data)\n        self.persist() return self._resource\n def process_training_data(self, training_data: TrainingData) -> TrainingData: for message in training_data.training_examples:            self.add_features(message)\n return training_data\n\nHandling Lists of Messages During Inference in an NLU Component\n\nNLU components used to receive a single Message object during inference.\nStarting with Rasa 3.0 all NLU components have to support a list of\nmessages during inference. Unless your component supports batch predictions the easiest\nway to handle this is to loop over the messages. It is also required to return the\nmessage objects at the end of the process method.\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyfrom typing import List\nfrom rasa.engine.graph import GraphComponentfrom rasa.nlu.classifiers.classifier import IntentClassifierfrom rasa.shared.nlu.training_data.message import Message\nclass MyNLUComponent(GraphComponent, IntentClassifier): def process(self, messages: List[Message]) -> List[Message]: for message in messages:            self.predict(message)\n return messages", "chunk": 7, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1838": {"text": "Registering your NLU Component\n\nBefore you can use your custom NLU component you have to register your NLU component using the\nDefaultV1Recipe.register decorator. The NLU component types correspond to the existing\nparent classes:\n\nTokenizer: ComponentType.MESSAGE_TOKENIZERSparseFeaturizer / DenseFeaturizer: ComponentType.MESSAGE_FEATURIZERIntentClassifier: ComponentType.INTENT_CLASSIFIEREntityExtractor: ComponentType.ENTITY_EXTRACTORIf your NLU component provides a pretrained model which should be used by other\nNLU components during training and inference use ComponentType.MODEL_LOADER\n\nSpecify is_trainable=True if the train method of your component should be called\nduring training.\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyfrom rasa.engine.recipes.default_recipe import DefaultV1Recipefrom rasa.nlu.classifiers.classifier import IntentClassifierfrom rasa.engine.graph import GraphComponent\n@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER, is_trainable=True)class MyNLUComponent(GraphComponent, IntentClassifier): ...\n\nUsing a Model Provider with your NLU Component", "chunk": 8, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1839": {"text": "Using a Model Provider with your NLU Component\n\nIf your NLU component requires a pretrained model such as a Spacy or\nMitie language model you have to specify the NLU component which\nprovides this model in your model's pipeline before the NLU component which requires\nthe model. In addition to this you now also need to specify the model loading component in the model_from\nparameter in the register decorator. The model will then be passed to your model's\ntrain, process_training_data and process methods:\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyfrom typing import List\nfrom rasa.engine.graph import GraphComponentfrom rasa.engine.recipes.default_recipe import DefaultV1Recipefrom rasa.engine.storage.resource import Resourcefrom rasa.nlu.classifiers.classifier import IntentClassifierfrom rasa.nlu.utils.spacy_utils import SpacyModelfrom rasa.shared.nlu.training_data.message import Messagefrom rasa.shared.nlu.training_data.training_data import TrainingData\n@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER, is_trainable=True, model_from=\"SpacyNLP\")class MyNLUComponent(GraphComponent, IntentClassifier): def train(        self, training_data: TrainingData, model: SpacyModel) -> Resource:        spacy_nlp = model.model ...\n def process(self, messages: List[Message], model: SpacyModel) -> List[Message]:        spacy_nlp = model.model ...\n\nChanges to Custom Policies#\n\nThis guide leads you through the migration of a custom policy step by step.\n\nInstantiating a Policy for Training", "chunk": 9, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1840": {"text": "Instantiating a Policy for Training\n\nPolicies are no longer instantiated via their constructor. Instead, all policies have\nto implement a create method. During the policy instantiation the configuration from\nthe model configuration is passed in as a dictionary instead\nof as separate parameters. Similarly, thefeaturizers are no longer instantiated\noutside of policies.\nInstead, the super class rasa.core.policies.policy.Policy instantiates the\nfeaturizers itself.\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyfrom typing import Optional, Dict, Text, Any\nfrom rasa.core.featurizers.tracker_featurizers import TrackerFeaturizerfrom rasa.core.policies.policy import Policyfrom rasa.engine.graph import ExecutionContextfrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStorage\nclass MyPolicy(Policy): def __init__(        self,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext,        featurizer: Optional[TrackerFeaturizer] = None, ) -> None: super().__init__(          config, model_storage, resource, execution_context, featurizer ) ... ...\n  @classmethod def create(      cls,      config: Dict[Text, Any],      model_storage: ModelStorage,      resource: Resource,      execution_context: ExecutionContext, ) -> MyPolicy: return cls(config, model_storage, resource, execution_context)\n\n\nPersisting a Trained Policy", "chunk": 10, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1841": {"text": "Persisting a Trained Policy\n\nPolicies used to be persisted by a call to the policy's persist method from outside the policy itself.\nWith Rasa 3.0 policies are responsible for persisting themselves.\nUse the provided model_storage and resource parameters\nto persist your graph component at the end of the training and then return the resource\nas result of your policy's train method. See graph component persistence for more details.\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyfrom typing import List, Any\nfrom rasa.core.policies.policy import Policyfrom rasa.engine.storage.resource import Resourcefrom rasa.shared.core.domain import Domainfrom rasa.shared.core.generator import TrackerWithCachedStates\nclass MyPolicy(Policy): def train(        self,        training_trackers: List[TrackerWithCachedStates],        domain: Domain, **kwargs: Any, ) -> Resource: ...        self.persist() return self._resource\n def persist(self) -> None: with self._model_storage.write_to(self._resource) as directory: if self.featurizer is not None:                self.featurizer.persist(directory)\n            file_path = directory / \"model_data.json\"            rasa.shared.utils.io.dump_obj_as_json_to_file(file_path,                self.get_model_data()) ...\n\nInstantiating a Trained Policy\n\nPreviously policies had to persist their own configuration. Now the config passed\ninto load will automatically contain the configuration which your model was trained with.\n\nTo instantiate a persisted policy, you need to use model_storage and resource in your policy's\nload method.", "chunk": 11, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1842": {"text": "Rasa 2.0 (old)Rasa 3.0 (new)Copyimport jsonfrom typing import Dict, Text, Any\nfrom rasa.core.featurizers.tracker_featurizers import TrackerFeaturizerfrom rasa.core.policies.policy import Policyfrom rasa.engine.graph import ExecutionContextfrom rasa.engine.storage.resource import Resourcefrom rasa.engine.storage.storage import ModelStoragefrom rasa.shared.exceptions import FileIOException\nclass MyPolicy(Policy):    @classmethod def load(        cls,        config: Dict[Text, Any],        model_storage: ModelStorage,        resource: Resource,        execution_context: ExecutionContext, **kwargs: Any, ) -> MyPolicy:        featurizer = None        model_data = {}\n try: with model_storage.read_from(resource) as path: if (Path(path) / FEATURIZER_FILE).is_file():                    featurizer = TrackerFeaturizer.load(path)\n                model_data_file = path / \"model_data.json\"                model_data = json.loads(rasa.shared.utils.io.read_file(model_data_file))\n except (ValueError, FileNotFoundError, FileIOException):            logger.debug( f\"Couldn't load metadata for policy '{cls.__name__}' as the persisted \" f\"metadata couldn't be loaded.\" )\n return cls(            config, model_storage, resource, execution_context,            featurizer=featurizer, model_data=model_data )\n\nProviding a Default Configuration for a Policy", "chunk": 12, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1843": {"text": "Providing a Default Configuration for a Policy\n\nThe default configuration is no longer provided via default values in your policy's\nconstructor but instead returned by the static method get_default_config:\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyfrom typing import Dict, Text, Anyfrom rasa.core.policies.policy import Policy\nclass MyPolicy(Policy):\n def __init__(self, config: Dict[Text, Any]) -> None: ...\n    @staticmethod def get_default_config() -> Dict[Text, Any]: return {\"key1\": \"value1\"}\n\nUsing End-To-End Features in a Policy\n\nTo use a custom end-to-end policy in Rasa\nOpen Source 2, you had to use the interpreter parameter to featurize the tracker\nevents manually. In Rasa 3.0,\nyou need to register a policy that requires end-to-end features with type ComponentType.POLICY_WITH_END_TO_END_SUPPORT. The features\nwill be precomputed and passed into your policy during training and inference.\n\ncautionEnd-To-End features will only be computed and provided to your policy if your training\ndata actually contains end-to-end training data.", "chunk": 13, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1844": {"text": "Rasa 2.0 (old)Rasa 3.0 (new)Copyfrom typing import List, Optional, Dict, Text, Any\nfrom rasa.core.featurizers.precomputation import MessageContainerForCoreFeaturizationfrom rasa.core.policies.policy import PolicyPrediction, Policyfrom rasa.engine.recipes.default_recipe import DefaultV1Recipefrom rasa.engine.storage.resource import Resourcefrom rasa.shared.core.domain import Domainfrom rasa.shared.core.generator import TrackerWithCachedStatesfrom rasa.shared.core.trackers import DialogueStateTracker\n@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.POLICY_WITH_END_TO_END_SUPPORT, is_trainable=True)class MyPolicy(Policy): def train(        self,        training_trackers: List[TrackerWithCachedStates],        domain: Domain,        precomputations: Optional[MessageContainerForCoreFeaturization] = None, ) -> Resource: ...        model_data, label_ids = self._prepare_for_training(          training_trackers, domain, precomputations, ) ...\n def predict_action_probabilities(        self,        tracker: DialogueStateTracker,        domain: Domain,        precomputations: Optional[MessageContainerForCoreFeaturization] = None,        rule_only_data: Optional[Dict[Text, Any]] = None, **kwargs: Any, ) -> PolicyPrediction: ...        tracker_state_features = self._featurize_tracker(            tracker, domain, precomputations, rule_only_data=rule_only_data ) ...\n\nRegistering a Policy", "chunk": 14, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1845": {"text": "Registering a Policy\n\nBefore you can use your custom policy you have to register your policy using the\nDefaultV1Recipe.register decorator. If your policy requires end-to-end features\nspecify the graph component type POLICY_WITH_END_TO_END_SUPPORT. Otherwise, use\nPOLICY_WITHOUT_END_TO_END_SUPPORT. Specify is_trainable=True if the train\nmethod of your policy should be called during the training. If your policy is only\nused during inference use is_trainable=False.\n\nRasa 2.0 (old)Rasa 3.0 (new)Copyfrom rasa.core.policies.policy import Policyfrom rasa.engine.recipes.default_recipe import DefaultV1Recipe\n@DefaultV1Recipe.register(    DefaultV1Recipe.ComponentType.POLICY_WITH_END_TO_END_SUPPORT,    is_trainable=True)class MyPolicy(Policy): ...\n\nProviding Rule-only Data to a Policy\n\nRasa allows excluding forms or slots which\nare completely handled by\nrules from becoming features in other policies.\nIn Rasa 2 this information was passed onto the\npolicies using the set_shared_policy_states method which set the policy attribute\n_rule_only_data. Rasa passes the names of rule-only slots and forms via the\npredict_action_probabilities method. The passed rule_only_data can be None\nin case the RulePolicy is not part of your model\nconfiguration.", "chunk": 15, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1846": {"text": "Rasa 2.0 (old)Rasa 3.0 (new)Copyfrom typing import Optional, Dict, Text, Any\nfrom rasa.core.policies.policy import Policy, PolicyPredictionfrom rasa.shared.core.domain import Domainfrom rasa.shared.core.trackers import DialogueStateTracker\nclass MyPolicy(Policy): def predict_action_probabilities(        self,        tracker: DialogueStateTracker,        domain: Domain,        rule_only_data: Optional[Dict[Text, Any]] = None, ) -> PolicyPrediction: ...\n\nTraining data#\n\nUpgrading version from 2.0 to 3.0#\n\nAt the top of your training data files, you need to change version: \"2.0\" to version: \"3.1\".\n\nWe follow semantic versioning for training data versions. This means breaking changes result in a new\nmajor version, while new features result in a new minor version. The latest training data version is 3.1.\n\nThe improvements to slot mappings in Rasa 3.0 were breaking changes, so we needed to upgrade\nfrom major version 2.0 to major version 3.0.\n\nTrainingDataImporter#\n\nTrainingDataImporter and all its implementations are updated to contain only synchronous methods.\nIf you have a custom data importer or rely on some functions provided by TrainingDataImporter, you need\nto update your implementation and function calls.\n\nFor example, this is how data loading should look like in Rasa 3.0:", "chunk": 16, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1847": {"text": "For example, this is how data loading should look like in Rasa 3.0:\n\nCopyfrom typing import Textfrom rasa.shared.importers.importer import TrainingDataImporter\ndef load_data(domain_path: Text, config_path: Text):    file_importer = TrainingDataImporter.load_from_config(        config_path, domain_path ) # note that all the functions below were async before:    config = file_importer.get_config()    domain = file_importer.get_domain()    stories = file_importer.get_stories()    nlu_data = file_importer.get_nlu_data()\n\nSince any custom importer implements TrainingDataImporter, you should update your custom\nimporter to contain only sync methods as well:\n\nCopyfrom typing import Dict\nfrom rasa.shared.core.domain import Domainfrom rasa.shared.importers.importer import TrainingDataImporter\n\nclass MyImporter(TrainingDataImporter): \"\"\"Example partial implementation of a custom importer component.\"\"\"\n # this function was async before def get_domain(self) -> Domain: pass\n # this function was also async before def get_config(self) -> Dict: pass\n # ...\n\ntemplate_variables and e2e arguments also got removed from get_stories method of TrainingDataImporter.\nIts new signature looks this way:", "chunk": 17, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1848": {"text": "Copyfrom typing import Optional\nfrom rasa.shared.nlu.interpreter import RegexInterpreterfrom rasa.shared.core.training_data.structures import StoryGraph\nclass TrainingDataImporter: # ...\n def get_stories(        self,        interpreter: \"NaturalLanguageInterpreter\" = RegexInterpreter(),        exclusion_percentage: Optional[int] = None, ) -> StoryGraph: pass\n # ...\n\nTraining#\n\nrasa train --dry-run#\n\nDue to changes in the model architecture the behavior of rasa train --dry-run changed.\nThe exit codes now have the following meaning:\n\n0 means that the model does not require an expensive retraining. However, the\nresponses might still require updating by running rasa train1 means that one or multiple components require to be retrained.8 means that the --force flag was used and hence any cached results are ignored\nand the entire model is retrained.\n\nMachine Learning Components#\n\nNormalization of Confidences in DIETClassifier and ResponseSelector#\n\nDIETClassifier and ResponseSelector will no longer automatically report\nre-normalized confidences when ranking_length is set to a value greater than 0.\nThis change affects the reported confidences but does not influence the final\npredicted intent, which might be used by policies.\nHowever, since the reported confidences are affected you might have to tune the\nthresholds for fallback mechanisms again.\nThe previous behavior can still be enforced by setting renormalize_confidences=True\nwhen using model_confidence=softmax.\n\nNormalization of confidences in TEDPolicy#", "chunk": 18, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1849": {"text": "Normalization of confidences in TEDPolicy#\n\nPredictions of TEDPolicy will no longer be modified by masking and renormalizing\nconfidences. This change can affect the maximum confidence predicted by the\nTEDPolicy and thereby affect the final result of the policy ensemble.\nHowever, the previous behavior can still be enforced by setting\nranking_length=10 and renormalize_confidences=True.\n\nRemoved Policies#\n\nSeveral dialogue policies that were deprecated in Rasa 2.x have been removed in Rasa 3.0.\nIf you are migrating a config file with a removed policy,\nconsult the following migration guides for the individual policies:\n\nFallbackPolicy migration guideTwoStageFallbackPolicy migration guideMappingPolicy migration guideFormPolicy migration guideSklearnPolicy should be replaced with TEDPolicy.\nIt is recommended to use the default TEDPolicy config as a starting point.\n\nRemoved Tokenizers and Featurizers#\n\nThe ConveRTTokenizer, LanguageModelTokenizer, and HFTransformersNLP featurizer\ncomponents were deprecated in Rasa 2.x and have been removed in Rasa 3.0. See the\nmigration guide for Rasa 2.x for replacing these components in your pipeline.\n\nSlot Mappings#\n\nAs of version 3.0, there is a single explicit mechanism for slot filling enabled by defining slot mappings for each slot\nin the slots section of the domain file. This approach keeps slots up to date over the course of a conversation, and\nremoves duplicated effort in mapping the same slots in multiple forms. It is still possible to fill slots from arbitrary\ncustom actions and not update them on every turn of the conversation if that behavior is desired.", "chunk": 19, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1850": {"text": "This new mechanism replaces the implicit slot setting via auto-fill of slots with entities of the same name.\nThe auto_fill key in the domain is no longer available, as well as the auto_fill parameter in the constructor of\nthe Slot class.\n\nWhile forms continue to request the next slot, slot extraction is now delegated to the default\naction action_extract_slots. This action runs in the background\nautomatically after each user turn. Like action_listen, it should not be included in stories.\n\nEach slot in the slots section must include the mappings key. The same keys used for predefined mappings in 2.0 are\navailable in 3.0. Additionally, you can define slots with custom mappings implemented in a custom action which will be\nrun on every user turn, for example:\n\nCopyslots: is_existing_customer: type: bool mappings: - type: custom action: action_verify_customer_status\n\nYou can use slot validation actions to either validate slots with predefined\nmappings, or to both extract and validate slots with custom mappings.\n\nSlots which will be filled by arbitrary custom actions in the course of the conversation, and which should not be updated\non every user turn, should be listed with mappings of type custom and no action. For example:\n\nCopyslots: handoff_completed: type: bool initial_value: false mappings: - type: custom\n\nThis slot's value will only change when a custom action is predicted that sets it. This mapping maintains the behavior\nfrom 2.x for a slot which was not filled by an entity or by slot mappings in a form.", "chunk": 20, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1851": {"text": "noteThe required_slots of a form used to be a list of slot mappings.\nSince slot mappings are relocated to the slots section of the domain, required_slots has been converted to a list of\nslot names only.\n\nAutomatic migration from 2.0 domain format to the 3.0 format#\n\nThe only data file that has changed in format is the domain file.\nTo migrate automatically to the 3.0 domain format, you can run the following command:\n\nCopyrasa data migrate -d DOMAIN --out OUT_PATH\n\nIn addition to creating a valid 3.0 domain in the indicated out path, this command will automatically backup your\noriginal domain file(s) in a file labeled original_domain.yml or original_domain directory if a directory was\nprovided instead.\n\nTo maintain the behavior of forms in the 2.0 format, all migrated slot mappings will include mapping conditions for\neach form. This can be changed manually according to your use case.\nSee the docs on mapping conditions for more information.\n\nManually migrating from 2.0 domain format to the 3.0 format#\n\nEach slot in the slots section of the domain will need a new key mappings.\nThis key is a list of mappings moved from forms, while the required_slots field collapses to a list of slot names.\n\nLet's consider the following 2.0 domain file:", "chunk": 21, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1852": {"text": "Let's consider the following 2.0 domain file:\n\nCopyentities: - cuisine - numberslots: cuisine: type: text num_people: type: float outdoor_seating: type: boolforms: restaurant_form: required_slots: cuisine: - type: from_entity entity: cuisine num_people: - type: from_entity entity: number outdoor_seating: - type: from_intent intent: affirm value: true - type: from_intent intent: deny value: false\n\nThe initial result of migrating this domain to 3.0 format would look like this:\n\nCopyentities: - cuisine - numberslots: cuisine: type: text mappings: - type: from_entity entity: cuisine num_people: type: float mappings: - type: from_entity entity: number outdoor_seating: type: bool mappings: - type: from_intent intent: affirm value: true - type: from_intent intent: deny value: falseforms: restaurant_form: required_slots: - cuisine - num_people - outdoor_seating\n\nFor slots that should be filled only in the context of a form, add mapping conditions\nto specify which form(s) should be active, as well as indicate if the requested_slot should be the same slot.\nAdding conditions is required to preserve the behavior of slot mappings from 2.0, since without them\nthe mappings will be applied on each user turn regardless of whether a form is active or not.\n\nCopy slots: outdoor_seating: type: bool mappings: - type: from_intent intent: affirm value: true conditions: - active_loop: restaurant_form requested_slot: outdoor_seating - type: from_intent intent: deny value: false conditions: - active_loop: restaurant_form requested_slot: outdoor_seating", "chunk": 22, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1853": {"text": "Rasa-SDK Modifications#\n\nIf you have used FormValidationAction to define custom extraction and validation code in which you override the\nrequired_slots method, note that slots_mapped_in_domain argument has been replaced by the domain_slots argument.\nYou must make this replacement to continue using your custom code.\n\nIf you have been dynamically filling slots not present in the form's required_slots defined in the domain.yml\nfile, note that this behaviour is no longer supported in 3.x. Any dynamic slots with custom mappings, which are set in\nthe last user turn, will be filled only if they are returned by the required_slots method of the custom action\ninheriting from FormValidationAction. To maintain the 2.x behaviour, you must now override the required_slots method\nof this custom action as per the strong recommendation listed in the dynamic form documentation.\n\nTo extract custom slots that are not defined in any form's required_slots, you should now use a global custom slot mapping\nand extend the ValidationAction class.\n\nnoteIf you have custom validation actions extending FormValidationAction which override required_slots method, you should\ndouble-check the dynamic form behavior of your migrated assistant. Slots set by the default action\naction_extract_slots may need to be reset within the context of your\nform by the custom validation actions for the form's required slots. For example, if your form dynamically adds a required\nslot after the first slot is filled, you may want to reset the potential required slot as part of the first required slot's\nvalidation method to ensure it will be empty when added.\n\nRasa 2.7 to 2.8#", "chunk": 23, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1854": {"text": "Rasa 2.7 to 2.8#\n\ncautionThis release breaks backward compatibility of machine learning models.\nIt is not possible to load models trained with previous versions of Rasa. Please re-train\nyour assistant before using this version.\n\nDeprecations#\n\nTracker Featurizers#\n\ntraining_states_actions_and_entities method of TrackerFeaturizer, FullDialogueTrackerFeaturizer and\nMaxHistoryTrackerFeaturizer classes is deprecated and will be removed in Rasa 3.0 .\nIf you had a custom tracker featurizer which relied on this method from any of the above classes, please use\ntraining_states_labels_and_entities instead.\n\ntraining_states_and_actions method of TrackerFeaturizer, FullDialogueTrackerFeaturizer and\nMaxHistoryTrackerFeaturizer classes is deprecated and will be removed in Rasa 3.0 .\nIf you had a custom tracker featurizer which relied on this method from any of the above classes, please use\ntraining_states_and_labels instead.\n\nState Featurizer#\n\nencode_all_actions method of SingleStateFeaturizer class is deprecated and will be removed in Rasa 3.0 .\nIt is recommended to use the method encode_all_labels instead.\n\nIncremental Training#\n\nUsers don't need to specify an additional buffer size for sparse featurizers anymore during incremental training.\n\nSpace for new sparse features are created dynamically inside the downstream machine learning\nmodels - DIETClassifier, ResponseSelector. In other words, no extra buffer is created in\nadvance for additional vocabulary items and space will be dynamically allocated for them inside the model.", "chunk": 24, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1855": {"text": "This means there's no need to specify additional_vocabulary_size for\nCountVectorsFeaturizer or\nnumber_additional_patterns for RegexFeaturizer.\nThese parameters are now deprecated.\n\nBefore\n\nCopypipeline: - name: \"WhitespaceTokenizer\" - name: \"RegexFeaturizer\" number_additional_patterns: 100 - name: \"CountVectorsFeaturizer\" additional_vocabulary_size: {text: 100, response: 20}\n\nNow\n\nCopypipeline: - name: \"WhitespaceTokenizer\" - name: \"RegexFeaturizer\" - name: \"CountVectorsFeaturizer\"\n\nMachine Learning Components#\n\nThe option model_confidence=linear_norm is deprecated and will be removed in Rasa 3.0.0.\n\nRasa 2.3.0 introduced linear_norm as a possible value for model_confidence\nparameter in machine learning components such as DIETClassifier, ResponseSelector and TEDPolicy.\nBased on user feedback, we have identified multiple problems with this option.\nTherefore, model_confidence=linear_norm is now deprecated and\nwill be removed in Rasa 3.0.0. If you were using model_confidence=linear_norm for any of the mentioned components,\nwe recommend to revert it back to model_confidence=softmax and re-train the assistant. After re-training,\nwe also recommend to re-tune the thresholds for fallback components.\n\nRasa 2.5 to 2.6#\n\nForms#\n\nNew ignored_intents parameter in Forms#", "chunk": 25, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1856": {"text": "Forms#\n\nNew ignored_intents parameter in Forms#\n\nThere is a new parameter under Forms called ignored_intents. This parameter\ncan be used to prevent any required slots in a form from being filled with the specified\nintent or intents. Please see the Forms documentation for examples and more\ninformation on how to use it in your domain.yml file.\n\nBefore, if a user did not want to fill any slots of a form with a specified intent\nthey would have to define it under the not_intent parameter for every slot mapping\nas shown in the following example :\n\ndomain.ymlCopyforms:  restaurant_form:      cuisine:      - type: from_entity        entity: cuisine        not_intent: chitchat      num_people:      - type: from_entity        entity: number        intent: [inform, request_restaurant]        not_intent: chitchat      feedback:      - type: from_entity        entity: feedback        not_intent: chitchat\n\nBy introducing the ignored_intents parameter, we now only need to define it\nin one place and it will affect all the slots of the form :\n\ndomain.ymlCopyforms:  restaurant_form:    ignored_intents: chitchat    required_slots:      cuisine:      - type: from_entity        entity: cuisine      num_people:      - type: from_entity        entity: number        intent: [inform, request_restaurant]      feedback:      - type: from_entity        entity: feedback      - type: from_text\n\nRasa 2.4 to 2.5#\n\nMachine Learning Components#\n\nDIET, TED, and ResponseSelector#", "chunk": 26, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1857": {"text": "Machine Learning Components#\n\nDIET, TED, and ResponseSelector#\n\nThe former weight_sparsity parameter of the DIETClassifier, TEDPolicy, and the ResponseSelector,\nis now deprecated and superseded by the new connection_density parameter.\nThe old weight_sparsity is roughly equivalent to 1 - connection_density, except at very low densities\n(high sparsities).\n\nTo avoid deprecation issues, you should set connection_density to\n1 - your former weight_sparsity setting throughout the config file. (If you left\nweight_sparsity at its default setting, you don't need to do anything.)\n\nSpaCy 3.0#\n\nRasa now supports spaCy 3.0. This means that we can support more features for more\nlanguages but this also introduced a breaking change. SpaCy 3.0 deprecated the\nspacy link <language model> command. So from now on you need to use the\nthe full model name in the config.yml file.\n\nBefore\n\nBefore you could run spacy link en en_core_web_md and then we would be able\nto pick up the correct model from the language parameter.\n\nCopylanguage: en\npipeline: - name: SpacyNLP\n\nNow\n\nThis behavior will be deprecated and instead you'll want to be explicit in config.yml.\n\nCopylanguage: en\npipeline: - name: SpacyNLP model: en_core_web_md\n\nFallback", "chunk": 27, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1858": {"text": "Fallback\n\nTo make the transition easier, Rasa will try to fall back to a medium spaCy model whenever\na compatible language is configured for the entire pipeline in config.yml, even if you don't\nspecify a model. This fallback behavior is temporary and will be deprecated in Rasa 3.0.0.\n\nWe've updated our docs to reflect these changes. All examples now show a direct link to the\ncorrect spaCy model. We've also added a warning to the SpaCyNLP\ndocs that explains the fallback behavior.\n\nRasa 2.3 to Rasa 2.4#\n\nDeprecating template for response#\n\nNLG Server\n\nChanged request format to send response as well as template as a field. The template field will be removed in Rasa 3.0.0.\n\nrasa.core.agent\n\nThe terminology template is deprecated and replaced by response. Support for template from the NLG response will be removed in Rasa 3.0.0. Please see here for more details.\n\nrasa.core.nlg.generator\n\ngenerate() now takes in  utter_action as a parameter.The terminology template is deprecated and replaced by response. Support for template in the NaturalLanguageGenerator will be removed in Rasa 3.0.0.\n\nrasa.shared.core.domain", "chunk": 28, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1859": {"text": "rasa.shared.core.domain\n\nThe property templates is deprecated. Use responses instead. It will be removed in Rasa 3.0.0.retrieval_intent_templates will be removed in Rasa 3.0.0. Please use retrieval_intent_responses instead.is_retrieval_intent_template will be removed in Rasa 3.0.0. Please use is_retrieval_intent_response instead.check_missing_templates will be removed in Rasa 3.0.0. Please use check_missing_responses instead.\n\nResponse Selector\n\nThe field template_name will be deprecated in Rasa 3.0.0. Please use utter_action instead. Please see here for more details.The field response_templates will be deprecated in Rasa 3.0.0. Please use responses instead. Please see here for more details.\n\nRasa 2.3.3 to Rasa 2.3.4#\n\ncautionThis is a release breaking backwards compatibility of machine learning models.\nIt is not possible to load previously trained models if they were trained with model_confidence=cosine or\nmodel_confidence=inner setting. Please make sure to re-train the assistant before trying to use it with this improved version.\n\nMachine Learning Components#\n\nRasa 2.3.0 introduced the option of using cosine similarities for model confidences by setting model_confidence=cosine. Some post-release experiments revealed that using model_confidence=cosine is wrong as it can change the order of predicted labels. That's why this option was removed in Rasa version 2.3.4.\n\nmodel_confidence=inner is deprecated as it produces an unbounded range of confidences which can break\nthe logic of assistants in various other places.", "chunk": 29, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1860": {"text": "We encourage you to try model_confidence=linear_norm which will produce a linearly normalized version of dot product similarities with each value in the range [0,1]. This can be done with the following config:\n\nCopy- name: DIETClassifier  model_confidence: linear_norm  constrain_similarities: True\n\nIf you trained a model with model_confidence=cosine or model_confidence=inner setting using previous versions of Rasa, please re-train by either removing the model_confidence option from the configuration or setting it to linear_norm.\n\nRasa 2.2 to Rasa 2.3#\n\nGeneral#\n\nIf you want to use Tensorboard for DIETClassifier, ResponseSelector, or TEDPolicy and log metrics after\nevery (mini)batch, please use 'batch' instead of 'minibatch' as 'tensorboard_log_level'.\n\nMachine Learning Components#\n\nA few changes have been made to the loss function inside machine learning (ML)\ncomponents DIETClassifier, ResponseSelector and TEDPolicy. These include:\n\nConfiguration option loss_type=softmax is now deprecated and will be removed in Rasa 3.0.0. Use loss_type=cross_entropy instead.The default loss function (loss_type=cross_entropy) can add an optional sigmoid cross-entropy loss of all similarity values to constrain\nthem to an approximate range. You can turn on this option by setting constrain_similarities=True. This should help the models to perform better on real world test sets.\n\nA new option model_confidence has been added to each ML component. It affects how the model's confidence for each label is computed during inference. It can take one of three values:", "chunk": 30, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1861": {"text": "softmax - Dot product similarities between input and label embeddings are post-processed with a softmax function, as a result of which confidence for all labels sum up to 1.cosine - Cosine similarity between input and label embeddings. Confidence for each label will be in the range [-1,1].linear_norm - Dot product similarities between input and label embeddings are post-processed with a linear normalization function. Confidence for each label will be in the range [0,1].\n\nThe default value is softmax, but we recommend trying linear_norm. This should make it easier to tune thresholds for triggering fallback.\nThe value of this option does not affect how confidences are computed for entity predictions in DIETClassifier.\n\nWe encourage you to try both the above recommendations. This can be done with the following config:\n\nCopy- name: DIETClassifier  model_confidence: linear_norm  constrain_similarities: True  ...\n\nOnce the assistant is re-trained with the above configuration, users should also tune fallback confidence thresholds.\n\nEDIT: Some post-release experiments revealed that using model_confidence=cosine is wrong as it can change the order of predicted labels. That's why this option was removed in Rasa version 2.3.4.\n\nRasa 2.1 to Rasa 2.2#\n\nGeneral#\n\nTEDPolicy's  transformer_size, number_of_transformer_layers,\nand dense_dimensions parameters have been renamed.\nPlease update your configuration files using the following mapping:", "chunk": 31, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1862": {"text": "Old Model ParameterNew Model Parametertransformer_sizedictionary transformer_size with keystext, action_text, label_action_text, dialoguenumber_of_transformer_layersdictionary number_of_transformer_layers with keystext, action_text, label_action_text, dialoguedense_dimensiondictionary dense_dimension with keystext, action_text, label_action_text, intent,action_name, label_action_name, entities, slots,active_loop\n\nFor example:\n\nconfig.ymlCopypolicies:  - name: TEDPolicy    transformer_size:      text: 128      action_text: 128      label_action_text: 128      dialogue: 128    number_of_transformer_layers:      text: 1      action_text: 1      label_action_text: 1      dialogue: 1    dense_dimension:      text: 128      action_text: 128      label_action_text: 128      intent: 20      action_name: 20      label_action_name: 20      entities: 20      slots: 20      active_loop: 20\n\nDeprecations#\n\nMarkdown Data#\n\nTraining and test data in Markdown format is now deprecated. This includes:\n\nreading and writing of story files in Markdown formatreading and writing of NLU data in Markdown formatreading and writing of retrieval intent data in Markdown format\n\nSupport for Markdown data will be removed entirely in Rasa 3.0.0.\n\nPlease convert your existing Markdown data by using the commands\ndescribed here.\n\nPolicies#", "chunk": 32, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1863": {"text": "Policies#\n\nPolicies now require a **kwargs argument in their constructor and load method.\nPolicies without **kwargs will be supported until Rasa version 3.0.0.\nHowever when using incremental training\n**kwargs must be included.\n\nOther#\n\nDomain.random_template_for is deprecated and will be removed in Rasa\n3.0.0. You can alternatively use the TemplatedNaturalLanguageGenerator.Domain.action_names is deprecated and will be removed in Rasa\n3.0.0. Please use Domain.action_names_or_texts instead.\n\nRasa 2.0 to Rasa 2.1#\n\nDeprecations#\n\nConveRTTokenizer is now deprecated. ConveRTFeaturizer now implements\nits behaviour. To migrate, replace ConveRTTokenizer with any other tokenizer, for e.g.:\n\nCopypipeline: - name: WhitespaceTokenizer - name: ConveRTFeaturizer model_url: <Remote/Local path to model files> ...\n\nHFTransformersNLP and LanguageModelTokenizer components are now deprecated.\nLanguageModelFeaturizer now implements their behaviour.\nTo migrate, replace both the above components with any tokenizer and specify the model architecture and model weights\nas part of LanguageModelFeaturizer, for e.g.:\n\nCopypipeline: - name: WhitespaceTokenizer - name: LanguageModelFeaturizer model_name: \"bert\" model_weights: \"rasa/LaBSE\" ...\n\nRasa 1.10 to Rasa 2.0#\n\nGeneral#", "chunk": 33, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1864": {"text": "Rasa 1.10 to Rasa 2.0#\n\nGeneral#\n\nA lot has changed in version 2.0. Make sure you read\nthrough this guide thoroughly, to make sure all parts of your bot are updated.\nA lot of updates can be done automatically with inbuilt commands, others will need\nsome manual conversion. If you have any feedback about these updates or the migration process, please post it\nin the forum.\n\nTraining data files#\n\nAs of version 2.0, the new default training data format is yaml. Markdown is still supported,\nbut this will be deprecated in Rasa 3.0.0.\n\nYou can convert existing NLU, Stories, and NLG (i.e. responses.md) training data\nfiles in the Markdown format to the new YAML format using following commands:\n\nCopyrasa data convert nlu -f yaml --data={SOURCE_DIR} --out={TARGET_DIR}rasa data convert nlg -f yaml --data={SOURCE_DIR} --out={TARGET_DIR}rasa data convert core -f yaml --data={SOURCE_DIR} --out={TARGET_DIR}\n\nConverted files will have the same names as the original ones but with a\n_converted.yml suffix.\n\nIf you are using forms or response selectors,\nsome additional changes will need to be made as described in their respective sections.\n\nPolicies#\n\nWith the introduction of rules and the RulePolicy,\nthe following policies are deprecated:\n\nMapping PolicyFallback PolicyTwo-Stage Fallback PolicyForm Policy\n\nTo migrate the policies automatically, you can run the following command:\n\nCopyrasa data convert config", "chunk": 34, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1865": {"text": "Copyrasa data convert config\n\nThis command will take care of updating your config.yml and domain.yml, while\nmaking backups of your existing files using the .bak suffix. It will also add a\nrules.yml if necessary.\n\nYour forms will still function as normal in the old format after this update, but this command\ndoes not convert them into the new format automatically. This should be done manually, as\ndescribed in the section on forms.\n\nYou can also migrate the individual policies manually, if you don't want to use the automatic conversion command.\n\nManually migrating from the Mapping Policy#\n\nIf you previously used the Mapping Policy, you\ncan follow the documentation on FAQs to convert your mapped\nintents to rules. Suppose you previously mapped an intent ask_is_bot as follows:\n\ndomain.ymlCopyintents: - ask_is_bot:     triggers: action_is_bot\n\nThis becomes the following rule:\n\nrules.ymlCopyrules:- rule: Rule to map `ask_is_bot` intent  steps:  - intent: ask_is_bot  - action: action_is_bot\n\nAnd you can safely remove any triggers: from your domain:\n\ndomain.ymlCopyintents: - ask_is_bot\n\nFinally, you can replace the Mapping Policy with the\nRule Policy in your model configuration:\n\nconfig.ymlCopypolicies:  # Other policies  - name: RulePolicy\n\nManually migrating from the Fallback Policy#\n\nIf you previously used the Fallback Policy, the following model\nconfiguration would translate as follows given a previous configuration like this:", "chunk": 35, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1866": {"text": "config.ymlCopypolicies:  - name: \"FallbackPolicy\"    nlu_threshold: 0.4    core_threshold: 0.3    fallback_action_name: \"action_default_fallback\"    ambiguity_threshold: 0.1\n\nThe new configuration would then look like:\n\nconfig.ymlCopyrecipe: default.v1pipeline:  # Other components  - name: FallbackClassifier    threshold: 0.4    ambiguity_threshold: 0.1\npolicies:  # Other policies  - name: RulePolicy    core_fallback_threshold: 0.3    core_fallback_action_name: \"action_default_fallback\"\n\nIn addition, you need to add a rule to specify which action to run\nin case of low NLU confidence:\n\nrules.ymlCopyrules:  - rule: Ask the user to rephrase whenever they send a message with low NLU confidence    steps:    - intent: nlu_fallback    - action: utter_please_rephrase\n\nSee the documentation on fallback for more\ninformation.\n\nManually migrating from the Two-Stage-Fallback Policy#\n\nIf you previously used the\nTwo-Stage Fallback Policy, with a configuration\nlike this for example:\n\nconfig.ymlCopypolicies:  - name: TwoStageFallbackPolicy    nlu_threshold: 0.4    ambiguity_threshold: 0.1    core_threshold: 0.3    fallback_core_action_name: \"action_default_fallback\"    fallback_nlu_action_name: \"action_default_fallback\"    deny_suggestion_intent_name: \"out_of_scope\"", "chunk": 36, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1867": {"text": "The new configuration would look like this:\n\nconfig.ymlCopyrecipe: default.v1pipeline:  # Other components  - name: FallbackClassifier    threshold: 0.4    ambiguity_threshold: 0.1\npolicies:  # Other policies  - name: RulePolicy    core_fallback_threshold: 0.3    core_fallback_action_name: \"action_default_fallback\"\n\nIn addition you need to add a rule to activate the Two-Stage Fallback for\nmessages with low NLU confidence.\n\nrules.ymlCopyrules:  - rule: Implementation of the TwoStageFallbackPolicy    steps:    # This intent is automatically triggered by the `FallbackClassifier` in the NLU    # pipeline in case the intent confidence was below the specified threshold.    - intent: nlu_fallback    # The Fallback is now implemented as a form.    - action: action_two_stage_fallback    - active_loop: action_two_stage_fallback\n\nNote that the previous parameters fallback_nlu_action_name and\ndeny_suggestion_intent_name are no longer configurable and have the fixed values\naction_default_fallback and out_of_scope.\n\nSee the fallback documentation for more\ninformation.\n\nForms#\n\nAs of version 2.0 the logic for forms has been moved from the\nRasa SDK to Rasa to simplify implementation and make it easier to write\naction servers in other languages.\n\nThis means that forms are no longer implemented using a FormAction, but instead\ndefined in the domain. Any customizations around requesting slots or\nslot validation can be handled with a FormValidationAction.\n\nConsider a custom form action from 1.x like this:", "chunk": 37, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1868": {"text": "Copyfrom typing import Text, List, Any, Dict, Unionfrom rasa_sdk import Trackerfrom rasa_sdk.executor import CollectingDispatcherfrom rasa_sdk.forms  import FormAction\nclass RestaurantForm(FormAction): def name(self) -> Text: return \"restaurant_form\"\n @staticmethod def required_slots(tracker: Tracker) -> List[Text]: return [\"cuisine\"]\n def slot_mappings(self) -> Dict[Text, Union[Dict, List[Dict]]]: return { \"cuisine\": self.from_entity(entity=\"cuisine\", not_intent=\"chitchat\"), }\n    @staticmethod def cuisine_db() -> List[Text]: \"\"\"Database of supported cuisines\"\"\"\n return [\"caribbean\", \"chinese\", \"french\"]\n def validate_cuisine(        self,        value: Text,        dispatcher: CollectingDispatcher,        tracker: Tracker,        domain: Dict[Text, Any], ) -> Dict[Text, Any]: \"\"\"Validate cuisine value.\"\"\"\n if value.lower() in self.cuisine_db(): # validation succeeded, set the value of the \"cuisine\" slot to value return {\"cuisine\": value} else:            dispatcher.utter_message(template=\"utter_wrong_cuisine\") # validation failed, set this slot to None, meaning the # user will be asked for the slot again return {\"cuisine\": None}\n def submit(        self,        dispatcher: CollectingDispatcher,        tracker: Tracker,        domain: Dict[Text, Any], ) -> List[Dict]: \"\"\"Define what the form has to do            after all required slots are filled\"\"\"", "chunk": 38, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1869": {"text": "# utter submit template        dispatcher.utter_message(template=\"utter_submit\") return []", "chunk": 39, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1870": {"text": "Start the migration by removing the FormPolicy and adding the RulePolicy\n(if not there already) to your model configuration:\n\nconfig.ymlCopypolicies:  # Other policies  # ...  - name: RulePolicy\n\nThen you need to define the form, required slots and their slot mappings\nin the domain as described in the documentation on forms:\n\ndomain.ymlCopyforms:  restaurant_form:    cuisine:    - type: from_entity      entity: cuisine      not_intent: chitchat\n\nIf you ran the command to convert your stories,\nyou will have a story that handles form activation and deactivation like this:\n\nstories.ymlCopystories:  - story: cuisine form    steps:    - intent: request_restaurant    - action: restaurant_form    - active_loop: restaurant_form    - active_loop: null    - action: utter_submit\n\nThis will work fine, but the best way to handle form behavior is to remove this story and instead\ndefine two separate rules for form activation and submission:\n\nrules.ymlCopyrules:  - rule: Activate form    steps:    - intent: request_restaurant    - action: restaurant_form    - active_loop: restaurant_form\n  - rule: Submit form    condition:    # Condition that form is active.    - active_loop: restaurant_form    steps:    - action: restaurant_form    - active_loop: null    # The action we want to run when the form is submitted.    - action: utter_submit\n\nThe last step is to implement a custom action to validate the form slots. Start by\nadding the custom action to your domain:\n\ndomain.ymlCopyactions:  # Other actions  # ...  - validate_restaurant_form", "chunk": 40, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1871": {"text": "Then add a custom action which validates the cuisine slot:\n\nCopyfrom typing import Text, List, Any, Dict, Unionfrom rasa_sdk import Trackerfrom rasa_sdk.executor import CollectingDispatcherfrom rasa_sdk import FormValidationActionfrom rasa_sdk.types import DomainDict\nclass RestaurantFormValidator(FormValidationAction): def name(self) -> Text: return \"validate_restaurant_form\"\n @staticmethod def cuisine_db() -> List[Text]: \"\"\"Database of supported cuisines\"\"\"\n return [\"caribbean\", \"chinese\", \"french\"]\n def validate_cuisine(        self,        slot_value: Any,        dispatcher: CollectingDispatcher,        tracker: Tracker,        domain: DomainDict, ) -> Dict[Text, Any]: \"\"\"Validate cuisine value.\"\"\"\n if slot_value.lower() in self.cuisine_db(): # validation succeeded, set the value of the \"cuisine\" slot to value return {\"cuisine\": slot_value} else: # validation failed, set this slot to None, meaning the # user will be asked for the slot again return {\"cuisine\": None}\n\nYou can also migrate forms from Rasa SDK to Rasa 2 iteratively. You can for\nexample migrate one form to the Rasa 2 implementation while continue using\nthe deprecated Rasa SDK implementation for another form. To continue to use\nthe deprecated Rasa SDK FormActions, add a custom action with the name of your form to your domain. Note that you should complete the migration as soon as possible as the deprecated FormAction\nwill be removed from the Rasa SDK in Rasa 3.", "chunk": 41, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1872": {"text": "domain.ymlCopyactions:# Adding a custom action for a form will# instruct Rasa to use the# deprecated Rasa SDK implementation of forms.- my_form\nforms: my_form:\n\nSee the forms documentation for more details.\n\nResponse Selectors#\n\nResponse Selectors are a stable feature as of version 2.0.\n\nThe conversion command will automatically\nconvert your responses.md file, stories and nlu training data to the new yaml format.\nIt will also take care of adding the utter_ prefix to your responses.\nAdditionally you will need to rename the respond_ actions in your stories files to use the\nutter_ prefix instead. Run the following command to apply these changes:\n\nCopyrasa data convert responses --data {SOURCE_DIR} --out={TARGET_DIR}\n\nYou can also apply these changes manually. For example:\n\nCopystories:  - story: chitchat    steps:    - intent: chitchat    - action: respond_chitchat\n\nbecomes\n\nCopystories:  - story: chitchat    steps:    - intent: chitchat    - action: utter_chitchat\n\nand you will need to add the utter_ prefix to the response names in your responses.md\nas well. For example:\n\nCopyresponses:  chitchat/ask_name:    - text: Oh yeah, I am called the retrieval bot.\n  chitchat/ask_weather:    - text: Oh, it does look sunny right now in Berlin.\n\nbecomes\n\nCopyresponses:  utter_chitchat/ask_name:    - text: Oh yeah, I am called the retrieval bot.\n  utter_chitchat/ask_weather:    - text: Oh, it does look sunny right now in Berlin.", "chunk": 42, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1873": {"text": "Finally, you should remove any actions with the respond_ prefix from the actions\nlist in your domain.\n\nThis behavior will work fine when defined as a story, but even better when defined\nas a rule. You should consider transferring your retrieval stories to rules. More information\non what that looks like in the chitchat and FAQs documentation.\n\nResponse Selectors are now trained on retrieval intent labels by default instead\nof the actual response text. For most models, this should improve training time\nand accuracy of the ResponseSelector.\n\nIf you want to revert to the pre-2.0 default behavior, add the use_text_as_label: true\nparameter to your ResponseSelector component:\n\nCopypipeline:  # other components  - name: ResponseSelector    use_text_as_label: true\n\nThe output schema of ResponseSelector has changed. An example output looks like this:\n\nCopy{ \"response_selector\": { \"all_retrieval_intents\": [ \"faq\" ], \"default\": { \"response\": { \"id\": 1388783286124362000, \"confidence\": 1, \"intent_response_key\": \"faq/is_legit\", \"response_templates\": [ { \"text\": \"absolutely\", \"image\": \"https://i.imgur.com/nGF1K8f.jpg\" }, { \"text\": \"I think so.\" } ] \"template_name\": \"utter_faq/is_legit\" }, \"ranking\": [ { \"id\": 1388783286124362000, \"confidence\": 1, \"intent_response_key\": \"faq/is_legit\" } ] } }}\n\nAs a result of this, if you were previously querying for the key full_retrieval_intent as:", "chunk": 43, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1874": {"text": "Copyresponse_selector_output.get(\"default\") .get(\"full_retrieval_intent\")\n\nyou should instead now do this:\n\nCopyresponse_selector_output.get(\"default\") .get(\"response\") .get(\"intent_response_key\")\n\nUnfeaturized Slots#\n\nSlots of type unfeaturized are\ndeprecated and will be removed in version 3.0. To ignore slot values during\na conversation, set the influence_conversation property of the slot to false.\n\nThe following snippet is an example of the deprecated unfeaturized slot usage:\n\nCopyslots:  username:    type: unfeaturized\n\nTo update this to the new format, you can specify the expected data type text and\ndefine that the slot should be ignored during the conversation.\n\nCopyslots:  username:    type: text    # Set `influence_conversation` to `false`    # to ignore the slot value during the conversation.    influence_conversation: false\n\nIf you don't require the slot to have a specific data type, you can use the new slot\ntype any. This slot type is always ignored during a conversation\nand does not make any assumptions regarding the data type of the slot value.\n\nCopyslots:  username:    type: any\n\nPlease see the updated slots documentation for more information.\n\nConversation sessions#\n\nConversation sessions are now enabled by default\nif your Domain does not contain a session configuration. Previously a\nmissing session configuration was treated as if conversation sessions were disabled.\nYou can explicitly disable conversation sessions using the following snippet:", "chunk": 44, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1875": {"text": "domain.ymlCopysession_config:  # A session expiration time of `0`  # disables conversation sessions  session_expiration_time: 0\n\nDialogue Featurization#\n\nThis section is only relevant if you explicitly defined featurizers\nin your policy configuration.\n\nLabelTokenizerSingleStateFeaturizer is deprecated and will be removed in the future.\nIt should be replaced with SingleStateFeaturizer and some changes should be made to the NLU pipeline.\nAdd a Tokenizer with the option intent_tokenization_flag: True and CountVectorsFeaturizer\nto the NLU pipeline.\n\nFor example:\n\nCopylanguage: enpipeline:  - name: WhitespaceTokenizer    intent_tokenization_flag: True  - name: CountVectorsFeaturizer  # other componentspolicies:  # other policies  - name: TEDPolicy    featurizer:    - name: SingleStateFeaturizer\n\n\nBinarySingleStateFeaturizer is deprecated and will be removed in the future.\nYou should replace it with SingleStateFeaturizer and a NLU pipeline\nwhere intent_tokenization_flag of a Tokenizer is set to False.\n\nFor example:\n\nCopylanguage: enpipeline:  - name: WhitespaceTokenizer    intent_tokenization_flag: False  # other componentspolicies:  # other policies  - name: TEDPolicy    featurizer:    - name: SingleStateFeaturizer\n\n\nDeprecations#\n\nThe deprecated event brokers FileProducer, KafkaProducer, PikaProducer\nand SQLProducer have been removed. If you used these brokers in your\nendpoints.yml make sure to use the renamed variants instead:", "chunk": 45, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1876": {"text": "FileProducer became FileEventBrokerKafkaProducer became KafkaEventBrokerPikaProducer became PikaEventBrokerSQLProducer became  SQLEventBroker\n\nThe deprecated EmbeddingIntentClassifier has been removed. If you used this\ncomponent in your pipeline configuration (config.yml) you can replace it\nwith DIETClassifier.\nIt accepts the same configuration parameters.\n\nThe deprecated KerasPolicy has been removed. If you used this\ncomponent in your policies configuration (config.yml) you can replace it\nwith TEDPolicy. It accepts the same configuration parameters.\n\nRasa 1.7 to Rasa 1.8#\n\ncautionThis is a release breaking backwards compatibility.\nIt is not possible to load previously trained models. Please make sure to retrain a\nmodel before trying to use it with this improved version.\n\nGeneral#", "chunk": 46, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1877": {"text": "The TED Policy replaced the keras_policy as recommended machine\nlearning policy. New projects generated with rasa init will automatically use\nthis policy. In case you want to change your existing model configuration to use the\nTED Policy add this to the policies section in your config.yml\nand remove potentially existing KerasPolicy entries:Copypolicies:# - ... other policies- name: TEDPolicy  max_history: 5  epochs: 100The given snippet specifies default values for the parameters max_history and\nepochs. max_history is particularly important and strongly depends on your stories.\nPlease see the docs of the TED Policy if you want to customize them.All pre-defined pipeline templates are deprecated. Any templates you use will be\nmapped to the new configuration, but the underlying architecture is the same.\nTake a look at Tuning Your Model to decide on what components you should use\nin your configuration file.The Embedding Policy was renamed to TED Policy. The functionality of the policy stayed the same.\nPlease update your configuration files to use TEDPolicy instead of EmbeddingPolicy.Most of the model options for EmbeddingPolicy, EmbeddingIntentClassifier, and ResponseSelector got", "chunk": 47, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1878": {"text": "renamed. Please update your configuration files using the following mapping:Old model optionNew model optionhidden_layers_sizes_adictionary \u201chidden_layers_sizes\u201d with key \u201ctext\u201dhidden_layers_sizes_bdictionary \u201chidden_layers_sizes\u201d with key \u201clabel\u201dhidden_layers_sizes_pre_dialdictionary \u201chidden_layers_sizes\u201d with key \u201cdialogue\u201dhidden_layers_sizes_botdictionary \u201chidden_layers_sizes\u201d with key \u201clabel\u201dnum_transformer_layersnumber_of_transformer_layersnum_headsnumber_of_attention_headsmax_seq_lengthmaximum_sequence_lengthdense_dimdense_dimensionembed_dimembedding_dimensionnum_negnumber_of_negative_examplesmu_posmaximum_positive_similaritymu_negmaximum_negative_similarityuse_max_sim_neguse_maximum_negative_similarityC2regularization_constantC_embnegative_margin_scaledroprate_adroprate_dialoguedroprate_bdroprate_labelevaluate_every_num_epochsevaluate_every_number_of_epochsevaluate_on_num_examplesevaluate_on_number_of_examplesOld configuration options will be mapped to the new names, and a warning will be thrown.\nHowever, these will be deprecated in a future release.The Embedding Intent Classifier is now deprecated and will be replaced by DIETClassifier\nin the future.\nDIETClassfier performs intent classification as well as entity recognition.", "chunk": 48, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1879": {"text": "in the future.\nDIETClassfier performs intent classification as well as entity recognition.\nIf you want to get the same model behavior as the current EmbeddingIntentClassifier, you can use\nthe following configuration of DIETClassifier:Copypipeline:# - ... other components- name: DIETClassifier  hidden_layers_sizes:    text: [256, 128]  number_of_transformer_layers: 0  weight_sparsity: 0  intent_classification: True  entity_recognition: False  use_masked_language_model: False  BILOU_flag: False  scale_loss: True  use_sparse_input_dropout: False  use_dense_input_dropout: False  # ... any other parametersSee DIETClassifier for more information about the new component.\nSpecifying EmbeddingIntentClassifier in the configuration maps to the above component definition, and results in\nthe same behaviour within the same Rasa version.CRFEntityExtractor is now deprecated and will be replaced by DIETClassifier in the future. If you want to", "chunk": 49, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1880": {"text": "get the same model behavior as the current CRFEntityExtractor, you can use the following configuration:Copypipeline:# - ... other components- name: LexicalSyntacticFeaturizer  features: [    [\"low\", \"title\", \"upper\"],    [      \"BOS\",      \"EOS\",      \"low\",      \"prefix5\",      \"prefix2\",      \"suffix5\",      \"suffix3\",      \"suffix2\",      \"upper\",      \"title\",      \"digit\",    ],    [\"low\", \"title\", \"upper\"],  ]- name: DIETClassifier  intent_classification: False  entity_recognition: True  use_masked_language_model: False  number_of_transformer_layers: 0  # ... any other parametersCRFEntityExtractor featurizes user messages on its own, it does not depend on any featurizer.\nWe extracted the featurization from the component into the new featurizer LexicalSyntacticFeaturizer. Thus,\nin order to obtain the same results as before, you need to add this featurizer to your pipeline before the\nDIETClassifier.\nSpecifying CRFEntityExtractor in the configuration maps to the above component definition, the behavior\nis unchanged from previous versions.If your pipeline contains CRFEntityExtractor and EmbeddingIntentClassifier you can substitute both", "chunk": 50, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1881": {"text": "components with DIETClassifier. You can use the following pipeline for that:Copypipeline:# - ... other components- name: LexicalSyntacticFeaturizer  features: [    [\"low\", \"title\", \"upper\"],    [      \"BOS\",      \"EOS\",      \"low\",      \"prefix5\",      \"prefix2\",      \"suffix5\",      \"suffix3\",      \"suffix2\",      \"upper\",      \"title\",      \"digit\",    ],    [\"low\", \"title\", \"upper\"],  ]- name: DIETClassifier  number_of_transformer_layers: 0  # ... any other parameters", "chunk": 51, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1882": {"text": "Rasa 1.6 to Rasa 1.7#\n\nGeneral#\n\nBy default, the EmbeddingIntentClassifier, EmbeddingPolicy, and ResponseSelector will\nnow normalize the top 10 confidence results if the loss_type is \"softmax\" (which has been\ndefault since 1.3, see Rasa 1.2 to Rasa 1.3). This is configurable via the ranking_length\nconfiguration parameter; to turn off normalization to match the previous behavior, set ranking_length: 0.\n\nRasa 1.2 to Rasa 1.3#\n\ncautionThis is a release breaking backwards compatibility.\nIt is not possible to load previously trained models. Please make sure to retrain a\nmodel before trying to use it with this improved version.\n\nGeneral#", "chunk": 52, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1883": {"text": "Default parameters of EmbeddingIntentClassifier are changed. See\nthe Components page for details.\nArchitecture implementation is changed as well, so old trained models cannot be loaded.\nDefault parameters and architecture for EmbeddingPolicy are changed. See Policies for details.\nIt uses transformer instead of lstm. Old trained models cannot be loaded.\nThey use inner similarity and softmax loss by default instead of\ncosine similarity and margin loss (can be set in config file).\nThey use balanced batching strategy by default to counteract class imbalance problem.\nThe meaning of evaluate_on_num_examples is changed. If it is non zero, random examples will be\npicked by stratified split and used as hold out validation set, so they will be excluded from training data.\nWe suggest to set it to zero (default) if data set contains a lot of unique examples of dialogue turns.\nRemoved label_tokenization_flag and label_split_symbol from component. Instead moved intent splitting to Tokenizer components via intent_tokenization_flag and intent_split_symbol flag.Default max_history for EmbeddingPolicy is None which means it'll use\nthe FullDialogueTrackerFeaturizer. We recommend to set max_history to\nsome finite value in order to use MaxHistoryTrackerFeaturizer\nfor faster training. See Featurizers for details.\nWe recommend to increase batch_size for MaxHistoryTrackerFeaturizer\n(e.g. \"batch_size\": [32, 64])Compare mode of rasa train core allows the whole core config comparison.\nTherefore, we changed the naming of trained models. They are named by config file\nname instead of policy name. Old naming style will not be read correctly when\ncreating compare plots (rasa test core). Please remove old trained models", "chunk": 53, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1884": {"text": "creating compare plots (rasa test core). Please remove old trained models\nin comparison folder and retrain. Normal core training is unaffected.We updated the evaluation metric for our NER. We report the weighted precision and f1-score.\nSo far we included no-entity in this report. However, as most of the tokens actually don't have\nan entity set, this will influence the weighted precision and f1-score quite a bit. From now on we\nexclude no-entity from the evaluation. The overall metrics now only include proper entities. You\nmight see a drop in the performance scores when running the evaluation again./ is reserved as a delimiter token to distinguish between retrieval intent and the corresponding response text\nidentifier. Make sure you don't include / symbol in the name of your intents.", "chunk": 54, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1885": {"text": "Rasa NLU 0.14.x and Rasa Core 0.13.x to Rasa 1.0#\n\ncautionThis is a release breaking backwards compatibility.\nIt is not possible to load previously trained models. Please make sure to retrain a\nmodel before trying to use it with this improved version.\n\nGeneral#\n\nThe scripts in rasa.core and rasa.nlu can no longer be executed. To train, test, run, \u2026 an NLU or Core\nmodel, you should now use the command line interface rasa. The functionality is, for the most part, the same as before.\nSome changes in commands reflect the combined training and running of NLU and Core models, but NLU and Core can still\nbe trained and used individually. If you attempt to run one of the old scripts in rasa.core or rasa.nlu,\nan error is thrown that points you to the command you\nshould use instead. See all the new commands at Command Line Interface.If you have written a custom output channel, all send_ methods subclassed\nfrom the OutputChannel class need to take an additional \\*\\*kwargs\nargument. You can use these keyword args from your custom action code or the\ntemplates in your domain file to send any extra parameters used in your\nchannel's send methods.If you were previously importing the Button or Element classes from\nrasa_core.dispatcher, these are now to be imported from rasa_sdk.utils.Rasa NLU and Core previously used separate configuration files.\nThese two files should be merged into a single file either named config.yml, or passed via the --config parameter.\n\nScript parameters#", "chunk": 55, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}, "1886": {"text": "Script parameters#\n\nAll script parameter names have been unified to follow the same schema.\nAny underscores (_) in arguments have been replaced with dashes (-).\nFor example: --max_history has been changed to --max-history. You can\nsee all of the script parameters in the --help output of the commands\nin the Command Line Interface.The --num_threads parameter was removed from the run command. The\nserver will always run single-threaded, but will now run asynchronously. If you want to\nmake use of multiple processes, feel free to check out the Sanic server\ndocumentation.To avoid conflicts in script parameter names, connectors in the run command now need to be specified with\n--connector, as -c is no longer supported. The maximum history in the rasa visualize command needs to be\ndefined with --max-history. Output paths and log files cannot be specified with -o anymore; --out and\n--log-file should be used. NLU data has been standarized to be --nlu and the name of\nany kind of data files or directory to be --data.\n\nHTTP API#\n\nThere are numerous HTTP API endpoint changes which can be found here.\n\nPrevious\u00ab Compatibility Matrix\n\nLast updated on 7/11/2023 by GitHub CI\n\nEdit this page", "chunk": 56, "url": "https://rasa.com/docs/rasa/pages/action-server-api"}}